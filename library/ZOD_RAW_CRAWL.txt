Zod
  
  zod.dev
  
    TypeScript-first schema validation with static type inference
  









  Website
  ¬†¬†‚Ä¢¬†¬†
  Discord
  ¬†¬†‚Ä¢¬†¬†
  ùïè
  ¬†¬†‚Ä¢¬†¬†
  Bluesky
  



  Zod 4 is now in beta!
  
  Read the announcement üëâ



Featured sponsor: Fern

  
    
      
      
    
  
  
  Learn more about featured sponsorships




Table of contents

These docs have been translated into Chinese and Korean.


Table of contents
Introduction

Sponsors

Platinum
Gold
Silver
Bronze
Copper


Ecosystem

Resources
API libraries
Form integrations
Zod to X
X to Zod
Mocking
Powered by Zod
Utilities for Zod




Installation

Requirements
From npm


Basic usage
Primitives
Coercion for primitives
Literals
Strings

Datetimes
Dates
Times
IP addresses
IP ranges


Numbers
BigInts
NaNs
Booleans
Dates
Zod enums
Native enums
Optionals
Nullables
Objects

.shape
.keyof
.extend
.merge
.pick/.omit
.partial
.deepPartial
.required
.passthrough
.strict
.strip
.catchall


Arrays

.element
.nonempty
.min/.max/.length


Tuples
Unions
Discriminated unions
Records

Record key type


Maps
Sets
Intersections
Recursive types

ZodType with ZodEffects
JSON type
Cyclical objects


Promises
Instanceof
Functions
Preprocess
Custom schemas
Schema methods

.parse
.parseAsync
.safeParse
.safeParseAsync
.refine

Arguments
Customize error path
Asynchronous refinements
Relationship to transforms


.superRefine

Abort early
Type refinements


.transform

Chaining order
Validating during transform
Relationship to refinements
Async transforms


.default
.describe
.catch
.optional
.nullable
.nullish
.array
.promise
.or
.and
.brand
.readonly
.pipe

You can use .pipe() to fix common issues with z.coerce.




Guides and concepts

Type inference
Writing generic functions

Constraining allowable inputs


Error handling
Error formatting


Comparison

Joi
Yup
io-ts
Runtypes
Ow


Changelog


Introduction
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.
Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
Some other great aspects:

Zero dependencies
Works in Node.js and all modern browsers
Tiny: 8kb minified + zipped
Immutable: methods (e.g. .optional()) return a new instance
Concise, chainable interface
Functional approach: parse, don't validate
Works with plain JavaScript too! You don't need to use TypeScript.


Sponsors
Sponsorship at any level is appreciated and encouraged. If you built a paid product using Zod, consider one of the corporate tiers.

Platinum

  
    
      
      
      
        
          
          
        
      
         
      Cut code review time & bugs in half
      
      coderabbit.ai
      
      
    
  


Gold

  
    
      
      
      
        
          
          
        
      
         
      The API platform for sending notifications
      
      courier.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      Generate better SDKs for your APIs
      
      liblab.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Serverless Postgres ‚Äî Ship faster
      
      neon.tech
      
      
    
    
      
      
      
        
          
          
        
      
         
      Build AI apps and workflows with Retool AI
      
      retool.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Generate best-in-class SDKs
      
      stainless.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      SDKs & Terraform providers for your API
      
      speakeasy.com
      
      
    
  


Silver

  
    
      
      
      Nitric
    
    
      
      
      PropelAuth
    
    
      
      
      Cerbos
    
    
      
      
      Scalar
    
    
    
      
      
      Trigger.dev
    
    
      
      
      Transloadit
    
    
      
      
      Infisical
    
    
      
      
      Whop
    
    
    
      
      
      CryptoJobsList
    
    
      
      
      Plain.
    
    
      
      
      Inngest
    
    
      
      
      Storyblok
    
    
    
      
      
      Mux
    
    
      
      
      Cybozu
    
  


Bronze

  
    
      
        
          
          
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
  


Ecosystem
There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it on Twitter or start a Discussion. I'll add it below and tweet it out.
Resources

Total TypeScript Zod Tutorial by @mattpocockuk
Fixing TypeScript's Blindspot: Runtime Typechecking by @jherr

API libraries

tRPC: Build end-to-end typesafe APIs without GraphQL.
@anatine/zod-nestjs: Helper methods for using Zod in a NestJS project.
zod-endpoints: Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
zhttp: An OpenAPI compatible, strictly typed http library with Zod input and response validation.
domain-functions: Decouple your business logic from your framework using composable functions. With first-class type inference from end to end powered by Zod schemas.
@zodios/core: A typescript API client with runtime and compile time validation backed by axios and zod.
express-zod-api: Build Express-based APIs with I/O schema validation and custom middlewares.
tapiduck: End-to-end typesafe JSON APIs with Zod and Express; a bit like tRPC, but simpler.
koa-zod-router: Create typesafe routes in Koa with I/O validation using Zod.
zod-sockets: Zod-powered Socket.IO microframework with I/O validation and built-in AsyncAPI specs
oas-tszod-gen: Client SDK code generator to convert OpenApi v3 specifications into TS endpoint caller functions with Zod types.
GQLoom: Weave GraphQL schema and resolvers using Zod.
oRPC: Typesafe APIs Made Simple

Form integrations

react-hook-form: A first-party Zod resolver for React Hook Form.
TanStack Form: Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit
zod-validation-error: Generate user-friendly error messages from ZodErrors.
zod-formik-adapter: A community-maintained Formik adapter for Zod.
react-zorm: Standalone <form> generation and validation for React using Zod.
zodix: Zod utilities for FormData and URLSearchParams in Remix loaders and actions.
conform: A typesafe form validation library for progressive enhancement of HTML forms. Works with Remix and Next.js.
remix-params-helper: Simplify integration of Zod with standard URLSearchParams and FormData for Remix apps.
formik-validator-zod: Formik-compliant validator library that simplifies using Zod with Formik.
zod-i18n-map: Useful for translating Zod error messages.
@modular-forms/solid: Modular form library for SolidJS that supports Zod for validation.
houseform: A React form library that uses Zod for validation.
sveltekit-superforms: Supercharged form library for SvelteKit with Zod validation.
mobx-zod-form: Data-first form builder based on MobX & Zod.
@vee-validate/zod: Form library for Vue.js with Zod schema validation.
zod-form-renderer: Auto-infer form fields from zod schema and render them with react-hook-form with E2E type safety.
antd-zod: Zod adapter for Ant Design form fields validation.
frrm: Tiny 0.5kb Zod-based, HTML form abstraction that goes brr.

Zod to X

zod-to-ts: Generate TypeScript definitions from Zod schemas.
zod-to-json-schema: Convert your Zod schemas into JSON Schemas.
@anatine/zod-openapi: Converts a Zod schema to an OpenAPI v3.x SchemaObject.
zod-fast-check: Generate fast-check arbitraries from Zod schemas.
zod-dto: Generate Nest.js DTOs from a Zod schema.
fastify-type-provider-zod: Create Fastify type providers from Zod schemas.
zod-to-openapi: Generate full OpenAPI (Swagger) docs from Zod, including schemas, endpoints & parameters.
nestjs-graphql-zod: Generates NestJS GraphQL model classes from Zod schemas. Provides GraphQL method decorators working with Zod schemas.
zod-openapi: Create full OpenAPI v3.x documentation from Zod schemas.
fastify-zod-openapi: Fastify type provider, validation, serialization and @fastify/swagger support for Zod schemas.
typeschema: Universal adapter for schema validation.
zodex: (De)serialization for zod schemas

X to Zod

ts-to-zod: Convert TypeScript definitions into Zod schemas.
@runtyping/zod: Generate Zod from static types & JSON schema.
json-schema-to-zod: Convert your JSON Schemas into Zod schemas. Live demo.
json-to-zod: Convert JSON objects into Zod schemas. Live demo.
graphql-codegen-typescript-validation-schema: GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema.
zod-prisma: Generate Zod schemas from your Prisma schema.
Supervillain: Generate Zod schemas from your Go structs.
prisma-zod-generator: Emit Zod schemas from your Prisma schema.
drizzle-zod: Emit Zod schemas from your Drizzle schema.
prisma-trpc-generator: Emit fully implemented tRPC routers and their validation schemas using Zod.
zod-prisma-types Create Zod types from your Prisma models.
quicktype: Convert JSON objects and JSON schemas into Zod schemas.
@sanity-typed/zod: Generate Zod Schemas from Sanity Schemas.
java-to-zod: Convert POJOs to Zod schemas
Orval: Generate Zod schemas from OpenAPI schemas
Kubb: Generate SDKs and Zod schemas from your OpenAPI schemas

Mocking

@anatine/zod-mock: Generate mock data from a Zod schema. Powered by faker.js.
zod-mocking: Generate mock data from your Zod schemas.
zod-fixture: Use your zod schemas to automate the generation of non-relevant test fixtures in a deterministic way.
zocker: Generate plausible mock-data from your schemas.
zodock Generate mock data based on Zod schemas.
zod-schema-faker Generates mock data from Zod schemas. Powered by @faker-js/faker and randexp.js

Powered by Zod

freerstore: Firestore cost optimizer.
slonik: Node.js Postgres client with strong Zod integration.
schemql: Enhances your SQL workflow by combining raw SQL with targeted type safety and schema validation.
soly: Create CLI applications with zod.
pastel: Create CLI applications with react, zod, and ink.
zod-xlsx: A xlsx based resource validator using Zod schemas.
znv: Type-safe environment parsing and validation for Node.js with Zod schemas.
zod-config: Load configurations across multiple sources with flexible adapters, ensuring type safety with Zod.
unplugin-environment: A plugin for loading enviroment variables safely with schema validation, simple with virtual module, type-safe with intellisense, and better DX üî• üöÄ üë∑. Powered by Zod.
zod-struct: Create runtime-checked structs with Zod.
zod-csv: Validation helpers for zod for parsing CSV data.
fullproduct.dev: Universal Expo + Next.js App Starter that uses Zod schemas as the single source of truth to keep generated MDX docs, GraphQL, database models, forms, and fetcher functions in sync.

Utilities for Zod

zod_utilz: Framework agnostic utilities for Zod.
zod-playground: A tool for learning and testing Zod schema validation functionalities. Link.
zod-sandbox: Controlled environment for testing zod schemas. Live demo.
zod-dev: Conditionally disables Zod runtime parsing in production.
zod-accelerator: Accelerates Zod's throughput up to ~100x.


Installation
Requirements


TypeScript 4.5+!


You must enable strict mode in your tsconfig.json. This is a best practice for all TypeScript projects.
// tsconfig.json
{
  // ...
  "compilerOptions": {
    // ...
    "strict": true
  }
}


From npm
npm install zod       # npm
deno add npm:zod      # deno
yarn add zod          # yarn
bun add zod           # bun
pnpm add zod          # pnpm
Zod also publishes a canary version on every commit. To install the canary:
npm install zod@canary       # npm
deno add npm:zod@canary      # deno
yarn add zod@canary          # yarn
bun add zod@canary           # bun
pnpm add zod@canary          # pnpm

The rest of this README assumes you are using npm and importing directly from the "zod" package.


Basic usage
Creating a simple string schema
import { z } from "zod";

// creating a schema for strings
const mySchema = z.string();

// parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError

// "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
Creating an object schema
import { z } from "zod";

const User = z.object({
  username: z.string(),
});

User.parse({ username: "Ludwig" });

// extract the inferred type
type User = z.infer<typeof User>;
// { username: string }

Primitives
import { z } from "zod";

// primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol();

// empty types
z.undefined();
z.null();
z.void(); // accepts undefined

// catch-all types
// allows any value
z.any();
z.unknown();

// never type
// allows no values
z.never();

Coercion for primitives
Zod now provides a more convenient way to coerce primitive values.
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
During the parsing step, the input is passed through the String() function, which is a JavaScript built-in for coercing data into strings.
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
The returned schema is a normal ZodString instance so you can use all string methods.
z.coerce.string().email().min(5);
How coercion works
All primitive types support coercion. Zod coerces all inputs using the built-in constructors: String(input), Number(input), new Date(input), etc.
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
Note ‚Äî¬†Boolean coercion with z.coerce.boolean() may not work how you expect. Any truthy value is coerced to true, and any falsy value is coerced to false.
const schema = z.coerce.boolean(); // Boolean(input)

schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true

schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
For more control over coercion logic, consider using z.preprocess or z.pipe().

Literals
Literal schemas represent a literal type, like "hello world" or 5.
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true);

const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol);

// retrieve literal value
tuna.value; // "tuna"

Currently there is no support for Date literals in Zod. If you have a use case for this feature, please file an issue.


Strings
Zod includes a handful of string-specific validations.
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6

// transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase

// added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS])
z.string().duration(); // ISO 8601 duration
z.string().base64();

Check out validator.js for a bunch of other useful string validation functions that can be used in conjunction with Refinements.

You can customize some common error messages when creating a string schema.
const name = z.string({
  required_error: "Name is required",
  invalid_type_error: "Name must be a string",
});
When using validation methods, you can pass in an additional argument to provide a custom error message.
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
Datetimes
As you may have noticed, Zod string includes a few date/time related validations. These validations are regular expression based, so they are not as strict as a full date/time library. However, they are very convenient for validating user input.
The z.string().datetime() method enforces ISO 8601; default is no timezone offsets and arbitrary sub-second decimal precision.
const datetime = z.string().datetime();

datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
Timezone offsets can be allowed by setting the offset option to true.
const datetime = z.string().datetime({ offset: true });

datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
Allow unqualified (timezone-less) datetimes with the local flag.
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
You can additionally constrain the allowable precision. By default, arbitrary sub-second precision is supported (but optional).
const datetime = z.string().datetime({ precision: 3 });

datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
Dates

Added in Zod 3.23

The z.string().date() method validates strings in the format YYYY-MM-DD.
const date = z.string().date();

date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
Times

Added in Zod 3.23

The z.string().time() method validates strings in the format HH:MM:SS[.s+]. The second can include arbitrary decimal precision. It does not allow timezone offsets of any kind.
const time = z.string().time();

time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision)

time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
You can set the precision option to constrain the allowable decimal precision.
const time = z.string().time({ precision: 3 });

time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
IP addresses
By default .ip() allows both IPv4 and IPv6.
const ip = z.string().ip();

ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass

ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
You can additionally set the IP version.
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
IP ranges (CIDR)
Validate IP address ranges specified with CIDR notation. By default, .cidr() allows both IPv4 and IPv6.
const cidr = z.string().cidr();
cidr.parse("192.168.0.0/24"); // pass
cidr.parse("2001:db8::/32"); // pass
You can specify a version with the version parameter.
const ipv4Cidr = z.string().cidr({ version: "v4" });
ipv4Cidr.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6Cidr = z.string().cidr({ version: "v6" });
ipv6Cidr.parse("192.168.1.1"); // fail

Numbers
You can customize certain error messages when creating a number schema.
const age = z.number({
  required_error: "Age is required",
  invalid_type_error: "Age must be a number",
});
Zod includes a handful of number-specific validations.
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)

z.number().int(); // value must be an integer

z.number().positive(); //     > 0
z.number().nonnegative(); //  >= 0
z.number().negative(); //     < 0
z.number().nonpositive(); //  <= 0

z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)

z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
Optionally, you can pass in a second argument to provide a custom error message.
z.number().lte(5, { message: "thisüëèisüëètooüëèbig" });

BigInts
Zod includes a handful of bigint-specific validations.
z.bigint().gt(5n);
z.bigint().gte(5n); // alias `.min(5n)`
z.bigint().lt(5n);
z.bigint().lte(5n); // alias `.max(5n)`

z.bigint().positive(); // > 0n
z.bigint().nonnegative(); // >= 0n
z.bigint().negative(); // < 0n
z.bigint().nonpositive(); // <= 0n

z.bigint().multipleOf(5n); // Evenly divisible by 5n.

NaNs
You can customize certain error messages when creating a nan schema.
const isNaN = z.nan({
  required_error: "isNaN is required",
  invalid_type_error: "isNaN must be 'not a number'",
});

Booleans
You can customize certain error messages when creating a boolean schema.
const isActive = z.boolean({
  required_error: "isActive is required",
  invalid_type_error: "isActive must be a boolean",
});

Dates
Use z.date() to validate Date instances.
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
You can customize certain error messages when creating a date schema.
const myDateSchema = z.date({
  required_error: "Please select a date and time",
  invalid_type_error: "That's not a date!",
});
Zod provides a handful of date-specific validations.
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
Coercion to Date
Since zod 3.20, use z.coerce.date() to pass the input through new Date(input).
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date

/* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true

/* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
For older zod versions, use z.preprocess like described in this thread.

Zod enums
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
z.enum is a Zod-native way to declare a schema with a fixed set of allowable string values. Pass the array of values directly into z.enum(). Alternatively, use as const to define your enum values as a tuple of strings. See the const assertion docs for details.
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
This is not allowed, since Zod isn't able to infer the exact values of each element.
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
.enum
To get autocompletion with a Zod enum, use the .enum property of your schema:
FishEnum.enum.Salmon; // => autocompletes

FishEnum.enum;
/*
=> {
  Salmon: "Salmon",
  Tuna: "Tuna",
  Trout: "Trout",
}
*/
You can also retrieve the list of options as a tuple with the .options property:
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
.exclude/.extract()
You can create subsets of a Zod enum with the .exclude and .extract methods.
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);

Native enums
Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use z.nativeEnum().
Numeric enums
enum Fruits {
  Apple,
  Banana,
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
String enums
enum Fruits {
  Apple = "apple",
  Banana = "banana",
  Cantaloupe, // you can mix numerical and string enums
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Cantaloupe); // passes
FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse("Cantaloupe"); // fails
Const enums
The .nativeEnum() function works for as const objects as well. ‚ö†Ô∏è as const requires TypeScript 3.4+!
const Fruits = {
  Apple: "apple",
  Banana: "banana",
  Cantaloupe: 3,
} as const;

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3

FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
You can access the underlying object with the .enum property:
FruitEnum.enum.Apple; // "apple"

Optionals
You can make any schema optional with z.optional(). This wraps the schema in a ZodOptional instance and returns the result.
const schema = z.optional(z.string());

schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
For convenience, you can also call the .optional() method on an existing schema.
const user = z.object({
  username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
You can extract the wrapped schema from a ZodOptional instance with .unwrap().
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true

Nullables
Similarly, you can create nullable types with z.nullable().
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
Or use the .nullable() method.
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
Extract the inner schema with .unwrap().
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true

Objects
// all properties are required by default
const Dog = z.object({
  name: z.string(),
  age: z.number(),
});

// extract the inferred type like this
type Dog = z.infer<typeof Dog>;

// equivalent to:
type Dog = {
  name: string;
  age: number;
};
.shape
Use .shape to access the schemas for a particular key.
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
.keyof
Use .keyof to create a ZodEnum schema from the keys of an object schema.
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
.extend
You can add additional fields to an object schema with the .extend method.
const DogWithBreed = Dog.extend({
  breed: z.string(),
});
You can use .extend to overwrite fields! Be careful with this power!
.merge
Equivalent to A.extend(B.shape).
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() });

const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }

If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.

.pick/.omit
Inspired by TypeScript's built-in Pick and Omit utility types, all Zod object schemas have .pick and .omit methods that return a modified version. Consider this Recipe schema:
const Recipe = z.object({
  id: z.string(),
  name: z.string(),
  ingredients: z.array(z.string()),
});
To only keep certain keys, use .pick .
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
To remove certain keys, use .omit .
const NoIDRecipe = Recipe.omit({ id: true });

type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
.partial
Inspired by the built-in TypeScript utility type Partial, the .partial method makes all properties optional.
Starting from this object:
const user = z.object({
  email: z.string(),
  username: z.string(),
});
// { email: string; username: string }
We can create a partial version:
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
You can also specify which properties to make optional:
const optionalEmail = user.partial({
  email: true,
});
/*
{
  email?: string | undefined;
  username: string
}
*/
.deepPartial
The .partial method is shallow ‚Äî it only applies one level deep. There is also a "deep" version:
const user = z.object({
  username: z.string(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  strings: z.array(z.object({ value: z.string() })),
});

const deepPartialUser = user.deepPartial();

/*
{
  username?: string | undefined,
  location?: {
    latitude?: number | undefined;
    longitude?: number | undefined;
  } | undefined,
  strings?: { value?: string}[]
}
*/

Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.

.required
Contrary to the .partial method, the .required method makes all properties required.
Starting from this object:
const user = z
  .object({
    email: z.string(),
    username: z.string(),
  })
  .partial();
// { email?: string | undefined; username?: string | undefined }
We can create a required version:
const requiredUser = user.required();
// { email: string; username: string }
You can also specify which properties to make required:
const requiredEmail = user.required({
  email: true,
});
/*
{
  email: string;
  username?: string | undefined;
}
*/
.passthrough
By default Zod object schemas strip out unrecognized keys during parsing.
const person = z.object({
  name: z.string(),
});

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
Instead, if you want to pass through unknown keys, use .passthrough() .
person.passthrough().parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
.strict
By default Zod object schemas strip out unrecognized keys during parsing. You can disallow unknown keys with .strict() . If there are any unknown keys in the input, Zod will throw an error.
const person = z
  .object({
    name: z.string(),
  })
  .strict();

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => throws ZodError
.strip
You can use the .strip method to reset an object schema to the default behavior (stripping unrecognized keys).
.catchall
You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
const person = z
  .object({
    name: z.string(),
  })
  .catchall(z.number());

person.parse({
  name: "bob dylan",
  validExtraKey: 61, // works fine
});

person.parse({
  name: "bob dylan",
  validExtraKey: false, // fails
});
// => throws ZodError
Using .catchall() obviates .passthrough() , .strip() , or .strict(). All keys are now considered "known".

Arrays
const stringArray = z.array(z.string());

// equivalent
const stringArray = z.string().array();
Be careful with the .array() method. It returns a new ZodArray instance. This means the order in which you call methods matters. For instance:
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
.element
Use .element to access the schema for an element of the array.
stringArray.element; // => string schema
.nonempty
If you want to ensure that an array contains at least one element, use .nonempty().
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]]

nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
You can optionally specify a custom error message:
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({
  message: "Can't be empty!",
});
.min/.max/.length
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
Unlike .nonempty() these methods do not change the inferred type.

Tuples
Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
const athleteSchema = z.tuple([
  z.string(), // name
  z.number(), // jersey number
  z.object({
    pointsScored: z.number(),
  }), // statistics
]);

type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
A variadic ("rest") argument can be added with the .rest method.
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];

Unions
Zod includes a built-in z.union method for composing "OR" types.
const stringOrNumber = z.union([z.string(), z.number()]);

stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
Zod will test the input against each of the "options" in order and return the first value that validates successfully.
For convenience, you can also use the .or method:
const stringOrNumber = z.string().or(z.number());
Optional string validation:
To validate an optional form input, you can union the desired string validation with an empty string literal.
This example validates an input that is optional but needs to contain a valid URL:
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]);

console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false

Discriminated unions
A discriminated union is a union of object schemas that all share a particular key.
type MyUnion =
  | { status: "success"; data: string }
  | { status: "failed"; error: Error };
Such unions can be represented with the z.discriminatedUnion method. This enables faster evaluation, because Zod can check the discriminator key (status in the example above) to determine which schema should be used to parse the input. This makes parsing more efficient and lets Zod report friendlier errors.
With the basic union method, the input is tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing against it, and showing only the issues related to this "option".
const myUnion = z.discriminatedUnion("status", [
  z.object({ status: z.literal("success"), data: z.string() }),
  z.object({ status: z.literal("failed"), error: z.instanceof(Error) }),
]);

myUnion.parse({ status: "success", data: "yippie ki yay" });
You can extract a reference to the array of schemas with the .options property.
myUnion.options; // [ZodObject<...>, ZodObject<...>]
To merge two or more discriminated unions, use .options with destructuring.
const A = z.discriminatedUnion("status", [
  /* options */
]);
const B = z.discriminatedUnion("status", [
  /* options */
]);

const AB = z.discriminatedUnion("status", [...A.options, ...B.options]);

Records
Record schemas are used to validate types such as Record<string, number>. This is particularly useful for storing or caching items by ID.

const User = z.object({ name: z.string() });

const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
The schema and inferred type can be used like so:
const userStore: UserStore = {};

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  name: "Carlotta",
}; // passes

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  whatever: "Ice cream sundae",
}; // TypeError
A note on numerical keys
While z.record(keyType, valueType) is able to accept numerical key types and TypeScript's built-in Record type is Record<KeyType, ValueType>, it's hard to represent the TypeScript type Record<number, any> in Zod.
As it turns out, TypeScript's behavior surrounding [k: number] is a little unintuitive:
const testMap: { [k: number]: string } = {
  1: "one",
};

for (const key in testMap) {
  console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.

Maps
const stringNumberMap = z.map(z.string(), z.number());

type StringNumberMap = z.infer<typeof stringNumberMap>;
// type StringNumberMap = Map<string, number>

Sets
const numberSet = z.set(z.number());
type NumberSet = z.infer<typeof numberSet>;
// type NumberSet = Set<number>
Set schemas can be further constrained with the following utility methods.
z.set(z.string()).nonempty(); // must contain at least one item
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly

Intersections
Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
const Person = z.object({
  name: z.string(),
});

const Employee = z.object({
  role: z.string(),
});

const EmployedPerson = z.intersection(Person, Employee);

// equivalent to:
const EmployedPerson = Person.and(Employee);
Though in many cases, it is recommended to use A.merge(B) to merge two objects. The .merge method returns a new ZodObject instance, whereas A.and(B) returns a less useful ZodIntersection instance that lacks common object methods like pick and omit.
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b);

type c = z.infer<typeof c>; // => number



Recursive types
You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
const baseCategorySchema = z.object({
  name: z.string(),
});

type Category = z.infer<typeof baseCategorySchema> & {
  subcategories: Category[];
};

const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
  subcategories: z.lazy(() => categorySchema.array()),
});

categorySchema.parse({
  name: "People",
  subcategories: [
    {
      name: "Politicians",
      subcategories: [
        {
          name: "Presidents",
          subcategories: [],
        },
      ],
    },
  ],
}); // passes
Thanks to crasite for this example.
ZodType with ZodEffects
When using z.ZodType with z.ZodEffects (
.refine,
.transform,
preprocess,
etc...
), you will need to define the input and output types of the schema. z.ZodType<Output, z.ZodTypeDef, Input>
const isValidId = (id: string): id is `${string}/${string}` =>
  id.split("/").length === 2;

const baseSchema = z.object({
  id: z.string().refine(isValidId),
});

type Input = z.input<typeof baseSchema> & {
  children: Input[];
};

type Output = z.output<typeof baseSchema> & {
  children: Output[];
};

const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({
  children: z.lazy(() => schema.array()),
});
Thanks to marcus13371337 and JoelBeeldi for this example.
JSON type
If you want to validate any JSON value, you can use the snippet below.
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
);

jsonSchema.parse(data);
Thanks to ggoodman for suggesting this.
Cyclical objects
Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop in some cases.

To detect cyclical objects before they cause problems, consider this approach.


Promises
const numberPromise = z.promise(z.number());
"Parsing" works a little differently with promise schemas. Validation happens in two parts:

Zod synchronously checks that the input is an instance of Promise (i.e. an object with .then and .catch methods.).
Zod uses .then to attach an additional validation step onto the existing Promise. You'll have to use .catch on the returned Promise to handle validation failures.

numberPromise.parse("tuna");
// ZodError: Non-Promise type: string

numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number>

const test = async () => {
  await numberPromise.parse(Promise.resolve("tuna"));
  // ZodError: Non-number type: string

  await numberPromise.parse(Promise.resolve(3.14));
  // => 3.14
};


Instanceof
You can use z.instanceof to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
class Test {
  name: string;
}

const TestSchema = z.instanceof(Test);

const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws

Functions
Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
You can create a function schema with z.function(args, returnType) .
const myFunction = z.function();

type myFunction = z.infer<typeof myFunction>;
// => ()=>unknown
Define inputs and outputs.
const myFunction = z
  .function()
  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
  .returns(z.boolean());

type myFunction = z.infer<typeof myFunction>;
// => (arg0: string, arg1: number)=>boolean

Function schemas have an .implement() method which accepts a function and returns a new function that automatically validates its inputs and outputs.
const trimmedLength = z
  .function()
  .args(z.string()) // accepts an arbitrary number of arguments
  .returns(z.number())
  .implement((x) => {
    // TypeScript knows x is a string!
    return x.trim().length;
  });

trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
If you only care about validating inputs, just don't call the .returns() method. The output type will be inferred from the implementation.

You can use the special z.void() option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)

const myFunction = z
  .function()
  .args(z.string())
  .implement((arg) => {
    return [arg.length];
  });

myFunction; // (arg: string)=>number[]
Extract the input and output schemas from a function schema.
myFunction.parameters();
// => ZodTuple<[ZodString, ZodNumber]>

myFunction.returnType();
// => ZodBoolean


Preprocess

Zod now supports primitive coercion without the need for .preprocess(). See the coercion docs for more information.

Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the .transform docs.)
But sometimes you want to apply some transform to the input before parsing happens. A common use case: type coercion. Zod enables this with the z.preprocess().
const castToString = z.preprocess((val) => String(val), z.string());
This returns a ZodEffects instance. ZodEffects is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.

Custom schemas
You can create a Zod schema for any TypeScript type by using z.custom(). This is useful for creating schemas for types that are not supported by Zod out of the box, such as template string literals.
const px = z.custom<`${number}px`>((val) => {
  return typeof val === "string" ? /^\d+px$/.test(val) : false;
});

type px = z.infer<typeof px>; // `${number}px`

px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
If you don't provide a validation function, Zod will allow any value. This can be dangerous!
z.custom<{ arg: string }>(); // performs no validation
You can customize the error message and other options by passing a second argument. This parameter works the same way as the params parameter of .refine.
z.custom<...>((val) => ..., "custom error message");

Schema methods
All Zod schemas contain certain methods.
.parse
.parse(data: unknown): T
Given any Zod schema, you can call its .parse method to check data is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.

IMPORTANT: The value returned by .parse is a deep clone of the variable you passed in.

const stringSchema = z.string();

stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
.parseAsync
.parseAsync(data:unknown): Promise<T>
If you use asynchronous refinements or transforms (more on those later), you'll need to use .parseAsync.
const stringSchema = z.string().refine(async (val) => val.length <= 8);

await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
.safeParse
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
If you don't want Zod to throw errors when validation fails, use .safeParse. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
stringSchema.safeParse(12);
// => { success: false; error: ZodError }

stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
The result is a discriminated union, so you can handle errors very conveniently:
const result = stringSchema.safeParse("billie");
if (!result.success) {
  // handle error then return
  result.error;
} else {
  // do something
  result.data;
}
.safeParseAsync

Alias: .spa

An asynchronous version of safeParse.
await stringSchema.safeParseAsync("billie");
For convenience, this has been aliased to .spa:
await stringSchema.spa("billie");
.refine
.refine(validator: (data:T)=>any, params?: RefineParams)
Zod lets you provide custom validation logic via refinements. (For advanced features like creating multiple issues and customizing error codes, see .superRefine.)
Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
For example, you can define a custom validation check on any Zod schema with .refine :
const myString = z.string().refine((val) => val.length <= 255, {
  message: "String can't be more than 255 characters",
});

‚ö†Ô∏è Refinement functions should not throw. Instead they should return a falsy value to signal failure.

Arguments
As you can see, .refine takes two arguments.

The first is the validation function. This function takes one input (of type T ‚Äî the inferred type of the schema) and returns any. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
The second argument accepts some options. You can use this to customize certain error-handling behavior:

type RefineParams = {
  // override error message
  message?: string;

  // appended to error path
  path?: (string | number)[];

  // params object you can use to customize message
  // in error map
  params?: object;
};
For advanced cases, the second argument can also be a function that returns RefineParams.
const longString = z.string().refine(
  (val) => val.length > 10,
  (val) => ({ message: `${val} is not more than 10 characters` })
);
Customize error path
const passwordForm = z
  .object({
    password: z.string(),
    confirm: z.string(),
  })
  .refine((data) => data.password === data.confirm, {
    message: "Passwords don't match",
    path: ["confirm"], // path of error
  });

passwordForm.parse({ password: "asdf", confirm: "qwer" });
Because you provided a path parameter, the resulting error will be:
ZodError {
  issues: [{
    "code": "custom",
    "path": [ "confirm" ],
    "message": "Passwords don't match"
  }]
}
Asynchronous refinements
Refinements can also be async:
const userId = z.string().refine(async (id) => {
  // verify that ID exists in database
  return true;
});

‚ö†Ô∏è If you use async refinements, you must use the .parseAsync method to parse data! Otherwise Zod will throw an error.

Relationship to transforms
Transforms and refinements can be interleaved:
z.string()
  .transform((val) => val.length)
  .refine((val) => val > 25);

.superRefine
The .refine method is actually syntactic sugar atop a more versatile (and verbose) method called superRefine. Here's an example:
const Strings = z.array(z.string()).superRefine((val, ctx) => {
  if (val.length > 3) {
    ctx.addIssue({
      code: z.ZodIssueCode.too_big,
      maximum: 3,
      type: "array",
      inclusive: true,
      message: "Too many items üò°",
    });
  }

  if (val.length !== new Set(val).size) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: `No duplicates allowed.`,
    });
  }
});
You can add as many issues as you like. If ctx.addIssue is not called during the execution of the function, validation passes.
Normally refinements always create issues with a ZodIssueCode.custom error code, but with superRefine it's possible to throw issues of any ZodIssueCode. Each issue code is described in detail in the Error Handling guide: ERROR_HANDLING.md.
Abort early
By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to abort early to prevent later refinements from being executed. To achieve this, pass the fatal flag to ctx.addIssue and return z.NEVER.
const schema = z.number().superRefine((val, ctx) => {
  if (val < 10) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be >= 10",
      fatal: true,
    });

    return z.NEVER;
  }

  if (val !== 12) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be twelve",
    });
  }
});
Type refinements
If you provide a type predicate to .refine() or .superRefine(), the resulting type will be narrowed down to your predicate's type. This is useful if you are mixing multiple chained refinements and transformations:
const schema = z
  .object({
    first: z.string(),
    second: z.number(),
  })
  .nullable()
  .superRefine((arg, ctx): arg is { first: string; second: number } => {
    if (!arg) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom, // customize your issue
        message: "object should exist",
      });
    }

    return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing
  })
  // here, TS knows that arg is not null
  .refine((arg) => arg.first === "bob", "`first` is not `bob`!");

‚ö†Ô∏è You must use ctx.addIssue() instead of returning a boolean value to indicate whether the validation passes. If ctx.addIssue is not called during the execution of the function, validation passes.

.transform
To transform data after parsing, use the transform method.
const stringToNumber = z.string().transform((val) => val.length);

stringToNumber.parse("string"); // => 6
Chaining order
Note that stringToNumber above is an instance of the ZodEffects subclass. It is NOT an instance of ZodString. If you want to use the built-in methods of ZodString (e.g. .email()) you must apply those methods before any transforms.
const emailToDomain = z
  .string()
  .email()
  .transform((val) => val.split("@")[1]);

emailToDomain.parse("colinhacks@example.com"); // => example.com
Validating during transform
The .transform method can simultaneously validate and transform the value. This is often simpler and less duplicative than chaining transform and refine.
As with .superRefine, the transform function receives a ctx object with an addIssue method that can be used to register validation issues.
const numberInString = z.string().transform((val, ctx) => {
  const parsed = parseInt(val);
  if (isNaN(parsed)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Not a number",
    });

    // This is a special symbol you can use to
    // return early from the transform function.
    // It has type `never` so it does not affect the
    // inferred return type.
    return z.NEVER;
  }
  return parsed;
});
Relationship to refinements
Transforms and refinements can be interleaved. These will be executed in the order they are declared.
const nameToGreeting = z
  .string()
  .transform((val) => val.toUpperCase())
  .refine((val) => val.length > 15)
  .transform((val) => `Hello ${val}`)
  .refine((val) => val.indexOf("!") === -1);
Async transforms
Transforms can also be async.
const IdToUser = z
  .string()
  .uuid()
  .transform(async (id) => {
    return await getUserById(id);
  });

‚ö†Ô∏è If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.

.default
You can use transforms to implement the concept of "default values" in Zod.
const stringWithDefault = z.string().default("tuna");

stringWithDefault.parse(undefined); // => "tuna"
Optionally, you can pass a function into .default that will be re-executed whenever a default value needs to be generated:
const numberWithRandomDefault = z.number().default(Math.random);

numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
Conceptually, this is how Zod processes default values:

If the input is undefined, the default value is returned
Otherwise, the data is parsed using the base schema

.describe
Use .describe() to add a description property to the resulting schema.
const documentedString = z
  .string()
  .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text‚Ä¶
This can be useful for documenting a field, for example in a JSON Schema using a library like zod-to-json-schema).
.catch
Use .catch() to provide a "catch value" to be returned in the event of a parsing error.
const numberWithCatch = z.number().catch(42);

numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
Optionally, you can pass a function into .catch that will be re-executed whenever a default value needs to be generated. A ctx object containing the caught error will be passed into this function.
const numberWithRandomCatch = z.number().catch((ctx) => {
  ctx.error; // the caught ZodError
  return Math.random();
});

numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
Conceptually, this is how Zod processes "catch values":

The data is parsed using the base schema
If the parsing fails, the "catch value" is returned

.optional
A convenience method that returns an optional version of a schema.
const optionalString = z.string().optional(); // string | undefined

// equivalent to
z.optional(z.string());
.nullable
A convenience method that returns a nullable version of a schema.
const nullableString = z.string().nullable(); // string | null

// equivalent to
z.nullable(z.string());
.nullish
A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both undefined and null. Read more about the concept of "nullish" in the TypeScript 3.7 release notes.
const nullishString = z.string().nullish(); // string | null | undefined

// equivalent to
z.string().nullable().optional();
.array
A convenience method that returns an array schema for the given type:
const stringArray = z.string().array(); // string[]

// equivalent to
z.array(z.string());
.promise
A convenience method for promise types:
const stringPromise = z.string().promise(); // Promise<string>

// equivalent to
z.promise(z.string());
.or
A convenience method for union types.
const stringOrNumber = z.string().or(z.number()); // string | number

// equivalent to
z.union([z.string(), z.number()]);
.and
A convenience method for creating intersection types.
const nameAndAge = z
  .object({ name: z.string() })
  .and(z.object({ age: z.number() })); // { name: string } & { age: number }

// equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
.brand
.brand<T>() => ZodBranded<this, B>
TypeScript's type system is structural, which means that any two types that are structurally equivalent are considered the same.
type Cat = { name: string };
type Dog = { name: string };

const petCat = (cat: Cat) => {};
const fido: Dog = { name: "fido" };
petCat(fido); // works fine
In some cases, its can be desirable to simulate nominal typing inside TypeScript. For instance, you may wish to write a function that only accepts an input that has been validated by Zod. This can be achieved with branded types (AKA opaque types).
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;

const petCat = (cat: Cat) => {};

// this works
const simba = Cat.parse({ name: "simba" });
petCat(simba);

// this doesn't
petCat({ name: "fido" });
Under the hood, this works by attaching a "brand" to the inferred type using an intersection type. This way, plain/unbranded data structures are no longer assignable to the inferred type of the schema.
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;
// {name: string} & {[symbol]: "Cat"}
Note that branded types do not affect the runtime result of .parse. It is a static-only construct.
.readonly
.readonly() => ZodReadonly<this>
This method returns a ZodReadonly schema instance that parses the input using the base schema, then calls Object.freeze() on the result. The inferred type is also marked as readonly.
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}>

const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
The inferred type uses TypeScript's built-in readonly types when relevant.
z.array(z.string()).readonly();
// readonly string[]

z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number]

z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date>

z.set(z.string()).readonly();
// ReadonlySet<string>
.pipe
Schemas can be chained into validation "pipelines". It's useful for easily validating the result after a .transform():
z.string()
  .transform((val) => val.length)
  .pipe(z.number().min(5));
The .pipe() method returns a ZodPipeline instance.

Guides and concepts
Type inference
You can extract the TypeScript type of any schema with z.infer<typeof mySchema> .
const A = z.string();
type A = z.infer<typeof A>; // string

const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
What about transforms?
In reality each Zod schema internally tracks two types: an input and an output. For most schemas (e.g. z.string()) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance z.string().transform(val => val.length) has an input of string and an output of number.
You can separately extract the input and output types like so:
const stringToNumber = z.string().transform((val) => val.length);

// ‚ö†Ô∏è Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
Writing generic functions
With TypeScript generics, you can write reusable functions that accept Zod schemas as parameters. This enables you to create custom validation logic, schema transformations, and more, while maintaining type safety and inference.
When attempting to write a function that accepts a Zod schema as an input, it's tempting to try something like this:
function inferSchema<T>(schema: z.ZodType<T>) {
  return schema;
}
This approach is incorrect, and limits TypeScript's ability to properly infer the argument. No matter what you pass in, the type of schema will be an instance of ZodType.
inferSchema(z.string());
// => ZodType<string>
This approach loses type information, namely which subclass the input actually is (in this case, ZodString). That means you can't call any string-specific methods like .min() on the result of inferSchema.
A better approach is to infer the schema as a whole instead of merely its inferred type. You can do this with a utility type called z.ZodTypeAny.
function inferSchema<T extends z.ZodTypeAny>(schema: T) {
  return schema;
}

inferSchema(z.string());
// => ZodString

ZodTypeAny is just a shorthand for ZodType<any, any, any>, a type that is broad enough to match any Zod schema.

The Result is now fully and properly typed, and the type system can infer the specific subclass of the schema.
Inferring the inferred type
If you follow the best practice of using z.ZodTypeAny as the generic parameter for your schema, you may encounter issues with the parsed data being typed as any instead of the inferred type of the schema.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data);
}

parseData("sup", z.string());
// => any
Due to how TypeScript inference works, it is treating schema like a ZodTypeAny instead of the inferred type. You can fix this with a type cast using z.infer.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data) as z.infer<T>;
  //                        ^^^^^^^^^^^^^^ <- add this
}

parseData("sup", z.string());
// => string
Constraining allowable inputs
The ZodType class has three generic parameters.
class ZodType<
  Output = any,
  Def extends ZodTypeDef = ZodTypeDef,
  Input = Output
> { ... }
By constraining these in your generic input, you can limit what schemas are allowable as inputs to your function:
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) {
  return schema.optional();
}

makeSchemaOptional(z.string());
// works fine

makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
Error handling
Zod provides a subclass of Error called ZodError. ZodErrors contain an issues array containing detailed information about the validation problems.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  result.error.issues;
  /* [
      {
        "code": "invalid_type",
        "expected": "string",
        "received": "number",
        "path": [ "name" ],
        "message": "Expected string, received number"
      }
  ] */
}

For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: ERROR_HANDLING.md

Zod's error reporting emphasizes completeness and correctness. If you are looking to present a useful error message to the end user, you should either override Zod's error messages using an error map (described in detail in the Error Handling guide) or use a third-party library like zod-validation-error
Error formatting
You can use the .format() method to convert this error into a nested object.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  const formatted = result.error.format();
  /* {
    name: { _errors: [ 'Expected string, received number' ] }
  } */

  formatted.name?._errors;
  // => ["Expected string, received number"]
}

Comparison
There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.



Joi
https://github.com/hapijs/joi
Doesn't support static type inference üòï
Yup
https://github.com/jquense/yup
Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.

Supports casting and transforms
All object fields are optional by default



Missing promise schemas
Missing function schemas
Missing union & intersection schemas


io-ts
https://github.com/gcanti/io-ts
io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
import * as t from "io-ts";

const A = t.type({
  foo: t.string,
});

const B = t.partial({
  bar: t.number,
});

const C = t.intersection([A, B]);

type C = t.TypeOf<typeof C>;
// returns { foo: string; bar?: number | undefined }
You must define the required and optional props in separate object validators, pass the optionals through t.partial (which marks all properties as optional), then combine them with t.intersection .
Consider the equivalent in Zod:
const C = z.object({
  foo: z.string(),
  bar: z.number().optional(),
});

type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
This more declarative API makes schema definitions vastly more concise.
io-ts also requires the use of gcanti's functional programming library fp-ts to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on fp-ts necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the fp-ts nomenclature to use the library.

Supports codecs with serialization & deserialization transforms
Supports branded types
Supports advanced functional programming, higher-kinded types, fp-ts compatibility
Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
Missing nonempty arrays with proper typing ([T, ...T[]])
Missing promise schemas
Missing function schemas

Runtypes
https://github.com/runtypes/runtypes
Runtypes is focused on ergonomics, with good type inference support.

Supports "pattern matching": computed properties that distribute over unions
Supports branded types
Supports template literals
Supports conformance to predefined static types
Missing object methods: (deepPartial, merge)
Missing promise schemas
Missing error customization

Ow
https://github.com/sindresorhus/ow
Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. int32Array , see full list in their README).
If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.

Changelog
View the changelog at CHANGELOG.md\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        
      
      
        TypeScript-first schema validation with static type inference
      
      
        
        
          zod.dev
        
      

    
      License
  
    
      
     MIT license
    
  


    
        
          
          37.4k
          stars
        
          
          1.4k
          forks
        
          
          Branches
        
          
          Tags
        
          
          Activity
    

      
        
            
            
          Star


        
        
                    Notifications
    You must be signed in to change notification settings

        
        
          

        
      
  




          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  colinhacks/zod
  
    

  
        












  
  
     ¬†mainBranchesTagsGo to fileCodeFolders and filesNameNameLast commit messageLast commit dateLatest commit¬†History2,144 Commits.devcontainer.devcontainer¬†¬†.github/workflows.github/workflows¬†¬†.husky.husky¬†¬†.vscode.vscode¬†¬†blogblog¬†¬†configsconfigs¬†¬†deno/libdeno/lib¬†¬†packages/docspackages/docs¬†¬†srcsrc¬†¬†staticstatic¬†¬†.dependency-cruiser.js.dependency-cruiser.js¬†¬†.editorconfig.editorconfig¬†¬†.eslintignore.eslintignore¬†¬†.eslintrc.js.eslintrc.js¬†¬†.gitignore.gitignore¬†¬†.nojekyll.nojekyll¬†¬†.prettierrc.yaml.prettierrc.yaml¬†¬†CHANGELOG.mdCHANGELOG.md¬†¬†CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md¬†¬†CONTRIBUTING.mdCONTRIBUTING.md¬†¬†ERROR_HANDLING.mdERROR_HANDLING.md¬†¬†FUNDING.jsonFUNDING.json¬†¬†FUNDING.ymlFUNDING.yml¬†¬†LICENSELICENSE¬†¬†MIGRATION.mdMIGRATION.md¬†¬†README.mdREADME.md¬†¬†README_KO.mdREADME_KO.md¬†¬†README_ZH.mdREADME_ZH.md¬†¬†_redirects_redirects¬†¬†deno-build.mjsdeno-build.mjs¬†¬†index.d.tsindex.d.ts¬†¬†index.htmlindex.html¬†¬†jest.config.jsonjest.config.json¬†¬†logo.svglogo.svg¬†¬†package.jsonpackage.json¬†¬†playground.tsplayground.ts¬†¬†robots.txtrobots.txt¬†¬†tea.yamltea.yaml¬†¬†tsconfig.jsontsconfig.json¬†¬†yarn.lockyarn.lock¬†¬†View all filesRepository files navigationREADMECode of conductMIT license
  
  Zod
  
  zod.dev
  
    TypeScript-first schema validation with static type inference
  









  Website
  ¬†¬†‚Ä¢¬†¬†
  Discord
  ¬†¬†‚Ä¢¬†¬†
  ùïè
  ¬†¬†‚Ä¢¬†¬†
  Bluesky
  



  Zod 4 is now in beta!
  
  Read the announcement üëâ



Featured sponsor: Fern

  
    
      
      
    
  
  
  Learn more about featured sponsorships




Table of contents

These docs have been translated into Chinese and Korean.


Table of contents
Introduction

Sponsors

Platinum
Gold
Silver
Bronze
Copper


Ecosystem

Resources
API libraries
Form integrations
Zod to X
X to Zod
Mocking
Powered by Zod
Utilities for Zod




Installation

Requirements
From npm


Basic usage
Primitives
Coercion for primitives
Literals
Strings

Datetimes
Dates
Times
IP addresses
IP ranges


Numbers
BigInts
NaNs
Booleans
Dates
Zod enums
Native enums
Optionals
Nullables
Objects

.shape
.keyof
.extend
.merge
.pick/.omit
.partial
.deepPartial
.required
.passthrough
.strict
.strip
.catchall


Arrays

.element
.nonempty
.min/.max/.length


Tuples
Unions
Discriminated unions
Records

Record key type


Maps
Sets
Intersections
Recursive types

ZodType with ZodEffects
JSON type
Cyclical objects


Promises
Instanceof
Functions
Preprocess
Custom schemas
Schema methods

.parse
.parseAsync
.safeParse
.safeParseAsync
.refine

Arguments
Customize error path
Asynchronous refinements
Relationship to transforms


.superRefine

Abort early
Type refinements


.transform

Chaining order
Validating during transform
Relationship to refinements
Async transforms


.default
.describe
.catch
.optional
.nullable
.nullish
.array
.promise
.or
.and
.brand
.readonly
.pipe

You can use .pipe() to fix common issues with z.coerce.




Guides and concepts

Type inference
Writing generic functions

Constraining allowable inputs


Error handling
Error formatting


Comparison

Joi
Yup
io-ts
Runtypes
Ow


Changelog


Introduction
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.
Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
Some other great aspects:

Zero dependencies
Works in Node.js and all modern browsers
Tiny: 8kb minified + zipped
Immutable: methods (e.g. .optional()) return a new instance
Concise, chainable interface
Functional approach: parse, don't validate
Works with plain JavaScript too! You don't need to use TypeScript.


Sponsors
Sponsorship at any level is appreciated and encouraged. If you built a paid product using Zod, consider one of the corporate tiers.

Platinum

  
    
      
      
      
        
          
          
        
      
         
      Cut code review time & bugs in half
      
      coderabbit.ai
      
      
    
  


Gold

  
    
      
      
      
        
          
          
        
      
         
      The API platform for sending notifications
      
      courier.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      Generate better SDKs for your APIs
      
      liblab.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Serverless Postgres ‚Äî Ship faster
      
      neon.tech
      
      
    
    
      
      
      
        
          
          
        
      
         
      Build AI apps and workflows with Retool AI
      
      retool.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Generate best-in-class SDKs
      
      stainless.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      SDKs & Terraform providers for your API
      
      speakeasy.com
      
      
    
  


Silver

  
    
      
      
      Nitric
    
    
      
      
      PropelAuth
    
    
      
      
      Cerbos
    
    
      
      
      Scalar
    
    
    
      
      
      Trigger.dev
    
    
      
      
      Transloadit
    
    
      
      
      Infisical
    
    
      
      
      Whop
    
    
    
      
      
      CryptoJobsList
    
    
      
      
      Plain.
    
    
      
      
      Inngest
    
    
      
      
      Storyblok
    
    
    
      
      
      Mux
    
    
      
      
      Cybozu
    
  


Bronze

  
    
      
        
          
          
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
  


Ecosystem
There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it on Twitter or start a Discussion. I'll add it below and tweet it out.
Resources

Total TypeScript Zod Tutorial by @mattpocockuk
Fixing TypeScript's Blindspot: Runtime Typechecking by @jherr

API libraries

tRPC: Build end-to-end typesafe APIs without GraphQL.
@anatine/zod-nestjs: Helper methods for using Zod in a NestJS project.
zod-endpoints: Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
zhttp: An OpenAPI compatible, strictly typed http library with Zod input and response validation.
domain-functions: Decouple your business logic from your framework using composable functions. With first-class type inference from end to end powered by Zod schemas.
@zodios/core: A typescript API client with runtime and compile time validation backed by axios and zod.
express-zod-api: Build Express-based APIs with I/O schema validation and custom middlewares.
tapiduck: End-to-end typesafe JSON APIs with Zod and Express; a bit like tRPC, but simpler.
koa-zod-router: Create typesafe routes in Koa with I/O validation using Zod.
zod-sockets: Zod-powered Socket.IO microframework with I/O validation and built-in AsyncAPI specs
oas-tszod-gen: Client SDK code generator to convert OpenApi v3 specifications into TS endpoint caller functions with Zod types.
GQLoom: Weave GraphQL schema and resolvers using Zod.
oRPC: Typesafe APIs Made Simple

Form integrations

react-hook-form: A first-party Zod resolver for React Hook Form.
TanStack Form: Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit
zod-validation-error: Generate user-friendly error messages from ZodErrors.
zod-formik-adapter: A community-maintained Formik adapter for Zod.
react-zorm: Standalone <form> generation and validation for React using Zod.
zodix: Zod utilities for FormData and URLSearchParams in Remix loaders and actions.
conform: A typesafe form validation library for progressive enhancement of HTML forms. Works with Remix and Next.js.
remix-params-helper: Simplify integration of Zod with standard URLSearchParams and FormData for Remix apps.
formik-validator-zod: Formik-compliant validator library that simplifies using Zod with Formik.
zod-i18n-map: Useful for translating Zod error messages.
@modular-forms/solid: Modular form library for SolidJS that supports Zod for validation.
houseform: A React form library that uses Zod for validation.
sveltekit-superforms: Supercharged form library for SvelteKit with Zod validation.
mobx-zod-form: Data-first form builder based on MobX & Zod.
@vee-validate/zod: Form library for Vue.js with Zod schema validation.
zod-form-renderer: Auto-infer form fields from zod schema and render them with react-hook-form with E2E type safety.
antd-zod: Zod adapter for Ant Design form fields validation.
frrm: Tiny 0.5kb Zod-based, HTML form abstraction that goes brr.

Zod to X

zod-to-ts: Generate TypeScript definitions from Zod schemas.
zod-to-json-schema: Convert your Zod schemas into JSON Schemas.
@anatine/zod-openapi: Converts a Zod schema to an OpenAPI v3.x SchemaObject.
zod-fast-check: Generate fast-check arbitraries from Zod schemas.
zod-dto: Generate Nest.js DTOs from a Zod schema.
fastify-type-provider-zod: Create Fastify type providers from Zod schemas.
zod-to-openapi: Generate full OpenAPI (Swagger) docs from Zod, including schemas, endpoints & parameters.
nestjs-graphql-zod: Generates NestJS GraphQL model classes from Zod schemas. Provides GraphQL method decorators working with Zod schemas.
zod-openapi: Create full OpenAPI v3.x documentation from Zod schemas.
fastify-zod-openapi: Fastify type provider, validation, serialization and @fastify/swagger support for Zod schemas.
typeschema: Universal adapter for schema validation.
zodex: (De)serialization for zod schemas

X to Zod

ts-to-zod: Convert TypeScript definitions into Zod schemas.
@runtyping/zod: Generate Zod from static types & JSON schema.
json-schema-to-zod: Convert your JSON Schemas into Zod schemas. Live demo.
json-to-zod: Convert JSON objects into Zod schemas. Live demo.
graphql-codegen-typescript-validation-schema: GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema.
zod-prisma: Generate Zod schemas from your Prisma schema.
Supervillain: Generate Zod schemas from your Go structs.
prisma-zod-generator: Emit Zod schemas from your Prisma schema.
drizzle-zod: Emit Zod schemas from your Drizzle schema.
prisma-trpc-generator: Emit fully implemented tRPC routers and their validation schemas using Zod.
zod-prisma-types Create Zod types from your Prisma models.
quicktype: Convert JSON objects and JSON schemas into Zod schemas.
@sanity-typed/zod: Generate Zod Schemas from Sanity Schemas.
java-to-zod: Convert POJOs to Zod schemas
Orval: Generate Zod schemas from OpenAPI schemas
Kubb: Generate SDKs and Zod schemas from your OpenAPI schemas

Mocking

@anatine/zod-mock: Generate mock data from a Zod schema. Powered by faker.js.
zod-mocking: Generate mock data from your Zod schemas.
zod-fixture: Use your zod schemas to automate the generation of non-relevant test fixtures in a deterministic way.
zocker: Generate plausible mock-data from your schemas.
zodock Generate mock data based on Zod schemas.
zod-schema-faker Generates mock data from Zod schemas. Powered by @faker-js/faker and randexp.js

Powered by Zod

freerstore: Firestore cost optimizer.
slonik: Node.js Postgres client with strong Zod integration.
schemql: Enhances your SQL workflow by combining raw SQL with targeted type safety and schema validation.
soly: Create CLI applications with zod.
pastel: Create CLI applications with react, zod, and ink.
zod-xlsx: A xlsx based resource validator using Zod schemas.
znv: Type-safe environment parsing and validation for Node.js with Zod schemas.
zod-config: Load configurations across multiple sources with flexible adapters, ensuring type safety with Zod.
unplugin-environment: A plugin for loading enviroment variables safely with schema validation, simple with virtual module, type-safe with intellisense, and better DX üî• üöÄ üë∑. Powered by Zod.
zod-struct: Create runtime-checked structs with Zod.
zod-csv: Validation helpers for zod for parsing CSV data.
fullproduct.dev: Universal Expo + Next.js App Starter that uses Zod schemas as the single source of truth to keep generated MDX docs, GraphQL, database models, forms, and fetcher functions in sync.

Utilities for Zod

zod_utilz: Framework agnostic utilities for Zod.
zod-playground: A tool for learning and testing Zod schema validation functionalities. Link.
zod-sandbox: Controlled environment for testing zod schemas. Live demo.
zod-dev: Conditionally disables Zod runtime parsing in production.
zod-accelerator: Accelerates Zod's throughput up to ~100x.


Installation
Requirements


TypeScript 4.5+!


You must enable strict mode in your tsconfig.json. This is a best practice for all TypeScript projects.
// tsconfig.json
{
  // ...
  "compilerOptions": {
    // ...
    "strict": true
  }
}


From npm
npm install zod       # npm
deno add npm:zod      # deno
yarn add zod          # yarn
bun add zod           # bun
pnpm add zod          # pnpm
Zod also publishes a canary version on every commit. To install the canary:
npm install zod@canary       # npm
deno add npm:zod@canary      # deno
yarn add zod@canary          # yarn
bun add zod@canary           # bun
pnpm add zod@canary          # pnpm

The rest of this README assumes you are using npm and importing directly from the "zod" package.


Basic usage
Creating a simple string schema
import { z } from "zod";

// creating a schema for strings
const mySchema = z.string();

// parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError

// "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
Creating an object schema
import { z } from "zod";

const User = z.object({
  username: z.string(),
});

User.parse({ username: "Ludwig" });

// extract the inferred type
type User = z.infer<typeof User>;
// { username: string }

Primitives
import { z } from "zod";

// primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol();

// empty types
z.undefined();
z.null();
z.void(); // accepts undefined

// catch-all types
// allows any value
z.any();
z.unknown();

// never type
// allows no values
z.never();

Coercion for primitives
Zod now provides a more convenient way to coerce primitive values.
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
During the parsing step, the input is passed through the String() function, which is a JavaScript built-in for coercing data into strings.
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
The returned schema is a normal ZodString instance so you can use all string methods.
z.coerce.string().email().min(5);
How coercion works
All primitive types support coercion. Zod coerces all inputs using the built-in constructors: String(input), Number(input), new Date(input), etc.
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
Note ‚Äî¬†Boolean coercion with z.coerce.boolean() may not work how you expect. Any truthy value is coerced to true, and any falsy value is coerced to false.
const schema = z.coerce.boolean(); // Boolean(input)

schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true

schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
For more control over coercion logic, consider using z.preprocess or z.pipe().

Literals
Literal schemas represent a literal type, like "hello world" or 5.
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true);

const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol);

// retrieve literal value
tuna.value; // "tuna"

Currently there is no support for Date literals in Zod. If you have a use case for this feature, please file an issue.


Strings
Zod includes a handful of string-specific validations.
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6

// transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase

// added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS])
z.string().duration(); // ISO 8601 duration
z.string().base64();

Check out validator.js for a bunch of other useful string validation functions that can be used in conjunction with Refinements.

You can customize some common error messages when creating a string schema.
const name = z.string({
  required_error: "Name is required",
  invalid_type_error: "Name must be a string",
});
When using validation methods, you can pass in an additional argument to provide a custom error message.
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
Datetimes
As you may have noticed, Zod string includes a few date/time related validations. These validations are regular expression based, so they are not as strict as a full date/time library. However, they are very convenient for validating user input.
The z.string().datetime() method enforces ISO 8601; default is no timezone offsets and arbitrary sub-second decimal precision.
const datetime = z.string().datetime();

datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
Timezone offsets can be allowed by setting the offset option to true.
const datetime = z.string().datetime({ offset: true });

datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
Allow unqualified (timezone-less) datetimes with the local flag.
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
You can additionally constrain the allowable precision. By default, arbitrary sub-second precision is supported (but optional).
const datetime = z.string().datetime({ precision: 3 });

datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
Dates

Added in Zod 3.23

The z.string().date() method validates strings in the format YYYY-MM-DD.
const date = z.string().date();

date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
Times

Added in Zod 3.23

The z.string().time() method validates strings in the format HH:MM:SS[.s+]. The second can include arbitrary decimal precision. It does not allow timezone offsets of any kind.
const time = z.string().time();

time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision)

time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
You can set the precision option to constrain the allowable decimal precision.
const time = z.string().time({ precision: 3 });

time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
IP addresses
By default .ip() allows both IPv4 and IPv6.
const ip = z.string().ip();

ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass

ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
You can additionally set the IP version.
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
IP ranges (CIDR)
Validate IP address ranges specified with CIDR notation. By default, .cidr() allows both IPv4 and IPv6.
const cidr = z.string().cidr();
cidr.parse("192.168.0.0/24"); // pass
cidr.parse("2001:db8::/32"); // pass
You can specify a version with the version parameter.
const ipv4Cidr = z.string().cidr({ version: "v4" });
ipv4Cidr.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6Cidr = z.string().cidr({ version: "v6" });
ipv6Cidr.parse("192.168.1.1"); // fail

Numbers
You can customize certain error messages when creating a number schema.
const age = z.number({
  required_error: "Age is required",
  invalid_type_error: "Age must be a number",
});
Zod includes a handful of number-specific validations.
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)

z.number().int(); // value must be an integer

z.number().positive(); //     > 0
z.number().nonnegative(); //  >= 0
z.number().negative(); //     < 0
z.number().nonpositive(); //  <= 0

z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)

z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
Optionally, you can pass in a second argument to provide a custom error message.
z.number().lte(5, { message: "thisüëèisüëètooüëèbig" });

BigInts
Zod includes a handful of bigint-specific validations.
z.bigint().gt(5n);
z.bigint().gte(5n); // alias `.min(5n)`
z.bigint().lt(5n);
z.bigint().lte(5n); // alias `.max(5n)`

z.bigint().positive(); // > 0n
z.bigint().nonnegative(); // >= 0n
z.bigint().negative(); // < 0n
z.bigint().nonpositive(); // <= 0n

z.bigint().multipleOf(5n); // Evenly divisible by 5n.

NaNs
You can customize certain error messages when creating a nan schema.
const isNaN = z.nan({
  required_error: "isNaN is required",
  invalid_type_error: "isNaN must be 'not a number'",
});

Booleans
You can customize certain error messages when creating a boolean schema.
const isActive = z.boolean({
  required_error: "isActive is required",
  invalid_type_error: "isActive must be a boolean",
});

Dates
Use z.date() to validate Date instances.
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
You can customize certain error messages when creating a date schema.
const myDateSchema = z.date({
  required_error: "Please select a date and time",
  invalid_type_error: "That's not a date!",
});
Zod provides a handful of date-specific validations.
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
Coercion to Date
Since zod 3.20, use z.coerce.date() to pass the input through new Date(input).
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date

/* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true

/* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
For older zod versions, use z.preprocess like described in this thread.

Zod enums
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
z.enum is a Zod-native way to declare a schema with a fixed set of allowable string values. Pass the array of values directly into z.enum(). Alternatively, use as const to define your enum values as a tuple of strings. See the const assertion docs for details.
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
This is not allowed, since Zod isn't able to infer the exact values of each element.
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
.enum
To get autocompletion with a Zod enum, use the .enum property of your schema:
FishEnum.enum.Salmon; // => autocompletes

FishEnum.enum;
/*
=> {
  Salmon: "Salmon",
  Tuna: "Tuna",
  Trout: "Trout",
}
*/
You can also retrieve the list of options as a tuple with the .options property:
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
.exclude/.extract()
You can create subsets of a Zod enum with the .exclude and .extract methods.
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);

Native enums
Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use z.nativeEnum().
Numeric enums
enum Fruits {
  Apple,
  Banana,
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
String enums
enum Fruits {
  Apple = "apple",
  Banana = "banana",
  Cantaloupe, // you can mix numerical and string enums
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Cantaloupe); // passes
FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse("Cantaloupe"); // fails
Const enums
The .nativeEnum() function works for as const objects as well. ‚ö†Ô∏è as const requires TypeScript 3.4+!
const Fruits = {
  Apple: "apple",
  Banana: "banana",
  Cantaloupe: 3,
} as const;

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3

FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
You can access the underlying object with the .enum property:
FruitEnum.enum.Apple; // "apple"

Optionals
You can make any schema optional with z.optional(). This wraps the schema in a ZodOptional instance and returns the result.
const schema = z.optional(z.string());

schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
For convenience, you can also call the .optional() method on an existing schema.
const user = z.object({
  username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
You can extract the wrapped schema from a ZodOptional instance with .unwrap().
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true

Nullables
Similarly, you can create nullable types with z.nullable().
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
Or use the .nullable() method.
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
Extract the inner schema with .unwrap().
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true

Objects
// all properties are required by default
const Dog = z.object({
  name: z.string(),
  age: z.number(),
});

// extract the inferred type like this
type Dog = z.infer<typeof Dog>;

// equivalent to:
type Dog = {
  name: string;
  age: number;
};
.shape
Use .shape to access the schemas for a particular key.
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
.keyof
Use .keyof to create a ZodEnum schema from the keys of an object schema.
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
.extend
You can add additional fields to an object schema with the .extend method.
const DogWithBreed = Dog.extend({
  breed: z.string(),
});
You can use .extend to overwrite fields! Be careful with this power!
.merge
Equivalent to A.extend(B.shape).
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() });

const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }

If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.

.pick/.omit
Inspired by TypeScript's built-in Pick and Omit utility types, all Zod object schemas have .pick and .omit methods that return a modified version. Consider this Recipe schema:
const Recipe = z.object({
  id: z.string(),
  name: z.string(),
  ingredients: z.array(z.string()),
});
To only keep certain keys, use .pick .
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
To remove certain keys, use .omit .
const NoIDRecipe = Recipe.omit({ id: true });

type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
.partial
Inspired by the built-in TypeScript utility type Partial, the .partial method makes all properties optional.
Starting from this object:
const user = z.object({
  email: z.string(),
  username: z.string(),
});
// { email: string; username: string }
We can create a partial version:
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
You can also specify which properties to make optional:
const optionalEmail = user.partial({
  email: true,
});
/*
{
  email?: string | undefined;
  username: string
}
*/
.deepPartial
The .partial method is shallow ‚Äî it only applies one level deep. There is also a "deep" version:
const user = z.object({
  username: z.string(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  strings: z.array(z.object({ value: z.string() })),
});

const deepPartialUser = user.deepPartial();

/*
{
  username?: string | undefined,
  location?: {
    latitude?: number | undefined;
    longitude?: number | undefined;
  } | undefined,
  strings?: { value?: string}[]
}
*/

Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.

.required
Contrary to the .partial method, the .required method makes all properties required.
Starting from this object:
const user = z
  .object({
    email: z.string(),
    username: z.string(),
  })
  .partial();
// { email?: string | undefined; username?: string | undefined }
We can create a required version:
const requiredUser = user.required();
// { email: string; username: string }
You can also specify which properties to make required:
const requiredEmail = user.required({
  email: true,
});
/*
{
  email: string;
  username?: string | undefined;
}
*/
.passthrough
By default Zod object schemas strip out unrecognized keys during parsing.
const person = z.object({
  name: z.string(),
});

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
Instead, if you want to pass through unknown keys, use .passthrough() .
person.passthrough().parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
.strict
By default Zod object schemas strip out unrecognized keys during parsing. You can disallow unknown keys with .strict() . If there are any unknown keys in the input, Zod will throw an error.
const person = z
  .object({
    name: z.string(),
  })
  .strict();

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => throws ZodError
.strip
You can use the .strip method to reset an object schema to the default behavior (stripping unrecognized keys).
.catchall
You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
const person = z
  .object({
    name: z.string(),
  })
  .catchall(z.number());

person.parse({
  name: "bob dylan",
  validExtraKey: 61, // works fine
});

person.parse({
  name: "bob dylan",
  validExtraKey: false, // fails
});
// => throws ZodError
Using .catchall() obviates .passthrough() , .strip() , or .strict(). All keys are now considered "known".

Arrays
const stringArray = z.array(z.string());

// equivalent
const stringArray = z.string().array();
Be careful with the .array() method. It returns a new ZodArray instance. This means the order in which you call methods matters. For instance:
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
.element
Use .element to access the schema for an element of the array.
stringArray.element; // => string schema
.nonempty
If you want to ensure that an array contains at least one element, use .nonempty().
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]]

nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
You can optionally specify a custom error message:
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({
  message: "Can't be empty!",
});
.min/.max/.length
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
Unlike .nonempty() these methods do not change the inferred type.

Tuples
Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
const athleteSchema = z.tuple([
  z.string(), // name
  z.number(), // jersey number
  z.object({
    pointsScored: z.number(),
  }), // statistics
]);

type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
A variadic ("rest") argument can be added with the .rest method.
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];

Unions
Zod includes a built-in z.union method for composing "OR" types.
const stringOrNumber = z.union([z.string(), z.number()]);

stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
Zod will test the input against each of the "options" in order and return the first value that validates successfully.
For convenience, you can also use the .or method:
const stringOrNumber = z.string().or(z.number());
Optional string validation:
To validate an optional form input, you can union the desired string validation with an empty string literal.
This example validates an input that is optional but needs to contain a valid URL:
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]);

console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false

Discriminated unions
A discriminated union is a union of object schemas that all share a particular key.
type MyUnion =
  | { status: "success"; data: string }
  | { status: "failed"; error: Error };
Such unions can be represented with the z.discriminatedUnion method. This enables faster evaluation, because Zod can check the discriminator key (status in the example above) to determine which schema should be used to parse the input. This makes parsing more efficient and lets Zod report friendlier errors.
With the basic union method, the input is tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing against it, and showing only the issues related to this "option".
const myUnion = z.discriminatedUnion("status", [
  z.object({ status: z.literal("success"), data: z.string() }),
  z.object({ status: z.literal("failed"), error: z.instanceof(Error) }),
]);

myUnion.parse({ status: "success", data: "yippie ki yay" });
You can extract a reference to the array of schemas with the .options property.
myUnion.options; // [ZodObject<...>, ZodObject<...>]
To merge two or more discriminated unions, use .options with destructuring.
const A = z.discriminatedUnion("status", [
  /* options */
]);
const B = z.discriminatedUnion("status", [
  /* options */
]);

const AB = z.discriminatedUnion("status", [...A.options, ...B.options]);

Records
Record schemas are used to validate types such as Record<string, number>. This is particularly useful for storing or caching items by ID.

const User = z.object({ name: z.string() });

const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
The schema and inferred type can be used like so:
const userStore: UserStore = {};

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  name: "Carlotta",
}; // passes

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  whatever: "Ice cream sundae",
}; // TypeError
A note on numerical keys
While z.record(keyType, valueType) is able to accept numerical key types and TypeScript's built-in Record type is Record<KeyType, ValueType>, it's hard to represent the TypeScript type Record<number, any> in Zod.
As it turns out, TypeScript's behavior surrounding [k: number] is a little unintuitive:
const testMap: { [k: number]: string } = {
  1: "one",
};

for (const key in testMap) {
  console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.

Maps
const stringNumberMap = z.map(z.string(), z.number());

type StringNumberMap = z.infer<typeof stringNumberMap>;
// type StringNumberMap = Map<string, number>

Sets
const numberSet = z.set(z.number());
type NumberSet = z.infer<typeof numberSet>;
// type NumberSet = Set<number>
Set schemas can be further constrained with the following utility methods.
z.set(z.string()).nonempty(); // must contain at least one item
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly

Intersections
Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
const Person = z.object({
  name: z.string(),
});

const Employee = z.object({
  role: z.string(),
});

const EmployedPerson = z.intersection(Person, Employee);

// equivalent to:
const EmployedPerson = Person.and(Employee);
Though in many cases, it is recommended to use A.merge(B) to merge two objects. The .merge method returns a new ZodObject instance, whereas A.and(B) returns a less useful ZodIntersection instance that lacks common object methods like pick and omit.
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b);

type c = z.infer<typeof c>; // => number



Recursive types
You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
const baseCategorySchema = z.object({
  name: z.string(),
});

type Category = z.infer<typeof baseCategorySchema> & {
  subcategories: Category[];
};

const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
  subcategories: z.lazy(() => categorySchema.array()),
});

categorySchema.parse({
  name: "People",
  subcategories: [
    {
      name: "Politicians",
      subcategories: [
        {
          name: "Presidents",
          subcategories: [],
        },
      ],
    },
  ],
}); // passes
Thanks to crasite for this example.
ZodType with ZodEffects
When using z.ZodType with z.ZodEffects (
.refine,
.transform,
preprocess,
etc...
), you will need to define the input and output types of the schema. z.ZodType<Output, z.ZodTypeDef, Input>
const isValidId = (id: string): id is `${string}/${string}` =>
  id.split("/").length === 2;

const baseSchema = z.object({
  id: z.string().refine(isValidId),
});

type Input = z.input<typeof baseSchema> & {
  children: Input[];
};

type Output = z.output<typeof baseSchema> & {
  children: Output[];
};

const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({
  children: z.lazy(() => schema.array()),
});
Thanks to marcus13371337 and JoelBeeldi for this example.
JSON type
If you want to validate any JSON value, you can use the snippet below.
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
);

jsonSchema.parse(data);
Thanks to ggoodman for suggesting this.
Cyclical objects
Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop in some cases.

To detect cyclical objects before they cause problems, consider this approach.


Promises
const numberPromise = z.promise(z.number());
"Parsing" works a little differently with promise schemas. Validation happens in two parts:

Zod synchronously checks that the input is an instance of Promise (i.e. an object with .then and .catch methods.).
Zod uses .then to attach an additional validation step onto the existing Promise. You'll have to use .catch on the returned Promise to handle validation failures.

numberPromise.parse("tuna");
// ZodError: Non-Promise type: string

numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number>

const test = async () => {
  await numberPromise.parse(Promise.resolve("tuna"));
  // ZodError: Non-number type: string

  await numberPromise.parse(Promise.resolve(3.14));
  // => 3.14
};


Instanceof
You can use z.instanceof to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
class Test {
  name: string;
}

const TestSchema = z.instanceof(Test);

const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws

Functions
Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
You can create a function schema with z.function(args, returnType) .
const myFunction = z.function();

type myFunction = z.infer<typeof myFunction>;
// => ()=>unknown
Define inputs and outputs.
const myFunction = z
  .function()
  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
  .returns(z.boolean());

type myFunction = z.infer<typeof myFunction>;
// => (arg0: string, arg1: number)=>boolean

Function schemas have an .implement() method which accepts a function and returns a new function that automatically validates its inputs and outputs.
const trimmedLength = z
  .function()
  .args(z.string()) // accepts an arbitrary number of arguments
  .returns(z.number())
  .implement((x) => {
    // TypeScript knows x is a string!
    return x.trim().length;
  });

trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
If you only care about validating inputs, just don't call the .returns() method. The output type will be inferred from the implementation.

You can use the special z.void() option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)

const myFunction = z
  .function()
  .args(z.string())
  .implement((arg) => {
    return [arg.length];
  });

myFunction; // (arg: string)=>number[]
Extract the input and output schemas from a function schema.
myFunction.parameters();
// => ZodTuple<[ZodString, ZodNumber]>

myFunction.returnType();
// => ZodBoolean


Preprocess

Zod now supports primitive coercion without the need for .preprocess(). See the coercion docs for more information.

Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the .transform docs.)
But sometimes you want to apply some transform to the input before parsing happens. A common use case: type coercion. Zod enables this with the z.preprocess().
const castToString = z.preprocess((val) => String(val), z.string());
This returns a ZodEffects instance. ZodEffects is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.

Custom schemas
You can create a Zod schema for any TypeScript type by using z.custom(). This is useful for creating schemas for types that are not supported by Zod out of the box, such as template string literals.
const px = z.custom<`${number}px`>((val) => {
  return typeof val === "string" ? /^\d+px$/.test(val) : false;
});

type px = z.infer<typeof px>; // `${number}px`

px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
If you don't provide a validation function, Zod will allow any value. This can be dangerous!
z.custom<{ arg: string }>(); // performs no validation
You can customize the error message and other options by passing a second argument. This parameter works the same way as the params parameter of .refine.
z.custom<...>((val) => ..., "custom error message");

Schema methods
All Zod schemas contain certain methods.
.parse
.parse(data: unknown): T
Given any Zod schema, you can call its .parse method to check data is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.

IMPORTANT: The value returned by .parse is a deep clone of the variable you passed in.

const stringSchema = z.string();

stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
.parseAsync
.parseAsync(data:unknown): Promise<T>
If you use asynchronous refinements or transforms (more on those later), you'll need to use .parseAsync.
const stringSchema = z.string().refine(async (val) => val.length <= 8);

await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
.safeParse
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
If you don't want Zod to throw errors when validation fails, use .safeParse. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
stringSchema.safeParse(12);
// => { success: false; error: ZodError }

stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
The result is a discriminated union, so you can handle errors very conveniently:
const result = stringSchema.safeParse("billie");
if (!result.success) {
  // handle error then return
  result.error;
} else {
  // do something
  result.data;
}
.safeParseAsync

Alias: .spa

An asynchronous version of safeParse.
await stringSchema.safeParseAsync("billie");
For convenience, this has been aliased to .spa:
await stringSchema.spa("billie");
.refine
.refine(validator: (data:T)=>any, params?: RefineParams)
Zod lets you provide custom validation logic via refinements. (For advanced features like creating multiple issues and customizing error codes, see .superRefine.)
Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
For example, you can define a custom validation check on any Zod schema with .refine :
const myString = z.string().refine((val) => val.length <= 255, {
  message: "String can't be more than 255 characters",
});

‚ö†Ô∏è Refinement functions should not throw. Instead they should return a falsy value to signal failure.

Arguments
As you can see, .refine takes two arguments.

The first is the validation function. This function takes one input (of type T ‚Äî the inferred type of the schema) and returns any. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
The second argument accepts some options. You can use this to customize certain error-handling behavior:

type RefineParams = {
  // override error message
  message?: string;

  // appended to error path
  path?: (string | number)[];

  // params object you can use to customize message
  // in error map
  params?: object;
};
For advanced cases, the second argument can also be a function that returns RefineParams.
const longString = z.string().refine(
  (val) => val.length > 10,
  (val) => ({ message: `${val} is not more than 10 characters` })
);
Customize error path
const passwordForm = z
  .object({
    password: z.string(),
    confirm: z.string(),
  })
  .refine((data) => data.password === data.confirm, {
    message: "Passwords don't match",
    path: ["confirm"], // path of error
  });

passwordForm.parse({ password: "asdf", confirm: "qwer" });
Because you provided a path parameter, the resulting error will be:
ZodError {
  issues: [{
    "code": "custom",
    "path": [ "confirm" ],
    "message": "Passwords don't match"
  }]
}
Asynchronous refinements
Refinements can also be async:
const userId = z.string().refine(async (id) => {
  // verify that ID exists in database
  return true;
});

‚ö†Ô∏è If you use async refinements, you must use the .parseAsync method to parse data! Otherwise Zod will throw an error.

Relationship to transforms
Transforms and refinements can be interleaved:
z.string()
  .transform((val) => val.length)
  .refine((val) => val > 25);

.superRefine
The .refine method is actually syntactic sugar atop a more versatile (and verbose) method called superRefine. Here's an example:
const Strings = z.array(z.string()).superRefine((val, ctx) => {
  if (val.length > 3) {
    ctx.addIssue({
      code: z.ZodIssueCode.too_big,
      maximum: 3,
      type: "array",
      inclusive: true,
      message: "Too many items üò°",
    });
  }

  if (val.length !== new Set(val).size) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: `No duplicates allowed.`,
    });
  }
});
You can add as many issues as you like. If ctx.addIssue is not called during the execution of the function, validation passes.
Normally refinements always create issues with a ZodIssueCode.custom error code, but with superRefine it's possible to throw issues of any ZodIssueCode. Each issue code is described in detail in the Error Handling guide: ERROR_HANDLING.md.
Abort early
By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to abort early to prevent later refinements from being executed. To achieve this, pass the fatal flag to ctx.addIssue and return z.NEVER.
const schema = z.number().superRefine((val, ctx) => {
  if (val < 10) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be >= 10",
      fatal: true,
    });

    return z.NEVER;
  }

  if (val !== 12) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be twelve",
    });
  }
});
Type refinements
If you provide a type predicate to .refine() or .superRefine(), the resulting type will be narrowed down to your predicate's type. This is useful if you are mixing multiple chained refinements and transformations:
const schema = z
  .object({
    first: z.string(),
    second: z.number(),
  })
  .nullable()
  .superRefine((arg, ctx): arg is { first: string; second: number } => {
    if (!arg) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom, // customize your issue
        message: "object should exist",
      });
    }

    return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing
  })
  // here, TS knows that arg is not null
  .refine((arg) => arg.first === "bob", "`first` is not `bob`!");

‚ö†Ô∏è You must use ctx.addIssue() instead of returning a boolean value to indicate whether the validation passes. If ctx.addIssue is not called during the execution of the function, validation passes.

.transform
To transform data after parsing, use the transform method.
const stringToNumber = z.string().transform((val) => val.length);

stringToNumber.parse("string"); // => 6
Chaining order
Note that stringToNumber above is an instance of the ZodEffects subclass. It is NOT an instance of ZodString. If you want to use the built-in methods of ZodString (e.g. .email()) you must apply those methods before any transforms.
const emailToDomain = z
  .string()
  .email()
  .transform((val) => val.split("@")[1]);

emailToDomain.parse("colinhacks@example.com"); // => example.com
Validating during transform
The .transform method can simultaneously validate and transform the value. This is often simpler and less duplicative than chaining transform and refine.
As with .superRefine, the transform function receives a ctx object with an addIssue method that can be used to register validation issues.
const numberInString = z.string().transform((val, ctx) => {
  const parsed = parseInt(val);
  if (isNaN(parsed)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Not a number",
    });

    // This is a special symbol you can use to
    // return early from the transform function.
    // It has type `never` so it does not affect the
    // inferred return type.
    return z.NEVER;
  }
  return parsed;
});
Relationship to refinements
Transforms and refinements can be interleaved. These will be executed in the order they are declared.
const nameToGreeting = z
  .string()
  .transform((val) => val.toUpperCase())
  .refine((val) => val.length > 15)
  .transform((val) => `Hello ${val}`)
  .refine((val) => val.indexOf("!") === -1);
Async transforms
Transforms can also be async.
const IdToUser = z
  .string()
  .uuid()
  .transform(async (id) => {
    return await getUserById(id);
  });

‚ö†Ô∏è If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.

.default
You can use transforms to implement the concept of "default values" in Zod.
const stringWithDefault = z.string().default("tuna");

stringWithDefault.parse(undefined); // => "tuna"
Optionally, you can pass a function into .default that will be re-executed whenever a default value needs to be generated:
const numberWithRandomDefault = z.number().default(Math.random);

numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
Conceptually, this is how Zod processes default values:

If the input is undefined, the default value is returned
Otherwise, the data is parsed using the base schema

.describe
Use .describe() to add a description property to the resulting schema.
const documentedString = z
  .string()
  .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text‚Ä¶
This can be useful for documenting a field, for example in a JSON Schema using a library like zod-to-json-schema).
.catch
Use .catch() to provide a "catch value" to be returned in the event of a parsing error.
const numberWithCatch = z.number().catch(42);

numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
Optionally, you can pass a function into .catch that will be re-executed whenever a default value needs to be generated. A ctx object containing the caught error will be passed into this function.
const numberWithRandomCatch = z.number().catch((ctx) => {
  ctx.error; // the caught ZodError
  return Math.random();
});

numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
Conceptually, this is how Zod processes "catch values":

The data is parsed using the base schema
If the parsing fails, the "catch value" is returned

.optional
A convenience method that returns an optional version of a schema.
const optionalString = z.string().optional(); // string | undefined

// equivalent to
z.optional(z.string());
.nullable
A convenience method that returns a nullable version of a schema.
const nullableString = z.string().nullable(); // string | null

// equivalent to
z.nullable(z.string());
.nullish
A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both undefined and null. Read more about the concept of "nullish" in the TypeScript 3.7 release notes.
const nullishString = z.string().nullish(); // string | null | undefined

// equivalent to
z.string().nullable().optional();
.array
A convenience method that returns an array schema for the given type:
const stringArray = z.string().array(); // string[]

// equivalent to
z.array(z.string());
.promise
A convenience method for promise types:
const stringPromise = z.string().promise(); // Promise<string>

// equivalent to
z.promise(z.string());
.or
A convenience method for union types.
const stringOrNumber = z.string().or(z.number()); // string | number

// equivalent to
z.union([z.string(), z.number()]);
.and
A convenience method for creating intersection types.
const nameAndAge = z
  .object({ name: z.string() })
  .and(z.object({ age: z.number() })); // { name: string } & { age: number }

// equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
.brand
.brand<T>() => ZodBranded<this, B>
TypeScript's type system is structural, which means that any two types that are structurally equivalent are considered the same.
type Cat = { name: string };
type Dog = { name: string };

const petCat = (cat: Cat) => {};
const fido: Dog = { name: "fido" };
petCat(fido); // works fine
In some cases, its can be desirable to simulate nominal typing inside TypeScript. For instance, you may wish to write a function that only accepts an input that has been validated by Zod. This can be achieved with branded types (AKA opaque types).
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;

const petCat = (cat: Cat) => {};

// this works
const simba = Cat.parse({ name: "simba" });
petCat(simba);

// this doesn't
petCat({ name: "fido" });
Under the hood, this works by attaching a "brand" to the inferred type using an intersection type. This way, plain/unbranded data structures are no longer assignable to the inferred type of the schema.
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;
// {name: string} & {[symbol]: "Cat"}
Note that branded types do not affect the runtime result of .parse. It is a static-only construct.
.readonly
.readonly() => ZodReadonly<this>
This method returns a ZodReadonly schema instance that parses the input using the base schema, then calls Object.freeze() on the result. The inferred type is also marked as readonly.
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}>

const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
The inferred type uses TypeScript's built-in readonly types when relevant.
z.array(z.string()).readonly();
// readonly string[]

z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number]

z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date>

z.set(z.string()).readonly();
// ReadonlySet<string>
.pipe
Schemas can be chained into validation "pipelines". It's useful for easily validating the result after a .transform():
z.string()
  .transform((val) => val.length)
  .pipe(z.number().min(5));
The .pipe() method returns a ZodPipeline instance.

Guides and concepts
Type inference
You can extract the TypeScript type of any schema with z.infer<typeof mySchema> .
const A = z.string();
type A = z.infer<typeof A>; // string

const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
What about transforms?
In reality each Zod schema internally tracks two types: an input and an output. For most schemas (e.g. z.string()) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance z.string().transform(val => val.length) has an input of string and an output of number.
You can separately extract the input and output types like so:
const stringToNumber = z.string().transform((val) => val.length);

// ‚ö†Ô∏è Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
Writing generic functions
With TypeScript generics, you can write reusable functions that accept Zod schemas as parameters. This enables you to create custom validation logic, schema transformations, and more, while maintaining type safety and inference.
When attempting to write a function that accepts a Zod schema as an input, it's tempting to try something like this:
function inferSchema<T>(schema: z.ZodType<T>) {
  return schema;
}
This approach is incorrect, and limits TypeScript's ability to properly infer the argument. No matter what you pass in, the type of schema will be an instance of ZodType.
inferSchema(z.string());
// => ZodType<string>
This approach loses type information, namely which subclass the input actually is (in this case, ZodString). That means you can't call any string-specific methods like .min() on the result of inferSchema.
A better approach is to infer the schema as a whole instead of merely its inferred type. You can do this with a utility type called z.ZodTypeAny.
function inferSchema<T extends z.ZodTypeAny>(schema: T) {
  return schema;
}

inferSchema(z.string());
// => ZodString

ZodTypeAny is just a shorthand for ZodType<any, any, any>, a type that is broad enough to match any Zod schema.

The Result is now fully and properly typed, and the type system can infer the specific subclass of the schema.
Inferring the inferred type
If you follow the best practice of using z.ZodTypeAny as the generic parameter for your schema, you may encounter issues with the parsed data being typed as any instead of the inferred type of the schema.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data);
}

parseData("sup", z.string());
// => any
Due to how TypeScript inference works, it is treating schema like a ZodTypeAny instead of the inferred type. You can fix this with a type cast using z.infer.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data) as z.infer<T>;
  //                        ^^^^^^^^^^^^^^ <- add this
}

parseData("sup", z.string());
// => string
Constraining allowable inputs
The ZodType class has three generic parameters.
class ZodType<
  Output = any,
  Def extends ZodTypeDef = ZodTypeDef,
  Input = Output
> { ... }
By constraining these in your generic input, you can limit what schemas are allowable as inputs to your function:
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) {
  return schema.optional();
}

makeSchemaOptional(z.string());
// works fine

makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
Error handling
Zod provides a subclass of Error called ZodError. ZodErrors contain an issues array containing detailed information about the validation problems.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  result.error.issues;
  /* [
      {
        "code": "invalid_type",
        "expected": "string",
        "received": "number",
        "path": [ "name" ],
        "message": "Expected string, received number"
      }
  ] */
}

For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: ERROR_HANDLING.md

Zod's error reporting emphasizes completeness and correctness. If you are looking to present a useful error message to the end user, you should either override Zod's error messages using an error map (described in detail in the Error Handling guide) or use a third-party library like zod-validation-error
Error formatting
You can use the .format() method to convert this error into a nested object.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  const formatted = result.error.format();
  /* {
    name: { _errors: [ 'Expected string, received number' ] }
  } */

  formatted.name?._errors;
  // => ["Expected string, received number"]
}

Comparison
There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.



Joi
https://github.com/hapijs/joi
Doesn't support static type inference üòï
Yup
https://github.com/jquense/yup
Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.

Supports casting and transforms
All object fields are optional by default



Missing promise schemas
Missing function schemas
Missing union & intersection schemas


io-ts
https://github.com/gcanti/io-ts
io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
import * as t from "io-ts";

const A = t.type({
  foo: t.string,
});

const B = t.partial({
  bar: t.number,
});

const C = t.intersection([A, B]);

type C = t.TypeOf<typeof C>;
// returns { foo: string; bar?: number | undefined }
You must define the required and optional props in separate object validators, pass the optionals through t.partial (which marks all properties as optional), then combine them with t.intersection .
Consider the equivalent in Zod:
const C = z.object({
  foo: z.string(),
  bar: z.number().optional(),
});

type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
This more declarative API makes schema definitions vastly more concise.
io-ts also requires the use of gcanti's functional programming library fp-ts to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on fp-ts necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the fp-ts nomenclature to use the library.

Supports codecs with serialization & deserialization transforms
Supports branded types
Supports advanced functional programming, higher-kinded types, fp-ts compatibility
Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
Missing nonempty arrays with proper typing ([T, ...T[]])
Missing promise schemas
Missing function schemas

Runtypes
https://github.com/runtypes/runtypes
Runtypes is focused on ergonomics, with good type inference support.

Supports "pattern matching": computed properties that distribute over unions
Supports branded types
Supports template literals
Supports conformance to predefined static types
Missing object methods: (deepPartial, merge)
Missing promise schemas
Missing error customization

Ow
https://github.com/sindresorhus/ow
Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. int32Array , see full list in their README).
If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.

Changelog
View the changelog at CHANGELOG.md
   


      

        

      
        
          
            
  About

      
        TypeScript-first schema validation with static type inference
      
      
        
        
          zod.dev
        
      

    Topics
    
        
      
  typescript

      
  static-types

      
  schema-validation

      
  type-inference

      
  runtime-validation

  

    

    Resources
    
      
        
        Readme
    

  
    License
  
    
      
     MIT license
    
  


    Code of conduct
    
      
        
        Code of conduct
      
    


  

  
    
      Activity  


  Stars
  
    
      37.4k
      stars  

  Watchers
  
    
      70
      watching  

  Forks
  
    
      1.4k
      forks  


    
      
          Report repository
    


          
        

        
            
              
                
  Releases
      94

  
    
    
      
        v3.24.3
        
          Latest
      
      Apr 16, 2025
    
    
      + 93 releases
              
            

        
            
              
                
Sponsor this project

        
          
          ¬†
        
               Sponsor
  
    Learn more about GitHub Sponsors
  

              
            

        
            
              
                
  
  Packages
      0


      
        No packages published 
      



              
            

        
            
              
                
  
    Used by 2.2m  

  
    
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
    
      
        + 2,156,500
      
  

              
            

        
            
              
                
  Contributors
      335


    
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    





  
    + 321 contributors
              
            

        
        
            
              
                Languages

  
    
    
    


    
        
          
          TypeScript
          96.3%
        
    
    
        
          
          JavaScript
          1.9%
        
    
    
        
          
          HTML
          1.8%\n\n\n\nZod
  
  zod.dev
  
    TypeScript-first schema validation with static type inference
  









  Website
  ¬†¬†‚Ä¢¬†¬†
  Discord
  ¬†¬†‚Ä¢¬†¬†
  ùïè
  ¬†¬†‚Ä¢¬†¬†
  Bluesky
  



  Zod 4 is now in beta!
  
  Read the announcement üëâ



Featured sponsor: Fern

  
    
      
      
    
  
  
  Learn more about featured sponsorships




Table of contents

These docs have been translated into Chinese and Korean.


Table of contents
Introduction

Sponsors

Platinum
Gold
Silver
Bronze
Copper


Ecosystem

Resources
API libraries
Form integrations
Zod to X
X to Zod
Mocking
Powered by Zod
Utilities for Zod




Installation

Requirements
From npm


Basic usage
Primitives
Coercion for primitives
Literals
Strings

Datetimes
Dates
Times
IP addresses
IP ranges


Numbers
BigInts
NaNs
Booleans
Dates
Zod enums
Native enums
Optionals
Nullables
Objects

.shape
.keyof
.extend
.merge
.pick/.omit
.partial
.deepPartial
.required
.passthrough
.strict
.strip
.catchall


Arrays

.element
.nonempty
.min/.max/.length


Tuples
Unions
Discriminated unions
Records

Record key type


Maps
Sets
Intersections
Recursive types

ZodType with ZodEffects
JSON type
Cyclical objects


Promises
Instanceof
Functions
Preprocess
Custom schemas
Schema methods

.parse
.parseAsync
.safeParse
.safeParseAsync
.refine

Arguments
Customize error path
Asynchronous refinements
Relationship to transforms


.superRefine

Abort early
Type refinements


.transform

Chaining order
Validating during transform
Relationship to refinements
Async transforms


.default
.describe
.catch
.optional
.nullable
.nullish
.array
.promise
.or
.and
.brand
.readonly
.pipe

You can use .pipe() to fix common issues with z.coerce.




Guides and concepts

Type inference
Writing generic functions

Constraining allowable inputs


Error handling
Error formatting


Comparison

Joi
Yup
io-ts
Runtypes
Ow


Changelog


Introduction
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.
Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
Some other great aspects:

Zero dependencies
Works in Node.js and all modern browsers
Tiny: 8kb minified + zipped
Immutable: methods (e.g. .optional()) return a new instance
Concise, chainable interface
Functional approach: parse, don't validate
Works with plain JavaScript too! You don't need to use TypeScript.


Sponsors
Sponsorship at any level is appreciated and encouraged. If you built a paid product using Zod, consider one of the corporate tiers.

Platinum

  
    
      
      
      
        
          
          
        
      
         
      Cut code review time & bugs in half
      
      coderabbit.ai
      
      
    
  


Gold

  
    
      
      
      
        
          
          
        
      
         
      The API platform for sending notifications
      
      courier.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      Generate better SDKs for your APIs
      
      liblab.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Serverless Postgres ‚Äî Ship faster
      
      neon.tech
      
      
    
    
      
      
      
        
          
          
        
      
         
      Build AI apps and workflows with Retool AI
      
      retool.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Generate best-in-class SDKs
      
      stainless.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      SDKs & Terraform providers for your API
      
      speakeasy.com
      
      
    
  


Silver

  
    
      
      
      Nitric
    
    
      
      
      PropelAuth
    
    
      
      
      Cerbos
    
    
      
      
      Scalar
    
    
    
      
      
      Trigger.dev
    
    
      
      
      Transloadit
    
    
      
      
      Infisical
    
    
      
      
      Whop
    
    
    
      
      
      CryptoJobsList
    
    
      
      
      Plain.
    
    
      
      
      Inngest
    
    
      
      
      Storyblok
    
    
    
      
      
      Mux
    
    
      
      
      Cybozu
    
  


Bronze

  
    
      
        
          
          
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
  


Ecosystem
There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it on Twitter or start a Discussion. I'll add it below and tweet it out.
Resources

Total TypeScript Zod Tutorial by @mattpocockuk
Fixing TypeScript's Blindspot: Runtime Typechecking by @jherr

API libraries

tRPC: Build end-to-end typesafe APIs without GraphQL.
@anatine/zod-nestjs: Helper methods for using Zod in a NestJS project.
zod-endpoints: Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
zhttp: An OpenAPI compatible, strictly typed http library with Zod input and response validation.
domain-functions: Decouple your business logic from your framework using composable functions. With first-class type inference from end to end powered by Zod schemas.
@zodios/core: A typescript API client with runtime and compile time validation backed by axios and zod.
express-zod-api: Build Express-based APIs with I/O schema validation and custom middlewares.
tapiduck: End-to-end typesafe JSON APIs with Zod and Express; a bit like tRPC, but simpler.
koa-zod-router: Create typesafe routes in Koa with I/O validation using Zod.
zod-sockets: Zod-powered Socket.IO microframework with I/O validation and built-in AsyncAPI specs
oas-tszod-gen: Client SDK code generator to convert OpenApi v3 specifications into TS endpoint caller functions with Zod types.
GQLoom: Weave GraphQL schema and resolvers using Zod.
oRPC: Typesafe APIs Made Simple

Form integrations

react-hook-form: A first-party Zod resolver for React Hook Form.
TanStack Form: Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit
zod-validation-error: Generate user-friendly error messages from ZodErrors.
zod-formik-adapter: A community-maintained Formik adapter for Zod.
react-zorm: Standalone <form> generation and validation for React using Zod.
zodix: Zod utilities for FormData and URLSearchParams in Remix loaders and actions.
conform: A typesafe form validation library for progressive enhancement of HTML forms. Works with Remix and Next.js.
remix-params-helper: Simplify integration of Zod with standard URLSearchParams and FormData for Remix apps.
formik-validator-zod: Formik-compliant validator library that simplifies using Zod with Formik.
zod-i18n-map: Useful for translating Zod error messages.
@modular-forms/solid: Modular form library for SolidJS that supports Zod for validation.
houseform: A React form library that uses Zod for validation.
sveltekit-superforms: Supercharged form library for SvelteKit with Zod validation.
mobx-zod-form: Data-first form builder based on MobX & Zod.
@vee-validate/zod: Form library for Vue.js with Zod schema validation.
zod-form-renderer: Auto-infer form fields from zod schema and render them with react-hook-form with E2E type safety.
antd-zod: Zod adapter for Ant Design form fields validation.
frrm: Tiny 0.5kb Zod-based, HTML form abstraction that goes brr.

Zod to X

zod-to-ts: Generate TypeScript definitions from Zod schemas.
zod-to-json-schema: Convert your Zod schemas into JSON Schemas.
@anatine/zod-openapi: Converts a Zod schema to an OpenAPI v3.x SchemaObject.
zod-fast-check: Generate fast-check arbitraries from Zod schemas.
zod-dto: Generate Nest.js DTOs from a Zod schema.
fastify-type-provider-zod: Create Fastify type providers from Zod schemas.
zod-to-openapi: Generate full OpenAPI (Swagger) docs from Zod, including schemas, endpoints & parameters.
nestjs-graphql-zod: Generates NestJS GraphQL model classes from Zod schemas. Provides GraphQL method decorators working with Zod schemas.
zod-openapi: Create full OpenAPI v3.x documentation from Zod schemas.
fastify-zod-openapi: Fastify type provider, validation, serialization and @fastify/swagger support for Zod schemas.
typeschema: Universal adapter for schema validation.
zodex: (De)serialization for zod schemas

X to Zod

ts-to-zod: Convert TypeScript definitions into Zod schemas.
@runtyping/zod: Generate Zod from static types & JSON schema.
json-schema-to-zod: Convert your JSON Schemas into Zod schemas. Live demo.
json-to-zod: Convert JSON objects into Zod schemas. Live demo.
graphql-codegen-typescript-validation-schema: GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema.
zod-prisma: Generate Zod schemas from your Prisma schema.
Supervillain: Generate Zod schemas from your Go structs.
prisma-zod-generator: Emit Zod schemas from your Prisma schema.
drizzle-zod: Emit Zod schemas from your Drizzle schema.
prisma-trpc-generator: Emit fully implemented tRPC routers and their validation schemas using Zod.
zod-prisma-types Create Zod types from your Prisma models.
quicktype: Convert JSON objects and JSON schemas into Zod schemas.
@sanity-typed/zod: Generate Zod Schemas from Sanity Schemas.
java-to-zod: Convert POJOs to Zod schemas
Orval: Generate Zod schemas from OpenAPI schemas
Kubb: Generate SDKs and Zod schemas from your OpenAPI schemas

Mocking

@anatine/zod-mock: Generate mock data from a Zod schema. Powered by faker.js.
zod-mocking: Generate mock data from your Zod schemas.
zod-fixture: Use your zod schemas to automate the generation of non-relevant test fixtures in a deterministic way.
zocker: Generate plausible mock-data from your schemas.
zodock Generate mock data based on Zod schemas.
zod-schema-faker Generates mock data from Zod schemas. Powered by @faker-js/faker and randexp.js

Powered by Zod

freerstore: Firestore cost optimizer.
slonik: Node.js Postgres client with strong Zod integration.
schemql: Enhances your SQL workflow by combining raw SQL with targeted type safety and schema validation.
soly: Create CLI applications with zod.
pastel: Create CLI applications with react, zod, and ink.
zod-xlsx: A xlsx based resource validator using Zod schemas.
znv: Type-safe environment parsing and validation for Node.js with Zod schemas.
zod-config: Load configurations across multiple sources with flexible adapters, ensuring type safety with Zod.
unplugin-environment: A plugin for loading enviroment variables safely with schema validation, simple with virtual module, type-safe with intellisense, and better DX üî• üöÄ üë∑. Powered by Zod.
zod-struct: Create runtime-checked structs with Zod.
zod-csv: Validation helpers for zod for parsing CSV data.
fullproduct.dev: Universal Expo + Next.js App Starter that uses Zod schemas as the single source of truth to keep generated MDX docs, GraphQL, database models, forms, and fetcher functions in sync.

Utilities for Zod

zod_utilz: Framework agnostic utilities for Zod.
zod-playground: A tool for learning and testing Zod schema validation functionalities. Link.
zod-sandbox: Controlled environment for testing zod schemas. Live demo.
zod-dev: Conditionally disables Zod runtime parsing in production.
zod-accelerator: Accelerates Zod's throughput up to ~100x.


Installation
Requirements


TypeScript 4.5+!


You must enable strict mode in your tsconfig.json. This is a best practice for all TypeScript projects.
// tsconfig.json
{
  // ...
  "compilerOptions": {
    // ...
    "strict": true
  }
}


From npm
npm install zod       # npm
deno add npm:zod      # deno
yarn add zod          # yarn
bun add zod           # bun
pnpm add zod          # pnpm
Zod also publishes a canary version on every commit. To install the canary:
npm install zod@canary       # npm
deno add npm:zod@canary      # deno
yarn add zod@canary          # yarn
bun add zod@canary           # bun
pnpm add zod@canary          # pnpm

The rest of this README assumes you are using npm and importing directly from the "zod" package.


Basic usage
Creating a simple string schema
import { z } from "zod";

// creating a schema for strings
const mySchema = z.string();

// parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError

// "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
Creating an object schema
import { z } from "zod";

const User = z.object({
  username: z.string(),
});

User.parse({ username: "Ludwig" });

// extract the inferred type
type User = z.infer<typeof User>;
// { username: string }

Primitives
import { z } from "zod";

// primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol();

// empty types
z.undefined();
z.null();
z.void(); // accepts undefined

// catch-all types
// allows any value
z.any();
z.unknown();

// never type
// allows no values
z.never();

Coercion for primitives
Zod now provides a more convenient way to coerce primitive values.
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
During the parsing step, the input is passed through the String() function, which is a JavaScript built-in for coercing data into strings.
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
The returned schema is a normal ZodString instance so you can use all string methods.
z.coerce.string().email().min(5);
How coercion works
All primitive types support coercion. Zod coerces all inputs using the built-in constructors: String(input), Number(input), new Date(input), etc.
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
Note ‚Äî¬†Boolean coercion with z.coerce.boolean() may not work how you expect. Any truthy value is coerced to true, and any falsy value is coerced to false.
const schema = z.coerce.boolean(); // Boolean(input)

schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true

schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
For more control over coercion logic, consider using z.preprocess or z.pipe().

Literals
Literal schemas represent a literal type, like "hello world" or 5.
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true);

const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol);

// retrieve literal value
tuna.value; // "tuna"

Currently there is no support for Date literals in Zod. If you have a use case for this feature, please file an issue.


Strings
Zod includes a handful of string-specific validations.
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6

// transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase

// added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS])
z.string().duration(); // ISO 8601 duration
z.string().base64();

Check out validator.js for a bunch of other useful string validation functions that can be used in conjunction with Refinements.

You can customize some common error messages when creating a string schema.
const name = z.string({
  required_error: "Name is required",
  invalid_type_error: "Name must be a string",
});
When using validation methods, you can pass in an additional argument to provide a custom error message.
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
Datetimes
As you may have noticed, Zod string includes a few date/time related validations. These validations are regular expression based, so they are not as strict as a full date/time library. However, they are very convenient for validating user input.
The z.string().datetime() method enforces ISO 8601; default is no timezone offsets and arbitrary sub-second decimal precision.
const datetime = z.string().datetime();

datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
Timezone offsets can be allowed by setting the offset option to true.
const datetime = z.string().datetime({ offset: true });

datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
Allow unqualified (timezone-less) datetimes with the local flag.
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
You can additionally constrain the allowable precision. By default, arbitrary sub-second precision is supported (but optional).
const datetime = z.string().datetime({ precision: 3 });

datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
Dates

Added in Zod 3.23

The z.string().date() method validates strings in the format YYYY-MM-DD.
const date = z.string().date();

date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
Times

Added in Zod 3.23

The z.string().time() method validates strings in the format HH:MM:SS[.s+]. The second can include arbitrary decimal precision. It does not allow timezone offsets of any kind.
const time = z.string().time();

time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision)

time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
You can set the precision option to constrain the allowable decimal precision.
const time = z.string().time({ precision: 3 });

time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
IP addresses
By default .ip() allows both IPv4 and IPv6.
const ip = z.string().ip();

ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass

ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
You can additionally set the IP version.
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
IP ranges (CIDR)
Validate IP address ranges specified with CIDR notation. By default, .cidr() allows both IPv4 and IPv6.
const cidr = z.string().cidr();
cidr.parse("192.168.0.0/24"); // pass
cidr.parse("2001:db8::/32"); // pass
You can specify a version with the version parameter.
const ipv4Cidr = z.string().cidr({ version: "v4" });
ipv4Cidr.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6Cidr = z.string().cidr({ version: "v6" });
ipv6Cidr.parse("192.168.1.1"); // fail

Numbers
You can customize certain error messages when creating a number schema.
const age = z.number({
  required_error: "Age is required",
  invalid_type_error: "Age must be a number",
});
Zod includes a handful of number-specific validations.
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)

z.number().int(); // value must be an integer

z.number().positive(); //     > 0
z.number().nonnegative(); //  >= 0
z.number().negative(); //     < 0
z.number().nonpositive(); //  <= 0

z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)

z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
Optionally, you can pass in a second argument to provide a custom error message.
z.number().lte(5, { message: "thisüëèisüëètooüëèbig" });

BigInts
Zod includes a handful of bigint-specific validations.
z.bigint().gt(5n);
z.bigint().gte(5n); // alias `.min(5n)`
z.bigint().lt(5n);
z.bigint().lte(5n); // alias `.max(5n)`

z.bigint().positive(); // > 0n
z.bigint().nonnegative(); // >= 0n
z.bigint().negative(); // < 0n
z.bigint().nonpositive(); // <= 0n

z.bigint().multipleOf(5n); // Evenly divisible by 5n.

NaNs
You can customize certain error messages when creating a nan schema.
const isNaN = z.nan({
  required_error: "isNaN is required",
  invalid_type_error: "isNaN must be 'not a number'",
});

Booleans
You can customize certain error messages when creating a boolean schema.
const isActive = z.boolean({
  required_error: "isActive is required",
  invalid_type_error: "isActive must be a boolean",
});

Dates
Use z.date() to validate Date instances.
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
You can customize certain error messages when creating a date schema.
const myDateSchema = z.date({
  required_error: "Please select a date and time",
  invalid_type_error: "That's not a date!",
});
Zod provides a handful of date-specific validations.
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
Coercion to Date
Since zod 3.20, use z.coerce.date() to pass the input through new Date(input).
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date

/* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true

/* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
For older zod versions, use z.preprocess like described in this thread.

Zod enums
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
z.enum is a Zod-native way to declare a schema with a fixed set of allowable string values. Pass the array of values directly into z.enum(). Alternatively, use as const to define your enum values as a tuple of strings. See the const assertion docs for details.
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
This is not allowed, since Zod isn't able to infer the exact values of each element.
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
.enum
To get autocompletion with a Zod enum, use the .enum property of your schema:
FishEnum.enum.Salmon; // => autocompletes

FishEnum.enum;
/*
=> {
  Salmon: "Salmon",
  Tuna: "Tuna",
  Trout: "Trout",
}
*/
You can also retrieve the list of options as a tuple with the .options property:
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
.exclude/.extract()
You can create subsets of a Zod enum with the .exclude and .extract methods.
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);

Native enums
Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use z.nativeEnum().
Numeric enums
enum Fruits {
  Apple,
  Banana,
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
String enums
enum Fruits {
  Apple = "apple",
  Banana = "banana",
  Cantaloupe, // you can mix numerical and string enums
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Cantaloupe); // passes
FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse("Cantaloupe"); // fails
Const enums
The .nativeEnum() function works for as const objects as well. ‚ö†Ô∏è as const requires TypeScript 3.4+!
const Fruits = {
  Apple: "apple",
  Banana: "banana",
  Cantaloupe: 3,
} as const;

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3

FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
You can access the underlying object with the .enum property:
FruitEnum.enum.Apple; // "apple"

Optionals
You can make any schema optional with z.optional(). This wraps the schema in a ZodOptional instance and returns the result.
const schema = z.optional(z.string());

schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
For convenience, you can also call the .optional() method on an existing schema.
const user = z.object({
  username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
You can extract the wrapped schema from a ZodOptional instance with .unwrap().
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true

Nullables
Similarly, you can create nullable types with z.nullable().
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
Or use the .nullable() method.
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
Extract the inner schema with .unwrap().
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true

Objects
// all properties are required by default
const Dog = z.object({
  name: z.string(),
  age: z.number(),
});

// extract the inferred type like this
type Dog = z.infer<typeof Dog>;

// equivalent to:
type Dog = {
  name: string;
  age: number;
};
.shape
Use .shape to access the schemas for a particular key.
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
.keyof
Use .keyof to create a ZodEnum schema from the keys of an object schema.
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
.extend
You can add additional fields to an object schema with the .extend method.
const DogWithBreed = Dog.extend({
  breed: z.string(),
});
You can use .extend to overwrite fields! Be careful with this power!
.merge
Equivalent to A.extend(B.shape).
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() });

const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }

If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.

.pick/.omit
Inspired by TypeScript's built-in Pick and Omit utility types, all Zod object schemas have .pick and .omit methods that return a modified version. Consider this Recipe schema:
const Recipe = z.object({
  id: z.string(),
  name: z.string(),
  ingredients: z.array(z.string()),
});
To only keep certain keys, use .pick .
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
To remove certain keys, use .omit .
const NoIDRecipe = Recipe.omit({ id: true });

type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
.partial
Inspired by the built-in TypeScript utility type Partial, the .partial method makes all properties optional.
Starting from this object:
const user = z.object({
  email: z.string(),
  username: z.string(),
});
// { email: string; username: string }
We can create a partial version:
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
You can also specify which properties to make optional:
const optionalEmail = user.partial({
  email: true,
});
/*
{
  email?: string | undefined;
  username: string
}
*/
.deepPartial
The .partial method is shallow ‚Äî it only applies one level deep. There is also a "deep" version:
const user = z.object({
  username: z.string(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  strings: z.array(z.object({ value: z.string() })),
});

const deepPartialUser = user.deepPartial();

/*
{
  username?: string | undefined,
  location?: {
    latitude?: number | undefined;
    longitude?: number | undefined;
  } | undefined,
  strings?: { value?: string}[]
}
*/

Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.

.required
Contrary to the .partial method, the .required method makes all properties required.
Starting from this object:
const user = z
  .object({
    email: z.string(),
    username: z.string(),
  })
  .partial();
// { email?: string | undefined; username?: string | undefined }
We can create a required version:
const requiredUser = user.required();
// { email: string; username: string }
You can also specify which properties to make required:
const requiredEmail = user.required({
  email: true,
});
/*
{
  email: string;
  username?: string | undefined;
}
*/
.passthrough
By default Zod object schemas strip out unrecognized keys during parsing.
const person = z.object({
  name: z.string(),
});

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
Instead, if you want to pass through unknown keys, use .passthrough() .
person.passthrough().parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
.strict
By default Zod object schemas strip out unrecognized keys during parsing. You can disallow unknown keys with .strict() . If there are any unknown keys in the input, Zod will throw an error.
const person = z
  .object({
    name: z.string(),
  })
  .strict();

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => throws ZodError
.strip
You can use the .strip method to reset an object schema to the default behavior (stripping unrecognized keys).
.catchall
You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
const person = z
  .object({
    name: z.string(),
  })
  .catchall(z.number());

person.parse({
  name: "bob dylan",
  validExtraKey: 61, // works fine
});

person.parse({
  name: "bob dylan",
  validExtraKey: false, // fails
});
// => throws ZodError
Using .catchall() obviates .passthrough() , .strip() , or .strict(). All keys are now considered "known".

Arrays
const stringArray = z.array(z.string());

// equivalent
const stringArray = z.string().array();
Be careful with the .array() method. It returns a new ZodArray instance. This means the order in which you call methods matters. For instance:
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
.element
Use .element to access the schema for an element of the array.
stringArray.element; // => string schema
.nonempty
If you want to ensure that an array contains at least one element, use .nonempty().
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]]

nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
You can optionally specify a custom error message:
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({
  message: "Can't be empty!",
});
.min/.max/.length
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
Unlike .nonempty() these methods do not change the inferred type.

Tuples
Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
const athleteSchema = z.tuple([
  z.string(), // name
  z.number(), // jersey number
  z.object({
    pointsScored: z.number(),
  }), // statistics
]);

type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
A variadic ("rest") argument can be added with the .rest method.
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];

Unions
Zod includes a built-in z.union method for composing "OR" types.
const stringOrNumber = z.union([z.string(), z.number()]);

stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
Zod will test the input against each of the "options" in order and return the first value that validates successfully.
For convenience, you can also use the .or method:
const stringOrNumber = z.string().or(z.number());
Optional string validation:
To validate an optional form input, you can union the desired string validation with an empty string literal.
This example validates an input that is optional but needs to contain a valid URL:
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]);

console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false

Discriminated unions
A discriminated union is a union of object schemas that all share a particular key.
type MyUnion =
  | { status: "success"; data: string }
  | { status: "failed"; error: Error };
Such unions can be represented with the z.discriminatedUnion method. This enables faster evaluation, because Zod can check the discriminator key (status in the example above) to determine which schema should be used to parse the input. This makes parsing more efficient and lets Zod report friendlier errors.
With the basic union method, the input is tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing against it, and showing only the issues related to this "option".
const myUnion = z.discriminatedUnion("status", [
  z.object({ status: z.literal("success"), data: z.string() }),
  z.object({ status: z.literal("failed"), error: z.instanceof(Error) }),
]);

myUnion.parse({ status: "success", data: "yippie ki yay" });
You can extract a reference to the array of schemas with the .options property.
myUnion.options; // [ZodObject<...>, ZodObject<...>]
To merge two or more discriminated unions, use .options with destructuring.
const A = z.discriminatedUnion("status", [
  /* options */
]);
const B = z.discriminatedUnion("status", [
  /* options */
]);

const AB = z.discriminatedUnion("status", [...A.options, ...B.options]);

Records
Record schemas are used to validate types such as Record<string, number>. This is particularly useful for storing or caching items by ID.

const User = z.object({ name: z.string() });

const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
The schema and inferred type can be used like so:
const userStore: UserStore = {};

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  name: "Carlotta",
}; // passes

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  whatever: "Ice cream sundae",
}; // TypeError
A note on numerical keys
While z.record(keyType, valueType) is able to accept numerical key types and TypeScript's built-in Record type is Record<KeyType, ValueType>, it's hard to represent the TypeScript type Record<number, any> in Zod.
As it turns out, TypeScript's behavior surrounding [k: number] is a little unintuitive:
const testMap: { [k: number]: string } = {
  1: "one",
};

for (const key in testMap) {
  console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.

Maps
const stringNumberMap = z.map(z.string(), z.number());

type StringNumberMap = z.infer<typeof stringNumberMap>;
// type StringNumberMap = Map<string, number>

Sets
const numberSet = z.set(z.number());
type NumberSet = z.infer<typeof numberSet>;
// type NumberSet = Set<number>
Set schemas can be further constrained with the following utility methods.
z.set(z.string()).nonempty(); // must contain at least one item
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly

Intersections
Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
const Person = z.object({
  name: z.string(),
});

const Employee = z.object({
  role: z.string(),
});

const EmployedPerson = z.intersection(Person, Employee);

// equivalent to:
const EmployedPerson = Person.and(Employee);
Though in many cases, it is recommended to use A.merge(B) to merge two objects. The .merge method returns a new ZodObject instance, whereas A.and(B) returns a less useful ZodIntersection instance that lacks common object methods like pick and omit.
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b);

type c = z.infer<typeof c>; // => number



Recursive types
You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
const baseCategorySchema = z.object({
  name: z.string(),
});

type Category = z.infer<typeof baseCategorySchema> & {
  subcategories: Category[];
};

const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
  subcategories: z.lazy(() => categorySchema.array()),
});

categorySchema.parse({
  name: "People",
  subcategories: [
    {
      name: "Politicians",
      subcategories: [
        {
          name: "Presidents",
          subcategories: [],
        },
      ],
    },
  ],
}); // passes
Thanks to crasite for this example.
ZodType with ZodEffects
When using z.ZodType with z.ZodEffects (
.refine,
.transform,
preprocess,
etc...
), you will need to define the input and output types of the schema. z.ZodType<Output, z.ZodTypeDef, Input>
const isValidId = (id: string): id is `${string}/${string}` =>
  id.split("/").length === 2;

const baseSchema = z.object({
  id: z.string().refine(isValidId),
});

type Input = z.input<typeof baseSchema> & {
  children: Input[];
};

type Output = z.output<typeof baseSchema> & {
  children: Output[];
};

const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({
  children: z.lazy(() => schema.array()),
});
Thanks to marcus13371337 and JoelBeeldi for this example.
JSON type
If you want to validate any JSON value, you can use the snippet below.
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
);

jsonSchema.parse(data);
Thanks to ggoodman for suggesting this.
Cyclical objects
Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop in some cases.

To detect cyclical objects before they cause problems, consider this approach.


Promises
const numberPromise = z.promise(z.number());
"Parsing" works a little differently with promise schemas. Validation happens in two parts:

Zod synchronously checks that the input is an instance of Promise (i.e. an object with .then and .catch methods.).
Zod uses .then to attach an additional validation step onto the existing Promise. You'll have to use .catch on the returned Promise to handle validation failures.

numberPromise.parse("tuna");
// ZodError: Non-Promise type: string

numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number>

const test = async () => {
  await numberPromise.parse(Promise.resolve("tuna"));
  // ZodError: Non-number type: string

  await numberPromise.parse(Promise.resolve(3.14));
  // => 3.14
};


Instanceof
You can use z.instanceof to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
class Test {
  name: string;
}

const TestSchema = z.instanceof(Test);

const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws

Functions
Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
You can create a function schema with z.function(args, returnType) .
const myFunction = z.function();

type myFunction = z.infer<typeof myFunction>;
// => ()=>unknown
Define inputs and outputs.
const myFunction = z
  .function()
  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
  .returns(z.boolean());

type myFunction = z.infer<typeof myFunction>;
// => (arg0: string, arg1: number)=>boolean

Function schemas have an .implement() method which accepts a function and returns a new function that automatically validates its inputs and outputs.
const trimmedLength = z
  .function()
  .args(z.string()) // accepts an arbitrary number of arguments
  .returns(z.number())
  .implement((x) => {
    // TypeScript knows x is a string!
    return x.trim().length;
  });

trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
If you only care about validating inputs, just don't call the .returns() method. The output type will be inferred from the implementation.

You can use the special z.void() option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)

const myFunction = z
  .function()
  .args(z.string())
  .implement((arg) => {
    return [arg.length];
  });

myFunction; // (arg: string)=>number[]
Extract the input and output schemas from a function schema.
myFunction.parameters();
// => ZodTuple<[ZodString, ZodNumber]>

myFunction.returnType();
// => ZodBoolean


Preprocess

Zod now supports primitive coercion without the need for .preprocess(). See the coercion docs for more information.

Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the .transform docs.)
But sometimes you want to apply some transform to the input before parsing happens. A common use case: type coercion. Zod enables this with the z.preprocess().
const castToString = z.preprocess((val) => String(val), z.string());
This returns a ZodEffects instance. ZodEffects is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.

Custom schemas
You can create a Zod schema for any TypeScript type by using z.custom(). This is useful for creating schemas for types that are not supported by Zod out of the box, such as template string literals.
const px = z.custom<`${number}px`>((val) => {
  return typeof val === "string" ? /^\d+px$/.test(val) : false;
});

type px = z.infer<typeof px>; // `${number}px`

px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
If you don't provide a validation function, Zod will allow any value. This can be dangerous!
z.custom<{ arg: string }>(); // performs no validation
You can customize the error message and other options by passing a second argument. This parameter works the same way as the params parameter of .refine.
z.custom<...>((val) => ..., "custom error message");

Schema methods
All Zod schemas contain certain methods.
.parse
.parse(data: unknown): T
Given any Zod schema, you can call its .parse method to check data is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.

IMPORTANT: The value returned by .parse is a deep clone of the variable you passed in.

const stringSchema = z.string();

stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
.parseAsync
.parseAsync(data:unknown): Promise<T>
If you use asynchronous refinements or transforms (more on those later), you'll need to use .parseAsync.
const stringSchema = z.string().refine(async (val) => val.length <= 8);

await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
.safeParse
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
If you don't want Zod to throw errors when validation fails, use .safeParse. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
stringSchema.safeParse(12);
// => { success: false; error: ZodError }

stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
The result is a discriminated union, so you can handle errors very conveniently:
const result = stringSchema.safeParse("billie");
if (!result.success) {
  // handle error then return
  result.error;
} else {
  // do something
  result.data;
}
.safeParseAsync

Alias: .spa

An asynchronous version of safeParse.
await stringSchema.safeParseAsync("billie");
For convenience, this has been aliased to .spa:
await stringSchema.spa("billie");
.refine
.refine(validator: (data:T)=>any, params?: RefineParams)
Zod lets you provide custom validation logic via refinements. (For advanced features like creating multiple issues and customizing error codes, see .superRefine.)
Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
For example, you can define a custom validation check on any Zod schema with .refine :
const myString = z.string().refine((val) => val.length <= 255, {
  message: "String can't be more than 255 characters",
});

‚ö†Ô∏è Refinement functions should not throw. Instead they should return a falsy value to signal failure.

Arguments
As you can see, .refine takes two arguments.

The first is the validation function. This function takes one input (of type T ‚Äî the inferred type of the schema) and returns any. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
The second argument accepts some options. You can use this to customize certain error-handling behavior:

type RefineParams = {
  // override error message
  message?: string;

  // appended to error path
  path?: (string | number)[];

  // params object you can use to customize message
  // in error map
  params?: object;
};
For advanced cases, the second argument can also be a function that returns RefineParams.
const longString = z.string().refine(
  (val) => val.length > 10,
  (val) => ({ message: `${val} is not more than 10 characters` })
);
Customize error path
const passwordForm = z
  .object({
    password: z.string(),
    confirm: z.string(),
  })
  .refine((data) => data.password === data.confirm, {
    message: "Passwords don't match",
    path: ["confirm"], // path of error
  });

passwordForm.parse({ password: "asdf", confirm: "qwer" });
Because you provided a path parameter, the resulting error will be:
ZodError {
  issues: [{
    "code": "custom",
    "path": [ "confirm" ],
    "message": "Passwords don't match"
  }]
}
Asynchronous refinements
Refinements can also be async:
const userId = z.string().refine(async (id) => {
  // verify that ID exists in database
  return true;
});

‚ö†Ô∏è If you use async refinements, you must use the .parseAsync method to parse data! Otherwise Zod will throw an error.

Relationship to transforms
Transforms and refinements can be interleaved:
z.string()
  .transform((val) => val.length)
  .refine((val) => val > 25);

.superRefine
The .refine method is actually syntactic sugar atop a more versatile (and verbose) method called superRefine. Here's an example:
const Strings = z.array(z.string()).superRefine((val, ctx) => {
  if (val.length > 3) {
    ctx.addIssue({
      code: z.ZodIssueCode.too_big,
      maximum: 3,
      type: "array",
      inclusive: true,
      message: "Too many items üò°",
    });
  }

  if (val.length !== new Set(val).size) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: `No duplicates allowed.`,
    });
  }
});
You can add as many issues as you like. If ctx.addIssue is not called during the execution of the function, validation passes.
Normally refinements always create issues with a ZodIssueCode.custom error code, but with superRefine it's possible to throw issues of any ZodIssueCode. Each issue code is described in detail in the Error Handling guide: ERROR_HANDLING.md.
Abort early
By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to abort early to prevent later refinements from being executed. To achieve this, pass the fatal flag to ctx.addIssue and return z.NEVER.
const schema = z.number().superRefine((val, ctx) => {
  if (val < 10) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be >= 10",
      fatal: true,
    });

    return z.NEVER;
  }

  if (val !== 12) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be twelve",
    });
  }
});
Type refinements
If you provide a type predicate to .refine() or .superRefine(), the resulting type will be narrowed down to your predicate's type. This is useful if you are mixing multiple chained refinements and transformations:
const schema = z
  .object({
    first: z.string(),
    second: z.number(),
  })
  .nullable()
  .superRefine((arg, ctx): arg is { first: string; second: number } => {
    if (!arg) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom, // customize your issue
        message: "object should exist",
      });
    }

    return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing
  })
  // here, TS knows that arg is not null
  .refine((arg) => arg.first === "bob", "`first` is not `bob`!");

‚ö†Ô∏è You must use ctx.addIssue() instead of returning a boolean value to indicate whether the validation passes. If ctx.addIssue is not called during the execution of the function, validation passes.

.transform
To transform data after parsing, use the transform method.
const stringToNumber = z.string().transform((val) => val.length);

stringToNumber.parse("string"); // => 6
Chaining order
Note that stringToNumber above is an instance of the ZodEffects subclass. It is NOT an instance of ZodString. If you want to use the built-in methods of ZodString (e.g. .email()) you must apply those methods before any transforms.
const emailToDomain = z
  .string()
  .email()
  .transform((val) => val.split("@")[1]);

emailToDomain.parse("colinhacks@example.com"); // => example.com
Validating during transform
The .transform method can simultaneously validate and transform the value. This is often simpler and less duplicative than chaining transform and refine.
As with .superRefine, the transform function receives a ctx object with an addIssue method that can be used to register validation issues.
const numberInString = z.string().transform((val, ctx) => {
  const parsed = parseInt(val);
  if (isNaN(parsed)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Not a number",
    });

    // This is a special symbol you can use to
    // return early from the transform function.
    // It has type `never` so it does not affect the
    // inferred return type.
    return z.NEVER;
  }
  return parsed;
});
Relationship to refinements
Transforms and refinements can be interleaved. These will be executed in the order they are declared.
const nameToGreeting = z
  .string()
  .transform((val) => val.toUpperCase())
  .refine((val) => val.length > 15)
  .transform((val) => `Hello ${val}`)
  .refine((val) => val.indexOf("!") === -1);
Async transforms
Transforms can also be async.
const IdToUser = z
  .string()
  .uuid()
  .transform(async (id) => {
    return await getUserById(id);
  });

‚ö†Ô∏è If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.

.default
You can use transforms to implement the concept of "default values" in Zod.
const stringWithDefault = z.string().default("tuna");

stringWithDefault.parse(undefined); // => "tuna"
Optionally, you can pass a function into .default that will be re-executed whenever a default value needs to be generated:
const numberWithRandomDefault = z.number().default(Math.random);

numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
Conceptually, this is how Zod processes default values:

If the input is undefined, the default value is returned
Otherwise, the data is parsed using the base schema

.describe
Use .describe() to add a description property to the resulting schema.
const documentedString = z
  .string()
  .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text‚Ä¶
This can be useful for documenting a field, for example in a JSON Schema using a library like zod-to-json-schema).
.catch
Use .catch() to provide a "catch value" to be returned in the event of a parsing error.
const numberWithCatch = z.number().catch(42);

numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
Optionally, you can pass a function into .catch that will be re-executed whenever a default value needs to be generated. A ctx object containing the caught error will be passed into this function.
const numberWithRandomCatch = z.number().catch((ctx) => {
  ctx.error; // the caught ZodError
  return Math.random();
});

numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
Conceptually, this is how Zod processes "catch values":

The data is parsed using the base schema
If the parsing fails, the "catch value" is returned

.optional
A convenience method that returns an optional version of a schema.
const optionalString = z.string().optional(); // string | undefined

// equivalent to
z.optional(z.string());
.nullable
A convenience method that returns a nullable version of a schema.
const nullableString = z.string().nullable(); // string | null

// equivalent to
z.nullable(z.string());
.nullish
A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both undefined and null. Read more about the concept of "nullish" in the TypeScript 3.7 release notes.
const nullishString = z.string().nullish(); // string | null | undefined

// equivalent to
z.string().nullable().optional();
.array
A convenience method that returns an array schema for the given type:
const stringArray = z.string().array(); // string[]

// equivalent to
z.array(z.string());
.promise
A convenience method for promise types:
const stringPromise = z.string().promise(); // Promise<string>

// equivalent to
z.promise(z.string());
.or
A convenience method for union types.
const stringOrNumber = z.string().or(z.number()); // string | number

// equivalent to
z.union([z.string(), z.number()]);
.and
A convenience method for creating intersection types.
const nameAndAge = z
  .object({ name: z.string() })
  .and(z.object({ age: z.number() })); // { name: string } & { age: number }

// equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
.brand
.brand<T>() => ZodBranded<this, B>
TypeScript's type system is structural, which means that any two types that are structurally equivalent are considered the same.
type Cat = { name: string };
type Dog = { name: string };

const petCat = (cat: Cat) => {};
const fido: Dog = { name: "fido" };
petCat(fido); // works fine
In some cases, its can be desirable to simulate nominal typing inside TypeScript. For instance, you may wish to write a function that only accepts an input that has been validated by Zod. This can be achieved with branded types (AKA opaque types).
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;

const petCat = (cat: Cat) => {};

// this works
const simba = Cat.parse({ name: "simba" });
petCat(simba);

// this doesn't
petCat({ name: "fido" });
Under the hood, this works by attaching a "brand" to the inferred type using an intersection type. This way, plain/unbranded data structures are no longer assignable to the inferred type of the schema.
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;
// {name: string} & {[symbol]: "Cat"}
Note that branded types do not affect the runtime result of .parse. It is a static-only construct.
.readonly
.readonly() => ZodReadonly<this>
This method returns a ZodReadonly schema instance that parses the input using the base schema, then calls Object.freeze() on the result. The inferred type is also marked as readonly.
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}>

const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
The inferred type uses TypeScript's built-in readonly types when relevant.
z.array(z.string()).readonly();
// readonly string[]

z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number]

z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date>

z.set(z.string()).readonly();
// ReadonlySet<string>
.pipe
Schemas can be chained into validation "pipelines". It's useful for easily validating the result after a .transform():
z.string()
  .transform((val) => val.length)
  .pipe(z.number().min(5));
The .pipe() method returns a ZodPipeline instance.

Guides and concepts
Type inference
You can extract the TypeScript type of any schema with z.infer<typeof mySchema> .
const A = z.string();
type A = z.infer<typeof A>; // string

const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
What about transforms?
In reality each Zod schema internally tracks two types: an input and an output. For most schemas (e.g. z.string()) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance z.string().transform(val => val.length) has an input of string and an output of number.
You can separately extract the input and output types like so:
const stringToNumber = z.string().transform((val) => val.length);

// ‚ö†Ô∏è Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
Writing generic functions
With TypeScript generics, you can write reusable functions that accept Zod schemas as parameters. This enables you to create custom validation logic, schema transformations, and more, while maintaining type safety and inference.
When attempting to write a function that accepts a Zod schema as an input, it's tempting to try something like this:
function inferSchema<T>(schema: z.ZodType<T>) {
  return schema;
}
This approach is incorrect, and limits TypeScript's ability to properly infer the argument. No matter what you pass in, the type of schema will be an instance of ZodType.
inferSchema(z.string());
// => ZodType<string>
This approach loses type information, namely which subclass the input actually is (in this case, ZodString). That means you can't call any string-specific methods like .min() on the result of inferSchema.
A better approach is to infer the schema as a whole instead of merely its inferred type. You can do this with a utility type called z.ZodTypeAny.
function inferSchema<T extends z.ZodTypeAny>(schema: T) {
  return schema;
}

inferSchema(z.string());
// => ZodString

ZodTypeAny is just a shorthand for ZodType<any, any, any>, a type that is broad enough to match any Zod schema.

The Result is now fully and properly typed, and the type system can infer the specific subclass of the schema.
Inferring the inferred type
If you follow the best practice of using z.ZodTypeAny as the generic parameter for your schema, you may encounter issues with the parsed data being typed as any instead of the inferred type of the schema.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data);
}

parseData("sup", z.string());
// => any
Due to how TypeScript inference works, it is treating schema like a ZodTypeAny instead of the inferred type. You can fix this with a type cast using z.infer.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data) as z.infer<T>;
  //                        ^^^^^^^^^^^^^^ <- add this
}

parseData("sup", z.string());
// => string
Constraining allowable inputs
The ZodType class has three generic parameters.
class ZodType<
  Output = any,
  Def extends ZodTypeDef = ZodTypeDef,
  Input = Output
> { ... }
By constraining these in your generic input, you can limit what schemas are allowable as inputs to your function:
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) {
  return schema.optional();
}

makeSchemaOptional(z.string());
// works fine

makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
Error handling
Zod provides a subclass of Error called ZodError. ZodErrors contain an issues array containing detailed information about the validation problems.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  result.error.issues;
  /* [
      {
        "code": "invalid_type",
        "expected": "string",
        "received": "number",
        "path": [ "name" ],
        "message": "Expected string, received number"
      }
  ] */
}

For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: ERROR_HANDLING.md

Zod's error reporting emphasizes completeness and correctness. If you are looking to present a useful error message to the end user, you should either override Zod's error messages using an error map (described in detail in the Error Handling guide) or use a third-party library like zod-validation-error
Error formatting
You can use the .format() method to convert this error into a nested object.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  const formatted = result.error.format();
  /* {
    name: { _errors: [ 'Expected string, received number' ] }
  } */

  formatted.name?._errors;
  // => ["Expected string, received number"]
}

Comparison
There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.



Joi
https://github.com/hapijs/joi
Doesn't support static type inference üòï
Yup
https://github.com/jquense/yup
Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.

Supports casting and transforms
All object fields are optional by default



Missing promise schemas
Missing function schemas
Missing union & intersection schemas


io-ts
https://github.com/gcanti/io-ts
io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
import * as t from "io-ts";

const A = t.type({
  foo: t.string,
});

const B = t.partial({
  bar: t.number,
});

const C = t.intersection([A, B]);

type C = t.TypeOf<typeof C>;
// returns { foo: string; bar?: number | undefined }
You must define the required and optional props in separate object validators, pass the optionals through t.partial (which marks all properties as optional), then combine them with t.intersection .
Consider the equivalent in Zod:
const C = z.object({
  foo: z.string(),
  bar: z.number().optional(),
});

type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
This more declarative API makes schema definitions vastly more concise.
io-ts also requires the use of gcanti's functional programming library fp-ts to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on fp-ts necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the fp-ts nomenclature to use the library.

Supports codecs with serialization & deserialization transforms
Supports branded types
Supports advanced functional programming, higher-kinded types, fp-ts compatibility
Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
Missing nonempty arrays with proper typing ([T, ...T[]])
Missing promise schemas
Missing function schemas

Runtypes
https://github.com/runtypes/runtypes
Runtypes is focused on ergonomics, with good type inference support.

Supports "pattern matching": computed properties that distribute over unions
Supports branded types
Supports template literals
Supports conformance to predefined static types
Missing object methods: (deepPartial, merge)
Missing promise schemas
Missing error customization

Ow
https://github.com/sindresorhus/ow
Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. int32Array , see full list in their README).
If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.

Changelog
View the changelog at CHANGELOG.md\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        
      
      
        TypeScript-first schema validation with static type inference
      
      
        
        
          zod.dev
        
      

    
      License
  
    
      
     MIT license
    
  


    
        
          
          37.4k
          stars
        
          
          1.4k
          forks
        
          
          Branches
        
          
          Tags
        
          
          Activity
    

      
        
            
            
          Star


        
        
                    Notifications
    You must be signed in to change notification settings

        
        
          

        
      
  




          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  colinhacks/zod
  
    

  
        












  
  
     ¬†mainBranchesTagsGo to fileCodeFolders and filesNameNameLast commit messageLast commit dateLatest commit¬†History2,144 Commits.devcontainer.devcontainer¬†¬†.github/workflows.github/workflows¬†¬†.husky.husky¬†¬†.vscode.vscode¬†¬†blogblog¬†¬†configsconfigs¬†¬†deno/libdeno/lib¬†¬†packages/docspackages/docs¬†¬†srcsrc¬†¬†staticstatic¬†¬†.dependency-cruiser.js.dependency-cruiser.js¬†¬†.editorconfig.editorconfig¬†¬†.eslintignore.eslintignore¬†¬†.eslintrc.js.eslintrc.js¬†¬†.gitignore.gitignore¬†¬†.nojekyll.nojekyll¬†¬†.prettierrc.yaml.prettierrc.yaml¬†¬†CHANGELOG.mdCHANGELOG.md¬†¬†CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md¬†¬†CONTRIBUTING.mdCONTRIBUTING.md¬†¬†ERROR_HANDLING.mdERROR_HANDLING.md¬†¬†FUNDING.jsonFUNDING.json¬†¬†FUNDING.ymlFUNDING.yml¬†¬†LICENSELICENSE¬†¬†MIGRATION.mdMIGRATION.md¬†¬†README.mdREADME.md¬†¬†README_KO.mdREADME_KO.md¬†¬†README_ZH.mdREADME_ZH.md¬†¬†_redirects_redirects¬†¬†deno-build.mjsdeno-build.mjs¬†¬†index.d.tsindex.d.ts¬†¬†index.htmlindex.html¬†¬†jest.config.jsonjest.config.json¬†¬†logo.svglogo.svg¬†¬†package.jsonpackage.json¬†¬†playground.tsplayground.ts¬†¬†robots.txtrobots.txt¬†¬†tea.yamltea.yaml¬†¬†tsconfig.jsontsconfig.json¬†¬†yarn.lockyarn.lock¬†¬†View all filesRepository files navigationREADMECode of conductMIT license
  
  Zod
  
  zod.dev
  
    TypeScript-first schema validation with static type inference
  









  Website
  ¬†¬†‚Ä¢¬†¬†
  Discord
  ¬†¬†‚Ä¢¬†¬†
  ùïè
  ¬†¬†‚Ä¢¬†¬†
  Bluesky
  



  Zod 4 is now in beta!
  
  Read the announcement üëâ



Featured sponsor: Fern

  
    
      
      
    
  
  
  Learn more about featured sponsorships




Table of contents

These docs have been translated into Chinese and Korean.


Table of contents
Introduction

Sponsors

Platinum
Gold
Silver
Bronze
Copper


Ecosystem

Resources
API libraries
Form integrations
Zod to X
X to Zod
Mocking
Powered by Zod
Utilities for Zod




Installation

Requirements
From npm


Basic usage
Primitives
Coercion for primitives
Literals
Strings

Datetimes
Dates
Times
IP addresses
IP ranges


Numbers
BigInts
NaNs
Booleans
Dates
Zod enums
Native enums
Optionals
Nullables
Objects

.shape
.keyof
.extend
.merge
.pick/.omit
.partial
.deepPartial
.required
.passthrough
.strict
.strip
.catchall


Arrays

.element
.nonempty
.min/.max/.length


Tuples
Unions
Discriminated unions
Records

Record key type


Maps
Sets
Intersections
Recursive types

ZodType with ZodEffects
JSON type
Cyclical objects


Promises
Instanceof
Functions
Preprocess
Custom schemas
Schema methods

.parse
.parseAsync
.safeParse
.safeParseAsync
.refine

Arguments
Customize error path
Asynchronous refinements
Relationship to transforms


.superRefine

Abort early
Type refinements


.transform

Chaining order
Validating during transform
Relationship to refinements
Async transforms


.default
.describe
.catch
.optional
.nullable
.nullish
.array
.promise
.or
.and
.brand
.readonly
.pipe

You can use .pipe() to fix common issues with z.coerce.




Guides and concepts

Type inference
Writing generic functions

Constraining allowable inputs


Error handling
Error formatting


Comparison

Joi
Yup
io-ts
Runtypes
Ow


Changelog


Introduction
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.
Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
Some other great aspects:

Zero dependencies
Works in Node.js and all modern browsers
Tiny: 8kb minified + zipped
Immutable: methods (e.g. .optional()) return a new instance
Concise, chainable interface
Functional approach: parse, don't validate
Works with plain JavaScript too! You don't need to use TypeScript.


Sponsors
Sponsorship at any level is appreciated and encouraged. If you built a paid product using Zod, consider one of the corporate tiers.

Platinum

  
    
      
      
      
        
          
          
        
      
         
      Cut code review time & bugs in half
      
      coderabbit.ai
      
      
    
  


Gold

  
    
      
      
      
        
          
          
        
      
         
      The API platform for sending notifications
      
      courier.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      Generate better SDKs for your APIs
      
      liblab.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Serverless Postgres ‚Äî Ship faster
      
      neon.tech
      
      
    
    
      
      
      
        
          
          
        
      
         
      Build AI apps and workflows with Retool AI
      
      retool.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Generate best-in-class SDKs
      
      stainless.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      SDKs & Terraform providers for your API
      
      speakeasy.com
      
      
    
  


Silver

  
    
      
      
      Nitric
    
    
      
      
      PropelAuth
    
    
      
      
      Cerbos
    
    
      
      
      Scalar
    
    
    
      
      
      Trigger.dev
    
    
      
      
      Transloadit
    
    
      
      
      Infisical
    
    
      
      
      Whop
    
    
    
      
      
      CryptoJobsList
    
    
      
      
      Plain.
    
    
      
      
      Inngest
    
    
      
      
      Storyblok
    
    
    
      
      
      Mux
    
    
      
      
      Cybozu
    
  


Bronze

  
    
      
        
          
          
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
  


Ecosystem
There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it on Twitter or start a Discussion. I'll add it below and tweet it out.
Resources

Total TypeScript Zod Tutorial by @mattpocockuk
Fixing TypeScript's Blindspot: Runtime Typechecking by @jherr

API libraries

tRPC: Build end-to-end typesafe APIs without GraphQL.
@anatine/zod-nestjs: Helper methods for using Zod in a NestJS project.
zod-endpoints: Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
zhttp: An OpenAPI compatible, strictly typed http library with Zod input and response validation.
domain-functions: Decouple your business logic from your framework using composable functions. With first-class type inference from end to end powered by Zod schemas.
@zodios/core: A typescript API client with runtime and compile time validation backed by axios and zod.
express-zod-api: Build Express-based APIs with I/O schema validation and custom middlewares.
tapiduck: End-to-end typesafe JSON APIs with Zod and Express; a bit like tRPC, but simpler.
koa-zod-router: Create typesafe routes in Koa with I/O validation using Zod.
zod-sockets: Zod-powered Socket.IO microframework with I/O validation and built-in AsyncAPI specs
oas-tszod-gen: Client SDK code generator to convert OpenApi v3 specifications into TS endpoint caller functions with Zod types.
GQLoom: Weave GraphQL schema and resolvers using Zod.
oRPC: Typesafe APIs Made Simple

Form integrations

react-hook-form: A first-party Zod resolver for React Hook Form.
TanStack Form: Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit
zod-validation-error: Generate user-friendly error messages from ZodErrors.
zod-formik-adapter: A community-maintained Formik adapter for Zod.
react-zorm: Standalone <form> generation and validation for React using Zod.
zodix: Zod utilities for FormData and URLSearchParams in Remix loaders and actions.
conform: A typesafe form validation library for progressive enhancement of HTML forms. Works with Remix and Next.js.
remix-params-helper: Simplify integration of Zod with standard URLSearchParams and FormData for Remix apps.
formik-validator-zod: Formik-compliant validator library that simplifies using Zod with Formik.
zod-i18n-map: Useful for translating Zod error messages.
@modular-forms/solid: Modular form library for SolidJS that supports Zod for validation.
houseform: A React form library that uses Zod for validation.
sveltekit-superforms: Supercharged form library for SvelteKit with Zod validation.
mobx-zod-form: Data-first form builder based on MobX & Zod.
@vee-validate/zod: Form library for Vue.js with Zod schema validation.
zod-form-renderer: Auto-infer form fields from zod schema and render them with react-hook-form with E2E type safety.
antd-zod: Zod adapter for Ant Design form fields validation.
frrm: Tiny 0.5kb Zod-based, HTML form abstraction that goes brr.

Zod to X

zod-to-ts: Generate TypeScript definitions from Zod schemas.
zod-to-json-schema: Convert your Zod schemas into JSON Schemas.
@anatine/zod-openapi: Converts a Zod schema to an OpenAPI v3.x SchemaObject.
zod-fast-check: Generate fast-check arbitraries from Zod schemas.
zod-dto: Generate Nest.js DTOs from a Zod schema.
fastify-type-provider-zod: Create Fastify type providers from Zod schemas.
zod-to-openapi: Generate full OpenAPI (Swagger) docs from Zod, including schemas, endpoints & parameters.
nestjs-graphql-zod: Generates NestJS GraphQL model classes from Zod schemas. Provides GraphQL method decorators working with Zod schemas.
zod-openapi: Create full OpenAPI v3.x documentation from Zod schemas.
fastify-zod-openapi: Fastify type provider, validation, serialization and @fastify/swagger support for Zod schemas.
typeschema: Universal adapter for schema validation.
zodex: (De)serialization for zod schemas

X to Zod

ts-to-zod: Convert TypeScript definitions into Zod schemas.
@runtyping/zod: Generate Zod from static types & JSON schema.
json-schema-to-zod: Convert your JSON Schemas into Zod schemas. Live demo.
json-to-zod: Convert JSON objects into Zod schemas. Live demo.
graphql-codegen-typescript-validation-schema: GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema.
zod-prisma: Generate Zod schemas from your Prisma schema.
Supervillain: Generate Zod schemas from your Go structs.
prisma-zod-generator: Emit Zod schemas from your Prisma schema.
drizzle-zod: Emit Zod schemas from your Drizzle schema.
prisma-trpc-generator: Emit fully implemented tRPC routers and their validation schemas using Zod.
zod-prisma-types Create Zod types from your Prisma models.
quicktype: Convert JSON objects and JSON schemas into Zod schemas.
@sanity-typed/zod: Generate Zod Schemas from Sanity Schemas.
java-to-zod: Convert POJOs to Zod schemas
Orval: Generate Zod schemas from OpenAPI schemas
Kubb: Generate SDKs and Zod schemas from your OpenAPI schemas

Mocking

@anatine/zod-mock: Generate mock data from a Zod schema. Powered by faker.js.
zod-mocking: Generate mock data from your Zod schemas.
zod-fixture: Use your zod schemas to automate the generation of non-relevant test fixtures in a deterministic way.
zocker: Generate plausible mock-data from your schemas.
zodock Generate mock data based on Zod schemas.
zod-schema-faker Generates mock data from Zod schemas. Powered by @faker-js/faker and randexp.js

Powered by Zod

freerstore: Firestore cost optimizer.
slonik: Node.js Postgres client with strong Zod integration.
schemql: Enhances your SQL workflow by combining raw SQL with targeted type safety and schema validation.
soly: Create CLI applications with zod.
pastel: Create CLI applications with react, zod, and ink.
zod-xlsx: A xlsx based resource validator using Zod schemas.
znv: Type-safe environment parsing and validation for Node.js with Zod schemas.
zod-config: Load configurations across multiple sources with flexible adapters, ensuring type safety with Zod.
unplugin-environment: A plugin for loading enviroment variables safely with schema validation, simple with virtual module, type-safe with intellisense, and better DX üî• üöÄ üë∑. Powered by Zod.
zod-struct: Create runtime-checked structs with Zod.
zod-csv: Validation helpers for zod for parsing CSV data.
fullproduct.dev: Universal Expo + Next.js App Starter that uses Zod schemas as the single source of truth to keep generated MDX docs, GraphQL, database models, forms, and fetcher functions in sync.

Utilities for Zod

zod_utilz: Framework agnostic utilities for Zod.
zod-playground: A tool for learning and testing Zod schema validation functionalities. Link.
zod-sandbox: Controlled environment for testing zod schemas. Live demo.
zod-dev: Conditionally disables Zod runtime parsing in production.
zod-accelerator: Accelerates Zod's throughput up to ~100x.


Installation
Requirements


TypeScript 4.5+!


You must enable strict mode in your tsconfig.json. This is a best practice for all TypeScript projects.
// tsconfig.json
{
  // ...
  "compilerOptions": {
    // ...
    "strict": true
  }
}


From npm
npm install zod       # npm
deno add npm:zod      # deno
yarn add zod          # yarn
bun add zod           # bun
pnpm add zod          # pnpm
Zod also publishes a canary version on every commit. To install the canary:
npm install zod@canary       # npm
deno add npm:zod@canary      # deno
yarn add zod@canary          # yarn
bun add zod@canary           # bun
pnpm add zod@canary          # pnpm

The rest of this README assumes you are using npm and importing directly from the "zod" package.


Basic usage
Creating a simple string schema
import { z } from "zod";

// creating a schema for strings
const mySchema = z.string();

// parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError

// "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
Creating an object schema
import { z } from "zod";

const User = z.object({
  username: z.string(),
});

User.parse({ username: "Ludwig" });

// extract the inferred type
type User = z.infer<typeof User>;
// { username: string }

Primitives
import { z } from "zod";

// primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol();

// empty types
z.undefined();
z.null();
z.void(); // accepts undefined

// catch-all types
// allows any value
z.any();
z.unknown();

// never type
// allows no values
z.never();

Coercion for primitives
Zod now provides a more convenient way to coerce primitive values.
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
During the parsing step, the input is passed through the String() function, which is a JavaScript built-in for coercing data into strings.
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
The returned schema is a normal ZodString instance so you can use all string methods.
z.coerce.string().email().min(5);
How coercion works
All primitive types support coercion. Zod coerces all inputs using the built-in constructors: String(input), Number(input), new Date(input), etc.
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
Note ‚Äî¬†Boolean coercion with z.coerce.boolean() may not work how you expect. Any truthy value is coerced to true, and any falsy value is coerced to false.
const schema = z.coerce.boolean(); // Boolean(input)

schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true

schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
For more control over coercion logic, consider using z.preprocess or z.pipe().

Literals
Literal schemas represent a literal type, like "hello world" or 5.
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true);

const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol);

// retrieve literal value
tuna.value; // "tuna"

Currently there is no support for Date literals in Zod. If you have a use case for this feature, please file an issue.


Strings
Zod includes a handful of string-specific validations.
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6

// transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase

// added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS])
z.string().duration(); // ISO 8601 duration
z.string().base64();

Check out validator.js for a bunch of other useful string validation functions that can be used in conjunction with Refinements.

You can customize some common error messages when creating a string schema.
const name = z.string({
  required_error: "Name is required",
  invalid_type_error: "Name must be a string",
});
When using validation methods, you can pass in an additional argument to provide a custom error message.
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
Datetimes
As you may have noticed, Zod string includes a few date/time related validations. These validations are regular expression based, so they are not as strict as a full date/time library. However, they are very convenient for validating user input.
The z.string().datetime() method enforces ISO 8601; default is no timezone offsets and arbitrary sub-second decimal precision.
const datetime = z.string().datetime();

datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
Timezone offsets can be allowed by setting the offset option to true.
const datetime = z.string().datetime({ offset: true });

datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
Allow unqualified (timezone-less) datetimes with the local flag.
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
You can additionally constrain the allowable precision. By default, arbitrary sub-second precision is supported (but optional).
const datetime = z.string().datetime({ precision: 3 });

datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
Dates

Added in Zod 3.23

The z.string().date() method validates strings in the format YYYY-MM-DD.
const date = z.string().date();

date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
Times

Added in Zod 3.23

The z.string().time() method validates strings in the format HH:MM:SS[.s+]. The second can include arbitrary decimal precision. It does not allow timezone offsets of any kind.
const time = z.string().time();

time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision)

time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
You can set the precision option to constrain the allowable decimal precision.
const time = z.string().time({ precision: 3 });

time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
IP addresses
By default .ip() allows both IPv4 and IPv6.
const ip = z.string().ip();

ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass

ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
You can additionally set the IP version.
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
IP ranges (CIDR)
Validate IP address ranges specified with CIDR notation. By default, .cidr() allows both IPv4 and IPv6.
const cidr = z.string().cidr();
cidr.parse("192.168.0.0/24"); // pass
cidr.parse("2001:db8::/32"); // pass
You can specify a version with the version parameter.
const ipv4Cidr = z.string().cidr({ version: "v4" });
ipv4Cidr.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6Cidr = z.string().cidr({ version: "v6" });
ipv6Cidr.parse("192.168.1.1"); // fail

Numbers
You can customize certain error messages when creating a number schema.
const age = z.number({
  required_error: "Age is required",
  invalid_type_error: "Age must be a number",
});
Zod includes a handful of number-specific validations.
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)

z.number().int(); // value must be an integer

z.number().positive(); //     > 0
z.number().nonnegative(); //  >= 0
z.number().negative(); //     < 0
z.number().nonpositive(); //  <= 0

z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)

z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
Optionally, you can pass in a second argument to provide a custom error message.
z.number().lte(5, { message: "thisüëèisüëètooüëèbig" });

BigInts
Zod includes a handful of bigint-specific validations.
z.bigint().gt(5n);
z.bigint().gte(5n); // alias `.min(5n)`
z.bigint().lt(5n);
z.bigint().lte(5n); // alias `.max(5n)`

z.bigint().positive(); // > 0n
z.bigint().nonnegative(); // >= 0n
z.bigint().negative(); // < 0n
z.bigint().nonpositive(); // <= 0n

z.bigint().multipleOf(5n); // Evenly divisible by 5n.

NaNs
You can customize certain error messages when creating a nan schema.
const isNaN = z.nan({
  required_error: "isNaN is required",
  invalid_type_error: "isNaN must be 'not a number'",
});

Booleans
You can customize certain error messages when creating a boolean schema.
const isActive = z.boolean({
  required_error: "isActive is required",
  invalid_type_error: "isActive must be a boolean",
});

Dates
Use z.date() to validate Date instances.
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
You can customize certain error messages when creating a date schema.
const myDateSchema = z.date({
  required_error: "Please select a date and time",
  invalid_type_error: "That's not a date!",
});
Zod provides a handful of date-specific validations.
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
Coercion to Date
Since zod 3.20, use z.coerce.date() to pass the input through new Date(input).
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date

/* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true

/* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
For older zod versions, use z.preprocess like described in this thread.

Zod enums
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
z.enum is a Zod-native way to declare a schema with a fixed set of allowable string values. Pass the array of values directly into z.enum(). Alternatively, use as const to define your enum values as a tuple of strings. See the const assertion docs for details.
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
This is not allowed, since Zod isn't able to infer the exact values of each element.
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
.enum
To get autocompletion with a Zod enum, use the .enum property of your schema:
FishEnum.enum.Salmon; // => autocompletes

FishEnum.enum;
/*
=> {
  Salmon: "Salmon",
  Tuna: "Tuna",
  Trout: "Trout",
}
*/
You can also retrieve the list of options as a tuple with the .options property:
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
.exclude/.extract()
You can create subsets of a Zod enum with the .exclude and .extract methods.
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);

Native enums
Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use z.nativeEnum().
Numeric enums
enum Fruits {
  Apple,
  Banana,
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
String enums
enum Fruits {
  Apple = "apple",
  Banana = "banana",
  Cantaloupe, // you can mix numerical and string enums
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Cantaloupe); // passes
FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse("Cantaloupe"); // fails
Const enums
The .nativeEnum() function works for as const objects as well. ‚ö†Ô∏è as const requires TypeScript 3.4+!
const Fruits = {
  Apple: "apple",
  Banana: "banana",
  Cantaloupe: 3,
} as const;

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3

FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
You can access the underlying object with the .enum property:
FruitEnum.enum.Apple; // "apple"

Optionals
You can make any schema optional with z.optional(). This wraps the schema in a ZodOptional instance and returns the result.
const schema = z.optional(z.string());

schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
For convenience, you can also call the .optional() method on an existing schema.
const user = z.object({
  username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
You can extract the wrapped schema from a ZodOptional instance with .unwrap().
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true

Nullables
Similarly, you can create nullable types with z.nullable().
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
Or use the .nullable() method.
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
Extract the inner schema with .unwrap().
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true

Objects
// all properties are required by default
const Dog = z.object({
  name: z.string(),
  age: z.number(),
});

// extract the inferred type like this
type Dog = z.infer<typeof Dog>;

// equivalent to:
type Dog = {
  name: string;
  age: number;
};
.shape
Use .shape to access the schemas for a particular key.
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
.keyof
Use .keyof to create a ZodEnum schema from the keys of an object schema.
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
.extend
You can add additional fields to an object schema with the .extend method.
const DogWithBreed = Dog.extend({
  breed: z.string(),
});
You can use .extend to overwrite fields! Be careful with this power!
.merge
Equivalent to A.extend(B.shape).
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() });

const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }

If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.

.pick/.omit
Inspired by TypeScript's built-in Pick and Omit utility types, all Zod object schemas have .pick and .omit methods that return a modified version. Consider this Recipe schema:
const Recipe = z.object({
  id: z.string(),
  name: z.string(),
  ingredients: z.array(z.string()),
});
To only keep certain keys, use .pick .
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
To remove certain keys, use .omit .
const NoIDRecipe = Recipe.omit({ id: true });

type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
.partial
Inspired by the built-in TypeScript utility type Partial, the .partial method makes all properties optional.
Starting from this object:
const user = z.object({
  email: z.string(),
  username: z.string(),
});
// { email: string; username: string }
We can create a partial version:
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
You can also specify which properties to make optional:
const optionalEmail = user.partial({
  email: true,
});
/*
{
  email?: string | undefined;
  username: string
}
*/
.deepPartial
The .partial method is shallow ‚Äî it only applies one level deep. There is also a "deep" version:
const user = z.object({
  username: z.string(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  strings: z.array(z.object({ value: z.string() })),
});

const deepPartialUser = user.deepPartial();

/*
{
  username?: string | undefined,
  location?: {
    latitude?: number | undefined;
    longitude?: number | undefined;
  } | undefined,
  strings?: { value?: string}[]
}
*/

Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.

.required
Contrary to the .partial method, the .required method makes all properties required.
Starting from this object:
const user = z
  .object({
    email: z.string(),
    username: z.string(),
  })
  .partial();
// { email?: string | undefined; username?: string | undefined }
We can create a required version:
const requiredUser = user.required();
// { email: string; username: string }
You can also specify which properties to make required:
const requiredEmail = user.required({
  email: true,
});
/*
{
  email: string;
  username?: string | undefined;
}
*/
.passthrough
By default Zod object schemas strip out unrecognized keys during parsing.
const person = z.object({
  name: z.string(),
});

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
Instead, if you want to pass through unknown keys, use .passthrough() .
person.passthrough().parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
.strict
By default Zod object schemas strip out unrecognized keys during parsing. You can disallow unknown keys with .strict() . If there are any unknown keys in the input, Zod will throw an error.
const person = z
  .object({
    name: z.string(),
  })
  .strict();

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => throws ZodError
.strip
You can use the .strip method to reset an object schema to the default behavior (stripping unrecognized keys).
.catchall
You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
const person = z
  .object({
    name: z.string(),
  })
  .catchall(z.number());

person.parse({
  name: "bob dylan",
  validExtraKey: 61, // works fine
});

person.parse({
  name: "bob dylan",
  validExtraKey: false, // fails
});
// => throws ZodError
Using .catchall() obviates .passthrough() , .strip() , or .strict(). All keys are now considered "known".

Arrays
const stringArray = z.array(z.string());

// equivalent
const stringArray = z.string().array();
Be careful with the .array() method. It returns a new ZodArray instance. This means the order in which you call methods matters. For instance:
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
.element
Use .element to access the schema for an element of the array.
stringArray.element; // => string schema
.nonempty
If you want to ensure that an array contains at least one element, use .nonempty().
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]]

nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
You can optionally specify a custom error message:
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({
  message: "Can't be empty!",
});
.min/.max/.length
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
Unlike .nonempty() these methods do not change the inferred type.

Tuples
Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
const athleteSchema = z.tuple([
  z.string(), // name
  z.number(), // jersey number
  z.object({
    pointsScored: z.number(),
  }), // statistics
]);

type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
A variadic ("rest") argument can be added with the .rest method.
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];

Unions
Zod includes a built-in z.union method for composing "OR" types.
const stringOrNumber = z.union([z.string(), z.number()]);

stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
Zod will test the input against each of the "options" in order and return the first value that validates successfully.
For convenience, you can also use the .or method:
const stringOrNumber = z.string().or(z.number());
Optional string validation:
To validate an optional form input, you can union the desired string validation with an empty string literal.
This example validates an input that is optional but needs to contain a valid URL:
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]);

console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false

Discriminated unions
A discriminated union is a union of object schemas that all share a particular key.
type MyUnion =
  | { status: "success"; data: string }
  | { status: "failed"; error: Error };
Such unions can be represented with the z.discriminatedUnion method. This enables faster evaluation, because Zod can check the discriminator key (status in the example above) to determine which schema should be used to parse the input. This makes parsing more efficient and lets Zod report friendlier errors.
With the basic union method, the input is tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing against it, and showing only the issues related to this "option".
const myUnion = z.discriminatedUnion("status", [
  z.object({ status: z.literal("success"), data: z.string() }),
  z.object({ status: z.literal("failed"), error: z.instanceof(Error) }),
]);

myUnion.parse({ status: "success", data: "yippie ki yay" });
You can extract a reference to the array of schemas with the .options property.
myUnion.options; // [ZodObject<...>, ZodObject<...>]
To merge two or more discriminated unions, use .options with destructuring.
const A = z.discriminatedUnion("status", [
  /* options */
]);
const B = z.discriminatedUnion("status", [
  /* options */
]);

const AB = z.discriminatedUnion("status", [...A.options, ...B.options]);

Records
Record schemas are used to validate types such as Record<string, number>. This is particularly useful for storing or caching items by ID.

const User = z.object({ name: z.string() });

const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
The schema and inferred type can be used like so:
const userStore: UserStore = {};

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  name: "Carlotta",
}; // passes

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  whatever: "Ice cream sundae",
}; // TypeError
A note on numerical keys
While z.record(keyType, valueType) is able to accept numerical key types and TypeScript's built-in Record type is Record<KeyType, ValueType>, it's hard to represent the TypeScript type Record<number, any> in Zod.
As it turns out, TypeScript's behavior surrounding [k: number] is a little unintuitive:
const testMap: { [k: number]: string } = {
  1: "one",
};

for (const key in testMap) {
  console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.

Maps
const stringNumberMap = z.map(z.string(), z.number());

type StringNumberMap = z.infer<typeof stringNumberMap>;
// type StringNumberMap = Map<string, number>

Sets
const numberSet = z.set(z.number());
type NumberSet = z.infer<typeof numberSet>;
// type NumberSet = Set<number>
Set schemas can be further constrained with the following utility methods.
z.set(z.string()).nonempty(); // must contain at least one item
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly

Intersections
Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
const Person = z.object({
  name: z.string(),
});

const Employee = z.object({
  role: z.string(),
});

const EmployedPerson = z.intersection(Person, Employee);

// equivalent to:
const EmployedPerson = Person.and(Employee);
Though in many cases, it is recommended to use A.merge(B) to merge two objects. The .merge method returns a new ZodObject instance, whereas A.and(B) returns a less useful ZodIntersection instance that lacks common object methods like pick and omit.
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b);

type c = z.infer<typeof c>; // => number



Recursive types
You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
const baseCategorySchema = z.object({
  name: z.string(),
});

type Category = z.infer<typeof baseCategorySchema> & {
  subcategories: Category[];
};

const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
  subcategories: z.lazy(() => categorySchema.array()),
});

categorySchema.parse({
  name: "People",
  subcategories: [
    {
      name: "Politicians",
      subcategories: [
        {
          name: "Presidents",
          subcategories: [],
        },
      ],
    },
  ],
}); // passes
Thanks to crasite for this example.
ZodType with ZodEffects
When using z.ZodType with z.ZodEffects (
.refine,
.transform,
preprocess,
etc...
), you will need to define the input and output types of the schema. z.ZodType<Output, z.ZodTypeDef, Input>
const isValidId = (id: string): id is `${string}/${string}` =>
  id.split("/").length === 2;

const baseSchema = z.object({
  id: z.string().refine(isValidId),
});

type Input = z.input<typeof baseSchema> & {
  children: Input[];
};

type Output = z.output<typeof baseSchema> & {
  children: Output[];
};

const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({
  children: z.lazy(() => schema.array()),
});
Thanks to marcus13371337 and JoelBeeldi for this example.
JSON type
If you want to validate any JSON value, you can use the snippet below.
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
);

jsonSchema.parse(data);
Thanks to ggoodman for suggesting this.
Cyclical objects
Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop in some cases.

To detect cyclical objects before they cause problems, consider this approach.


Promises
const numberPromise = z.promise(z.number());
"Parsing" works a little differently with promise schemas. Validation happens in two parts:

Zod synchronously checks that the input is an instance of Promise (i.e. an object with .then and .catch methods.).
Zod uses .then to attach an additional validation step onto the existing Promise. You'll have to use .catch on the returned Promise to handle validation failures.

numberPromise.parse("tuna");
// ZodError: Non-Promise type: string

numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number>

const test = async () => {
  await numberPromise.parse(Promise.resolve("tuna"));
  // ZodError: Non-number type: string

  await numberPromise.parse(Promise.resolve(3.14));
  // => 3.14
};


Instanceof
You can use z.instanceof to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
class Test {
  name: string;
}

const TestSchema = z.instanceof(Test);

const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws

Functions
Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
You can create a function schema with z.function(args, returnType) .
const myFunction = z.function();

type myFunction = z.infer<typeof myFunction>;
// => ()=>unknown
Define inputs and outputs.
const myFunction = z
  .function()
  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
  .returns(z.boolean());

type myFunction = z.infer<typeof myFunction>;
// => (arg0: string, arg1: number)=>boolean

Function schemas have an .implement() method which accepts a function and returns a new function that automatically validates its inputs and outputs.
const trimmedLength = z
  .function()
  .args(z.string()) // accepts an arbitrary number of arguments
  .returns(z.number())
  .implement((x) => {
    // TypeScript knows x is a string!
    return x.trim().length;
  });

trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
If you only care about validating inputs, just don't call the .returns() method. The output type will be inferred from the implementation.

You can use the special z.void() option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)

const myFunction = z
  .function()
  .args(z.string())
  .implement((arg) => {
    return [arg.length];
  });

myFunction; // (arg: string)=>number[]
Extract the input and output schemas from a function schema.
myFunction.parameters();
// => ZodTuple<[ZodString, ZodNumber]>

myFunction.returnType();
// => ZodBoolean


Preprocess

Zod now supports primitive coercion without the need for .preprocess(). See the coercion docs for more information.

Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the .transform docs.)
But sometimes you want to apply some transform to the input before parsing happens. A common use case: type coercion. Zod enables this with the z.preprocess().
const castToString = z.preprocess((val) => String(val), z.string());
This returns a ZodEffects instance. ZodEffects is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.

Custom schemas
You can create a Zod schema for any TypeScript type by using z.custom(). This is useful for creating schemas for types that are not supported by Zod out of the box, such as template string literals.
const px = z.custom<`${number}px`>((val) => {
  return typeof val === "string" ? /^\d+px$/.test(val) : false;
});

type px = z.infer<typeof px>; // `${number}px`

px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
If you don't provide a validation function, Zod will allow any value. This can be dangerous!
z.custom<{ arg: string }>(); // performs no validation
You can customize the error message and other options by passing a second argument. This parameter works the same way as the params parameter of .refine.
z.custom<...>((val) => ..., "custom error message");

Schema methods
All Zod schemas contain certain methods.
.parse
.parse(data: unknown): T
Given any Zod schema, you can call its .parse method to check data is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.

IMPORTANT: The value returned by .parse is a deep clone of the variable you passed in.

const stringSchema = z.string();

stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
.parseAsync
.parseAsync(data:unknown): Promise<T>
If you use asynchronous refinements or transforms (more on those later), you'll need to use .parseAsync.
const stringSchema = z.string().refine(async (val) => val.length <= 8);

await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
.safeParse
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
If you don't want Zod to throw errors when validation fails, use .safeParse. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
stringSchema.safeParse(12);
// => { success: false; error: ZodError }

stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
The result is a discriminated union, so you can handle errors very conveniently:
const result = stringSchema.safeParse("billie");
if (!result.success) {
  // handle error then return
  result.error;
} else {
  // do something
  result.data;
}
.safeParseAsync

Alias: .spa

An asynchronous version of safeParse.
await stringSchema.safeParseAsync("billie");
For convenience, this has been aliased to .spa:
await stringSchema.spa("billie");
.refine
.refine(validator: (data:T)=>any, params?: RefineParams)
Zod lets you provide custom validation logic via refinements. (For advanced features like creating multiple issues and customizing error codes, see .superRefine.)
Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
For example, you can define a custom validation check on any Zod schema with .refine :
const myString = z.string().refine((val) => val.length <= 255, {
  message: "String can't be more than 255 characters",
});

‚ö†Ô∏è Refinement functions should not throw. Instead they should return a falsy value to signal failure.

Arguments
As you can see, .refine takes two arguments.

The first is the validation function. This function takes one input (of type T ‚Äî the inferred type of the schema) and returns any. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
The second argument accepts some options. You can use this to customize certain error-handling behavior:

type RefineParams = {
  // override error message
  message?: string;

  // appended to error path
  path?: (string | number)[];

  // params object you can use to customize message
  // in error map
  params?: object;
};
For advanced cases, the second argument can also be a function that returns RefineParams.
const longString = z.string().refine(
  (val) => val.length > 10,
  (val) => ({ message: `${val} is not more than 10 characters` })
);
Customize error path
const passwordForm = z
  .object({
    password: z.string(),
    confirm: z.string(),
  })
  .refine((data) => data.password === data.confirm, {
    message: "Passwords don't match",
    path: ["confirm"], // path of error
  });

passwordForm.parse({ password: "asdf", confirm: "qwer" });
Because you provided a path parameter, the resulting error will be:
ZodError {
  issues: [{
    "code": "custom",
    "path": [ "confirm" ],
    "message": "Passwords don't match"
  }]
}
Asynchronous refinements
Refinements can also be async:
const userId = z.string().refine(async (id) => {
  // verify that ID exists in database
  return true;
});

‚ö†Ô∏è If you use async refinements, you must use the .parseAsync method to parse data! Otherwise Zod will throw an error.

Relationship to transforms
Transforms and refinements can be interleaved:
z.string()
  .transform((val) => val.length)
  .refine((val) => val > 25);

.superRefine
The .refine method is actually syntactic sugar atop a more versatile (and verbose) method called superRefine. Here's an example:
const Strings = z.array(z.string()).superRefine((val, ctx) => {
  if (val.length > 3) {
    ctx.addIssue({
      code: z.ZodIssueCode.too_big,
      maximum: 3,
      type: "array",
      inclusive: true,
      message: "Too many items üò°",
    });
  }

  if (val.length !== new Set(val).size) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: `No duplicates allowed.`,
    });
  }
});
You can add as many issues as you like. If ctx.addIssue is not called during the execution of the function, validation passes.
Normally refinements always create issues with a ZodIssueCode.custom error code, but with superRefine it's possible to throw issues of any ZodIssueCode. Each issue code is described in detail in the Error Handling guide: ERROR_HANDLING.md.
Abort early
By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to abort early to prevent later refinements from being executed. To achieve this, pass the fatal flag to ctx.addIssue and return z.NEVER.
const schema = z.number().superRefine((val, ctx) => {
  if (val < 10) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be >= 10",
      fatal: true,
    });

    return z.NEVER;
  }

  if (val !== 12) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be twelve",
    });
  }
});
Type refinements
If you provide a type predicate to .refine() or .superRefine(), the resulting type will be narrowed down to your predicate's type. This is useful if you are mixing multiple chained refinements and transformations:
const schema = z
  .object({
    first: z.string(),
    second: z.number(),
  })
  .nullable()
  .superRefine((arg, ctx): arg is { first: string; second: number } => {
    if (!arg) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom, // customize your issue
        message: "object should exist",
      });
    }

    return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing
  })
  // here, TS knows that arg is not null
  .refine((arg) => arg.first === "bob", "`first` is not `bob`!");

‚ö†Ô∏è You must use ctx.addIssue() instead of returning a boolean value to indicate whether the validation passes. If ctx.addIssue is not called during the execution of the function, validation passes.

.transform
To transform data after parsing, use the transform method.
const stringToNumber = z.string().transform((val) => val.length);

stringToNumber.parse("string"); // => 6
Chaining order
Note that stringToNumber above is an instance of the ZodEffects subclass. It is NOT an instance of ZodString. If you want to use the built-in methods of ZodString (e.g. .email()) you must apply those methods before any transforms.
const emailToDomain = z
  .string()
  .email()
  .transform((val) => val.split("@")[1]);

emailToDomain.parse("colinhacks@example.com"); // => example.com
Validating during transform
The .transform method can simultaneously validate and transform the value. This is often simpler and less duplicative than chaining transform and refine.
As with .superRefine, the transform function receives a ctx object with an addIssue method that can be used to register validation issues.
const numberInString = z.string().transform((val, ctx) => {
  const parsed = parseInt(val);
  if (isNaN(parsed)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Not a number",
    });

    // This is a special symbol you can use to
    // return early from the transform function.
    // It has type `never` so it does not affect the
    // inferred return type.
    return z.NEVER;
  }
  return parsed;
});
Relationship to refinements
Transforms and refinements can be interleaved. These will be executed in the order they are declared.
const nameToGreeting = z
  .string()
  .transform((val) => val.toUpperCase())
  .refine((val) => val.length > 15)
  .transform((val) => `Hello ${val}`)
  .refine((val) => val.indexOf("!") === -1);
Async transforms
Transforms can also be async.
const IdToUser = z
  .string()
  .uuid()
  .transform(async (id) => {
    return await getUserById(id);
  });

‚ö†Ô∏è If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.

.default
You can use transforms to implement the concept of "default values" in Zod.
const stringWithDefault = z.string().default("tuna");

stringWithDefault.parse(undefined); // => "tuna"
Optionally, you can pass a function into .default that will be re-executed whenever a default value needs to be generated:
const numberWithRandomDefault = z.number().default(Math.random);

numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
Conceptually, this is how Zod processes default values:

If the input is undefined, the default value is returned
Otherwise, the data is parsed using the base schema

.describe
Use .describe() to add a description property to the resulting schema.
const documentedString = z
  .string()
  .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text‚Ä¶
This can be useful for documenting a field, for example in a JSON Schema using a library like zod-to-json-schema).
.catch
Use .catch() to provide a "catch value" to be returned in the event of a parsing error.
const numberWithCatch = z.number().catch(42);

numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
Optionally, you can pass a function into .catch that will be re-executed whenever a default value needs to be generated. A ctx object containing the caught error will be passed into this function.
const numberWithRandomCatch = z.number().catch((ctx) => {
  ctx.error; // the caught ZodError
  return Math.random();
});

numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
Conceptually, this is how Zod processes "catch values":

The data is parsed using the base schema
If the parsing fails, the "catch value" is returned

.optional
A convenience method that returns an optional version of a schema.
const optionalString = z.string().optional(); // string | undefined

// equivalent to
z.optional(z.string());
.nullable
A convenience method that returns a nullable version of a schema.
const nullableString = z.string().nullable(); // string | null

// equivalent to
z.nullable(z.string());
.nullish
A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both undefined and null. Read more about the concept of "nullish" in the TypeScript 3.7 release notes.
const nullishString = z.string().nullish(); // string | null | undefined

// equivalent to
z.string().nullable().optional();
.array
A convenience method that returns an array schema for the given type:
const stringArray = z.string().array(); // string[]

// equivalent to
z.array(z.string());
.promise
A convenience method for promise types:
const stringPromise = z.string().promise(); // Promise<string>

// equivalent to
z.promise(z.string());
.or
A convenience method for union types.
const stringOrNumber = z.string().or(z.number()); // string | number

// equivalent to
z.union([z.string(), z.number()]);
.and
A convenience method for creating intersection types.
const nameAndAge = z
  .object({ name: z.string() })
  .and(z.object({ age: z.number() })); // { name: string } & { age: number }

// equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
.brand
.brand<T>() => ZodBranded<this, B>
TypeScript's type system is structural, which means that any two types that are structurally equivalent are considered the same.
type Cat = { name: string };
type Dog = { name: string };

const petCat = (cat: Cat) => {};
const fido: Dog = { name: "fido" };
petCat(fido); // works fine
In some cases, its can be desirable to simulate nominal typing inside TypeScript. For instance, you may wish to write a function that only accepts an input that has been validated by Zod. This can be achieved with branded types (AKA opaque types).
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;

const petCat = (cat: Cat) => {};

// this works
const simba = Cat.parse({ name: "simba" });
petCat(simba);

// this doesn't
petCat({ name: "fido" });
Under the hood, this works by attaching a "brand" to the inferred type using an intersection type. This way, plain/unbranded data structures are no longer assignable to the inferred type of the schema.
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;
// {name: string} & {[symbol]: "Cat"}
Note that branded types do not affect the runtime result of .parse. It is a static-only construct.
.readonly
.readonly() => ZodReadonly<this>
This method returns a ZodReadonly schema instance that parses the input using the base schema, then calls Object.freeze() on the result. The inferred type is also marked as readonly.
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}>

const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
The inferred type uses TypeScript's built-in readonly types when relevant.
z.array(z.string()).readonly();
// readonly string[]

z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number]

z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date>

z.set(z.string()).readonly();
// ReadonlySet<string>
.pipe
Schemas can be chained into validation "pipelines". It's useful for easily validating the result after a .transform():
z.string()
  .transform((val) => val.length)
  .pipe(z.number().min(5));
The .pipe() method returns a ZodPipeline instance.

Guides and concepts
Type inference
You can extract the TypeScript type of any schema with z.infer<typeof mySchema> .
const A = z.string();
type A = z.infer<typeof A>; // string

const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
What about transforms?
In reality each Zod schema internally tracks two types: an input and an output. For most schemas (e.g. z.string()) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance z.string().transform(val => val.length) has an input of string and an output of number.
You can separately extract the input and output types like so:
const stringToNumber = z.string().transform((val) => val.length);

// ‚ö†Ô∏è Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
Writing generic functions
With TypeScript generics, you can write reusable functions that accept Zod schemas as parameters. This enables you to create custom validation logic, schema transformations, and more, while maintaining type safety and inference.
When attempting to write a function that accepts a Zod schema as an input, it's tempting to try something like this:
function inferSchema<T>(schema: z.ZodType<T>) {
  return schema;
}
This approach is incorrect, and limits TypeScript's ability to properly infer the argument. No matter what you pass in, the type of schema will be an instance of ZodType.
inferSchema(z.string());
// => ZodType<string>
This approach loses type information, namely which subclass the input actually is (in this case, ZodString). That means you can't call any string-specific methods like .min() on the result of inferSchema.
A better approach is to infer the schema as a whole instead of merely its inferred type. You can do this with a utility type called z.ZodTypeAny.
function inferSchema<T extends z.ZodTypeAny>(schema: T) {
  return schema;
}

inferSchema(z.string());
// => ZodString

ZodTypeAny is just a shorthand for ZodType<any, any, any>, a type that is broad enough to match any Zod schema.

The Result is now fully and properly typed, and the type system can infer the specific subclass of the schema.
Inferring the inferred type
If you follow the best practice of using z.ZodTypeAny as the generic parameter for your schema, you may encounter issues with the parsed data being typed as any instead of the inferred type of the schema.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data);
}

parseData("sup", z.string());
// => any
Due to how TypeScript inference works, it is treating schema like a ZodTypeAny instead of the inferred type. You can fix this with a type cast using z.infer.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data) as z.infer<T>;
  //                        ^^^^^^^^^^^^^^ <- add this
}

parseData("sup", z.string());
// => string
Constraining allowable inputs
The ZodType class has three generic parameters.
class ZodType<
  Output = any,
  Def extends ZodTypeDef = ZodTypeDef,
  Input = Output
> { ... }
By constraining these in your generic input, you can limit what schemas are allowable as inputs to your function:
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) {
  return schema.optional();
}

makeSchemaOptional(z.string());
// works fine

makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
Error handling
Zod provides a subclass of Error called ZodError. ZodErrors contain an issues array containing detailed information about the validation problems.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  result.error.issues;
  /* [
      {
        "code": "invalid_type",
        "expected": "string",
        "received": "number",
        "path": [ "name" ],
        "message": "Expected string, received number"
      }
  ] */
}

For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: ERROR_HANDLING.md

Zod's error reporting emphasizes completeness and correctness. If you are looking to present a useful error message to the end user, you should either override Zod's error messages using an error map (described in detail in the Error Handling guide) or use a third-party library like zod-validation-error
Error formatting
You can use the .format() method to convert this error into a nested object.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  const formatted = result.error.format();
  /* {
    name: { _errors: [ 'Expected string, received number' ] }
  } */

  formatted.name?._errors;
  // => ["Expected string, received number"]
}

Comparison
There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.



Joi
https://github.com/hapijs/joi
Doesn't support static type inference üòï
Yup
https://github.com/jquense/yup
Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.

Supports casting and transforms
All object fields are optional by default



Missing promise schemas
Missing function schemas
Missing union & intersection schemas


io-ts
https://github.com/gcanti/io-ts
io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
import * as t from "io-ts";

const A = t.type({
  foo: t.string,
});

const B = t.partial({
  bar: t.number,
});

const C = t.intersection([A, B]);

type C = t.TypeOf<typeof C>;
// returns { foo: string; bar?: number | undefined }
You must define the required and optional props in separate object validators, pass the optionals through t.partial (which marks all properties as optional), then combine them with t.intersection .
Consider the equivalent in Zod:
const C = z.object({
  foo: z.string(),
  bar: z.number().optional(),
});

type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
This more declarative API makes schema definitions vastly more concise.
io-ts also requires the use of gcanti's functional programming library fp-ts to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on fp-ts necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the fp-ts nomenclature to use the library.

Supports codecs with serialization & deserialization transforms
Supports branded types
Supports advanced functional programming, higher-kinded types, fp-ts compatibility
Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
Missing nonempty arrays with proper typing ([T, ...T[]])
Missing promise schemas
Missing function schemas

Runtypes
https://github.com/runtypes/runtypes
Runtypes is focused on ergonomics, with good type inference support.

Supports "pattern matching": computed properties that distribute over unions
Supports branded types
Supports template literals
Supports conformance to predefined static types
Missing object methods: (deepPartial, merge)
Missing promise schemas
Missing error customization

Ow
https://github.com/sindresorhus/ow
Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. int32Array , see full list in their README).
If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.

Changelog
View the changelog at CHANGELOG.md
   


      

        

      
        
          
            
  About

      
        TypeScript-first schema validation with static type inference
      
      
        
        
          zod.dev
        
      

    Topics
    
        
      
  typescript

      
  static-types

      
  schema-validation

      
  type-inference

      
  runtime-validation

  

    

    Resources
    
      
        
        Readme
    

  
    License
  
    
      
     MIT license
    
  


    Code of conduct
    
      
        
        Code of conduct
      
    


  

  
    
      Activity  


  Stars
  
    
      37.4k
      stars  

  Watchers
  
    
      70
      watching  

  Forks
  
    
      1.4k
      forks  


    
      
          Report repository
    


          
        

        
            
              
                
  Releases
      94

  
    
    
      
        v3.24.3
        
          Latest
      
      Apr 16, 2025
    
    
      + 93 releases
              
            

        
            
              
                
Sponsor this project

        
          
          ¬†
        
               Sponsor
  
    Learn more about GitHub Sponsors
  

              
            

        
            
              
                
  
  Packages
      0


      
        No packages published 
      



              
            

        
            
              
                
  
    Used by 2.2m  

  
    
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
    
      
        + 2,156,500
      
  

              
            

        
            
              
                
  Contributors
      335


    
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    





  
    + 321 contributors
              
            

        
        
            
              
                Languages

  
    
    
    


    
        
          
          TypeScript
          96.3%
        
    
    
        
          
          JavaScript
          1.9%
        
    
    
        
          
          HTML
          1.8%\n\n\n\nBuild and ship software on a single, collaborative platformJoin the world‚Äôs most widely adopted AI-powered developer platform.Enter your emailSign up for GitHubTry GitHub CopilotGitHub featuresA demonstration animation of a code editor using GitHub Copilot Chat, where the user requests GitHub Copilot to refactor duplicated logic and extract it into a reusable function for a given code snippet.CodePlanCollaborateAutomateSecureCodeBuild code quickly and more securely with GitHub Copilot embedded throughout your workflows.GitHub is used byPauseAccelerate performanceWith GitHub Copilot embedded throughout the platform, you can simplify your toolchain, automate tasks, and improve the developer experience.A Copilot chat window with extensions enabled. The user inputs the @ symbol to reveal a list of five Copilot Extensions. @Sentry is selected from the list, which shifts the window to a chat directly with that extension. There are three sample prompts at the bottom of the chat window, allowing the user to Get incident information, Edit status on incident, or List the latest issues. The last one is activated to send the prompt: @Sentry List the latest issues. The extension then lists several new issues and their metadata.Work 55% faster.Jump to footnote¬†1 Increase productivity with AI-powered coding assistance, including code completion, chat, and more.Explore GitHub CopilotDuolingo boosts developer speed by 25% with GitHub CopilotRead customer story2024 Gartner¬Æ Magic Quadrant‚Ñ¢ for AI Code AssistantsRead reportAutomate any workflowOptimize your process with simple and secured CI/CD.A list of workflows displays a heading ‚Äò45,167 workflow runs‚Äô at the top. Below are five rows of completed workflows accompanied by their completion time and their duration formatted in minutes and seconds.Discover GitHub ActionsGet up and running in secondsStart building instantly with a comprehensive dev environment in the cloud.A GitHub Codespaces setup for the landing page of a game called OctoInvaders. On the left is a code editor with some HTML and Javascript files open. On the right is a live render of the page. In front of this split editor window is a screenshot of two active GitHub Codespaces environments with their branch names and a button to ‚ÄòCreate codespace on main.‚ÄôCheck out GitHub CodespacesBuild on the goManage projects and chat with GitHub Copilot from anywhere.Two smartphone screens side by side. The left screen shows a Notification inbox, listing issues and pull requests from different repositories like TensorFlow and GitHub‚Äôs OctoArcade octoinvaders. The right screen shows a new conversation in GitHub Copilot chat.Download GitHub MobileIntegrate the tools you loveSync with 17,000+ integrations and a growing library of Copilot Extensions.A grid of fifty app tiles displays logos for integrations and extensions for companies like Stripe, Slack, and Docker. The tiles extend beyond the bounds of the image to indicate a wide array of apps. Visit GitHub MarketplaceBuilt-in application security  where found means fixedUse AI to find and fix vulnerabilities‚Äîfreeing your teams to ship more secure software faster.Apply fixes in seconds. Spend less time fixing vulnerabilities and more time building features with Copilot Autofix.Explore GitHub Advanced SecuritySolve security debt. Leverage AI-assisted security campaigns to reduce application vulnerabilities and zero-day attacks.Discover security campaignsDependencies you can depend on. Update vulnerable dependencies with supported fixes for breaking changes.Learn about DependabotYour secrets, your business: protected. Detect, prevent, and remediate leaked secrets across your organization.Read about secret scanning7x fastervulnerability fixes with GitHubJump to footnote¬†290% coverageof alert types in all supported languages with Copilot AutofixWork together, achieve moreCollaborate with your teams, use management tools that sync with your projects, and code from anywhere‚Äîall on a single, integrated platform.Your workflows, your way. Plan effectively with an adaptable spreadsheet that syncs with your work.Jump into GitHub Projects‚ÄúIt helps us onboard new software engineers and get them productive right away. We have all our source code, issues, and pull requests in one place... GitHub is a complete platform that frees us from menial tasks and enables us to do our best work.Fabian FaulhaberApplication manager at Mercedes-BenzKeep track of your tasksCreate issues and manage projects with tools that adapt to your code.Display of task tracking within an issue, showing the status of related sub-issues and their connection to the main issue.Explore GitHub IssuesShare ideas and ask questionsCreate space for open-ended conversations alongside your project.A GitHub Discussions thread where a GitHub user suggests a power-up idea involving Hubot revealing a path and protecting Mona. The post has received 5 upvotes and several reactions. Below, three other users add to the discussion, suggesting Hubot could provide different power-ups depending on levels and appreciating the collaboration idea.Discover GitHub DiscussionsReview code changes togetherCreate review processes that improve code quality and fit neatly into your workflow.Two code review approvals by helios-ackmore and amanda-knox, which are followed by three successful checks for ‚ÄòBuild,‚Äô ‚ÄòTest,‚Äô and ‚ÄòPublish.‚ÄôLearn about code reviewFund open source projectsBecome an open source partner and support the tools and libraries that power your work.A GitHub Sponsors popup displays ‚Äò$15,000 a month‚Äô with a progress bar showing 87% towards a $15,000 goal.Dive into GitHub SponsorsFrom startups to enterprises, GitHub scales  with teams of any size in any industry.By industryBy sizeBy use caseBy industryTechnologyFigma streamlines development and strengthens securityRead customer storyAutomotiveMercedes-Benz standardizes source code and automates onboardingRead customer storyFinancial servicesMercado Libre cuts coding time by 50%Read customer storyExplore customer storiesView all solutionsMillions of developers and businesses call GitHub homeWhether you‚Äôre scaling your development process or just learning how to code, GitHub is where you belong. Join the world‚Äôs most widely adopted AI-powered developer platform to build the technologies that redefine what‚Äôs possible.Enter your emailSign up for GitHubTry GitHub CopilotFootnotesSurvey: The AI wave continues to grow on software development teams, 2024.This 7X times factor is based on data from the industry‚Äôs longest running analysis of fix rates Veracode State of Software Security 2023, which cites the average time to fix 50% of flaws as 198 days vs. GitHub‚Äôs fix rates of 72% of flaws with in 28 days which is at a minimum of 7X faster when compared.\n\n\n\nSign in to GitHub
    


    



  
    

  
    
      
    
    
      
      {{ message }}

    
  

  



    
      
        
      
    

    
      
  

    
      Username or email address
    
    

  
    
      Password
    
    
    Forgot password?
    













    
  
  
      
  

    


        Password login alternatives
        
            
    
        
    Sign in with a passkey
  

    
  

          
            New to GitHub?
              Create an account\n\n\n\nGitHub CopilotFor businessExtensions TutorialsWhat‚Äôs newPlans & pricingNow supercharged with agent modeAI that builds with youGet started for freeSee plans & pricingAlready have  Visual Studio Code? Open¬†nowPauseGitHub Copilot is used byPauseFeaturesAgent mode: Because two brains are better than onePausePauseFrom broken to brilliant, fast. Need to make a sweeping change? Agent mode helps you do it quickly by analyzing code, proposing edits, running tests, and validating results across multiple files.Try agent modePlans the path, handles the work. Agent mode reasons through the problem, coordinates next steps, and applies the changes‚Äîwhile keeping you in the driver‚Äôs seat.Don‚Äôt sweat the small stuff. From renaming variables to fixing errors, agent mode manages the tedious tasks that might otherwise break your flow.Pick your brainpowerSwap between models like Claude 3.7 Sonnet, OpenAI o1, and Google Gemini 2.0 Flash to crush coding tasks fast or go deep when it counts.Drop an edit. Watch it spreadNext edit suggestions reveal the ripple effects of your changes across your project‚Äîhelping you keep everything consistent.Try next edit suggestionsYour code‚Äôs guardian angelCode review analyzes your work, uncovers hidden bugs, fixes mistakes, and more‚Äîbefore a human ever sees it.Discover code reviewEverything you need, right where you codeThanks to an ecosystem of third-party extensions, Copilot Chat lets you check logs, toggle features, and deploy apps, without ever leaving your editor.Explore extensionsPlansTake flight with GitHub CopilotPricing plansFor individualsFor businessesFreeA fast way to get started with GitHub Copilot.$0USDGet startedOpen in VS CodeWhat's included50 agent mode or chat requests per month2,000 completions per monthAccess to Claude 3.5 Sonnet, GPT-4o, and moreProMost popularUnlimited completions and chats with access to more models.$19$10USDper month or $100 per yearTry for 30 days freeWhat's includedEverything in Free and:Unlimited agent mode and chats with GPT-4oUnlimited code completionsAccess to code review, Claude 3.7 Sonnet, o1, and more6x more premium requests to use latest models than Free, with the option to buy more1Free for verified students, teachers, and maintainers of popular open source projects. Learn morePro+Maximum flexibility and model choice.$39USDper month or $390 per yearGet startedWhat's includedEverything in Pro and:Access to all models, including GPT-4.530x more premium requests to use latest models than Free, with the option to buy more1GitHub Copilot is available on your favorite platforms:GitHub GitHub VS Code VS Code Visual Studio Visual Studio Xcode Xcode JetBrains IDEsJetBrains IDEsNeovim Neovim Azure Data StudioAzure Data StudioEclipse Eclipse Compare all plan featuresGitHub Copilot works where you workCommand the command lineTap into GitHub Copilot in your terminal for instant command-line help.Try Copilot in the CLIStart a chat anywhereUse Copilot Chat on the go with native apps for iOS and Android.Chat in GitHub MobileGet the most out of GitHub CopilotPreview the latest featuresBe the first to explore what‚Äôs next for GitHub Copilot.See previewsExplore the GitHub BlogDiscover the latest in software development with insights, best practices, and more.Read BlogVisit the GitHub Copilot Trust CenterGain peace of mind with our security, privacy, and responsible AI policies.Go to Trust CenterFrequently asked questionsGeneralWhat is GitHub Copilot?GitHub Copilot transforms the developer experience. Backed by the leaders in AI, GitHub Copilot provides contextualized assistance throughout the software development lifecycle, from code completions and chat assistance in the IDE to code explanations and answers to docs in GitHub and more. With GitHub Copilot elevating their workflow, developers can focus on: value, innovation, and happiness.GitHub Copilot enables developers to focus more energy on problem solving and collaboration and spend less effort on the mundane and boilerplate. That‚Äôs why developers who use GitHub Copilot report up to 75% higher satisfaction with their jobs than those who don‚Äôt and are up to 55% more productive at writing code without sacrifice to quality, which all adds up to engaged developers shipping great software faster.GitHub Copilot integrates with leading editors, including Visual Studio Code, Visual Studio, JetBrains IDEs, and Neovim, and, unlike other AI coding assistants, is natively built into GitHub. Growing to millions of individual users and tens of thousands of business customers, GitHub Copilot is the world‚Äôs most widely adopted AI developer tool and the competitive advantage developers ask for by name.Who is eligible to access GitHub Copilot for free?GitHub Copilot Free is a new free pricing tier with limited functionality for individual developers. Users assigned a Copilot Business or Copilot Enterprise seat are not eligible for access. Users with access to Copilot Pro through a paid subscription, trial, or through an existing verified OSS, student, faculty, or MVP account may elect to use Free instead.¬†
What languages, IDEs, and platforms does GitHub Copilot support?GitHub Copilot is trained on all languages that appear in public repositories. For each language, the quality of suggestions you receive may depend on the volume and diversity of training data for that language. For example, JavaScript is well-represented in public repositories and is one of GitHub Copilot‚Äôs best supported languages. Languages with less representation in public repositories may produce fewer or less robust suggestions.GitHub Copilot is available as an extension in Visual Studio Code, Visual Studio, Vim, Neovim, the JetBrains suite of IDEs, and Azure Data Studio. Although code completion functionality is available across all these extensions, chat functionality is currently available only in Visual Studio Code, JetBrains, and Visual Studio. GitHub Copilot is also supported in terminals through GitHub CLI and as a chat integration in Windows Terminal Canary. With the GitHub Copilot Enterprise plan, GitHub Copilot is natively integrated into GitHub.com. All plans are supported in GitHub Copilot in GitHub Mobile. GitHub Mobile for Copilot Pro and Copilot Business have access to Bing and public repository code search. Copilot Enterprise in GitHub Mobile gives you additional access to your organization's knowledge.Does GitHub Copilot ‚Äúcopy/paste‚Äù?No, GitHub Copilot generates suggestions using probabilistic determination.When thinking about intellectual property and open source issues, it is critical to understand how GitHub Copilot really works. The AI models that create GitHub Copilot‚Äôs suggestions may be trained on public code, but do not contain any code. When they generate a suggestion, they are not ‚Äúcopying and pasting‚Äù from any codebase.To generate a code suggestion, the GitHub Copilot extension begins by examining the code in your editor‚Äîfocusing on the lines just before and after your cursor, but also information including other files open in your editor and the URLs of repositories or file paths to identify relevant context. That information is sent to GitHub Copilot‚Äôs model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat in the code editor, the GitHub Copilot extension creates a contextual prompt by combining your prompt with additional context including the code file open in your active document, your code selection, and general workspace information, such as frameworks, languages, and dependencies. That information is sent to GitHub Copilot‚Äôs model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat on GitHub.com, such as providing an answer to a question from your chat prompt, GitHub Copilot creates a contextual prompt by combining your prompt with additional context including previous prompts, the open pages on GitHub.com as well as retrieved context from your codebase or Bing search. That information is sent to GitHub Copilot‚Äôs model, to make a probabilistic determination of what is likely to come next and generate suggestions.¬† What are the differences between the GitHub Copilot Business, GitHub Copilot Enterprise, and GitHub Copilot Individual plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also¬† adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with GitHub Copilot¬†throughout the platform. GitHub Copilot Enterprise can index an organization‚Äôs codebase for a deeper understanding of the customer‚Äôs knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Individual is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security.What if I do not want GitHub Copilot?GitHub Copilot is entirely optional and requires you to opt in before gaining access. You can easily configure its usage directly in the editor, enabling or disabling it at any time. Additionally, you have control over which file types GitHub Copilot is active for.How do I control access to GitHub Copilot in my company?Access to Copilot Business and Enterprise is managed by your GitHub Administrator. They can control access to preview features, models, and set GitHub Copilot policies for your organization. Additionally, you can use your network firewall to explicitly allow access to Copilot Business and/or block access to Copilot Pro or Free. For more details, refer to the documentation.Plans & pricingWhat are the differences between the Free, Pro, Business, and Enterprise plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also¬† adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with Copilot¬† throughout the platform. GitHub Copilot Enterprise can index an organization‚Äôs codebase for a deeper understanding of the customer‚Äôs knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Pro is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.How can I upgrade my GitHub Copilot Free license to Copilot Pro?If you're on the Free plan, you can upgrade to Pro through your Copilot settings page or directly on the Copilot marketing page.What is included in GitHub Copilot Free?GitHub Copilot Free users are limited to 2000 completions and 50 chat requests (including Copilot Edits).Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security and available to all public repositories.PrivacyWhat personal data does GitHub Copilot process?GitHub Copilot processes personal data based on how Copilot is accessed and used: whether via GitHub.com, mobile app, extensions, or one of various IDE extensions, or through features like suggestions for the command line interface (CLI), IDE code completions, or personalized chat on GitHub.com. The types of personal data processed may include:User Engagement Data: This includes pseudonymous identifiers captured on user interactions with Copilot, such as accepted or dismissed completions, error messages, system logs, and product usage metrics.¬†Prompts: These are inputs for chat or code, along with context, sent to Copilot's AI to generate suggestions.¬†Suggestions: These are the AI-generated code lines or chat responses provided to users based on their prompts.¬†Feedback Data: This comprises real-time user feedback, including reactions (e.g., thumbs up/down) and optional comments, along with feedback from support tickets.Does GitHub use Copilot Business or Enterprise data to train GitHub‚Äôs model?No. GitHub does not use either Copilot Business or Enterprise data to train its models.¬†How does GitHub use the Copilot data?How GitHub uses Copilot data depends on how the user accesses Copilot and for what purpose. Users can access GitHub Copilot through the web, extensions, mobile apps, computer terminal, and various IDEs (Integrated Development Environments). GitHub generally uses personal data to:Deliver, maintain, and update the services as per the customer's configuration and usage, to ensure personalized experiences and recommendationsTroubleshoot, which involves preventing, detecting, resolving, and mitigating issues, including security incidents and product-related problems, by fixing software bugs and maintaining the online services' functionality and up-to-datenessEnhance user productivity, reliability, effectiveness, quality, privacy, accessibility, and security by keeping the service current and operationalThese practices are outlined in GitHub‚Äôs Data Protection Agreement (DPA), which details our data handling commitments to our data controller customers.¬†GitHub also uses certain personal data with customer authorization under the DPA, for the following purposes:Billing and account managementTo comply with and resolve legal obligations¬†For abuse detection, prevention, and protection, virus scanning, and scanning to detect violations of terms of serviceTo generate summary reports for calculating employee commissions and partner incentivesTo produce aggregated reports for internal use and strategic planning, covering areas like forecasting, revenue analysis, capacity planning, and product strategy,For details on GitHub's data processing activities as a controller, particularly for Copilot Pro customers, refer to the GitHub Privacy Statement.How long does GitHub retain Copilot data for Business and Enterprise customers? If and for how long GitHub‚Äôs retains Copilot data depends on how a Copilot user accesses Copilot and for what purpose. The default settings for Copilot Business and Enterprise Customers are as follows:¬†Access through IDE for Chat and Code Completions:Prompts and Suggestions: Not retainedUser Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.All other GitHub Copilot access and use:Prompts and Suggestions: Retained for 28 days.User Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.Why do some Copilot features retain prompts and suggestions?Retaining prompts and suggestions is necessary for chat on github.com, mobile, and CLI Copilot because those features‚Äô effectiveness depends on using thread history to improve responses. The Copilot model requires access to previous interactions to deliver accurate and relevant suggestions.¬†Does GitHub Copilot support compliance with the GDPR and other data protection laws?Yes. GitHub and customers can enter a Data Protection Agreement that supports compliance with the GDPR and similar legislation.Does GitHub Copilot ever output personal data?While we've designed GitHub Copilot with privacy in mind, the expansive definition of personal data under legislation like the EU‚Äôs General Data Protection Regulation (GDPR) means we can't guarantee it will never output such data. The Large Language Model (LLM) powering GitHub Copilot was trained on public code and there were instances in our tests where the tool made suggestions resembling personal data. These suggestions were typically synthesized and not tied to real individuals.¬†How does Copilot allow users to access, alter or delete personal data?These actions are available to Copilot users as described in the GitHub Privacy Statement.
Responsible AIWhat are the intellectual property considerations when using GitHub Copilot?The primary IP considerations for GitHub Copilot relate to copyright. The model that powers Copilot is trained on a broad collection of publicly accessible code, which may include copyrighted code, and Copilot‚Äôs suggestions (in rare instances) may resemble the code its model was trained on. Here‚Äôs some basic information you should know about these considerations:Copyright law permits the use of copyrighted works to train AI models:¬† Countries around the world have provisions in their copyright laws that enable machines to learn, understand, extract patterns, and facts from copyrighted materials, including software code. For example, the European Union, Japan, and Singapore, have express provisions permitting machine learning to develop AI models. Other countries including Canada, India, and the United States also permit such training under their fair use/fair dealing provisions. GitHub Copilot‚Äôs AI model was trained with the use of code from GitHub‚Äôs public repositories‚Äîwhich are publicly accessible and within the scope of permissible copyright use.What about copyright risk in suggestions? In rare instances (less than 1% based on GitHub‚Äôs research), suggestions from GitHub may match examples of code used to train GitHub‚Äôs AI model. Again, Copilot does not ‚Äúlook up‚Äù or ‚Äúcopy and paste‚Äù code, but is instead using context from a user‚Äôs workspace to synthesize and generate a suggestion.Our experience shows that matching suggestions are most likely to occur in two situations: (i) when there is little or no context in the code editor for Copilot‚Äôs model to synthesize, or (ii) when a matching suggestion represents a common approach or method. If a code suggestion matches existing code, there is risk that using that suggestion could trigger claims of copyright infringement, which would depend on the amount and nature of code used, and the context of how the code is used. In many ways, this is the same risk that arises when using any code that a developer does not originate, such as copying code from an online source, or reusing code from a library. That is why responsible organizations and developers recommend that users employ code scanning policies to identify and evaluate potential matching code.In Copilot, you can opt whether to allow Copilot to suggest code completions that match publicly available code on GitHub.com. For more information, see "Configuring GitHub Copilot settings on GitHub.com". If you have allowed suggestions that match public code, GitHub Copilot can provide you with details about the matching code when you accept such suggestions. Matching code does not necessarily mean copyright infringement, so it is ultimately up to the user to determine whether to use the suggestion, and what and who to attribute (along with other license compliance) in appropriate circumstances.Does GitHub Copilot include a filtering mechanism to mitigate risk?Yes, GitHub Copilot does include an optional code referencing filter to detect and suppress certain suggestions that match public code on GitHub.GitHub has created a duplication detection filter to detect and suppress suggestions that contain code segments over a certain length that match public code on GitHub. This filter can be enabled by the administrator for your enterprise and it can apply for all organizations within your enterprise, or the administrator can defer control to individual organizations.¬†With the filter enabled, Copilot checks code suggestions for matches or near-matches against public code on GitHub of 65 lexemes or more (on average,150 characters). If there is a match, the suggestion will not be shown to the user.In addition to off-topic, harmful, and offensive output filters, GitHub Copilot also scans the outputs for vulnerable code.Does GitHub Copilot include features to make it easier for users to identify potentially relevant open source licenses for matching suggestions?Yes, GitHub Copilot is previewing a code referencing feature as an additional tool to assist users to find and review potentially relevant open source licenses. Code referencing is currently available in Visual Studio Code. This feature searches across public GitHub repositories for code that matches a Copilot suggestion. If there‚Äôs a match, users will find its information displayed in the Copilot console log, including where the match occurred, any applicable licenses, and a deep link to learn more. The deep link will take users to a navigable page on GitHub.com to browse examples of the code match and their repository licenses, and see how many repositories‚Äîincluding ones without licenses‚Äîthat code appears in, as well as links to those repositories. Copilot users can review this information to determine whether the applicable suggestions are suitable for use, and whether additional measures may be necessary to use them.Who owns the suggestions provided by GitHub Copilot?We don‚Äôt determine whether a suggestion is capable of being owned, but we are clear that GitHub does not claim ownership of a suggestion. Whether a suggestion generated by an AI model can be owned depends on many factors (e.g. the intellectual property law in the relevant country, the length of the suggestion, the extent that suggestion is considered ‚Äòfunctional‚Äô instead of expressive, etc).If a suggestion is capable of being owned, our terms are clear: GitHub does not claim ownership.GitHub does not claim ownership of any suggestion. In certain cases, it is possible for Copilot to produce similar suggestions to different users. For example, two unrelated users both starting new files to code the quicksort algorithm in Java will likely get the same suggestion. The possibility of providing similar suggestions to multiple users is a common part of generative AI systems.Can GitHub Copilot introduce insecure code in its suggestions?Public code may contain insecure coding patterns, bugs, or references to outdated APIs or                        idioms. When GitHub Copilot synthesizes code suggestions based on this data, it can also                        synthesize code that contains these undesirable patterns. Copilot has filters in place that                        either block or notify users of insecure code patterns that are detected in Copilot suggestions. These filters target the most common vulnerable coding patterns, including hardcoded credentials, SQL injections, and path injections. Additionally, in recent years we‚Äôve provided tools such as GitHub Advanced Security, GitHub Actions, Dependabot, and CodeQL to open source projects to help improve code quality. Of course, you should always use GitHub Copilot together with good testing and code review practices and security tools, as well as your own judgment.Is GitHub Copilot intended to fully automate code generation and replace developers?No. Copilot is a tool intended to make developers more efficient. It‚Äôs not intended to replace developers, who should continue to apply the same sorts of safeguards and diligence they would apply with regard to any third-party code of unknown origin.The product is called ‚ÄúCopilot‚Äù not ‚ÄúAutopilot‚Äù and it‚Äôs not intended to generate code without oversight. You should use exactly the same sorts of safeguards and diligence with Copilot‚Äôs suggestions as you would use with any third-party code.Identifying best practices for use of third party code is beyond the scope of this section. That said, whatever practices your organization currently uses ‚Äì rigorous functionality testing, code scanning, security testing, etc. ‚Äì you should continue these policies with Copilot‚Äôs suggestions. Moreover, you should make sure your code editor or editor does not automatically compile or run generated code before you review it.Can GitHub Copilot users simply use suggestions without concern?Not necessarily. GitHub Copilot users should align their use of Copilot with their respective                        risk tolerances.As noted above, GitHub Copilot is not intended to replace developers, or their individual skill and judgment, and is not intended to fully automate the process of code development. The same risks that apply to the use of any third-party code apply to the use of Copilot‚Äôs suggestions.Depending on your particular use case, you should consider implementing the protections discussed above. It is your responsibility to assess what is appropriate for the situation and implement appropriate safeguards.You‚Äôre entitled to IP indemnification from GitHub for the unmodified suggestions when Copilot‚Äôs filtering is enabled. If you do elect to enable this feature, the copyright responsibility is ours, not our customers. As part of our ongoing commitment to responsible AI, GitHub and Microsoft extends our IP indemnity and protection support to our customers who are empowering their teams with GitHub Copilot. See Microsoft's Copilot Copyright Commitment for more details.Does GitHub Copilot support accessibility features?We are conducting internal testing of GitHub Copilot‚Äôs ease of use by developers with                        disabilities and working to ensure that GitHub Copilot is accessible to all developers. Please feel free to share your feedback on GitHub Copilot accessibility in our feedback forum.Does GitHub Copilot produce offensive outputs?GitHub Copilot includes filters to block offensive language in the prompts and to avoid                        synthesizing suggestions in sensitive contexts. We continue to work on improving the filter                        system to more intelligently detect and remove offensive outputs. If you see offensive outputs, please report them directly to copilot-safety@github.com so that we can improve our safeguards. GitHub takes this challenge very seriously and we are committed to addressing it.Will GitHub Copilot work as well using languages other than English?Given public sources are predominantly in English, GitHub Copilot will likely work less well in scenarios where natural language prompts provided by the developer are not in English and/or are grammatically incorrect. Therefore, non-English speakers might experience a lower quality of service.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Data from June 2023. Additional research can be found here.Feature in public beta for Copilot Pro and Business plans. Requires use of repositories, issues, discussions, Actions, and other features of GitHub.Authentication with SAML single sign-on (SSO) available for organizations using GitHub Enterprise Cloud.GeneralPlans & pricingPrivacyResponsible AIGeneralWhat is GitHub Copilot?GitHub Copilot transforms the developer experience. Backed by the leaders in AI, GitHub Copilot provides contextualized assistance throughout the software development lifecycle, from code completions and chat assistance in the IDE to code explanations and answers to docs in GitHub and more. With GitHub Copilot elevating their workflow, developers can focus on: value, innovation, and happiness.GitHub Copilot enables developers to focus more energy on problem solving and collaboration and spend less effort on the mundane and boilerplate. That‚Äôs why developers who use GitHub Copilot report up to 75% higher satisfaction with their jobs than those who don‚Äôt and are up to 55% more productive at writing code without sacrifice to quality, which all adds up to engaged developers shipping great software faster.GitHub Copilot integrates with leading editors, including Visual Studio Code, Visual Studio, JetBrains IDEs, and Neovim, and, unlike other AI coding assistants, is natively built into GitHub. Growing to millions of individual users and tens of thousands of business customers, GitHub Copilot is the world‚Äôs most widely adopted AI developer tool and the competitive advantage developers ask for by name.Who is eligible to access GitHub Copilot for free?GitHub Copilot Free is a new free pricing tier with limited functionality for individual developers. Users assigned a Copilot Business or Copilot Enterprise seat are not eligible for access. Users with access to Copilot Pro through a paid subscription, trial, or through an existing verified OSS, student, faculty, or MVP account may elect to use Free instead.¬†
What languages, IDEs, and platforms does GitHub Copilot support?GitHub Copilot is trained on all languages that appear in public repositories. For each language, the quality of suggestions you receive may depend on the volume and diversity of training data for that language. For example, JavaScript is well-represented in public repositories and is one of GitHub Copilot‚Äôs best supported languages. Languages with less representation in public repositories may produce fewer or less robust suggestions.GitHub Copilot is available as an extension in Visual Studio Code, Visual Studio, Vim, Neovim, the JetBrains suite of IDEs, and Azure Data Studio. Although code completion functionality is available across all these extensions, chat functionality is currently available only in Visual Studio Code, JetBrains, and Visual Studio. GitHub Copilot is also supported in terminals through GitHub CLI and as a chat integration in Windows Terminal Canary. With the GitHub Copilot Enterprise plan, GitHub Copilot is natively integrated into GitHub.com. All plans are supported in GitHub Copilot in GitHub Mobile. GitHub Mobile for Copilot Pro and Copilot Business have access to Bing and public repository code search. Copilot Enterprise in GitHub Mobile gives you additional access to your organization's knowledge.Does GitHub Copilot ‚Äúcopy/paste‚Äù?No, GitHub Copilot generates suggestions using probabilistic determination.When thinking about intellectual property and open source issues, it is critical to understand how GitHub Copilot really works. The AI models that create GitHub Copilot‚Äôs suggestions may be trained on public code, but do not contain any code. When they generate a suggestion, they are not ‚Äúcopying and pasting‚Äù from any codebase.To generate a code suggestion, the GitHub Copilot extension begins by examining the code in your editor‚Äîfocusing on the lines just before and after your cursor, but also information including other files open in your editor and the URLs of repositories or file paths to identify relevant context. That information is sent to GitHub Copilot‚Äôs model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat in the code editor, the GitHub Copilot extension creates a contextual prompt by combining your prompt with additional context including the code file open in your active document, your code selection, and general workspace information, such as frameworks, languages, and dependencies. That information is sent to GitHub Copilot‚Äôs model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat on GitHub.com, such as providing an answer to a question from your chat prompt, GitHub Copilot creates a contextual prompt by combining your prompt with additional context including previous prompts, the open pages on GitHub.com as well as retrieved context from your codebase or Bing search. That information is sent to GitHub Copilot‚Äôs model, to make a probabilistic determination of what is likely to come next and generate suggestions.¬† What are the differences between the GitHub Copilot Business, GitHub Copilot Enterprise, and GitHub Copilot Individual plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also¬† adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with GitHub Copilot¬†throughout the platform. GitHub Copilot Enterprise can index an organization‚Äôs codebase for a deeper understanding of the customer‚Äôs knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Individual is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security.What if I do not want GitHub Copilot?GitHub Copilot is entirely optional and requires you to opt in before gaining access. You can easily configure its usage directly in the editor, enabling or disabling it at any time. Additionally, you have control over which file types GitHub Copilot is active for.How do I control access to GitHub Copilot in my company?Access to Copilot Business and Enterprise is managed by your GitHub Administrator. They can control access to preview features, models, and set GitHub Copilot policies for your organization. Additionally, you can use your network firewall to explicitly allow access to Copilot Business and/or block access to Copilot Pro or Free. For more details, refer to the documentation.Plans & pricingWhat are the differences between the Free, Pro, Business, and Enterprise plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also¬† adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with Copilot¬† throughout the platform. GitHub Copilot Enterprise can index an organization‚Äôs codebase for a deeper understanding of the customer‚Äôs knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Pro is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.How can I upgrade my GitHub Copilot Free license to Copilot Pro?If you're on the Free plan, you can upgrade to Pro through your Copilot settings page or directly on the Copilot marketing page.What is included in GitHub Copilot Free?GitHub Copilot Free users are limited to 2000 completions and 50 chat requests (including Copilot Edits).Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security and available to all public repositories.PrivacyWhat personal data does GitHub Copilot process?GitHub Copilot processes personal data based on how Copilot is accessed and used: whether via GitHub.com, mobile app, extensions, or one of various IDE extensions, or through features like suggestions for the command line interface (CLI), IDE code completions, or personalized chat on GitHub.com. The types of personal data processed may include:User Engagement Data: This includes pseudonymous identifiers captured on user interactions with Copilot, such as accepted or dismissed completions, error messages, system logs, and product usage metrics.¬†Prompts: These are inputs for chat or code, along with context, sent to Copilot's AI to generate suggestions.¬†Suggestions: These are the AI-generated code lines or chat responses provided to users based on their prompts.¬†Feedback Data: This comprises real-time user feedback, including reactions (e.g., thumbs up/down) and optional comments, along with feedback from support tickets.Does GitHub use Copilot Business or Enterprise data to train GitHub‚Äôs model?No. GitHub does not use either Copilot Business or Enterprise data to train its models.¬†How does GitHub use the Copilot data?How GitHub uses Copilot data depends on how the user accesses Copilot and for what purpose. Users can access GitHub Copilot through the web, extensions, mobile apps, computer terminal, and various IDEs (Integrated Development Environments). GitHub generally uses personal data to:Deliver, maintain, and update the services as per the customer's configuration and usage, to ensure personalized experiences and recommendationsTroubleshoot, which involves preventing, detecting, resolving, and mitigating issues, including security incidents and product-related problems, by fixing software bugs and maintaining the online services' functionality and up-to-datenessEnhance user productivity, reliability, effectiveness, quality, privacy, accessibility, and security by keeping the service current and operationalThese practices are outlined in GitHub‚Äôs Data Protection Agreement (DPA), which details our data handling commitments to our data controller customers.¬†GitHub also uses certain personal data with customer authorization under the DPA, for the following purposes:Billing and account managementTo comply with and resolve legal obligations¬†For abuse detection, prevention, and protection, virus scanning, and scanning to detect violations of terms of serviceTo generate summary reports for calculating employee commissions and partner incentivesTo produce aggregated reports for internal use and strategic planning, covering areas like forecasting, revenue analysis, capacity planning, and product strategy,For details on GitHub's data processing activities as a controller, particularly for Copilot Pro customers, refer to the GitHub Privacy Statement.How long does GitHub retain Copilot data for Business and Enterprise customers? If and for how long GitHub‚Äôs retains Copilot data depends on how a Copilot user accesses Copilot and for what purpose. The default settings for Copilot Business and Enterprise Customers are as follows:¬†Access through IDE for Chat and Code Completions:Prompts and Suggestions: Not retainedUser Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.All other GitHub Copilot access and use:Prompts and Suggestions: Retained for 28 days.User Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.Why do some Copilot features retain prompts and suggestions?Retaining prompts and suggestions is necessary for chat on github.com, mobile, and CLI Copilot because those features‚Äô effectiveness depends on using thread history to improve responses. The Copilot model requires access to previous interactions to deliver accurate and relevant suggestions.¬†Does GitHub Copilot support compliance with the GDPR and other data protection laws?Yes. GitHub and customers can enter a Data Protection Agreement that supports compliance with the GDPR and similar legislation.Does GitHub Copilot ever output personal data?While we've designed GitHub Copilot with privacy in mind, the expansive definition of personal data under legislation like the EU‚Äôs General Data Protection Regulation (GDPR) means we can't guarantee it will never output such data. The Large Language Model (LLM) powering GitHub Copilot was trained on public code and there were instances in our tests where the tool made suggestions resembling personal data. These suggestions were typically synthesized and not tied to real individuals.¬†How does Copilot allow users to access, alter or delete personal data?These actions are available to Copilot users as described in the GitHub Privacy Statement.
Responsible AIWhat are the intellectual property considerations when using GitHub Copilot?The primary IP considerations for GitHub Copilot relate to copyright. The model that powers Copilot is trained on a broad collection of publicly accessible code, which may include copyrighted code, and Copilot‚Äôs suggestions (in rare instances) may resemble the code its model was trained on. Here‚Äôs some basic information you should know about these considerations:Copyright law permits the use of copyrighted works to train AI models:¬† Countries around the world have provisions in their copyright laws that enable machines to learn, understand, extract patterns, and facts from copyrighted materials, including software code. For example, the European Union, Japan, and Singapore, have express provisions permitting machine learning to develop AI models. Other countries including Canada, India, and the United States also permit such training under their fair use/fair dealing provisions. GitHub Copilot‚Äôs AI model was trained with the use of code from GitHub‚Äôs public repositories‚Äîwhich are publicly accessible and within the scope of permissible copyright use.What about copyright risk in suggestions? In rare instances (less than 1% based on GitHub‚Äôs research), suggestions from GitHub may match examples of code used to train GitHub‚Äôs AI model. Again, Copilot does not ‚Äúlook up‚Äù or ‚Äúcopy and paste‚Äù code, but is instead using context from a user‚Äôs workspace to synthesize and generate a suggestion.Our experience shows that matching suggestions are most likely to occur in two situations: (i) when there is little or no context in the code editor for Copilot‚Äôs model to synthesize, or (ii) when a matching suggestion represents a common approach or method. If a code suggestion matches existing code, there is risk that using that suggestion could trigger claims of copyright infringement, which would depend on the amount and nature of code used, and the context of how the code is used. In many ways, this is the same risk that arises when using any code that a developer does not originate, such as copying code from an online source, or reusing code from a library. That is why responsible organizations and developers recommend that users employ code scanning policies to identify and evaluate potential matching code.In Copilot, you can opt whether to allow Copilot to suggest code completions that match publicly available code on GitHub.com. For more information, see "Configuring GitHub Copilot settings on GitHub.com". If you have allowed suggestions that match public code, GitHub Copilot can provide you with details about the matching code when you accept such suggestions. Matching code does not necessarily mean copyright infringement, so it is ultimately up to the user to determine whether to use the suggestion, and what and who to attribute (along with other license compliance) in appropriate circumstances.Does GitHub Copilot include a filtering mechanism to mitigate risk?Yes, GitHub Copilot does include an optional code referencing filter to detect and suppress certain suggestions that match public code on GitHub.GitHub has created a duplication detection filter to detect and suppress suggestions that contain code segments over a certain length that match public code on GitHub. This filter can be enabled by the administrator for your enterprise and it can apply for all organizations within your enterprise, or the administrator can defer control to individual organizations.¬†With the filter enabled, Copilot checks code suggestions for matches or near-matches against public code on GitHub of 65 lexemes or more (on average,150 characters). If there is a match, the suggestion will not be shown to the user.In addition to off-topic, harmful, and offensive output filters, GitHub Copilot also scans the outputs for vulnerable code.Does GitHub Copilot include features to make it easier for users to identify potentially relevant open source licenses for matching suggestions?Yes, GitHub Copilot is previewing a code referencing feature as an additional tool to assist users to find and review potentially relevant open source licenses. Code referencing is currently available in Visual Studio Code. This feature searches across public GitHub repositories for code that matches a Copilot suggestion. If there‚Äôs a match, users will find its information displayed in the Copilot console log, including where the match occurred, any applicable licenses, and a deep link to learn more. The deep link will take users to a navigable page on GitHub.com to browse examples of the code match and their repository licenses, and see how many repositories‚Äîincluding ones without licenses‚Äîthat code appears in, as well as links to those repositories. Copilot users can review this information to determine whether the applicable suggestions are suitable for use, and whether additional measures may be necessary to use them.Who owns the suggestions provided by GitHub Copilot?We don‚Äôt determine whether a suggestion is capable of being owned, but we are clear that GitHub does not claim ownership of a suggestion. Whether a suggestion generated by an AI model can be owned depends on many factors (e.g. the intellectual property law in the relevant country, the length of the suggestion, the extent that suggestion is considered ‚Äòfunctional‚Äô instead of expressive, etc).If a suggestion is capable of being owned, our terms are clear: GitHub does not claim ownership.GitHub does not claim ownership of any suggestion. In certain cases, it is possible for Copilot to produce similar suggestions to different users. For example, two unrelated users both starting new files to code the quicksort algorithm in Java will likely get the same suggestion. The possibility of providing similar suggestions to multiple users is a common part of generative AI systems.Can GitHub Copilot introduce insecure code in its suggestions?Public code may contain insecure coding patterns, bugs, or references to outdated APIs or                        idioms. When GitHub Copilot synthesizes code suggestions based on this data, it can also                        synthesize code that contains these undesirable patterns. Copilot has filters in place that                        either block or notify users of insecure code patterns that are detected in Copilot suggestions. These filters target the most common vulnerable coding patterns, including hardcoded credentials, SQL injections, and path injections. Additionally, in recent years we‚Äôve provided tools such as GitHub Advanced Security, GitHub Actions, Dependabot, and CodeQL to open source projects to help improve code quality. Of course, you should always use GitHub Copilot together with good testing and code review practices and security tools, as well as your own judgment.Is GitHub Copilot intended to fully automate code generation and replace developers?No. Copilot is a tool intended to make developers more efficient. It‚Äôs not intended to replace developers, who should continue to apply the same sorts of safeguards and diligence they would apply with regard to any third-party code of unknown origin.The product is called ‚ÄúCopilot‚Äù not ‚ÄúAutopilot‚Äù and it‚Äôs not intended to generate code without oversight. You should use exactly the same sorts of safeguards and diligence with Copilot‚Äôs suggestions as you would use with any third-party code.Identifying best practices for use of third party code is beyond the scope of this section. That said, whatever practices your organization currently uses ‚Äì rigorous functionality testing, code scanning, security testing, etc. ‚Äì you should continue these policies with Copilot‚Äôs suggestions. Moreover, you should make sure your code editor or editor does not automatically compile or run generated code before you review it.Can GitHub Copilot users simply use suggestions without concern?Not necessarily. GitHub Copilot users should align their use of Copilot with their respective                        risk tolerances.As noted above, GitHub Copilot is not intended to replace developers, or their individual skill and judgment, and is not intended to fully automate the process of code development. The same risks that apply to the use of any third-party code apply to the use of Copilot‚Äôs suggestions.Depending on your particular use case, you should consider implementing the protections discussed above. It is your responsibility to assess what is appropriate for the situation and implement appropriate safeguards.You‚Äôre entitled to IP indemnification from GitHub for the unmodified suggestions when Copilot‚Äôs filtering is enabled. If you do elect to enable this feature, the copyright responsibility is ours, not our customers. As part of our ongoing commitment to responsible AI, GitHub and Microsoft extends our IP indemnity and protection support to our customers who are empowering their teams with GitHub Copilot. See Microsoft's Copilot Copyright Commitment for more details.Does GitHub Copilot support accessibility features?We are conducting internal testing of GitHub Copilot‚Äôs ease of use by developers with                        disabilities and working to ensure that GitHub Copilot is accessible to all developers. Please feel free to share your feedback on GitHub Copilot accessibility in our feedback forum.Does GitHub Copilot produce offensive outputs?GitHub Copilot includes filters to block offensive language in the prompts and to avoid                        synthesizing suggestions in sensitive contexts. We continue to work on improving the filter                        system to more intelligently detect and remove offensive outputs. If you see offensive outputs, please report them directly to copilot-safety@github.com so that we can improve our safeguards. GitHub takes this challenge very seriously and we are committed to addressing it.Will GitHub Copilot work as well using languages other than English?Given public sources are predominantly in English, GitHub Copilot will likely work less well in scenarios where natural language prompts provided by the developer are not in English and/or are grammatically incorrect. Therefore, non-English speakers might experience a lower quality of service.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Data from June 2023. Additional research can be found here.Feature in public beta for Copilot Pro and Business plans. Requires use of repositories, issues, discussions, Actions, and other features of GitHub.Authentication with SAML single sign-on (SSO) available for organizations using GitHub Enterprise Cloud.FootnotesOption to purchase additional premium requests not available to users that subscribe or have subscribed to Pro or Pro+ through GitHub Mobile on iOS or Android.\n\n\n\nGitHub SecurityAdvanced SecuritySecret ProtectionCode SecuritySupply Chain SecurityPlans & pricingGitHub Advanced SecuritySecurity that moves at the  speed of developmentRequest a demoSee plans & pricingStop leaks before  they startExplore Secret ProtectionFix vulnerabilities  in your codeExplore Code SecurityGitHub is used byPauseBecome a risk reduction warriorStay ahead of threats with built-in security, secret protection, and dependency monitoring.Strengthen your development with AIWrite secure code at scale with AI-driven insights and automated fixes from GitHub Copilot Autofix.Empower your team with native AppSecFind and fix vulnerabilities in real time by integrating application security right into GitHub.‚ÄúGitHub Advanced Security has solved the risk of leaked credentials. Now, developers are alerted to the problem before they push the code live. They have a direct feedback loop.Florian KochLead developer at Deutsche Verm√∂gensberatungTwo layers of powerful protectionCombine Secret Protection and Code Security to safeguard your code from every angle.See plans & pricingAdd-onSecret ProtectionFor teams and organizations serious about stopping secret leaks.$19USDper active committer/monthRequest a demoContact salesTeam or Enterprise plan requiredAdd-onCode SecurityFor teams and organizations committed to fixing vulnerabilities before production.$30USDper active committer/monthRequest a demoContact salesTeam or Enterprise plan requiredGet the most out of GitHub Advanced SecurityMaximize your defenses with industry-leading AppSecDiscover how our security solution can benefit your organization.Request a demoSee how improved security drives business successExplore the benefits of improving software security standards in organizations.Read the Forrester ReportHow top teams secure code while moving fastLearn how industry experts protect their code without sacrificing productivity.Explore videosFrequently asked questionsWhat is GitHub Advanced Security?GitHub Advanced Security (GHAS) encompasses GitHub‚Äôs application security products comprising GitHub Secret Protection and GitHub Code Security. GHAS adds cutting-edge tools for static analysis, software composition analysis, and secret scanning to the GitHub platform that developers already know and love. Unlike traditional application security packages that burden the software development toolchain with complex workflows that inhibit adoption, GHAS makes it easy for developers to find and fix vulnerabilities earlier in the software development life cycle. Why choose GitHub Advanced Security instead of a third-party AppSec product?Unlike third-party security add-ons, GitHub Advanced Security operates entirely in the native GitHub workflows that developers already know and love. By making it easier for developers to remediate vulnerabilities as they go, GitHub Advanced Security frees time for security teams to focus on critical strategies that protect businesses, customers, and communities from application-based vulnerabilities.What is DevSecOps?DevSecOps refers to a combination of the development, security, and operations tools necessary to develop software applications.What is AppSec?Application security (AppSec) is the process of finding, fixing, and preventing security vulnerabilities in applications. GitHub Advanced Security provides AppSec tools for static application security testing (SAST), which identifies vulnerabilities in the code itself. Can I use GitHub Advanced Security with Microsoft Azure DevOps?Yes. GitHub Advanced Security is available as an add-on for Azure DevOps.Where can I find case studies and reference customers?Read our customer stories to learn how customers like Telus, Mercado Libre, and KPMG use GitHub Advanced Security to secure applications and accelerate the software development lifecycle.Can I review documentation before purchase?Yes. As with all GitHub products, documentation for GitHub Advanced Security is publicly available.Does GitHub offer consulting, training, and other deployment services?Yes! Please visit Expert Services to learn more.\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub ActionsAutomate your workflow from idea to productionGitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.
Get started with actionsContact salesKick off workflows on any GitHub event to automate tasksHosted runnersLinux, macOS, Windows, ARM, GPU, and containers make it easy to build and test all your projects. Run directly on a VM or inside a container. Use your own VMs, in the cloud or on-prem, with self-hosted runners.Matrix buildsSave time with matrix workflows that simultaneously test across multiple operating systems and versions of your runtime.
Any languageGitHub Actions supports Node.js, Python, Java, Ruby, PHP, Go, Rust, .NET, and more. Build, test, and deploy applications in your language of choice.
Live logsSee your workflow run in realtime with¬†color and emoji. It‚Äôs one click to copy a link that highlights a specific line number to share a CI/CD failure.Built in secret storeAutomate your software development practices with workflow files embracing the Git flow by codifying it in your repository.Multi-container testingTest your web service and its DB in your workflow by simply adding some¬†docker-compose¬†to your workflow file.Run a workflow‚Ä® on any eventWhether you want to build a container, deploy a web service, or automate welcoming new users to your open source projects‚Äîthere's an action for that. Pair GitHub Packages with Actions to simplify package management, including version updates, fast distribution with our global CDN, and dependency resolution, using your existing GITHUB_TOKEN.Actions marketplaceGitHub Actions connects all of your tools to automate every step of your development workflow. Explore the actions marketplaceEasily deploy to any cloud, create tickets in Jira, or publish a package to npm.Want to venture off the beaten path? Use the millions of open source libraries available on GitHub to create your own actions. Write them in JavaScript or create a container action‚Äîboth can interact with the full GitHub API and any other public API.Secure package registry for code and workflowsSecurely store and manage your code and packages with GitHub credentials, integrated into your workflows via APIs and webhooks. Enjoy fast, reliable downloads through a global CDN for optimized performance.Read the docs‚ÄúActions is an exciting development and unlocks so much potential beyond CI/CD. It promises to streamline our workflows for a variety of tasks, from deploying our websites to querying the GitHub API for custom status reports to standard CI builds.Ralf GommersSciPy maintainerGitHub Actions is free for public repositoriesWe take pride in our Open Source legacy, and are happy to provide free CI/CD for public repositories. Check out the doc to see which runners are included.View docsHost your own runners or use GitHub-hosted runnersCheck out plan details to see how many minutes are included and the pricing table below to see which runners you can use your free minutes on.View pricingThe future of workflow automation is now
Get started with actions\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub CodespacesSecure development‚Ä® made¬†simpleGitHub Codespaces gets you up and coding faster with fully configured, secure cloud development environments native to GitHub.Get started for freeContact SalesSecure by designCreated with security in mind, Codespaces provides a secure development environment through its built-in capabilities and native integration with GitHub.Collaborate‚Ä® where you codeCodespaces provides a shared development environment and removes the need for complex, time consuming setups.Your space, your way. Codespaces is a home away from home for your code that feels just like your usual machine.Your space, your way. Codespaces is a home away from home for your code that feels just like your usual machine.
Start coding instantly from anywhere in the world. Switching projects? Grab a new machine from the cloud that‚Äôs preconfigured for that project. Your settings travel with you.Tabs or spaces? Monokai or Solarized? Prettier or Beautify? It‚Äôs up to you. Control every nerdy detail only you care about with your own dotfiles repository.Browser preview  and port forwardingPreview your changes and get feedback from teammates by sharing ports within the scope allowed by policy.Onboard fasterQuickly spin up a codespace with only an IDE or browser and a GitHub account. With a few configuration files, you can give your developers an instant, fully configured, and secure development environment so they can start coding immediately.What you can do with CodespacesCode from any device. Want to code on an iPad? Go for it. Spin up Codespaces from any device with internet access. Don‚Äôt worry if your device is powerful enough‚ÄîCodespaces lives in the cloud.Onboard at the speed of thought. No more building your dev environment while you onboard. Codespaces launches instantly from any repository on GitHub with pre-configured, secure environments.Fix bugs right from a pull request.¬†Got a pull request detailing a bug or security issue? Open Codespaces right from the pull request without waiting for your dev environment to load.Learn how GitHub‚Äôs Engineering Team builds with CodespacesRead more‚ÄúWhat used to be a 15-step process is just one step: open Codespaces and you‚Äôre off and running.Clint ChesterDeveloper Lead, Synergy‚ÄúCodespaces lets developers skip the tedious, error-prone stuff that normally stands between them and getting started on real work.Keith AnnetteCloud Capability Lead, KPMG, UKStart coding¬†in seconds with CodespacesGet started for freeFrequently asked questionsHow does Codespaces work?A codespace is a development environment that's hosted in the cloud. Customize your project for GitHub Codespaces by configuring dev container files to your repository (often known as configuration-as-code), which creates a repeatable codespace configuration for all users of your project.GitHub Codespaces run on a various VM-based compute options hosted by GitHub.com, which you can configure from 2 core machines up to 32 core machines. Connect to your codespaces from the browser or locally using an IDE like Visual Studio Code or IntelliJ.How do I use Codespaces?There are a number of entry points to spin up a Codespaces environment, including:A template.Your repository for new feature workAn open pull request to explore work-in-progressA commit in the repository's history to investigate a bug at a specific point in timeVisual Studio CodeIn beta, can you also use your JetBrains IDE or JupyterLabLearn more about how to use Codespaces in our documentation.Is Codespaces available for individual developers?Codespaces is available for developers in every organization, and under the control of the organization who pays for the user's codespace. All personal (individual) GitHub.com accounts include a quota of free usage each month, which organizations can enable (see the next question) for their private and internal repositories. GitHub will provide users in the free plan 120 core hours or 60 hours of run time on a 2 core codespace, plus 15 GB of storage each month. See how it's balanced on the billing page.Is Codespaces available for teams and companies?Codespaces is available for teams and companies, but needs to be enabled first in an organization‚Äôs settings. Teams and companies can select which repositories and users have access to Codespaces for added security and permissioning control. Learn how to enable Codespaces in an organization in our docs.How much does Codespaces cost?Codespaces is free for individual use up to 60 hours a month and comes with simple, pay-as-you-go pricing after that. It‚Äôs also available for organizations with pay-as-you-go pricing and has pricing controls so any company or team can determine how much they want to spend a month. Learn more about Codespaces pricing for organizations here.Can I self-host Codespaces?Codespaces cannot be self-hosted.How do I access Codespaces with LinkedIn Learning?You can use Codespaces directly through LinkedIn Learning. LinkedIn Learning offers 50+ courses across six of the most popular coding languages, as well as data science and machine learning. These courses are integrated with Codespaces, so you can get hands-on practice anytime, from any machine via LinkedIn. These courses will be unlocked on LinkedIn Learning for free through Feb. 2023. Learn more about LinkedIn Learning and GitHub Codespaces here.How do I enable Codespaces on GitHub?Codespaces is on by default for developers with a GitHub free account. If you belong to an organization, there may be a policy that prevents cloning‚Äîbut if you can clone a repository, you will be able to start using Codespaces. Organizations will also need to pay for, enable, and manage their Codespaces instances.Is Codespaces available for students?Codespaces is available for free to students as part of the GitHub Student Developer Pack. Learn more about how to sign up and start using Codespaces and other GitHub products here.Is Codespaces available for open source maintainers?Codespaces provides both maintainers and contributors with generous free monthly usage.\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub IssuesProject planning for developersCreate issues, break them into sub-issues, track progress, add custom fields, and have conversations. Visualize large projects as tables, boards, or roadmaps, and automate everything with code.Start using projectsContact salesLogos for Shopify, Vercel, Stripe, Ford, and NASABreak issues into sub-issuesTackle complex issues with sub-issues and track their status with progress indicators. Navigate the full scope of work all in one view.Streamline conversationsExpress ideas with GitHub Flavored Markdown, mention contributors, react with emoji, clarify with attachments, and see references from commits, pull requests, releases, and deploys. Coordinate by assigning contributors and teams, or by adding them to milestones and projects. All in a single timeline.Upload and attach videos to commentsDive into work faster with issue forms and templatesFeaturesBored of boards? Switch to tables and roadmaps. Create views for how you work. Save views for sprints, backlogs, teams, or releases. Rank, group, sort, slice and filter to suit the occasion. Create swimlanes, share templates and set work in progress limits.No mouse? No problem. Every action you can take with the mouse has a keyboard shortcut or command. Filter, sort, group, and assign issues. Your hands never leave the keyboard.Custom fieldsTrack metadata like iterations, priority, story points, dates, notes, and links. Add custom fields to projects and edit from the issue sidebar.
Track progress with project¬†insightsTrack the health of your current iteration cycle, milestone, or any other custom field you create with new project insights. Identify bottlenecks and issues blocking the team from making progress with the new burn up chart.Share best practices with project templatesCreate templates to share and reuse when getting started with a new project. Share inspiration across teams and get started with a single click.Manage work automaticallyAccelerate your project planning with workflows. Automatically triage issues, set values for custom fields, or archive issues.
Manage work automatically Issues, where you need themIssues can be viewed, created, and managed in your browser, your favorite terminal, or on your phone or¬†tablet.GitHub CLIView, update, and create issues without ever leaving your¬†terminal.Learn moreGitHub MobileCreate and manage issues on the go with our native iOS and Android mobile apps.Learn moreWhat developers are saying
‚ÄúThe new planning and tracking functionality keeps my project management close to my code. I no longer find myself needing to reach for spreadsheets or 3P tools which go stale instantly.Dan GodfreyDevelopment ManagerFlexible project planning for¬†developers Start using projectsContact salesFrequently asked¬†questionsWhat is GitHub Issues?We all need a way to plan our work, track issues, and discuss the things we build. Our answer to this universal question is GitHub Issues, and it‚Äôs built-in to every repository. GitHub‚Äôs issue tracking is unique because of our focus on simplicity, references, and elegant formatting.With GitHub Issues, you can express ideas with GitHub Flavored Markdown, assign and mention contributors, react with emojis, clarify with attachments and videos, plus reference code like commits, pull requests, and deploys. With task lists, you can break big issues into tasks, further organize your work with milestones and labels, and track relationships and dependencies.We built GitHub Issues for developers. It is simple, adaptable, and powerful.What are Projects?As teams and projects grow, how we work evolves. Tools that hard-code a methodology are too specific and rigid to adapt to any moment. Often, we find ourselves creating a spreadsheet or pulling out a notepad to have the space to think. Then our planning is disconnected from where the work happens.The new Projects connect your planning directly to the work your teams are doing and flexibly adapt to whatever your team needs at any point. Built like a spreadsheet, project tables give you a live canvas to filter, sort, and group issues and pull requests. You can use it, or the accompanying project board, along with custom fields, to track a sprint, plan a feature, or manage a large-scale release.What plans have access to Projects?All users have access to the free tier of GitHub Issues and Projects. For more information about paid tiers, see our pricing page.Will the new Projects experience be available in GitHub Enterprise Server?Yes! GitHub Enterprise Server (GHES) support follows our regular cadence of one to two quarters before enabling the on-premises functionality.\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchCode ReviewWrite better codeOn GitHub, lightweight code review tools are built into every pull request. Your team can create review processes that improve the quality of your code and fit neatly into your workflow.Get startedContact salesEvery change starts with a pull request.Every change starts with a pull request.Learn pull request fundamentalsStart a new feature or propose a change to existing code with a pull request‚Äîa base for your team to coordinate details and refine your changes.Pull requests are fundamental to how teams review and improve code on GitHub. Evolve projects, propose new features, and discuss implementation details before changing your source code.See every update and act on it, in-situDiffsPreview changes in context with your code to see what is being proposed. Side-by-side Diffs highlight added, edited, and deleted code right next to the original file, so you can easily spot¬†changes.Learn moreHistoryBrowse commits, comments, and references related to your pull request in a timeline-style interface. Your pull request will also highlight what‚Äôs changed since you last checked.Learn moreBlameSee what a file looked like before a particular change. With blame view, you can see how any portion of your file has evolved over time without viewing the file‚Äôs full history.Learn moreDiscuss code within your codeCommentsOn GitHub, conversations happen alongside your code. Leave detailed comments on code syntax and ask questions about structure inline.Review requestsIf you‚Äôre on the other side of the code, requesting peer reviews is easy. Add users to your pull request, and they‚Äôll receive a notification letting them know you need their feedback.ReviewsSave your teammates a few notifications. Bundle your comments into one cohesive review, then specify whether comments are required changes or just suggestions.You can‚Äôt always avoid conflict. Merge pull requests faster by resolving simple merge conflicts on GitHub‚Äîno command line necessary.Learn moreMerge the highest quality codeReviews can improve your code, but mistakes happen. Limit human error and ensure only high quality code gets merged with detailed permissions and status¬†checks.Fast, relevant resultsGive collaborators as much access as they need through your repository settings. You can extend access to a few teams and select which ones can read or write to your files. The options you have for permissions depend on your plan.See plan optionsProtected branchesProtected Branches help you maintain the integrity of your code. Limit who can push to a branch, and disable force pushes to specific branches. Then scale your policies with the Protected Branches API.
Learn moreRequired status checks
Create required status checks to add an extra layer of error prevention on branches. Use the Status API to enforce checks and disable the merge button until they pass. To err is human; to automate, divine!Status API docEvery change starts with a pull request. Get started\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub DiscussionsThe home for ‚Ä®developer communitiesAsk questions, share ideas, and build connections with each other‚Äîall right next to your code. GitHub Discussions enables healthy and productive software¬†collaboration.Try nowContact salesDedicated space for conversationsDecrease the burden of managing active work in issues and pull requests by providing a separate space to host ongoing discussions, questions, and¬†ideas.Highlight quality responses and make the best answer more discoverable. Keep context in-tact and conversations on track with threaded comments. Ask your community directly with custom polls. Leverage GraphQL API and webhooks to meet your teams wherever they are. Give your open ended conversations the room they need outside of issues. CustomizePersonalize for your community and team with any ways to make your space unique for you and your collaborators.Custom categories. Create discussion categories that fit your community's needs. Label and organize. Make announcements and the most important discussions more visible for contributors. Pin discussions. Make announcements and the most important discussions more visible for contributors. Monitor insightsTrack the health and growth of your community with a dashboard full of actionable data.Contribution activityCount of total contribution activity to Discussions, Issues, and PRs.Discussion page viewTotal page views to Discussions segmented by logged in vs anonymous users.Discussions daily contributorsCount of unique users who have reacted, upvoted, marked an answer, commented, or posted in the selected period.Start the conversation with your community Try now\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchCode SearchExactly what you‚Äôre looking forYour code‚Äîand the world‚Äôs‚Äîis at your fingertips.Try it nowContact salesSearch, navigate, and understand your team‚Äôs code‚Äîand billions of lines of public¬†code.Fast, relevant resultsCode search understands your code‚Äîand brings you relevant results with incredible speed.A power user's dreamSearch using regular expressions, boolean operations, keyboard shortcuts, and more.More than just searchDig deeper with the all-new code view‚Äîtightly integrating browsing and code navigation.Way more than grep.GitHub code search can search across multiple repositories and is always up to date. It understands your code, and puts the most relevant results first.Use the new search input to find symbols and files‚Äîand jump right to them. Know exactly what you‚Äôre looking for? Express it with our powerful search operators. Meet the all-new code view.Dig deeper into complex codebases with tightly integrated search, code navigation and browsing.Instantly jump to definitions in over 10 languages. No setup required with Code navigation. Keep all your code in context and instantly switch files with the new file tree pane. What developers are saying
‚ÄúCode search makes it effortless to quickly find what I'm looking for in my code, or across all of GitHubKeith SmileySoftware Engineer‚ÄúCode search turns what would've been a ~10 minute grep search into a 2 second UI search Marco MontagnaPlatform EngineerFind more, search¬†lessTry it now\n\n\n\nWhy GitHubMost of the world's code lives on GitHub. Why not yours?GitHub empowers developers and enterprises to collaborate, innovate, and build securely. With AI-powered tools, built-in security testing, and seamless integration, it supports teams from first commit to enterprise development.
Start free for 30 daysContact salesWhat is GitHub?Over 90% of Fortune 100 companies and more than 150 million developers rely on GitHub to deliver scalable, reliable, and secure solutions for teams of all sizes.Developer-first: Designed for developers, GitHub offers seamless collaboration tools that make teamwork smarter, faster, and more secure.
Enterprise-grade: GitHub Enterprise scales with your organization, delivering the performance and security needed for teams of any size.
AI-powered: Leverage GitHub Copilot to automate tasks and enhance productivity with smart, context-aware code suggestions.
Logos for Fidelity Shopify Mercedes Benz American Airlines Adobe Ford Vodafone Spotify Home DepotThe developer platform that grows with you
Whether you're a small startup or a global enterprise, GitHub is designed to grow with you. The platform adapts to your needs, helping ensure that you don‚Äôt have to compromise on performance, security, or collaboration as your organization scales.Explore GitHub EnterpriseCustomizable workflowsTailor your workflows with GitHub Actions and integrate seamlessly with your existing tools.Learn more about GitHub ActionsSecurity at scaleGitHub's centralized access management and compliance tools help ensure your code and data remain safe.Explore GitHub securityYour code, your controlWith GitHub Enterprise Cloud, you decide where your code lives while enabling security, compliance, and scalability with SaaS agility and enterprise-grade governance.
Read about data residency55%faster coding enabled by GitHub Copilot80%time saved in developer onboarding$3.2Min savings by reducing developer onboarding training time through automation75%improvement in time spent managing tools and code infrastructureSecurity throughout the SDLC
Fix vulnerabilities before they hit production and reduce the risk of a costly breach with application security that is built in, not bolted on.Explore GitHub Advanced SecurityCode securityReview potential vulnerabilities and get suggested fixes with Copilot Autofix to accelerate remediation and strengthen security posture.Learn more about Copilot AutofixSecret protectionHelp ensure your secrets stay secure by preventing accidental exposure in your repositories.Check out GitHub Secret ProtectionSupply chain securityVisualize, protect, and remediate your code's upstream dependencies.Explore GitHub supply chain security3xfaster remediation on average with Copilot Autofix28 minfrom vulnerability detection to successful remediation4.4Msecrets prevented from being leaked on GitHub in 2024The comprehensive platformfor high-performance teams
GitHub is where the world builds software‚Äîfaster, smarter, and more securely. Unlock the full potential of your team with an AI-native platform, seamless automation, and CI/CD workflows that help you build, scale, and innovate like never before.Explore CI/CD solutionSpeed up your workflows and eliminate bottlenecksHarness GitHub Copilot to automate tasks, enhance code quality, and boost productivity. With intelligent, adaptive recommendations, you‚Äôll write cleaner code quicker and accomplish more in less time.See GitHub CopilotGet your team in sync, effortlesslyWith GitHub‚Äôs integrated tools‚Äîfrom pull requests to project boards‚Äîcollaboration is streamlined, and automation handles the heavy lifting. Keep your team aligned, reduce manual tasks, and stay focused on building great software.Learn more about GitHub IssuesWork smarter, build faster, innovate with intentionGitHub introduces new ways to work smarter and faster. With AI-powered tools and agentic automation, you can reduce repetitive tasks and stay in a flow state‚Äîshaping the future of software with speed and intention.Explore GitHub Copilot agent mode‚ÄúBetween Copilot, Codespaces, Issues, Actions, and Dependabot, GitHub is at the center of our development universe. It has enabled us to increase the velocity of our development and has shortened our time-to-market.
Luigi UngaroGlobal Engine developer lead, AmplifonThe platform developers know and loveEmpower your team to collaborate, innovate, and build software‚Äîfaster, smarter, and more securely‚Äîwith the platform they know and love.
Start free for 30 daysContact sales\n\n\n\nThe tools you need to build what you wantExperience AI with Copilot ChatLearn moreThe latest GitHub previewsLearn moreCollaborative codingAutomation & CI/CDApplication securityClient appsProject managementGovernance & administrationCommunityCollaborative codingInnovate faster with seamless collaboration.See the changes you care about.Build community around your code.GitHub CodespacesSpin up fully configured dev environments in the cloud with the full power of your favorite editor.Learn moreGitHub CopilotGet suggestions for whole lines of code or entire functions right inside your editor.Learn morePull requestsReceive notifications of contributor changes to a repository, with specified access limits, and seamlessly merge accepted updates.Learn moreDiscussionsDedicated space for your community to come together, ask and answer questions, and have open-ended conversations.Learn moreCode search & code viewRapidly search, navigate, and understand code right from GitHub.com with our powerful new tools.Learn moreCode reviewReview new code, visualize changes, and merge confidently with automated status checks.Learn moreDraft pull requestsCollaborate and discuss changes without a formal review or the risk of unwanted merges.Learn moreProtected branchesEnforce branch merge restrictions by requiring reviews or limiting access to specific contributors.Learn moreAutomation and CI/CDAutomate everything: CI/CD, testing, planning, project management, issue labeling, approvals, onboarding, and more.Standardize and scale best practices, security, and compliance across your organization.Get started quickly with thousands of actions from partners and the community.GitHub ActionsAutomate your software workflows by writing tasks and combining them to build, test, and deploy faster from GitHub.Learn moreGitHub PackagesHost your own software packages or use them as dependencies in other projects, with both private and public hosting available.Learn moreAPIsCreate calls to get all the data and events you need within GitHub, and automatically kick off and advance your software workflows.Learn moreGitHub MarketplaceLeverage thousands of actions and applications from our community to help build, improve, and accelerate your workflows.Learn moreWebhooksDozens of events and a webhooks API help you integrate with and automate work for your repository, organization, or application.Learn moreGitHub-hosted runnersMove automation to the cloud with on-demand Linux, macOS, Windows, ARM, and GPU environments for your workflow runs, all hosted by GitHub.Learn moreSelf-hosted runnersGain more environments and fuller control with labels, groups, and policies to manage runs on your own machines, plus an open source runner application.Learn moreWorkflow visualizationMap workflows, track their progression in real time, understand complex workflows, and communicate status with the rest of the team.Learn moreWorkflow templatesStandardize and scale best practices and processes with preconfigured workflow templates shared across your organization.Learn moreApplication securityApplication security where found means fixed. Powered by GitHub Copilot Autofix.Explore GitHub Advanced SecurityPrevent, find, and fix application vulnerabilities and leaked secrets.Target historical alerts to reduce security debt at scale.Built into the GitHub platform that developers know and love.Code scanningFind vulnerabilities in your code with CodeQL, GitHub‚Äôs industry-leading semantic code analysis. Prevent new vulnerabilities from being introduced by scanning every pull request.Learn moreGitHub Copilot AutofixPowered by GitHub Copilot, generate automatic fixes for 90% of alert types in JavaScript, TypeScript, Java, and Python. Quickly remediate with contextual vulnerability intelligence and advice.Learn moreSecurity campaignsSolve your backlog of application security debt with security campaigns that target and generate autofixes for up to 1,000 alerts at a time, rapidly reducing the risk of vulnerabilities and zero-day attacks.Learn moreSecret scanningDetect exposed secrets in your public and private repositories, and revoke them to secure access to your services.Learn moreGitHub Copilot secret scanningAdditional AI capabilities to detect elusive secrets like passwords.Learn moreDependency graphView the packages your project relies on, the repositories that depend on them, and any vulnerabilities detected in their dependencies.Learn moreDependabot alertsReceive alerts when new vulnerabilities affect your repositories, with GitHub detecting and notifying you of vulnerable dependencies in both public and private repositories.Learn moreDependabot security and version updatesKeep your code secure by automatically opening pull requests that update vulnerable or out-of-date dependencies.Learn moreDependency reviewAssess the security impact of new dependencies in pull requests before merging.Learn moreGitHub security advisoriesPrivately report, discuss, fix, and publish information about security vulnerabilities found in open source repositories.Learn morePrivate vulnerability reportingEnable your public repository to privately receive vulnerability reports from the community and collaborate on solutions.Learn moreGitHub Advisory DatabaseBrowse or search GitHub's database of known vulnerabilities, featuring curated CVEs and security advisories linked to the GitHub dependency graph.Learn moreClient appsAccess GitHub anywhere: On Desktop, Mobile, and Command Line.Accessible anywhere. Use GitHub on macOS, Windows, mobile, or tablet with native apps.Efficient management. Handle pull requests, issues, and tasks swiftly with GitHub CLI or mobile.Streamlined development. Visualize and commit changes easily with GitHub Desktop.GitHub MobileTake your projects, ideas, and code to go with fully native mobile and tablet experiences.Learn moreGitHub CLIManage issues and pull requests from the terminal, where you're already working with Git and your code.Learn moreGitHub DesktopSimplify your development workflow with a GUI to visualize, commit, and push changes‚Äîno command line needed.Learn moreProject managementKeep feature requests, bugs, and more organized.Coordinate initiatives big and small with project tables, boards, and task lists.Engineered for software teams.Track what you deliver down to the commit.GitHub ProjectsCreate a customized view of your issues and pull requests to plan and track your work.Learn moreGitHub IssuesTrack bugs, enhancements, and other requests, prioritize work, and communicate with stakeholders as changes are proposed and merged.Learn moreMilestonesTrack progress on groups of issues or pull requests in a repository, and map groups to overall project goals.Learn moreCharts and insightsLeverage insights to visualize your projects by creating and sharing charts built from your project's data.Learn moreOrg dependency insightsView vulnerabilities, licenses, and other important information for the open source projects your organization depends on.Learn moreRepository insightsUse data about activity, trends, and contributions within your repositories, to make data-driven improvements to your development cycle.Learn moreWikisHost project documentation in a wiki within your repository, allowing contributors to easily edit it on the web or locally.Learn moreGovernance & administrationSimplify access and permissions management across your projects and teams.Update permissions, add new users as you grow, and assign everyone the exact permissions they need.Sync with Okta and Entra ID.OrganizationsCreate groups of user accounts that own repositories and manage access on a team-by-team or individual user basis.Learn moreTeamsOrganize your members to mirror your company's structure, with cascading access to permissions and mentions.Learn moreTeam syncEnable team synchronization between your identity provider and your organization on GitHub, including Entra ID and Okta.Learn moreCustom rolesDefine users' access level to your code, data, and settings based on their role in your organization.Learn moreCustom repository rolesEnsure members have only the permissions they need by creating custom roles with fine-grained permission settings.Learn moreDomain verificationVerify your organization's identity on GitHub and display that verification through a profile badge.Learn moreCompliance reportsTake care of your security assessment and certification needs by accessing GitHub‚Äôs cloud compliance reports, such as our SOC reports and Cloud Security Alliance CAIQ self-assessments (CSA CAIQ).Learn moreAudit logQuickly review the actions performed by members of your organization. Monitor access, permission changes, user changes, and other events.Learn moreRepository rulesEnhance your organization's security with scalable source code protections, and use rule insights to easily review how and why code changes occurred in your repositories.Learn moreRequires GitHub EnterpriseEnterprise accountsEnable collaboration between your organization and GitHub environments with a single point of visibility and management via an enterprise account.Learn moreRequires GitHub EnterpriseGitHub ConnectShare features and workflows between your GitHub Enterprise Server instance and GitHub Enterprise Cloud.Learn moreRequires GitHub EnterpriseSAMLSecurely control access to organization resources like repositories, issues, and pull requests with SAML, while allowing users to authenticate with their GitHub usernames.Learn moreRequires GitHub EnterpriseLDAPCentralize repository management. LDAP is one of the most common protocols used to integrate third-party software with large company user directories.Learn moreRequires GitHub EnterpriseEnterprise Managed UsersManage the lifecycle and authentication of users on GitHub Enterprise Cloud from your identity provider (IdP).Learn moreRequires GitHub EnterpriseBring your own identity provider for Enterprise Managed UsersUse the SSO and SCIM providers of your choice for Enterprise Managed Users, separate from one another, for a more flexible approach to user lifecycle management.Learn moreCommunityGitHub SponsorsFinancially support the open source projects your code depends on. Sponsor a contributor, maintainer, or project with one time or recurring contributions.Learn moreGitHub SkillsLearn new skills by completing tasks and projects directly within GitHub, guided by our friendly bot.Learn moreElectronWrite cross-platform desktop applications using JavaScript, HTML, and CSS with the Electron framework, based on Node.js and Chromium.Learn moreEducationGitHub Education is a commitment to bringing tech and open source collaboration to students and educators across the globe.Learn moreReady to get started?Explore all the plans to find the solution that fits your needs.View pricing plans\n\n\n\nEnterpriseAdvanced SecurityPremium SupportThe AI-powereddeveloper platformTo build, scale, and deliver secure software.Start free for 30 daysContact salesFeatured sponsorsPauseAnchor navigation menu. Currently selected: ScaleAISecurityReliabilityStart a free trialScaleThe enterprise-ready platform that developers know and loveConsolidate DevSecOps processes and enable unparalleled collaboration.Learn more about the ROI of GitHubLeverage the industry‚Äôs most flexible secure development platform.17,000+Third-party tools support your favorite languages and frameworksUnlocking innovation at scale with AI-driven software development.‚ÄúWe‚Äôve used GitHub from the inception of Datadog. It‚Äôs a high-quality product, and a lot of our engineers contribute to open source so there‚Äôs a sense of community there. GitHub is ingrained in the DNA of our engineering, it‚Äôs become part of the culture.‚ÄùEmilio EscobarChief Information Security Officer @ DatadogAIBuild, secure, and ship software fasterPush what's possible with GitHub Copilot, the world's most trusted and widely adopted AI developer tool.Learn more about Copilot for business88%of developers experience increased productivity.1Mercado Libre frees developers' minds to focus on their mission with GitHub.Read customer story~50%reduced time by writing code with GitHub Copilot100,000pull requests merged per dayProblemMercado Libre developer platform team needed secure DevOps tooling that would allow its developers to be more efficient and allow them to focus more on providing value to users.SolutionMercado Libre uses GitHub to automate deployment, security tests, and repetitive tasks so developers have more free time to spend on high-value, rewarding work.ProductsGitHub EnterpriseGitHub Copilot for businessGitHub Advanced SecuritySecurityEfficiency and security at every stepDeliver secure software fast, with enterprise-ready CI/CD, using GitHub Actions.Learn more about CI/CDFound means fixedKeep vulnerabilities out of code and solve security debtExplore GitHub Advanced SecurityGitHub Enterprise CloudEnhanced control with data residency2Learn moreSee how DVAG puts customers first by optimizing developer efficiency and security.Read customer storyReliability90% of the Fortune 100 choose GitHubMigrate, scale, and use cloud-based compute to accelerate digital transformation.Explore GitHub Enterprise ImporterReliability when it matters most with GitHub‚Äôs distributed architecture.75%Reduced time spent managing tools.3See how Telus saved $16.9 million in costs by replacing their DevOps tools with GitHub.Read customer storyStart your journey with GitHubStart a free trialContact salesPlanning your migration to GitHubLearn moreStay ahead with GitHub‚Äôs latest innovationsSee what's newCompare GitHub vs. GitLab and other DevOps toolsLearn moreFrequently asked questionsAbout GitHub EnterpriseWhat is GitHub Enterprise?GitHub Enterprise is an enterprise-grade software development platform designed for the complex workflows of modern development.As an extensible platform solution, GitHub Enterprise enables organizations to seamlessly integrate additional tools and functionalities, tailoring their development environment to meet specific needs and enhancing overall productivity.Why should organizations use GitHub EnterpriseThere are several reasons why organizations should consider using GitHub Enterprise:Accelerate development at scale with AI-powered development: GitHub is the world‚Äôs most widely adopted Copilot-powered developer platform helping organizations build, secure, and deliver innovative software at scale.¬†Application security made simpler: Native security tools embedded into the developer workflow, such as GitHub Advanced Security, help developers easily fix security issues, while providing more visibility and controls.Centralize governance and compliance: Customers can access a range of administration features to help manage governance at scale and enforce business rules and policies to meet their specific needs.¬†Boost productivity and collaboration: Increase productivity with automated CI/CD workflows using GitHub Actions, collaborate effectively with GitHub Projects and GitHub Issues, manage hosted packages with GitHub Packages, and utilize prebuilt and configured development environments with GitHub Codespaces.Greater flexibility and control over data: Whether self-hosting with GitHub Enterprise Server or using GitHub Enterprise Cloud, GitHub provides customers with flexibility and control over their data. And now with GitHub Enterprise Cloud with data residency, customers have enhanced control where certain data, like their code, resides. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.Who uses GitHub Enterprise?GitHub Enterprise is used by organizations of all sizes that require greater productivity, collaboration, and security capabilities for their software development process. GitHub Enterprise can scale with teams, all the way from a small startup to a large corporation.What is GitHub Enterprise Cloud?GitHub Enterprise Cloud is the cloud-based solution of GitHub Enterprise, hosted on GitHub‚Äôs servers. This eliminates the need for organizations to maintain their own servers, infrastructure, and updates, allowing them to focus on development.In addition to the core productivity and collaboration features it provides, GitHub Enterprise Cloud provides access to additional features and add-ons for security, support, managed users, and many more.¬†Customers can easily add or remove users as needed, and they can also increase storage capacity or processing power as their needs change.And for customers desiring more control over their data, GitHub Enterprise Cloud with data residency provides improved enterprise-grade features and more control over where code is stored.¬†This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.What is GitHub Enterprise Server?GitHub Enterprise Server is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud and provides organizations with a secure and customizable source code management and collaboration platform.One of the key advantages of GitHub Enterprise Server is that it provides organizations with complete control over their source code and data. Organizations can choose where to store their repositories and can control who has access to them. Administrators can also customize the platform to meet specific needs, such as integrating other tools or implementing custom workflows.GitHub Enterprise Server also offers enhanced security and compliance features. Organizations can configure their instance to meet their specific security requirements, such as using LDAP or SAML for authentication, setting up two-factor authentication, or implementing network security measures. Compliance features are also included, such as audit logs, access controls, and vulnerability scanning.How secure is GitHub Enterprise?GitHub Enterprise is designed with security in mind and includes a range of features to help organizations protect their code and data. Here are some of the key security features that GitHub Enterprise offers:Authentication and access controls: GitHub Enterprise includes two-factor authentication, LDAP and Active Directory integration, and OAuth authentication. This helps organizations ensure that only authorized users can access their repositories and data.Encryption: All data in transit between the user's computer and GitHub Enterprise server is encrypted using HTTPS. All data at rest uses AES-256 encryption.Vulnerability scanning: GitHub Enterprise includes built-in security scanning features that can detect known vulnerabilities and alert users.Audit logs: The platform provides detailed audit logs that record all user actions, including repository access, changes, and deletions. This helps organizations track and monitor user activity and identify potential security issues.Customizable policies: GitHub Enterprise allows organizations to create custom policies for repository access. This can help enforce compliance requirements and prevent unauthorized access to sensitive data.Regular security updates: There is also a dedicated security team that provides regular updates, monitors for potential security threats, and responds quickly to any issues that arise.Is GitHub Enterprise free?No, GitHub Enterprise is not free. It is a paid product that can be paid for either as a metered service on a monthly basis or as a subscription, with the cost determined by the number of users and the level of support required. For organizations interested in trying out the platform before making a commitment, GitHub Enterprise offers a free trial. Furthermore, organizations can contact the GitHub Sales team for the option to request a custom quote to meet their specific needs.Using GitHub EnterpriseHow can developers collaborate with GitHub Enterprise?Developers can collaborate with GitHub Enterprise using a variety of tools that are built into the platform, including:Pull requests: Allows developers to propose changes to a repository and submit them for review. Other team members can review the changes, leave comments, and suggest further improvements.GitHub Projects: Enables developers to track issues, assign tasks, and prioritize work. This helps teams stay on track, identify and resolve issues quickly, and ensure that everyone is working towards the same goals.GitHub Discussions: Empowers developers to have conversations about specific topics. This can be particularly useful for triaging complex issues or making decisions about the direction of a project.Choosing your planHow can organizations get started with GitHub Enterprise?To get started with GitHub Enterprise, try a free trial today or contact our sales team.What GitHub Enterprise plans are available?GitHub Enterprise offers several plans that vary in price and features. They are designed to accommodate different types of organizations and teams, from small startups to large enterprises. These plans include:GitHub Enterprise Server: This is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud, and offers all the features of the cloud-based version of GitHub, including pull requests, code reviews, and project management tools. Pricing depends on the number of users and support requirements.GitHub Enterprise Cloud: This is the cloud-based version of GitHub Enterprise. It is hosted on GitHub's servers, and it offers all the features of GitHub Enterprise Server. The price depends on the number of users and storage requirements.How much does GitHub Enterprise cost?For more information on cost, please see our pricing page.Getting started with enterprise software development platformsWhat is a DevOps platform?A DevOps platform is a set of tools, technologies, and practices that enable software development and IT operations teams to collaborate and automate the software delivery process. It typically includes version control, continuous integration and continuous delivery (CI/CD), automated testing, deployment automation, and monitoring.The main goal of a DevOps platform is to provide a single environment for software development and IT operations teams. By automating the software delivery process, a DevOps platform helps organizations reduce the time and cost of delivering software, while also improving the reliability, security, and scalability of their applications.What is developer experience?Developer experience (DevEx) refers to the overall experience that software developers have when using development tools, frameworks, and platforms to create software applications. It encompasses all aspects of a developer's interaction with the tools, including onboarding, maintaining, ease of use, and productivity.The goal of optimizing DevEx is to make it as easy as possible for developers to create high-quality software quickly. This can involve designing tools with intuitive interfaces, providing clear and concise documentation, seamlessly integrating tools into workflows, and offering comprehensive support to help developers overcome challenges and obstacles.By prioritizing DevEx, organizations can improve the speed and quality of their software development processes, increase developer satisfaction and retention, and ultimately deliver better products.What is a software development platform?A software development platform is a set of tools, technologies, and resources that enable software developers to create, test, deploy, and maintain software applications. This typically includes a programming language or framework, an integrated development environment (IDE), libraries, code repositories, debugging and testing tools, and deployment and hosting options.The goal of a software development platform is to provide developers with a comprehensive set of tools and resources that make it easier to develop high-quality software. By providing an integrated environment for software development, a software development platform can help developers streamline their workflows, reduce errors, and improve the speed and quality of their work. Additionally, many software development platforms also provide access to a community of developers who can offer support, advice, and resources for improving software development practices.What is an application development platform?An application development platform is a set of tools that enables developers to build, deploy, and manage custom software applications.This kind of platform typically includes a programming language, software development kits (SDKs), application programming interfaces (APIs), libraries, and testing and debugging tools.These tools are designed to make it easier for developers to create and deploy custom applications for a specific platform, such as a mobile device or web browser.The goal of an application development platform is to provide developers with a comprehensive set of tools that makes it easier to create high-quality applications that meet the specific requirements of a particular platform or device.What is software development collaboration?Software development collaboration is the process of working together as a team to create, test, and deploy software applications. It can involve a range of activities, such as brainstorming, planning, code reviews, testing, and deployment. Collaboration is an essential component of the software development process, as it allows multiple developers and stakeholders to work together.Effective collaboration requires open communication, clear goals and objectives, shared resources, and a commitment to working together as a team. Collaboration tools such as version control systems, collaborative coding environments, and project management software, can also provide a centralized location for team members to share information, coordinate tasks, and track progress.Ultimately, software development collaboration is essential to creating high-quality software that‚Äôs reliable, scalable, and meets the needs of end-users and stakeholders.About GitHub EnterpriseUsing GitHub EnterpriseChoosing your planGetting started with enterprise software development platformsAbout GitHub EnterpriseWhat is GitHub Enterprise?GitHub Enterprise is an enterprise-grade software development platform designed for the complex workflows of modern development.As an extensible platform solution, GitHub Enterprise enables organizations to seamlessly integrate additional tools and functionalities, tailoring their development environment to meet specific needs and enhancing overall productivity.Why should organizations use GitHub EnterpriseThere are several reasons why organizations should consider using GitHub Enterprise:Accelerate development at scale with AI-powered development: GitHub is the world‚Äôs most widely adopted Copilot-powered developer platform helping organizations build, secure, and deliver innovative software at scale.¬†Application security made simpler: Native security tools embedded into the developer workflow, such as GitHub Advanced Security, help developers easily fix security issues, while providing more visibility and controls.Centralize governance and compliance: Customers can access a range of administration features to help manage governance at scale and enforce business rules and policies to meet their specific needs.¬†Boost productivity and collaboration: Increase productivity with automated CI/CD workflows using GitHub Actions, collaborate effectively with GitHub Projects and GitHub Issues, manage hosted packages with GitHub Packages, and utilize prebuilt and configured development environments with GitHub Codespaces.Greater flexibility and control over data: Whether self-hosting with GitHub Enterprise Server or using GitHub Enterprise Cloud, GitHub provides customers with flexibility and control over their data. And now with GitHub Enterprise Cloud with data residency, customers have enhanced control where certain data, like their code, resides. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.Who uses GitHub Enterprise?GitHub Enterprise is used by organizations of all sizes that require greater productivity, collaboration, and security capabilities for their software development process. GitHub Enterprise can scale with teams, all the way from a small startup to a large corporation.What is GitHub Enterprise Cloud?GitHub Enterprise Cloud is the cloud-based solution of GitHub Enterprise, hosted on GitHub‚Äôs servers. This eliminates the need for organizations to maintain their own servers, infrastructure, and updates, allowing them to focus on development.In addition to the core productivity and collaboration features it provides, GitHub Enterprise Cloud provides access to additional features and add-ons for security, support, managed users, and many more.¬†Customers can easily add or remove users as needed, and they can also increase storage capacity or processing power as their needs change.And for customers desiring more control over their data, GitHub Enterprise Cloud with data residency provides improved enterprise-grade features and more control over where code is stored.¬†This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.What is GitHub Enterprise Server?GitHub Enterprise Server is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud and provides organizations with a secure and customizable source code management and collaboration platform.One of the key advantages of GitHub Enterprise Server is that it provides organizations with complete control over their source code and data. Organizations can choose where to store their repositories and can control who has access to them. Administrators can also customize the platform to meet specific needs, such as integrating other tools or implementing custom workflows.GitHub Enterprise Server also offers enhanced security and compliance features. Organizations can configure their instance to meet their specific security requirements, such as using LDAP or SAML for authentication, setting up two-factor authentication, or implementing network security measures. Compliance features are also included, such as audit logs, access controls, and vulnerability scanning.How secure is GitHub Enterprise?GitHub Enterprise is designed with security in mind and includes a range of features to help organizations protect their code and data. Here are some of the key security features that GitHub Enterprise offers:Authentication and access controls: GitHub Enterprise includes two-factor authentication, LDAP and Active Directory integration, and OAuth authentication. This helps organizations ensure that only authorized users can access their repositories and data.Encryption: All data in transit between the user's computer and GitHub Enterprise server is encrypted using HTTPS. All data at rest uses AES-256 encryption.Vulnerability scanning: GitHub Enterprise includes built-in security scanning features that can detect known vulnerabilities and alert users.Audit logs: The platform provides detailed audit logs that record all user actions, including repository access, changes, and deletions. This helps organizations track and monitor user activity and identify potential security issues.Customizable policies: GitHub Enterprise allows organizations to create custom policies for repository access. This can help enforce compliance requirements and prevent unauthorized access to sensitive data.Regular security updates: There is also a dedicated security team that provides regular updates, monitors for potential security threats, and responds quickly to any issues that arise.Is GitHub Enterprise free?No, GitHub Enterprise is not free. It is a paid product that can be paid for either as a metered service on a monthly basis or as a subscription, with the cost determined by the number of users and the level of support required. For organizations interested in trying out the platform before making a commitment, GitHub Enterprise offers a free trial. Furthermore, organizations can contact the GitHub Sales team for the option to request a custom quote to meet their specific needs.Using GitHub EnterpriseHow can developers collaborate with GitHub Enterprise?Developers can collaborate with GitHub Enterprise using a variety of tools that are built into the platform, including:Pull requests: Allows developers to propose changes to a repository and submit them for review. Other team members can review the changes, leave comments, and suggest further improvements.GitHub Projects: Enables developers to track issues, assign tasks, and prioritize work. This helps teams stay on track, identify and resolve issues quickly, and ensure that everyone is working towards the same goals.GitHub Discussions: Empowers developers to have conversations about specific topics. This can be particularly useful for triaging complex issues or making decisions about the direction of a project.Choosing your planHow can organizations get started with GitHub Enterprise?To get started with GitHub Enterprise, try a free trial today or contact our sales team.What GitHub Enterprise plans are available?GitHub Enterprise offers several plans that vary in price and features. They are designed to accommodate different types of organizations and teams, from small startups to large enterprises. These plans include:GitHub Enterprise Server: This is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud, and offers all the features of the cloud-based version of GitHub, including pull requests, code reviews, and project management tools. Pricing depends on the number of users and support requirements.GitHub Enterprise Cloud: This is the cloud-based version of GitHub Enterprise. It is hosted on GitHub's servers, and it offers all the features of GitHub Enterprise Server. The price depends on the number of users and storage requirements.How much does GitHub Enterprise cost?For more information on cost, please see our pricing page.Getting started with enterprise software development platformsWhat is a DevOps platform?A DevOps platform is a set of tools, technologies, and practices that enable software development and IT operations teams to collaborate and automate the software delivery process. It typically includes version control, continuous integration and continuous delivery (CI/CD), automated testing, deployment automation, and monitoring.The main goal of a DevOps platform is to provide a single environment for software development and IT operations teams. By automating the software delivery process, a DevOps platform helps organizations reduce the time and cost of delivering software, while also improving the reliability, security, and scalability of their applications.What is developer experience?Developer experience (DevEx) refers to the overall experience that software developers have when using development tools, frameworks, and platforms to create software applications. It encompasses all aspects of a developer's interaction with the tools, including onboarding, maintaining, ease of use, and productivity.The goal of optimizing DevEx is to make it as easy as possible for developers to create high-quality software quickly. This can involve designing tools with intuitive interfaces, providing clear and concise documentation, seamlessly integrating tools into workflows, and offering comprehensive support to help developers overcome challenges and obstacles.By prioritizing DevEx, organizations can improve the speed and quality of their software development processes, increase developer satisfaction and retention, and ultimately deliver better products.What is a software development platform?A software development platform is a set of tools, technologies, and resources that enable software developers to create, test, deploy, and maintain software applications. This typically includes a programming language or framework, an integrated development environment (IDE), libraries, code repositories, debugging and testing tools, and deployment and hosting options.The goal of a software development platform is to provide developers with a comprehensive set of tools and resources that make it easier to develop high-quality software. By providing an integrated environment for software development, a software development platform can help developers streamline their workflows, reduce errors, and improve the speed and quality of their work. Additionally, many software development platforms also provide access to a community of developers who can offer support, advice, and resources for improving software development practices.What is an application development platform?An application development platform is a set of tools that enables developers to build, deploy, and manage custom software applications.This kind of platform typically includes a programming language, software development kits (SDKs), application programming interfaces (APIs), libraries, and testing and debugging tools.These tools are designed to make it easier for developers to create and deploy custom applications for a specific platform, such as a mobile device or web browser.The goal of an application development platform is to provide developers with a comprehensive set of tools that makes it easier to create high-quality applications that meet the specific requirements of a particular platform or device.What is software development collaboration?Software development collaboration is the process of working together as a team to create, test, and deploy software applications. It can involve a range of activities, such as brainstorming, planning, code reviews, testing, and deployment. Collaboration is an essential component of the software development process, as it allows multiple developers and stakeholders to work together.Effective collaboration requires open communication, clear goals and objectives, shared resources, and a commitment to working together as a team. Collaboration tools such as version control systems, collaborative coding environments, and project management software, can also provide a centralized location for team members to share information, coordinate tasks, and track progress.Ultimately, software development collaboration is essential to creating high-quality software that‚Äôs reliable, scalable, and meets the needs of end-users and stakeholders.FootnotesGitHub, ‚ÄúResearch: quantifying GitHub Copilot‚Äôs impact on developer productivity and happiness‚Äù, 2022This is currently available in the EU with additional regions coming soon. Contact our sales team to learn moreThe Total Economic Impact‚Ñ¢ Of GitHub Enterprise Cloud and Advanced Security, a commissioned study conducted by Forrester Consulting, 2022. Results are for a composite organization based on interviewed customers.\n\n\n\nGitHub for Teams
        Build like the best teams on the planet
        With CI/CD, Dependabot, and the world‚Äôs largest developer community, GitHub gives your team everything they need to ship better software¬†faster.
        
    
  Get started with Team
  
  


    
      
  Sign up for free
  
  

    


      
    
  

  
    

      
          
            
            
          
          
            
            
          
          
            
            
          
          
            
            
          
          
            
            
          
          
            
            
          
      
      
        
          

        
        
          

        
        
          

        
        
          

        
        
          

        
        
          

        
        
          

        
      
      
        
          
          
        
        
          
          
        
        
          
          
        
      
  




  
    
    
  



  
    Compare Plans
    Ready to get your team started?

    
      
        
          
            
              
                GitHub Free
                Basics for teams and developers
                
                  
                    
                    Unlimited public/private repositories
                  

                  
                    
                    2,000 Actions minutes/month
                  

                  
                    
                    500MB of GitHub Packages storage
                  

                  
                    
                    Dependabot
                  

                  
                    
                    Community Support
                  
                
              
            
            
                
  Get started for free
  
  

            
          
          
            Need SAML, self-hosting, or priority support?
              
    Learn more about GitHub Enterprise 


          
        

        
          
            
              
                GitHub Team
                Advanced collaboration and deploymentfeatures for teams
                
                  Everything included in Free, plus ...
                  3,000 Actions minutes/month
                  2GB of GitHub Packages storage
                  GitHub Codespaces
                  Protected branches
                  Multiple reviewers in pull requests
                  Code owners
                  Draft pull requests
                  Required reviewers
                  Pages and Wikis
                  Web-based support
                

                
                  Featured add-ons
                

                

                    
  
    
      
        
          
        

        
          
            GitHub Secret Protection
          

          
        
      
    

    
      
        Prevent secret leaks before they leak. Remediate those that exist.
      


                    
  
    
      
        
          
        

        
          
            GitHub Code Security
          

          
        
      
    

    
      
        Fix vulnerabilities in your code before they reach production.
      


                
              
              
                  Continue with Team

              
            
          
          
            Need something else?
              
    Compare all plans 


          
        
      
    
  




  
  
    
      
        

        

        

        

        

        

      
    
  



  
  
    
      Collaboration
      Manage everything in one¬†place
    

    

      
        
          
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
          
        
        
          
        
        
          
            Connect your favorite tools
            Build the way that works best for you with support for all your go-to integrations, including Slack, Jira, and more.
          
        
      

      
        
          
            
            
          
        
        
          
        
        
          
            Add your team in a click
            Seamlessly update permissions and add new users as you build, whether you‚Äôre on a team of two or two thousand.
          
        
      

      
        
          
  
  
  

        
        
          
        
        
          
            Speed up code review
            Step up your code quality with code review tools that fit right into your workflow.
          
        
      

      
        
          
  
  
  

        
        
          
        
        
          
            Plan together
            Make it easy for project managers and developers to coordinate, track, and update their work in one place‚Äîso projects stay on schedule.
          
        
      

    

    
      
        
  
  
  

        

        
          ‚ÄúAs a team, we‚Äôre way more confident that we‚Äôre in tune. We can all see our work, feedback, and roadmap going through GitHub.‚Äù
          
            
  
  
  

            Lee Adkins, Head of Engineering
            Peak Money
          
        
      
    

  



  
  
    
      
        Automation
        Build CI/CD workflows that work for¬†you
      
      
        
          
          
        

        
          
            
              
                
                
                  Checkout
                  Check out a Git repository at a particular version.
                
              
              
                name: Checkoutuses: actions/checkout@v2.1.0
              
            
          

          
            
              
                
                
                  Set up Node.js environment
                  Set up a Node.js environment and add it to the PATH, providing additional proxy support.
                
              
              
                name: Set up Node.js for use with actionsuses: actions/setup-node@v1.1.0
              
            
          

          
            
              
                
                
                  NPM Publish
                  Automatically publish packages to NPM.
                
              
              
                name: NPM Publishuses: JS DevTools/npm-publish@v1
              
            
          
        
      

      

        
          
            
              
                
              
            
            
              Streamline your CI/CD
              Build, test, and deploy projects on any OS, language, or¬†cloud.
            
          
        

        
          
            
              
                
              
            
            
              Choose from thousands of actions
              Find community-built GitHub Actions workflows on GitHub Marketplace, or build your¬†own.
            
          
        

        
          
            
              
                
              
            
            
              Respond to GitHub events
              Trigger workflows based on GitHub events, including push, issue creation, new releases, and¬†more.
            
          
        

        
          
            
              
                
              
            
            
              Collaborate on workflows
              Build, share, improve, and reuse actions just like¬†code.
            
          
        
      

      
          
    Explore GitHub Actions 


      

      
        
          
  
  
  

          

          
            ‚ÄúWith GitHub Actions, deployments happen 75 percent faster‚Äîtaking about 10 minutes compared to the 40 minutes required when they were done manually.‚Äù
            
              
  
  
  

              Pierre Laurac, Technical Lead
              Front App
            
          
        
      

    
  



  
  
    
      
        Security
        Stay focused on development
      
      
        
        
          
          
        
      

      

        
          
            
              
                
              
            
            
              Grant the right access to your team
              Easily grant, limit, or revoke access for collaborators inside and outside your¬†company.
            
          
        

        
          
            
              
                
              
            
            
              Keep secrets safe
              Get alerts when secrets are committed to your repositories‚Äîand notify over 30¬†cloud service providers automatically.
            
          
        

        
          
            
              
                
              
            
            
              Find vulnerable dependencies
              Scan your dependencies automatically. When a vulnerability is found, we‚Äôll open a pull request with suggested¬†fixes.
            
          
        
      

      
          
    See how GitHub helps secure your applications 


      

      
        
          
  
  
  

          

          
            ‚ÄúGitHub‚Äôs Dependabot security updates are smarter than any other vulnerability tracking tools we‚Äôve used.‚Äù
            
              
  
  
  

              Alberto Giorgi, Director of Engineering
              Tray.io
            
          
        
      

    

    
      

    
  



  

    
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
    

    
      
        Users
        Home to the world‚Äôs software teams
        Meet your developers where they already are. GitHub is home to over 40 million developers and the world‚Äôs largest open source¬†community.

        
          
            
              150M+ million
              developers
            
          
          
            
              1B+ billion
              contributions
            
          
          
            
              4M+ million
              organizations
            
          
        
      
    

    
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
    
  



  
    Customer Stories
    You‚Äôre in good company
    

      
        
          
            
              Front App
              Customer Story
              


              Read story 

            
          
          
            
            
          
        
      

      
        
          
            
              Tray.io
              Customer Story
              


              Read story 

            
          
          
            
            
          
        
      
    

    
        
    Read more customer stories 


    

  




  
    
      Build like the best
      Get the complete developer platform

      
        
  
    
  Get started with Team
  
  


    
      
  Sign up for free
  
  

    



      
    
  


  
    
      Related resources

      

              
    
        
            
              
            

          
        

      GitHub Actions cheat sheet

      
        Everything you need to know about getting started with GitHub Actions.
      

      
        Learn more 

      

              
    
        
            
              
            

          
        

      Collaboration is the key to DevOps success

      
        In a recent TechTarget study, 70 percent of organizations reported they had adopted DevOps.
      

      
        Learn more 

      

              
    
        
            
              
            

          
        

      How healthy teams build better software

      
        Your culture is key to recruiting and retaining the talent you need to ship exceptional customer experiences.
      

      
        Learn more\n\n\n\nGitHub for Startups

    
    

    Scale your startupon GitHub
      Apply today to receive startup-friendly pricing on GitHub Enterprise, Advanced Security, and the support you need to build, scale, and deliver secure software.

      
        
            
    
  Apply now
  
  




      
    

  
    
      
        
          
              Ready-to-scale developer platform
              
                Our AI-powered developer platform is equipped with the tools and integrations to build, scale, and deliver secure software.
              
              
                Get up to 20 seats of GitHub Enterprise free for one year.
              
          
        
      
      
        
          
              Build securely from the start
              
                Scale confidently with AI-powered application security tools embedded in your development workflow.
              
                
                  Get up to 20 seats of GitHub Advanced Security 50% off for one year.
                
          
        
      
      
        
          
              Community to help you grow
              
                Join our global startup network of over 30k startups across 145+ countries.
              
              
                Gain access to exclusive events and resources designed to help you scale and succeed.
              
          
        
      
    
  

  


  
    
    
    
      
        
        
        
        
        
        Collaboration that goes beyond code
        Build your business fast with access to the world‚Äôs largest open source registry. Host it in the cloud with unlimited free public and private repositories. Start conversations, propose changes, and get feedback with a pull request.
          
    Learn more 


              
        
          

        
        
        It‚Äôs like night and day. It‚Äôs the collaboration, it‚Äôs the sharing, it‚Äôs the community. It‚Äôs all because of GitHub.
        
        Shanna Senior Director of Build Platform // Autodesk
      

      
    

      
        
          
      
        
          
            
            
          
        
      

        
      

    
    
      
        
        
        
        
        
        Full project management
        Turn ideas into products with project boards and tables that integrate directly into your workflow‚Äîand link directly to your Issues. Plan your sprints, break out individual tasks, track progress, and ship software fast.
          
    Learn more 


              
        
          

        
        
        GitHub is our primary tool for R&D project management.
        
        Director of Ecosystem Engineering // Shopify
      

      
    

      
        
          
      
      
        
          
          
            
            
          
        
      

        
      

    
    
      
        
        
        
        
        
        Powerful automation and¬†CI/CD
        Get a complete DevOps toolkit with extensive automation and CI/CD that lives right next to your code. Automate any webhook and script your entire workflow from code merges¬†to¬†deployments.
          
    Learn more 


              
        
          

        
        
          One of the big benefits of using GitHub for CI/CD and security automation is that we don‚Äôt have to build, deploy, or maintain additional tools because they‚Äôre built-in to GitHub. That means developers can spend less time managing tools and more time writing code, which is how they‚Äôd prefer to spend their time.
        
        Software Engineer // Mercari
      

      
    

      
        
          
      
        
          
        
        
          
        
      

        
      

    
    
      
        
        
        
        
        
        Security trusted by the Fortune 100
        GitHub offers the most trusted platform that helps with compliance and keeps your code secure. Stay ahead of security issues, get advanced monitoring, and build your business with confidence.
          
    Learn more 


              
        
          

        
        
          Six months ago we had around 60 outstanding security CVEs. Today, we have zero.
        
        Senior Engineering Manager // Wealthsimple
      

      
    

      
        
          
              
  
  
  

              
  
  
  

        
      

    
    
      
        
        
        
        
        
        Build on the shoulders¬†of¬†giants
        With the world‚Äôs largest software registry, GitHub makes it simple to find the best open source projects to accelerate your workflows and scale your business fast.
          
    Learn more 


              
        
          

        
        
        There is a huge open source community of code and developers to work with and draw inspiration from on GitHub. To build better developer tools, we need a direct line to it. GitHub accelerates production, progress, and connections, bringing us closer to our users.
        
        Developer Advocate // Stripe
      

      
    

      
        
          
        
          
            
          
        

        
          
            
              
            
          
          
            
              
            
          
          
            
              
            
          
          
            
              
            
          
        

        
      

    
    
      
        
        
        
        
        
        Build like the best
        From Spotify to Slack and Shopify to Netflix, the world‚Äôs most innovative companies are built on GitHub. That‚Äôs because GitHub offers the most complete‚Äîand most trusted‚Äîdeveloper platform.
        
        
      
    

      
        
          

    
      
        

      
      
        

      
      
        

      
      
        

      
      
        

      
      
        

      
    

        
      

  



  
    Get started today
      
        Apply now to receive startup friendly pricing on GitHub Enterprise, Advanced Security, and the support you need to build, scale, and deliver secure software.
      

      

  
    
  
    
      
        GitHub for Startups Sign-up Form
      
        
    
    
      
    
  
  

      
            
      
          
          
          

          
            GitHub for Startups Sign-up Form
          
          
            Eligibility
          
          
              
                Funding Stage: Must have received outside funding (up to Series B or earlier).
                New to GitHub Plans & Credits: Must be new to GitHub Enterprise or Advanced Security, or have not been on an Enterprise plan within the past 6 months, including not having received credits for either plan.
              
          

          
            Want to add an extra year of savings on Enterprise and Advanced Security? Refer your investor, accelerator, or incubator to become an approved GitHub for Startups partner and apply with their unique application link!
          

          
            If you‚Äôre accepted, you‚Äôll receive an email with further instructions within 2-4 business days. If you have any questions, please reach out to our team.
          

          
              * - required field
          

          
            
              
                Company Name
              
              
                
              
            

            
              
                
                  First Name
                
                
                  
                
              

              
                
                  Last Name
                
                
                  
                
              
            

            
              
                
                  Email Address
                
                
                  
                  
                    Please use an email with your company domain. Personal emails or emails that do not match the GitHub Account owner will be rejected. GitHub sends all important communications to the primary email of the admin - if you need to update your primary email address, please follow these instructions before submitting your application.
                  
                
              

              
                
                  Role in Company
                
                
                  Please select
Cofounder CEO
Cofounder/CTO
Technical Lead
Cofounder (other)
                
              
            

            
              
                Company Website
              
              
                
                Applications with invalid websites and/or websites with inappropriate content will be rejected.
              
            

            
              
                Company overview
              
              
                
                In a few sentences, please share a bit more about your company.
              
            

            
              
                
                  Industry
                
                
                  Please select
Agriculture & Mining
Business Services
Computers & Electronics
Consumer Services
Education
Energy & Utilities
Financial Services
Food & Beverage
Government
Healthcare
Manufacturing
Media & Entertainment
Not for Profit
Real Estate & Construction
Retail
Software & Internet
Telecommunications
Transportation & Storage
Travel, Recreation, and Leisure
Whole & Distribution
Other
                
              

              
                
                  Latest Funding Round
                
                
                  Please select
Bootstrap
Pre-Seed
Seed
Series A
Series B
Series C or later
                
              
            

            
              
                
                  Total Funding Raised
                
                
                  Please select
<$1M USD
$1M-$2M USD
$2M-$5M USD
$5M-$10M USD
$10M-$25M USD
$25M+ USD
                
              
            

            
              
                Proof of Funding
              
              
                
                  Provide links from credible sources such as third-party news, startup investment platforms (e.g. Crunchbase), or investor portfolio pages or blog posts. Self-published content will not be accepted. If you are a stealth startup, please apply through your approved GitHub for Startups partner page.
              
            

            

            
              Account Information
              You will not be billed at this time. This information will be used for any paid add-ons or upgrades you choose to add (beyond the 20 seat offer) during or after the program.
            

            
              
  
    Country
  
  
    Please selectAfghanistan
√Öland
Albania
Algeria
American Samoa
Andorra
Angola
Anguilla
Antarctica
Antigua and Barbuda
Argentina
Armenia
Aruba
Australia
Austria
Azerbaijan
Bahamas
Bahrain
Bangladesh
Barbados
Belarus
Belgium
Belize
Benin
Bermuda
Bhutan
Bolivia
Bonaire, Sint Eustatius and Saba
Bosnia and Herzegovina
Botswana
Bouvet Island
Brazil
British Indian Ocean Territory
Brunei Darussalam
Bulgaria
Burkina Faso
Burundi
Cambodia
Cameroon
Canada
Cape Verde
Cayman Islands
Central African Republic
Chad
Chile
China
Christmas Island
Cocos (Keeling) Islands
Colombia
Comoros
Congo (Brazzaville)
Congo (Kinshasa)
Cook Islands
Costa Rica
C√¥te d'Ivoire
Croatia
Cura√ßao
Cyprus
Czech Republic
Denmark
Djibouti
Dominica
Dominican Republic
Ecuador
Egypt
El Salvador
Equatorial Guinea
Eritrea
Estonia
Ethiopia
Falkland Islands
Faroe Islands
Fiji
Finland
France
French Guiana
French Polynesia
French Southern Lands
Gabon
Gambia
Georgia
Germany
Ghana
Gibraltar
Greece
Greenland
Grenada
Guadeloupe
Guam
Guatemala
Guernsey
Guinea
Guinea-Bissau
Guyana
Haiti
Heard and McDonald Islands
Honduras
Hong Kong
Hungary
Iceland
India
Indonesia
Iran
Iraq
Ireland
Isle of Man
Israel
Italy
Jamaica
Japan
Jersey
Jordan
Kazakhstan
Kenya
Kiribati
Korea, South
Kuwait
Kyrgyzstan
Laos
Latvia
Lebanon
Lesotho
Liberia
Libya
Liechtenstein
Lithuania
Luxembourg
Macau
Macedonia
Madagascar
Malawi
Malaysia
Maldives
Mali
Malta
Marshall Islands
Martinique
Mauritania
Mauritius
Mayotte
Mexico
Micronesia
Moldova
Monaco
Mongolia
Montenegro
Montserrat
Morocco
Mozambique
Myanmar
Namibia
Nauru
Nepal
Netherlands
New Caledonia
New Zealand
Nicaragua
Niger
Nigeria
Niue
Norfolk Island
Northern Mariana Islands
Norway
Oman
Pakistan
Palau
Palestine
Panama
Papua New Guinea
Paraguay
Peru
Philippines
Pitcairn
Poland
Portugal
Puerto Rico
Qatar
Reunion
Romania
Rwanda
Saint Barth√©lemy
Saint Helena
Saint Kitts and Nevis
Saint Lucia
Saint Martin (French part)
Saint Pierre and Miquelon
Saint Vincent and the Grenadines
Samoa
San Marino
Sao Tome and Principe
Saudi Arabia
Senegal
Serbia
Seychelles
Sierra Leone
Singapore
Sint Maarten (Dutch part)
Slovakia
Slovenia
Solomon Islands
Somalia
South Africa
South Georgia and South Sandwich Islands
South Sudan
Spain
Sri Lanka
Sudan
Suriname
Svalbard and Jan Mayen Islands
Swaziland
Sweden
Switzerland
Taiwan
Tajikistan
Tanzania
Thailand
Timor-Leste
Togo
Tokelau
Tonga
Trinidad and Tobago
Tunisia
T√ºrkiye
Turkmenistan
Turks and Caicos Islands
Tuvalu
Uganda
Ukraine
United Arab Emirates
United Kingdom
United States Minor Outlying Islands
United States of America
Uruguay
Uzbekistan
Vanuatu
Vatican City
Venezuela
Vietnam
Virgin Islands, British
Virgin Islands, U.S.
Wallis and Futuna Islands
Yemen
Zambia
Zimbabwe
  



            

            

            
              
                
                  GitHub for Startups Partner
                
                
                  
                  Please provide the name of the accelerator/incubator/VC fund through which you are applying for GitHub for Startups benefits. If you were referred by a GitHub employee, please list their email here.
                
              
            

            
              
                GitHub Enterprise Slug
              
              
                
                Please provide your startup‚Äôs GitHub Enterprise account in the format github.com/enterprises/SLUG. You can sign up for an Enterprise trial. Ensure you sign up for the trial using personal accounts. Applications with invalid, organization, or managed user accounts will be rejected. See details on account types to learn more.
              
            

            

            
              
                
                    I hereby accept the GitHub Customer Agreement on behalf of my organization and confirm that I have the authority to do so. For more information about GitHub's privacy practices, see the GitHub Privacy Statement.
              
            

            
              
                
                    I agree to the GitHub for Startups Terms and Conditions.
              
            

            
            
            
            
            
            
            

            Sign up for GitHub for Startups
          
    

      
      



  Apply now
  
  




    

    
  
      
          
    
    
    Early-stage startup
    You must be an early-stage startup that has received outside equity funding (Series B or earlier).
    
  

      

      
          
    
    
    New to GitHub Enterprise and/or Advanced Security
    You must be new to Enterprise or Advanced Security, or have not been on either plan in the past 6 months, and you should not have received credits for either plan.
    
  

      


  

    
    
      
        
        
        
        
        
        Our partners help us create the unicorns of tomorrow
        We know the value of community. That‚Äôs why GitHub for Startups partners with leading investors, accelerators, and startup support organizations to help early-stage startups go from seed funding to unicorn status. Startups affiliated with a GitHub for Startups partner are eligible for additional discounts and benefits while in the program.
        
              

  
    
  
    
      
        GitHub for Startups Partner Application
      
        
    
    
      
    
  
  

      
            
      
          
          
          

          
            GitHub for Startups Partner Application
          

          
            
              
                
                  Contact First Name
                
                
                  
                
              

              
                
                  Contact Last Name
                
                
                  
                
              
            

            
              
                Contact Email Address
              
              
                
              
            

            
              
                Company Name
              
              
                
              
            

            
              
                Role
              
              
                
              
            

            
              
                Website
              
              
                
              
            

            
  
    HQ Country
  
  
    Please selectAfghanistan
√Öland
Albania
Algeria
American Samoa
Andorra
Angola
Anguilla
Antarctica
Antigua and Barbuda
Argentina
Armenia
Aruba
Australia
Austria
Azerbaijan
Bahamas
Bahrain
Bangladesh
Barbados
Belarus
Belgium
Belize
Benin
Bermuda
Bhutan
Bolivia
Bonaire, Sint Eustatius and Saba
Bosnia and Herzegovina
Botswana
Bouvet Island
Brazil
British Indian Ocean Territory
Brunei Darussalam
Bulgaria
Burkina Faso
Burundi
Cambodia
Cameroon
Canada
Cape Verde
Cayman Islands
Central African Republic
Chad
Chile
China
Christmas Island
Cocos (Keeling) Islands
Colombia
Comoros
Congo (Brazzaville)
Congo (Kinshasa)
Cook Islands
Costa Rica
C√¥te d'Ivoire
Croatia
Cura√ßao
Cyprus
Czech Republic
Denmark
Djibouti
Dominica
Dominican Republic
Ecuador
Egypt
El Salvador
Equatorial Guinea
Eritrea
Estonia
Ethiopia
Falkland Islands
Faroe Islands
Fiji
Finland
France
French Guiana
French Polynesia
French Southern Lands
Gabon
Gambia
Georgia
Germany
Ghana
Gibraltar
Greece
Greenland
Grenada
Guadeloupe
Guam
Guatemala
Guernsey
Guinea
Guinea-Bissau
Guyana
Haiti
Heard and McDonald Islands
Honduras
Hong Kong
Hungary
Iceland
India
Indonesia
Iran
Iraq
Ireland
Isle of Man
Israel
Italy
Jamaica
Japan
Jersey
Jordan
Kazakhstan
Kenya
Kiribati
Korea, South
Kuwait
Kyrgyzstan
Laos
Latvia
Lebanon
Lesotho
Liberia
Libya
Liechtenstein
Lithuania
Luxembourg
Macau
Macedonia
Madagascar
Malawi
Malaysia
Maldives
Mali
Malta
Marshall Islands
Martinique
Mauritania
Mauritius
Mayotte
Mexico
Micronesia
Moldova
Monaco
Mongolia
Montenegro
Montserrat
Morocco
Mozambique
Myanmar
Namibia
Nauru
Nepal
Netherlands
New Caledonia
New Zealand
Nicaragua
Niger
Nigeria
Niue
Norfolk Island
Northern Mariana Islands
Norway
Oman
Pakistan
Palau
Palestine
Panama
Papua New Guinea
Paraguay
Peru
Philippines
Pitcairn
Poland
Portugal
Puerto Rico
Qatar
Reunion
Romania
Rwanda
Saint Barth√©lemy
Saint Helena
Saint Kitts and Nevis
Saint Lucia
Saint Martin (French part)
Saint Pierre and Miquelon
Saint Vincent and the Grenadines
Samoa
San Marino
Sao Tome and Principe
Saudi Arabia
Senegal
Serbia
Seychelles
Sierra Leone
Singapore
Sint Maarten (Dutch part)
Slovakia
Slovenia
Solomon Islands
Somalia
South Africa
South Georgia and South Sandwich Islands
South Sudan
Spain
Sri Lanka
Sudan
Suriname
Svalbard and Jan Mayen Islands
Swaziland
Sweden
Switzerland
Taiwan
Tajikistan
Tanzania
Thailand
Timor-Leste
Togo
Tokelau
Tonga
Trinidad and Tobago
Tunisia
T√ºrkiye
Turkmenistan
Turks and Caicos Islands
Tuvalu
Uganda
Ukraine
United Arab Emirates
United Kingdom
United States Minor Outlying Islands
United States of America
Uruguay
Uzbekistan
Vanuatu
Vatican City
Venezuela
Vietnam
Virgin Islands, British
Virgin Islands, U.S.
Wallis and Futuna Islands
Yemen
Zambia
Zimbabwe
  




            
              
                Organization Type
              
              
                Please select
Incubator/Accelerator
VC
TechHub
Startup Ecosystem Partner
              
            

            
              
                
                  Portfolio Size
                
                
                  
                
              

              
                
                  Number of Investments Annually
                
                
                  
                
              
            

            

            
              
                
                    GitHub for Startups provides certain resources to approved startup partners and startups in their portfolio, which are subject to change. I hereby accept the GitHub Logo Policy and GitHub Privacy Statement policy agreements on behalf of my organization.
              
            

            
            
            
            
            
            

            Apply to become a GitHub for Startups Partner
          
    

      
      



  Apply to become a partner
  
  




      
    

      
        
          
    
      
        

      
      
        

      
      
        

      
      
        

      
      
        

      
    

        
      

  
  
    Frequently asked¬†questions

        
  
    
      
      
        What‚Äôs included in the GitHub for Startups offer?
      
    
    
      All GitHub for Startups companies receive up to 20 seats of GitHub Enterprise for free for 12 months*. Additionally, those interested can also redeem 20 seats of Advanced Security for 12 months at 50% off.  Learn more about the features and capabilities of GitHub Enterprise and Advanced Security.
*Startups affiliated with a GitHub for Startups VC or accelerator partner may be eligible for additional discounts and benefits. See list of partners. Don‚Äôt see your partner? Share this link to refer your partner to the GitHub for Startups partner program.
      
    
  


        
  
    
      
      
        Who is eligible to apply?
      
    
    
      Startups that meet the following criteria are eligible to apply for the GitHub for Startups program:

Received outside equity funding (up to Series B)
New to GitHub Enterprise or Advanced Security, or have not been on either plan within the past 6 months, including not having received credits for either plan.
Must not have previously received credits for GitHub Enterprise or Advanced Security.

      
    
  


        
  
    
      
      
        What if my startup is not eligible for GitHub for Startups? Are there other resources for me?
      
    
    
      If you‚Äôre not currently eligible for GitHub for Startups, please feel to sign up for a trial.
      
    
  


        
  
    
      
      
        How can my organization become a GitHub for Startups partner?
      
    
    
      Any investor, accelerator, or startup support organization is eligible to apply for the GitHub for Startups program. Apply here.
      
    
  


        
  
    
      
      
        Startup Program Terms & Conditions
      
    
    
      
Subscription Model: We do not support the pay-as-you-go billing model. By applying, you agree to switch to a subscription-based pricing model for the duration of your participation in the GitHub for Startups program.
Metered Add-ons: Metered product add-ons (like Copilot, larger runners, Codespaces, etc.) are not included in the program, and will be charged at standard rates.
Managed Users: Enterprise Accounts with managed users are not supported.
Payment Method: You must have a valid payment method on file\n\n\n\nSolutionsBy industryGitHub for NonprofitsDrive social impact one commit at a timeGitHub for Nonprofits enables organizations to leverage technology to drive forward their missions and accelerate human progress. Verified nonprofits get exclusive access to a free GitHub Team plan or 25% off the GitHub Enterprise cloud plan.Join GitHub for NonprofitsExclusive discounts for verified nonprofitsFree access to a GitHub Team planReceive access to advanced collaboration tools for individuals and organizations.25% off GitHub Enterprise CloudGet access to additional security, administrative, and customization options.Which plan is for you?GitHub Team offers collaboration for growing teams while GitHub Enterprise Cloud adds additional Actions and security features.Let GitHub power your missionInvesting in GitHub is not just about adopting a tool‚Äîit's about empowering nonprofits to drive positive change and advance the Sustainable Development Goals. Join us at GitHub, where technology meets purpose, and together, let's create a more sustainable and equitable future for all.Increase visibility and widen impactBy hosting projects on GitHub, nonprofits can increase their visibility and reach a broader audience. Whether it's sharing code libraries, publishing research, or showcasing success stories, GitHub provides nonprofits with a platform to amplify their impact and attract support from donors, funders, volunteers, and partners.Tap into the open source communityGitHub is home to the largest open source community on the planet - over 100 million developers. Whether you‚Äôre scaling your organization or just learning how to code, GitHub is your home.  Join the world‚Äôs largest developer platform to build the innovations that empower humanity.‚ÄúGitHub provides us with a platform to amplify the critical needs of forcibly displaced persons and attract support from donors, volunteers, and partners, while also tapping into skills and resources of an incredible developer community.
Seema IyerUSA for UNCHRGet started todayBuild your nonprofit on the world's most advanced developer platform. Verified nonprofits get exclusive access to a free GitHub Team plan or 25% off the GitHub Enterprise cloud plan.Join GitHub for NonprofitsContact usFrequently Asked QuestionsWho qualifies for GitHub for Nonprofits?Nonprofit organizations that are 501(c)(3) or equivalent and are non-governmental, non-academic, non-commercial, non-political in nature, and have no religious affiliation are eligible for a free GitHub Team Plan with unlimited private repositories and unlimited users or 25% off of GitHub Enterprise Cloud.What if our organization does not qualify for nonprofit status but works in the social sector?At this time, we only support registered 501(c)(3) or equivalent organizations. In the future, we hope to provide additional programmatic support to social sector organizations.What are the different GitHub pricing plans?GitHub offers free and paid plans for storing and collaborating on code. Some plans are available only to personal accounts, while other plans are available only to organization and enterprise accounts. For more information about accounts, see "Types of GitHub accounts."I have another question, how do I reach the team?If you would like to learn more about our programming, partner with us, or get in touch, contact our team today.\n\n\n\nSolutionsBy use caseGitHub DevSecOpsThe AI-powered DevSecOps platformWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place. 

Request a demoSee plans & pricingIntegrate AI-powered security features directly into your development workflow, eliminating the need for third-party tools.Code scanningFind and fix security issues before production with static application security testing (SAST).
Secret scanningHunt, revoke, and prevent leaked secrets with automatic push protection.
Supply chain securityKeep vulnerable dependencies out of your applications with software composition analysis (SCA).
Logos for EY Mercado Libre 3M KPMG TELUSGive AI the heavy liftingOrganizations struggle to fix their backlog of vulnerabilities, despite the risks. Coming next, security managers can burn down years of security debt in one simple sprint.Discover GitHub CopilotFound means fixedDon‚Äôt just find vulnerable code, fix it. GitHub Advanced Security flags problems and suggests AI-powered solutions, freeing teams to ship more secure software faster.Explore AI-powered securityPump your team‚Äôs security prowessDevelopers aren‚Äôt security professionals. With GitHub Advanced Security, you can offload the technical complexity and give them the freedom to build and ship great software.
Discover code scanning autofixYour workflows, your wayWith support for more than 17,000 app integrations, GitHub Advanced Security accommodates your team‚Äôs tooling preferences.Explore GitHub Marketplace7xfaster vulnerabilities fixes 2.4fewer false positives than the industry standard20Mrepositories that have enabled secret scanning‚ÄúWe prefer to have security that leverages what developers are already using rather than trying to force them to use some other tool.
Emilio EscobarChief Information Security Officer @ DatadogApplication security made simplerEliminate toolchain cost and complexity with native security tools for GitHub Enterprise and Azure DevOps customers.
Request a demoSee plans & pricingAdditional resourcesDevSecOps explainedExplore how DevSecOps builds on the ideas of DevOps by applying security practices throughout the SDLC.
Learn moreMeet the companies who build with unified DevSecOpsLeading organizations choose GitHub to plan, build, secure, and ship software.
Read customer storiesDiscover how AI is changing the security landscapeFrom prevention to remediation, see how AI can help fix issues instantly.Watch webinar\n\n\n\nSolutionsBy use caseGitHub DevOpsThe unified platform for your DevOps lifecycle Build, scale, and deliver more secure software with GitHub's unified AI-powered developer platform.Start a free trialContact salesKeep developers in the flow with automation, AI, collaboration tools, and more.Increase collaborationGet the tools you need to facilitate collaboration among teams.
Eliminate barriersHarness the power of AI-powered coding to empower developer creativity and innovation.
Reduce context switchingBoost productivity with a single, integrated developer platform with powerful native tools to keep developers in the flow.
Logos for Ford, Shopify, NASA, Vercel, and SpotifyDrive innovation with AI-powered developer toolsAI-driven code suggestions enhances job satisfaction and focus for 60-75% of developers, reducing frustration and enabling more rewarding work.Explore GitHub CopilotBuilt-in securityManage the SDLC with automated security tools. Find and fix vulnerabilities quickly and efficiently with security checks integrated into every step of the developer's workflow.Explore GitHub Advanced SecurityStreamline team collaborationHelp developers and operations teams more regularly communicate and provide feedback about timelines and goals so everyone is responsible for the project‚Äôs success.Explore collaboration tools88%of developers experience increased productivity75%reduced time spent managing tools1minset-up time for largest repo with GitHub CodespacesBuild and innovate with a leader in the Gartner¬Æ Magic Quadrant‚Ñ¢ for DevOps PlatformsRead the report‚ÄúThe availability of out-of-the-box integrations with our existing tooling is a big part of GitHub‚Äôs appeal. GitHub really helps bring DevOps to life.Danilo SuntalManufacturing Data Flow Product and Platform, P&GDevOps strategies, amplified by GitHub toolsTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools you know and love‚Äîor discover new ones.
Start a free trialContact salesAdditional resourcesFind the right DevOps platformNarrow your search with the 2024 Gartner¬Æ Magic Quadrant‚Ñ¢ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsBy use caseGitHub CI/CDThe complete CI/CD solutionBuild, test, and deploy software with simple and secure enterprise CI/CD, all on the complete development platform.
Start a free trialContact salesStreamline, secure, and deploy with confidence: automate your software delivery pipelineTurn code into softwareAutomatically trigger builds on every commit with workflow builder.
Secure and improveEnd-to-end testing for security, code quality, performance, and functionality.
Ship with confidenceAutomate deployments from start to finish to one or multiple cloud providers.
Build fast, stay secureEasy-to-set-up and simple-to-maintain CI/CD that helps your developers build more secure code from the start without sacrificing speed.Explore GitHub Advanced SecurityContinuous testing made simpleTrack everything from code quality to your security profile with end-to-end testing built to keep you secure and in compliance at every stage.Deploy software with confidenceSeamless CI/CD deployment automation makes it simple to deliver secure software with all cloud providers so you can scale confidently.Explore GitHub Actions90%+Fortune 100 choose GitHub100M+Developers call GitHub home420M+Repositories on GitHubPowerful CI/CD with GitHub EnterpriseThe complete developer platform to build, scale, and deliver secure software.Start a free trialContact salesAdditional resourcesDevOps tips for Engineering leaders6 DevOps tips to help engineering leaders deliver software at scale
Get the report Ship secure software fastHow developer-first supply chain security helps you secure faster
Get the report CI/CD Solution Demo How to automate CI/CD and security with GitHub Enterprise
Get the report\n\n\n\nSolutionsUse CasesGitHub solutionsSolve your business challenges with proven combinations of GitHub solutions, empowering your team to ship secure software quickly and accelerate innovation.  Start a free trialContact salesDevSecOpsWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place.
Learn moreDevOpsScale and deliver more secure software with GitHub's unified AI-powered developer platform.Learn moreCI/CDTest and deploy software with simple and secure enterprise CI/CD.Learn moreRelated solutionsHealthcareBy incorporating security checks into developer workflows, you can build secure communication channels between patients and providers.Learn moreFinancial ServicesWith an AI-powered developer platform, you can build innovative financial solutions that drive economic growth.Learn moreManufacturingWith robust CI/CD that can handle the complex needs of manufacturing, you can securely transform operations at scale.Learn more2.4xmore precise leaked secrets found with fewer false positives~25%increase in developer speed with GitHub Copilot1minset-up time for largest repo with GitHub Codespaces+88%more productivity with GitHub Enterprise Get startedTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love‚Äîor discover new ones.
Start a free trialContact sales\n\n\n\nSolutionsBy industryHealthcare solutionsEmpower healthcare development with a secure, AI-powered platformBy incorporating AI into developer workflows, you can build secure patient care solutions at scale. Start a free trialContact salesA single, integrated, enterprise-ready platformEnhance patient careFacilitate rapid innovation so you can implement the latest technologies more reliably.Unlock engineering potentialEmpower developer collaboration, productivity, and creativity at scale.Streamline healthcare developmentFocus on delivering impactful patient outcomes by priming your engineering staff for growth.Lorem IpsumDrive healthcare innovation with AIBy enabling your developers to code up to 55% faster, you can stay ahead of advancements and innovate services while remaining secure and compliant. 
Explore GitHub CopilotProtect patient dataCreate more secure healthcare applications by detecting vulnerabilities in your codebase and preventing credentials from being exposed.
Explore GitHub Advanced SecurityAutomate manual tasksMake life easier for developers. Reduce time-to-market and improve responsiveness to patients and stakeholders by using enterprise-ready, scalable CI/CD.
Explore GitHub Actions+88%more productivity with GitHub Enterprise 1minset-up time for largest repo with GitHub Codespaces~25%increase in developer speed with GitHub CopilotRead how Doctolib fostered a culture of reusability and simplified the CI/CD process with GitHub.Read the customer story3M transforms its software toolchain to bring cutting-edge science to customers, faster.Read storyPhilips builds and deploys digital health technology faster with innersource on GitHub.Read storyGitHub brings DevOps to life and enables streamlined developer experiences at Procter & Gamble.Read story‚ÄúHealthcare organizations want a service that provides a world-class experience for patients and improves people‚Äôs lives. GitHub helps us meet and exceed those expectations.David TerolProgram director at the Philips Software Center of ExcellenceDevOps strategies for healthcare innovation, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love‚Äîor discover new ones.
Start a free trialContact salesAdditional resourcesFind the right DevOps platformNarrow your search with the 2024 Gartner¬Æ Magic Quadrant‚Ñ¢ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsBy industryFinancial servicesTransform financial services with a secure, AI-powered solution By embedding AI into developer workflows, you can accelerate secure financial innovation at scale. 
Start a free trialContact salesBuild secure financial services by having an all-in-one platform that eliminates the need for third-party tools and keeps developers in the flow.Reduce riskAvoid data breaches and fraud by incorporating security practices throughout the development process.
Increase speed and efficiencyEnable faster development and deployment of new features and services by leaving the manual, repetitive tasks to AI.
Streamline operationsImprove efficiency and enhance developer creativity by working on a single, secure, AI-powered platform.
Logos for Ita√∫ Mercari Mercado Libre Stripe and PlaidGet ahead with AI-powered innovationStay at the forefront of technological advancements by using AI-powered tools to innovate services while remaining secure and compliant.Explore GitHub CopilotEnhance regulatory compliance and securityMeet regulatory standards and secure your supply chain by leveraging¬† AI-powered compliance features and natively-embedded application security testing.Explore GitHub Advanced SecurityAccelerate software developmentAutomation is everything. Reduce time-to-market and improve responsiveness to customers by using enterprise-ready, scalable CI/CD.Explore GitHub ActionsRead how Societe Generale tripled their releases and cut development time by more than half.Read the customer story‚ÄúWe used to have other tools as well, but GitHub offers us with an all-in-one solution that provides developers a single source of truth for security notifications and code management.David HeitzingerHead of Agile Engineering Support // Raiffeisen BankDevOps strategies for financial innovation, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love‚Äîor discover new ones.Start a free trialContact salesFind the right DevOps platformNarrow your search with the 2024 Gartner¬Æ Magic Quadrant‚Ñ¢ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsBy industryManufacturing solutionsAdvance manufacturing with a complete, AI-powered platformBy integrating AI into developer workflows, you can securely transform manufacturing operations at scale.Start a free trialContact salesSupport manufacturing's complex needs with an all-in-one platform that eliminates third-party tools, keeping developers in flow.Enhance industrial efficiencyEnsure the reliable implementation of cutting-edge technologies by incorporating security practices throughout the development process.¬†
Move fast, safelyBuild at the speed of innovation and enable faster deployment by embedding AI into developer workflows.
Reduce context switchingBoost efficiency and increase creativity by enabling developers to plan, track, and build in a single, integrated, AI-powered platform.
Logos for 3M P&G Decathlon Ford and BoltDrive industrial innovationBoost developer productivity and innovation with AI-powered tools, while remaining secure and compliant.Explore GitHub CopilotSecure your supply chainMinimize the risk of disruptions and data breaches by using robust security features and best practices, embedded directly into the developer workflow.Explore GitHub Advanced SecuritySupport developers with automation Transform continuous integration processes by using enterprise-ready, scalable CI/CD‚Äînow with Arm-hosted runners.Explore Arm64 on GitHub ActionsRead how Procter & Gamble streamlined the developer experience and improved developer satisfaction and security.¬†Read the customer story‚ÄúYou don‚Äôt have to go out to a separate project management tool. You don‚Äôt have to go to a spreadsheet, or a Microsoft project, or into Jira. It‚Äôs all on GitHub. It‚Äôs made us more productive.Tina Beamer3M IT manager of operations and qualityDevOps strategies for manufacturing innovation, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love‚Äîor discover new ones.Start a free trialContact sales\n\n\n\nSolutionsBy industryGovernment solutionsEmpowering government agencies with secure, collaborative software developmentWith seamless collaboration and robust compliance, GitHub helps government agencies build and innovate securely on a single, AI-powered platform.Start a free trialContact salesTransforming government software development with security, collaboration, and flexibilitySecure and compliant development With FedRAMP authorization and industry-leading security features, GitHub meets the highest standards of compliance and protection.¬†
Efficient collaboration across teams GitHub‚Äôs collaborative platform enables seamless code sharing, review, and feedback within your agency or with external partners.
Flexible deployment options No matter where you need to host, GitHub Enterprise offers flexible deployment options to meet your agency‚Äôs unique operational requirements.Protect sensitive data Help keep your agency‚Äôs code secure with built-in vulnerability scanning, secret detection, and compliance monitoring, all seamlessly integrated into your development workflow..
Explore GitHub Advanced SecurityAccelerate development with AI-powered assistanceWhether drafting complex algorithms or automating tasks, GitHub Copilot empowers your agency to deliver mission-critical software with speed and precision.Explore GitHub CopilotAutomated, secure CI/CDWith customizable workflows and integrations, your agency can streamline operations and ensure consistent, high-quality code delivery.Explore GitHub ActionsLearn how the VA modernizes its approach to make healthcare more accessible to millions of veterans.
Read the customer story‚ÄúWe reduced our deployment time significantly. To deliver quickly, using GitHub and Azure DevOps for our DevSecOps process, CI/CD, infrastructure, code, and automation was the key.Shamal SiwanLead DevOps Engineer/Solutions Architect  //  California Department of TechnologyDevOps strategies for government agencies, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter with the tools they know from day one‚Äîor discover new ones.
Contact salesStart a free enterprise trialAdditional resourcesFind the right DevOps platformNarrow your search with the 2024 Gartner¬Æ Magic Quadrant‚Ñ¢ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsIndustriesIndustry solutionsDiscover how GitHub‚Äôs industry solutions can help you improve efficiency, reduce costs, and capture new market opportunities.Start a free trialContact salesHealthcareBy incorporating security checks into developer workflows, you can build secure communication channels between patients and providers.Learn moreFinancial ServicesWith an AI-powered developer platform, you can build innovative financial solutions that drive economic growth.Learn moreManufacturingWith robust CI/CD that can handle the complex needs of manufacturing, you can securely transform operations at scale.Learn moreGovernmentWith seamless collaboration and robust compliance, GitHub helps government agencies build and innovate securely on a single, AI-powered platform.Learn moreRelated solutionsDevSecOpsWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place.
Learn moreDevOpsScale and deliver more secure software with GitHub's unified AI-powered developer platform.Learn moreCI/CDTest and deploy software with simple and secure enterprise CI/CD.Learn moreExecutive InsightsGet expert perspectives. Stay ahead with insights from industry leaders.Learn moreNarrow your DevOps platform search with this Gartner reportRead the report2.4xmore precise leaked secrets found with fewer false positives~25%increase in developer speed with GitHub Copilot1minset-up time for largest repo with GitHub Codespaces+88%more productivity with GitHub Enterprise Get startedTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love‚Äîor discover new ones.Start a free trialContact sales\n\n\n\nAI-powered platform solutions to solve your company‚Äôs challengesGitHub empowers your team to deliver software faster and more efficiently, while maintaining robust security and compliance. Start a free trialContact salesGitHub scales with teams of any size.EnterprisesBuild, scale, and deliver secure software faster with GitHub‚Äôs AI-powered developer platform.Learn moreTeamsWith CI/CD, Dependabot, and the world's largest developer community, GitHub provides everything your team needs to ship secure software faster.Learn moreStartupsGo from idea to IPO in one place, complete with personalized onboarding, office hours, and tailored product guidance.Learn moreThe enterprise-grade platform that developers know and love.Learn more about GitHub EnterpriseSolving industry-specific challenges
View allHealthcareBy incorporating security checks into developer workflows, you can build secure communication channels between patients and providers.Learn moreFinancial ServicesWith an AI-powered developer platform, you can build innovative financial solutions that drive economic growth.Learn moreManufacturingWith robust CI/CD that can handle the complex needs of manufacturing, you can securely transform operations at scale.Learn moreThe solutions you need to build what you wantView allDevSecOpsWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place.
Learn moreDevOpsScale and deliver more secure software with GitHub's unified AI-powered developer platform.Learn moreCI/CDTest and deploy software with simple and secure enterprise CI/CD.Learn moreAdopted by the world's leading organizations3M transforms its software toolchain to bring cutting-edge science to customers, faster.Read storyPhilips builds and deploys digital health technology faster with innersource on GitHub.Read storyGitHub brings DevOps to life and enables streamlined developer experiences at Procter & Gamble.Read storyGet startedTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love‚Äîor discover new ones.
Start a free trialContact sales\n\n\n\nAITopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentMachine Learning (ML) in Software DevelopmentDiscover how machine learning (ML) is used in software development to optimize workflows and improve user experiences. Gain insights from real-world examples, learn how developers are integrating ML models into existing pipelines, and explore the future potential of ML in software development.Learn moreAI Code ReviewsDiscover how AI code reviews can boost developer productivity and speed up workflows by automating error detection and providing real-time feedback.Learn moreWhat is Natural language processing (NLP)?Learn why natural language processing (NLP) is becoming an indispensable tool for developers. Learn moreWhat are AI models?Learn how AI models help organizations identify data patterns, automate workflows, solve complex problems, forecast outcomes, and enhance decision making.Learn moreEnhancing software development with retrieval-augmented generationLearn how Retrieval Augmented Generation (RAG) improves coding, debugging, and code reviews.Learn moreWhat are AI agents?Discover how AI agents transform software development by automating workflows and enhancing security. Explore the different types of AI agents, learn how they integrate into development environments, and see real-world examples of their impact. Learn best practices for using AI agents and get a glimpse into the future of AI in development and security.Learn moreWhat is AI code generation?AI code generation uses machine learning models to provide context-based code suggestions.Learn moreAI coding tools for beginner and expert codersHow beginner and expert coders use AI coding tools to code faster and ship great software.Learn more\n\n\n\nDevOpsTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentWhat is CI/CD?Continuous Integration and Continuous Delivery/Deployment or (CI/CD) automates builds, testing, and deployment so you can ship code changes faster and reliablyLearn moreWhat is a DevOps engineer and what does a DevOps engineer do?A DevOps engineer enables collaboration and innovation within an organization.Learn moreWhat is Continuous Deployment?Continuous deployment (CD) is a process that uses automated testing to validate if changes to a codebase are secure, correct, and stable for deployment to a production environment.Learn moreWhat is the DevOps Model? Exploring foundational practices in DevOpsGitHub provides the tools required to be a mature DevOps organization. Discover the DevOps model that separates successful DevOps teams from those that fail.Learn moreWhat is DevSecOps?DevSecOps combines development, security, and operations to automate security integration across all phases of the software development lifecycle (SDLC).Learn moreWhat is containerization?Containers enable DevOps developers and system administrators to build, test, deploy, and maintain applications quickly, securely, and efficiently.Learn moreWhat is DevOps automation?DevOps automation is a modern approach to software development that uses tools and processes to automate tasks and streamline workflows.Learn moreWhat is agile methodology?Learn what agile is, its benefits, why it‚Äôs so popular, and how you can apply it in software development and other kinds of work.Learn moreWhat is a DevOps pipeline? A complete guideLearn how to transform your organization and deliver software faster by combining processes, tooling, and automation in a DevOps Pipeline.Learn moreWhat is DevOps?DevOps is a set of practices, methodologies, and tools that optimize software application delivery by integrating software development and IT operations processes. Learn moreDevOps monitoring tools: Automating your DevOps monitoring processesUse GitHub as your approach to developing, testing, and deploying applications through comprehensive and real-time monitoring systems. Workflows are the foundation of automation and DevOps, and monitoring is the bedrock.Learn moreThe fundamentals of continuous integration in DevOpsContinuous Integration (CI) is a practice allowing developers to integrate code into a shared repository regularly. Get to know the fundamentals of what makes this process successful.Learn morePrevious12Next\n\n\n\nSecurityTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentWhat is a Data Breach?Discover how data breaches occur, their impact on businesses, and the industries most at risk. Learn about common attack methods and tools and best practices for securing sensitive data.Learn moreWhat is risk-based vulnerability management (RBVM)? Discover how risk-based vulnerability management (RBVM) helps organizations focus on the most critical security risks to optimize protection and allocate resources effectively. Learn moreWhat is Code Scanning?Code scanning is essential because it helps developers and security teams find security vulnerabilities and errors. Keep reading for an overview of what code scanning is, how it works, and the benefits it provides. Plus, take a closer look at some code scanning tools and explore ways to enhance software security.Learn moreWhat is a security risk assessment?Learn what a security risk assessment is, how to perform one effectively, and the key benefits of identifying and mitigating potential risks.Learn moreWhat is Cross-Site Scripting (XSS)Discover how cross-site scripting (XSS) compromises web security and impacts users and organizations. Gain insights from real-world examples and learn about best practices to safeguard your applications.Learn moreWhat is secret scanning?In today's digital landscape, protecting sensitive information is crucial for maintaining the integrity and security of an organization‚Äôs software systems.Learn moreDynamic application security testing (DAST)DAST is an AppSec method that simulates attacks to test web apps for security issues.Learn moreWhat Is Incident Response?In today‚Äôs evolving threat landscape, a robust incident response plan is essential to minimize damage, protect sensitive data, and ensure business continuity.Learn moreWhat is software supply chain security?Learn how software supply chain security helps organizations protect the safety, reliability, and integrity of their software supply chains from cybersecurity threats.Learn moreWhat is shift left?Explore the benefits of shift left in software development, like early testing and efficient scanning strategies within the software development lifecycle.Learn moreWhat is software composition analysis (SCA)?Software composition analysis (SCA) helps developers identify and manage security vulnerabilities in open source software, leading to more compliant, better quality code. Learn moreWhat is security testing?Learn about security testing with our guide to security testing types, tools, and scanning methods, and best practices and trends for greater software security.Learn morePrevious12Next\n\n\n\nSoftware DevelopmentTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentWhat are code repositories?Ever wonder where all that code you write actually lives? Welcome to the world of code repositories.Learn moreWhat is the SDLC?Learn about the software development lifecycle (SDLC) and gain valuable insights into its essential phases, methodologies, and best practices. Enhance your understanding of this crucial process to drive successful software development projects.Learn moreWhat is cloud native?Cloud native is an approach to building and running scalable applications in dynamic environments like public, private, or hybrid clouds, using containers, microservices, and DevOps practices.Learn moreWhat is Platform engineering?Learn what platform engineering is and how it empowers developers by creating internal developer platforms, improving workflows, and reducing operational bottlenecks. Explore the benefits for developers and IT managers alike.Learn moreHow to accelerate innovation with innersourceOrganizations around the world are accelerating their development cycles and tapping into new wells of innovation within their companies through "innersource" projects that share code and resources internally, enabling cross-team collaboration and contributions.Learn moreWhat is Open Source Software (OSS)?Get an overview of open source software (OSS) with this guide‚Äîand explore tips for getting started.Learn moreAn introduction to innersourceOrganizations worldwide are incorporating open source methodologies into the way they build and ship their own software.Learn moreWhat is software development?Explore software development basics including tools, security, steps, and impact on industries.Learn moreWhat is Version Control?Learn how version control systems and software help track changes, support collaboration, and ensure code integrity throughout the development process.Learn moreTools and techniques for effective code documentationLearn about code documentation and why it‚Äôs essential for delivering quality software.Learn moreWhat is software architecture?Learn how software architecture helps developers build scalable, efficient systems using best practices, key components, and common styles and patterns.Learn moreWhat is a programming language?A programming language is a set of instructions that enables humans to communicate commands to a computer in software development.Learn morePrevious12Next\n\n\n\nAll TopicsTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentMachine Learning (ML) in Software DevelopmentDiscover how machine learning (ML) is used in software development to optimize workflows and improve user experiences. Gain insights from real-world examples, learn how developers are integrating ML models into existing pipelines, and explore the future potential of ML in software development.Learn moreWhat is a Data Breach?Discover how data breaches occur, their impact on businesses, and the industries most at risk. Learn about common attack methods and tools and best practices for securing sensitive data.Learn moreAI Code ReviewsDiscover how AI code reviews can boost developer productivity and speed up workflows by automating error detection and providing real-time feedback.Learn moreWhat is risk-based vulnerability management (RBVM)? Discover how risk-based vulnerability management (RBVM) helps organizations focus on the most critical security risks to optimize protection and allocate resources effectively. Learn moreWhat is Code Scanning?Code scanning is essential because it helps developers and security teams find security vulnerabilities and errors. Keep reading for an overview of what code scanning is, how it works, and the benefits it provides. Plus, take a closer look at some code scanning tools and explore ways to enhance software security.Learn moreWhat is Natural language processing (NLP)?Learn why natural language processing (NLP) is becoming an indispensable tool for developers. Learn moreWhat are AI models?Learn how AI models help organizations identify data patterns, automate workflows, solve complex problems, forecast outcomes, and enhance decision making.Learn moreWhat is a security risk assessment?Learn what a security risk assessment is, how to perform one effectively, and the key benefits of identifying and mitigating potential risks.Learn moreWhat is Cross-Site Scripting (XSS)Discover how cross-site scripting (XSS) compromises web security and impacts users and organizations. Gain insights from real-world examples and learn about best practices to safeguard your applications.Learn moreWhat is secret scanning?In today's digital landscape, protecting sensitive information is crucial for maintaining the integrity and security of an organization‚Äôs software systems.Learn moreDynamic application security testing (DAST)DAST is an AppSec method that simulates attacks to test web apps for security issues.Learn moreWhat is CI/CD?Continuous Integration and Continuous Delivery/Deployment or (CI/CD) automates builds, testing, and deployment so you can ship code changes faster and reliablyLearn morePrevious123456Next\n\n\n\nEbooks & WhitepapersBrowse our collection of Ebooks and Whitepapers for valuable industry knowledge, trends, and strategies to help you stay ahead and make informed decisions.Filters Open FiltersContent TypeContent TypeWhitepapersEbooksCategoryCategoryAICloudDevOpsGitHub ActionsGitHub Advanced SecurityGitHub EnterpriseInnersourceOpen SourceSecuritySoftware DevelopmentClear allApplyTraining and onboarding developers on GitHub CopilotWhitepaperDevelopers work alongside Copilot to write code, generate tests, fix bugs, create documentation, and much more. To fully realize Copilot‚Äôs potential, entire teams, not just individual developers, must adopt new skills. While Copilot may be a tool like any other, generative AI presents unique adoption challenges that require specific solutions.Learn more6 common pitfalls for DevOps teams and how to avoid themEbookDevOps is a transformative practice‚Äîand not only because it helps to build better software. It also aligns teams, from IT to engineering to security, removing siloed workstreams and promoting collaboration. As great as this sounds, pulling together your DevOps processes and tools requires some practice to make your strategy perfect.
Learn moreThe engineering leader‚Äôs guide to AIEbookAI coding is here. Developers have embraced it and already use various tools for AI code generation to augment their coding capabilities and offload some of their more mundane tasks.Learn moreDetecting and Preventing Secret Leaks in CodeEbookIn today‚Äôs interconnected digital landscape, safeguarding access to systems and sensitive data is more critical‚Äîand more challenging‚Äîthan ever. With the increasing footprint of code and rapid software development cycles, malicious actors have an expanding array of opportunities to exploit vulnerabilities.
Learn moreGitHub case study: Enhancing customer support with AIEbookGitHub Copilot empowers engineers to help their organizations achieve better business outcomes for their customers. But AI doesn't simply help engineers do the same work more quickly; it can help them get to places they haven't been able to get to before! We're excited to share how our GitHub customer success team has been using AI to better serve our customers.Learn moreWhat AI Means for the Future of DevOpsEbookHarnessing AI's full potential isn't just about boosting productivity in isolated phases‚Äîit's about driving real organizational value across the entire software development lifecycle.Learn moreGo beyond code scanning with AI-powered AppSecWhitepaperUnder pressure to ship and meet business demands, development teams often introduce more security vulnerabilities to code than they fix. In other words, they're racking up security and technical debt. It's a difficult cycle to break.
Learn moreTaking GitHub Copilot to the stars, not just the skiesEbookEmbarking on a successful GitHub Copilot launch requires meticulous planning and execution.
Learn moreAt the forefront of DevOps innovation and excellenceWhitepaperBuild and innovate with a Leader in the Gartner¬Æ Magic Quadrant‚Ñ¢ for DevOps PlatformsLearn moreAI Will Not Replace Software Engineers (and May, in Fact, Require More)WhitepaperExplore the current and future impact of AI on developers and see why humans will always be essential to delivering innovative software in this report.
Learn more5 DevOps tips to help teams deliver software at scaleEbookThere are real-world challenges for organizations seeking success in DevOps. In this info sheet, explore 5 DevOps tips to help teams deliver software at scale.
Learn moreModernizing COBOL with GitHub CopilotEbookExplore how GitHub Copilot can transform your legacy systems. Discover the best practices we've developed to help leading organizations achieve smoother migrations and revitalize their COBOL codebase.Learn morePrevious1234Next\n\n\n\nCustomer Stories

      
        
        
      

      
          Enterprise
          Team
          All stories
      

        
            
  Start a free trial
  
  


        
    



      
        



  
  
  



  
  
  



  
  
  








        
  
    

          
    
    
    

    Meet the companies who build with GitHub

    


        
            
    See all stories 


        

        
            
      
        
      

    
  
  
  
  

  

  

  With 12,000 developers using GitHub Copilot, Accenture doubles down on GitHub‚Äôs platform.

  
    Read the story 

  
            
      
        
      

    
  
  
  
  

  

  

  Philips builds and deploys digital health technology faster with innersource on GitHub. 

  
    Read the story 

  
            
      
        
      

    
  
  
  
  

  

  

  Carlsberg unifies development on GitHub Enterprise and accelerates innovation with Copilot.

  
    Read the story 

  
        

        
          The world's largest developer platform
          Leading organizations choose GitHub to plan, build, secure and ship software.
        

        
            
              100M+
              Developers
            
            
              90%
              Fortune 100
            
            
              4M+
              Organizations
            
        

          Businesses that utilize GitHub Enterprise:
          
              
                
              
              
                
              
              
                
              
              
                
              
              
                
              
          

  
    
  

  
  
    
    
  GitHub Enterprise provides an end-to-end developer platform to accelerate businesses.

  
    
        
  
      
    Industry
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Advertising & Marketing
      

  

        
    
    
    
      
        
          Automotive
      

  

        
    
    
    
      
        
          Education
      

  

        
    
    
    
      
        
          Energy & Utilities
      

  

        
    
    
    
      
        
          Financial services
      

  

        
    
    
    
      
        
          Food & Beverage
      

  

        
    
    
    
      
        
          Government
      

  

        
    
    
    
      
        
          Healthcare & Life Sciences
      

  

        
    
    
    
      
        
          Manufacturing
      

  

        
    
    
    
      
        
          Media & Entertainment
      

  

        
    
    
    
      
        
          Nonprofit
      

  

        
    
    
    
      
        
          Professional services
      

  

        
    
    
    
      
        
          Real Estate
      

  

        
    
    
    
      
        
          Retail & ecommerce
      

  

        
    
    
    
      
        
          Social & Messaging
      

  

        
    
    
    
      
        
          Software, Hardware & Technology
      

  

        
    
    
    
      
        
          Telecommunications
      

  

        
    
    
    
      
        
          Transportation & Logistics
      

  

        
    
    
    
      
        
          Travel & Hospitality
      

  

    




      
  

        
  
      
    Feature
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          GitHub Actions
      

  

        
    
    
    
      
        
          GitHub Advanced Security
      

  

        
    
    
    
      
        
          GitHub Codespaces
      

  

        
    
    
    
      
        
          GitHub Copilot
      

  

        
    
    
    
      
        
          GitHub Discussions
      

  

        
    
    
    
      
        
          GitHub Enterprise
      

  

        
    
    
    
      
        
          GitHub Expert Services
      

  

        
    
    
    
      
        
          GitHub Issues
      

  

        
    
    
    
      
        
          GitHub Packages
      

  

        
    
    
    
      
        
          GitHub Team
      

  

    




      
  

        
  
      
    Region
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Americas
      

  

        
    
    
    
      
        
          Asia Pacific
      

  

        
    
    
    
      
        
          Europe
      

  

        
    
    
    
      
        
          Middle East & Africa
      

  

    




      
  

        
  
      
    Size
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          Startup
      

  

        
    
    
    
      
        
          Growth
      

  

        
    
    
    
      
        
          Enterprise
      

  

    




      
  

    

    
        
    Learn more about Enterprise 


        
    View Enterprise stories 


    
  
  
    
  
    Read more about Aevi's customer story
    
      
        
  
  
  
  

      
    
     Aevi
    Aevi delivers developer happiness with GitHub Enterprise.
    
      Read story 

    
  


    
  
    Read more about Braintree's customer story
    
      
        
  
  
  
  

      
    
     Braintree
    Braintree brings their customers closer to their development and release processes with GitHub.
    
      Read story 

    
  


    
  
    Read more about Coinbase's customer story
    
      
        
  
  
  
  

      
    
     Coinbase
    Coinbase creates a culture of empowerment while maintaining security or compliance.
    
      Read story 

    
  


    
  
    Read more about Deutsche BoÃàrse Group's customer story
    
      
        
  
  
  
  

      
    
     Deutsche BoÃàrse Group
    With code and collaboration in one place, Deutsche B√∂rse Group innovates faster with GitHub Enterprise.
    
      Read story 

    
  


    
  
    Read more about Deutsche Verm√∂gensberatung's customer story
    
      
        
  
  
  
  

      
    
     Deutsche Verm√∂gensberatung
    DVAG puts customers first by optimizing developer efficiency on GitHub Enterprise.

    
      Read story 

    
  


    
  
    Read more about Dow Jones's customer story
    
      
        
  
  
  
  

      
    
     Dow Jones
    Dow Jones delivers the day‚Äôs headlines with a secure and news-ready platform developers and readers can rely on: GitHub Enterprise.
    
      Read story 

    
  






      
  



  
    
      
          

        GitHub Enterprise
      

      Duolingo empowers its engineers to be force multipliers for expertise with GitHub Copilot.

      
        Read more about Duolingo and GitHub's story
        Read story 


        
            
              25%
              increase in developer speed with GitHub Copilot
            
            
              1m
              set-up time for largest repo with Codespaces
            
            
              67%
              decrease in median code review turnaround time
            
            
              70%
              increase in pull requests
            
        
    
  

    
      


  
  
  
  



  


      
        
          
        

        Problem
      
      
        Inconsistent standards and workflows limited developer mobility and efficiency, limiting Duolingo‚Äôs ability to expand its content and deliver on its core mission. 
      


      
        
          
        

        Solution
      
      
        GitHub Copilot, Codespaces, and custom API integrations enforce code consistency, accelerate developer speed, and remove the barriers to using engineering as a force multiplier for expertise.
      


    
      
        
      
      Products
    
    
      

      
          
            GitHub Enterprise
            
          

          
            GitHub Codespaces
            
          
          
            GitHub Copilot
            
          
      
    
  


    



  



    
  Discover how high-growth companies innovate faster with GitHub Team.

  
    
        
  
      
    Industry
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Advertising & Marketing
      

  

        
    
    
    
      
        
          Automotive
      

  

        
    
    
    
      
        
          Education
      

  

        
    
    
    
      
        
          Energy & Utilities
      

  

        
    
    
    
      
        
          Financial services
      

  

        
    
    
    
      
        
          Food & Beverage
      

  

        
    
    
    
      
        
          Government
      

  

        
    
    
    
      
        
          Healthcare & Life Sciences
      

  

        
    
    
    
      
        
          Manufacturing
      

  

        
    
    
    
      
        
          Media & Entertainment
      

  

        
    
    
    
      
        
          Nonprofit
      

  

        
    
    
    
      
        
          Professional services
      

  

        
    
    
    
      
        
          Real Estate
      

  

        
    
    
    
      
        
          Retail & ecommerce
      

  

        
    
    
    
      
        
          Social & Messaging
      

  

        
    
    
    
      
        
          Software, Hardware & Technology
      

  

        
    
    
    
      
        
          Telecommunications
      

  

        
    
    
    
      
        
          Transportation & Logistics
      

  

        
    
    
    
      
        
          Travel & Hospitality
      

  

    




      
  

        
  
      
    Feature
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          GitHub Actions
      

  

        
    
    
    
      
        
          GitHub Advanced Security
      

  

        
    
    
    
      
        
          GitHub Codespaces
      

  

        
    
    
    
      
        
          GitHub Copilot
      

  

        
    
    
    
      
        
          GitHub Discussions
      

  

        
    
    
    
      
        
          GitHub Enterprise
      

  

        
    
    
    
      
        
          GitHub Expert Services
      

  

        
    
    
    
      
        
          GitHub Issues
      

  

        
    
    
    
      
        
          GitHub Packages
      

  

        
    
    
    
      
        
          GitHub Team
      

  

    




      
  

        
  
      
    Region
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Americas
      

  

        
    
    
    
      
        
          Asia Pacific
      

  

        
    
    
    
      
        
          Europe
      

  

        
    
    
    
      
        
          Middle East & Africa
      

  

    




      
  

        
  
      
    Size
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          Startup
      

  

        
    
    
    
      
        
          Growth
      

  

        
    
    
    
      
        
          Enterprise
      

  

    




      
  

    

    
        
    Learn more about Team 


        
    View Team stories 


    
  
  
    
  
    Read more about Buffer's customer story
    
      
        
  
  
  
  

      
    
     Buffer
    Buffer goes from siloed to synced for better production releases.
    
      Read story 

    
  


    
  
    Read more about Cesium's customer story
    
      
        
  
  
  
  

      
    
     Cesium
    Cesium leverages an open source community to support the development of 3D geospatial applications.
    
      Read story 

    
  


    
  
    Read more about Front's customer story
    
      
        
  
  
  
  

      
    
     Front
    Front takes the work out of their workflows with GitHub Team.
    
      Read story 

    
  


    
  
    Read more about Knock's customer story
    
      
        
  
  
  
  

      
    
     Knock
    Knock pivots to new products, with the help of GitHub‚Äôs fast, flexible developer workflows.
    
      Read story 

    
  


    
  
    Read more about Modsy's customer story
    
      
        
  
  
  
  

      
    
     Modsy
    Modsy leverages GitHub Team to make interior design easy and accessible for all.
    
      Read story 

    
  


    
  
    Read more about Netdata's customer story
    
      
        
  
  
  
  

      
    
     Netdata
    Netdata accelerates their developer workflow with built-in security and open source.
    
      Read story 

    
  






  

    
      

  
  
    
    
      
        
          Here's what software leaders have to say about GitHub
          Testimonials from our developers.
        

        
          1 / 4
          1 of 4
        
      

      
        
                

          
            
              
  
    
      
  
  
  
  

    

    
      ‚Äú
      
        At Uber, we continuously strive to improve our developer experience. We migrated code hosting and review to GitHub and are adopting GitHub Copilot to boost overall developer productivity. 
      
    

    
      
        
          Ali-Reza Adl-Tabatabai 
        
      
      
        Senior Director of Engineering
          @ Uber
      
    
  


              
  
    
      
  
  
  
  

    

    
      ‚Äú
      
        GitHub's endless plug-ins, beautiful UI, and optimized workflows make devs happy. Happy and empowered engineers write the best code, make better decisions, and have more time to innovate. 
      
    

    
      
        
          Jen Peck
        
      
      
        Senior Director of Engineering
          @ Redfin
      
    
  


              
  
    
      
  
  
  
  

    

    
      ‚Äú
      
        GitHub Copilot will bring huge benefits to our engineering teams by reducing the amount of time spent on boilerplate code, keeping the teams in their flow state, allowing them to ship high-quality products to market faster.
      
    

    
      
        
          Santosh Lolyeker
        
      
      
        VP, Engineering Fellow
          @ Veritas
      
    
  


              
  
    
      
  
  
  
  

    

    
      ‚Äú
      
        With GitHub Enterprise, we have alleviated engineering overhead at Costco, enabling our engineers to focus on innovating.
      
    

    
      
        
          Avdesh Rai
        
      
      
        Enterprise Solutions Engineer
          @ Costco
      
    
  


            
          

                
        
      
    

  


    

  
  
    

  
  
  



  What will your story be?
  Start collaborating with your team on GitHub
  
    
      
        Free
        The basics for individuals and organizations
        $0 USD per month

        
  Create a free organization
  
  


      
    

    
      
        Team
        Advanced collaboration for individuals and organizations
        $4 USD per month

        
  Continue with Team
  
  


      
    

    
      
        Enterprise
        Security, compliance, and flexible deployment
        $21 USD per month

        
  Enterprise
  
  


      
    
  
  
    Want to use GitHub on your own?
    
    Check out our plans for individuals\n\n\n\nSolutionsEnterprise ContentExecutive insights, curated just for youGitHub for Leaders: How CXOs limit risk without losing speedIn this episode of GitHub for Leaders, host Anjuan Simmons sits down with cybersecurity researcher Daniel Cuthbert to discuss the evolving challenges of enterprise security facing leaders right now ‚Äì and why credential leaks remain one of the most costly, yet preventable, threats.Learn more Understanding your organization's exposure to secret leaksCredential leaks are expensive, damaging, and on the rise. This article helps you understand your organization‚Äôs specific risk‚Äîand how to reduce exposure before it turns into impact.Learn moreEvolving GitHub Advanced Security: Greater flexibility, easier to accessStarting April 1, 2025, GitHub Advanced Security (GHAS) will be unbundled and available as two standalone security products: GitHub Secret Protection and GitHub Code Security.Learn moreApril ‚Äò25 enterprise roundupTo help you stay ahead, our Enterprise Advocacy team has curated this monthly roundup‚Äîbringing you a concise, enterprise-focused summary of the most important updates you might have missed.Learn moreEssential GitHub Copilot resources for enterprise teamsFrom initial setup to advanced features, this guide will walk you through the essential resources to make your Copilot implementation successful.Learn moreCreating space for developer creativity in high-scale organizationsHow do we ensure our developers can maintain the ability to innovate and experiment while operating within the constraints of a larger organization?Learn moreHow Thomson Reuters successfully adopted AIThomson Reuters began their AI journey in 2022. Engineering leaders realized that what started as industry buzz was an opportunity to foster engineering excellence within the company‚Äìand GitHub Copilot could be just the thing to accelerate their operations.Learn moreThe art of engineering team focus: less is moreGuiding engineering teams to prioritize fewer tasks, limit parallel work, and leave space for unforeseen needs not only boosts productivity, but also fosters more consistent, high-quality work.Learn moreWhy developer satisfaction is your best productivity metricLearn how prioritizing developer satisfaction can drive better code quality, foster innovation, and improve team retention, ultimately boosting engineering productivity.Learn moreRelated solutionsCarlsberg accelerates innovation with CopilotCarlsberg unified its development process and bolstered its security using GitHub Advanced Security, while the integration of Copilot enabled efficient coding practices and minimized the need for context-switching.
Learn moreAccenture cuts technical debt with GitHub Advanced Security and CopilotAccenture leverages GitHub Copilot and Advanced Security to reduce technical debt, driving faster project delivery and improved code quality.
Learn moreEY Scales Developer Efficiency with GitHub Copilot and CodespacesEY built integrations between GitHub and Microsoft Azure DevOps, so it could tap into the power of GitHub's cohesive developer platform for security, automation, and AI.Learn more90%of Fortune 100 choose GitHub433%ROI with GitHub Enterprise77,000organizations use GitHub Copilot75%reduced time spent managing toolsMaximize your investment in AIOur recent study with Accenture shows that AI-driven tools like GitHub Copilot, when integrated into daily workflows, can significantly boost productivity, job satisfaction, and overall code quality without adding complexity.
Discover how to seamlessly integrate AI into your development processes with GitHub Copilot and see measurable impact across your organization.
Learn moreContact sales\n\n\n\nSponsorsSee your top dependenciesGet sponsoredGitHub SponsorsSupport the developers who power open sourceSee your top dependenciesGet sponsoredGitHub Sponsors allows the developer community to financially support the open source projects they depend on, directly on GitHub
$40M+Given back to our maintainers103Regions supported globally4.2K+Organizations sponsoringFor maintainersLaunch a page in minutes and showcase Sponsors buttons on your GitHub profile and repositories! You will automatically appear in worldwide recommendations to partners who are eager to invest in their open source dependencies.Get sponsoredFor sponsorsFind and fund your dependencies in a single transaction. The discovery and bulk sponsorship tools are easy to use. Flexible payment enables you to choose when and how you pay. Corporations like Microsoft like it because all their payments go out as a single invoice.Learn about invoiced billingHelp open source thriveEveryone should be able to contribute to open source.¬†Making open source a viable, financially rewarding career path helps contribute to our digital infrastructure. More funding, more projects, more software to power our world.See your top dependencies‚ÄúShopify uses GitHub Sponsors to efficiently manage and fund projects within the open source community, tailored to the needs of recipients.Azmat YuhannaSenior Engineering Operations Manager, ShopifyInvest in open source. It powers your world. See your top dependenciesGet sponsoredThe internet depends on open source, everywhereComprehensive website security and health monitoring with performance analysisweb-checkWeb-Check provides real-time monitoring for uptime, speed, and user experience, trusted by businesses like Amazon, Shopify, and Airbnb.Sponsor web-checkIntuitive, open-source interface for native GenAI applicationsOpenWebUIOpenWebUI simplifies the development of interactive GenAI apps using LLMs, used by developers at companies like Microsoft, IBM, and GitHub.Sponsor OpenWebUIA command line tool and library for transferring data with URL syntaxcURLcURL is included in almost every modern device‚Äìsmartphones, cars, TVs, laptops, servers, consoles, printers, and beyond.Sponsor cURLFrequently asked questionsHow do I sponsor a project?Sign in and start by navigating to your dependencies, your explore tab, trending repositories, or collections. When a repository has the Sponsor graphic, you can sponsor them directly.How do I get paid for my contributions?You can become a sponsored developer by joining GitHub Sponsors, completing your sponsored developer profile, creating sponsorship tiers, submitting your bank and tax information, and enabling two-factor authentication for your account on GitHub.com. Learn more about getting paid for contributions
Do I need to fill out a tax form to receive sponsorships?Yes. Your tax information must be on file in order for GitHub to make payments to your bank account. The required tax documents may vary based on your location.Note that we do our best to help you with the Sponsors program, but we‚Äôre unable to provide tax guidance.Learn more about tax information for GitHub Sponsors\n\n\n\nThe ReadME Project

        

  
  
    
  


  
    
      
    
  


  



    
      
        

          
  
  
  
  


        
      

      
        Featured stories
        
  

  Featured Article



  
    Coding accessibility: Software by the blind, for the blind


  
    The NVDA screen reader has helped empower a new generation of blind and low-vision developers
  

      
    

    
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Featured Article
            

            
              
                 Coding accessibility: Disability as catalyst for creativity
              
            

            
              Faced with accessibility barriers, developer Paul Chiou turns obstacles into innovative solutions.
            
          
        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Annalu  Waller
            

            
              
                Champion accessibility to unleash untapped potential
              
            

            
              Dr. Annalu Waller on the intricate, interdependent network of support that shapes our lives.
            
          
        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Featured Article
            

            
              
                Coding accessibility: How Della found her voice with open source AAC
              
            

            
              When proprietary apps failed, Della‚Äôs brother built an app that incorporated her needs and feedback into the design.
            
          
        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Featured Article
            

            
              
                Coding accessibility: Building autonomy with AI
              
            

            
              After bringing Braille to the digital world and creating the first screen reader for the web, Dr. Asakawa is now working on an AI-enabled suitcase to help blind people navigate the world independently.
            
          
        
    



        
          

  
    
The ReadME Project

          
        
      
  


          
  
  
    
      
        
          

        

              
            

          
      

      
        
          
            Browse by story type
          

          
              
                
                  Featured Articles
              
              
                
                  Developer Stories
              
              
                
                  Guides
              
              
                
                  The ReadMe Podcast
              
          
        

        
          
            Explore Topics

            
              See all topics 

            
          

          
              
                
                  AI
              
              
                
                  Application Security
              
              
                
                  Career Development
              
              
                
                  DevOps & Automation
              
              
                
                  Maintainer
              
              
                
                  Programming
              
          
        
      

      
        
          
            Nominate a developer//
          

            
              Support the community
            
        
      
    
  



          
  Stories by topic
  
    
      
        The ReadME Project amplifies the voices of the developer community by telling stories about:
      

      
          
            
              AI
            ,
          
          
            
              Application Security
            ,
          
          
            
              Career Development
            ,
          
          
            
              DevOps & Automation
            ,
          

        and¬†more topics.
      
    
  


          

  Community stories
  
  
      
        
          
  
    
    
  
  
  
  

    
  

    Maintainer

    
	



        

        
  

  THE README PODCAST // EPISODE 31



  
    Bridging code and community


  
    Navigating open source in a regulated environment, the crucial role of non-code contributions to open source success, and lessons from scaling projects like Kubernetes.
  

      
      
        
          
  
    
    
  
  
  
  

    
  

    AI

    
	



        

        
  

  THE README PODCAST // EPISODE 33



  
    Powering public goods


  
    Exploring developer happiness through the vibrant Laravel community and the impact of digital public goods on open source, AI models, Wikipedia, and more.
  

      
  

  
  
      
        
          
  
    
    
  
  
  
  

    
  




        

        
  

  Anton Mirhorodchenko



  
    Harness the power of generative AI for software development


  
    Tools like GitHub Copilot and ChatGPT can change the way you build software.
  

      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
  

  Aaron Francis // PlanetScale



  
    Finish your projects


  
    Don‚Äôt let fear, or that last 10%, hold you back.
  

      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
  

  Cassidy Williams // Contenda



  
    Get your first software developer job


  
    Tips, tricks, and general advice for how to get in the door in tech.
  

      
  



            

  
    
      
        We all have the potential to become who we're meant to be, even when societal and socioeconomic challenges get in our way.
      
    

    
      
        
  
    
    
  
  
  
  

    
  

    Accessibility



      

      
        
          
            Champion accessibility to unleash untapped potential
          
        

        
          Annalu  Waller
        
      
    
  




            
  
  
    
      The ReadMe Podcast
    

    
      See all The ReadMe Podcast 

       stories from The ReadMe Podcast
  



  
      
        
          
            
              
  
  
  
  

            
          

          
	

        

        
          
  

  THE README PODCAST // EPISODE 32



  
    (De)coding conventions


  
    The evolution of TypeScript and the future of coding conventions, AI‚Äôs role in improving accessibility, and practical advice on encouraging non-code contributions. 
  

        
      
      
        
          
            
              
  
  
  
  

            
          

          
	

        

        
          
  

  THE README PODCAST // EPISODE 30



  
    Kelsey Hightower‚ÄîPresent


  
    Kelsey shares his origin story, insights on the future of Kubernetes, and advice on making complicated technology easier to understand.
  

        
      
  




            
  
  
    
      Featured Articles
    

    
      See all Featured Articles 

       stories from Featured Articles
  



  
    
      
        
  
    
    
  
  
  
  

    
  

    Programming



      

      
        
          
            
              Is Laravel the happiest developer community on the planet?
            
          

          How the PHP framework maintains a perpetual honeymoon period.
        
      
    
  




            
  
  
    
      Developer Stories
    

    
      See all Developer Stories 

       stories from Developer Stories
  



  
    
      
        
  
    
    
  
  
  
  

    
  




      

      
        
  

  Anton Mirhorodchenko



  
    Realizing potential with AI


  
    Anton uses AI to write code and tackle more projects.
  

      
    

      
        
          
  
    
    
  
  
  
  

    
  




        

        
          
  

  Kyler Middleton



  
    From fixing computers on farms to democratizing DevOps


  
    Kyler discusses her path from rural tech repair jobs to revolutionizing tech education.
  

        
      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
          
  

  Aaron Gustafson



  
    Advancing inclusion with progressive enhancement


  
    Aaron‚Äôs journey towards progressive enhancement and inclusive design.
  

        
      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
          
  

  Ruth Ikegah



  
    Putting the African open source community on the map


  
    Ruth‚Äôs dream is to show people that Africans aren‚Äôt just consumers of open source: They‚Äôre creators as well.
  

        
      
  




            
  
  
    
      Guides
    

    
      See all Guides 

       stories from Guides
  



  
    
      
        
  
    
    
  
  
  
  

    
  

    Application Security



      

      
        
  

  Denys Lashchevskyi // Betsson



  
    A beginner‚Äôs guide to running and managing custom CodeQL queries


  
    Transform your code into a structured database that you can use to surface security vulnerabilities and discover new insights.
  

      
    

    
        
          
            
  
    
    
  
  
  
  

    
  

    Career Development



          

          
  

  Nick Penston // Fidelity Investments



  
    Scaling standards and community in your organization


  
    Learn how to implement open source community ideas to spread best practices.
  

        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
  

  Niek Palm // Philips



  
    Provisioning self-hosted GitHub Actions runners on demand


  
    How Philips optimized their CI/CD process using GitHub Actions and self-hosted runners.
  

        
        
          
            
  
    
    
  
  
  
  

    
  

    Open Source



          

          
  

  Mike Gifford // CivicActions



  
    Treat accessibility issues as bugs, not feature requests


  
    Follow Drupal‚Äôs lead: Prioritize and systematically squash accessibility bugs.
  

        
    
  


        
      

    
      
  
      
        
          
            About The ReadME Project
            Coding is usually seen as a solitary activity, but it‚Äôs actually the world‚Äôs largest community effort led by open source maintainers, contributors, and teams. These unsung heroes put in long hours to build software, fix issues, field questions, and manage communities.
            The ReadME Project is part of GitHub‚Äôs ongoing effort to amplify the voices of the developer community. It‚Äôs an evolving space to engage with the community and explore the stories, challenges, technology, and culture that surround the world of open source.

            
              Follow us:

              
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
              
            
          
        

        

          
            Nominate a developer

            
          
          Nominate inspiring developers and projects you think we should feature in The ReadME Project.

          
            Support the community

            
          
          Recognize developers working behind the scenes and help open source projects get the resources they need.

          
  
    Sign Up For Newsletter
  

  
    Every month we‚Äôll share new articles from The ReadME Project, episodes of The ReadME Podcast, and other great developer content from around the community.
  

  Email Address *
  
    


    

    

    
      Subscribe
    
  


  Thank you! for subscribing\n\n\n\nExplore

      Topics

        Trending

        Collections

        Events

        GitHub Sponsors
    
  




  
    Topics
    Browse popular topics on GitHub.
  


  
    
        
  
    



    
        
      
        Babel
      
      Babel is a compiler for writing next generation JavaScript, today.
    
  


        
  
    



    
        
      
        LaTeX
      
      LaTeX is a document preparation system.
    
  


        
  
    



    
        
      
        ESLint
      
      The pluggable linting utility for JavaScript and JSX.
    
  


    
  


  
    All featured topics
    
    
      
          
            #
          
      
      
        3D
        
          3D refers to the use of three-dimensional graphics, modeling, and animation in various industries.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Ajax
        
          Ajax is a technique for creating interactive web applications.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Algorithm
        
          Algorithms are self-contained sequences that carry out a variety of tasks.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Amp
        
          Amp is a non-blocking concurrency library for PHP.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Android
        
          Android is an operating system built by Google designed for mobile devices.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Angular
        
          Angular is an open source web application platform.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Ansible
        
          Ansible is a simple and powerful automation engine.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        API
        
          An API (Application Programming Interface) is a collection of protocols and subroutines for building software.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Arduino
        
          Arduino is an open source platform for building electronic devices.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        ASP.NET
        
          ASP.NET is a web framework for building modern web apps and services.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Awesome Lists
        
          An awesome list is a list of awesome things curated by the community.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Amazon Web Services
        
          Amazon Web Services provides on-demand cloud computing platforms on a subscription basis.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Azure
        
          Azure is a cloud computing service created by Microsoft.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Babel
        
          Babel is a compiler for writing next generation JavaScript, today.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bash
        
          Bash is a shell and command language interpreter for the GNU operating system.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bitcoin
        
          Bitcoin is a cryptocurrency developed by Satoshi Nakamoto.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bootstrap
        
          Bootstrap is an HTML, CSS, and JavaScript framework.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bot
        
          A bot is an application that runs automated tasks over the Internet.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        C
        
          C is a general purpose programming language that first appeared in 1972.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Chrome
        
          Chrome is a web browser from the tech company Google.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Chrome extension
        
          Chrome extensions enable users to customize the Chrome browsing experience.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Command-line interface
        
          A CLI, or command-line interface, is a console that helps users issue commands to a program.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Clojure
        
          Clojure is a dynamic, general-purpose programming language.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Code quality
        
          Automate your code review with style, quality, security, and test‚Äëcoverage checks when you need them.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Code review
        
          Ensure your code meets quality standards and ship with confidence.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Compiler
        
          Compilers are software that translate higher-level programming languages to lower-level languages (e.g. machine code).
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Continuous integration
        
          Automatically build and test your code as you push it upstream, preventing bugs from being deployed to production.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        C++
        
          C++ is a general purpose and object-oriented programming language.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Cryptocurrency
        
          A cryptocurrency is a digital currency that uses cryptography.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Crystal
        
          Crystal is a self-hosted, general purpose programming language.
        
      
      
          
            
          Star


      
    

  
    
    
      Load more‚Ä¶
    

  

  
      Popular topics
      
          
            
  javascript

          
          
            
  css

          
          
            
  config

          
          
            
  python

          
          
            
  typescript

          
          
            
  csharp

          
          
            
  tailwindcss

          
          
            
  github-config

          
          
            
  flash-usdt-currency

          
          
            
  flash-bitcoin-sales\n\n\n\nStar


  

  
    

      
        kortix-ai /

      suna  

    
      Suna - Open Source Generalist AI Agent
    

  
      
  
  TypeScript



      
        5,670
      
        633
      
        Built by

          
          
          
          
          

      
        
        2,126 stars today
  

  

      
            
        
          Star


  

  
    

      
        bytedance /

      UI-TARS  


  
      
  
  Python



      
        5,189
      
        347
      
        Built by

          
          
          
          
          

      
        
        267 stars today
  

  

      
            
        
          Star


  

  
    

      
        jujumilk3 /

      leaked-system-prompts  

    
      Collection of leaked system prompts
    

  

      
        3,539
      
        435
      
        Built by

          
          
          
          
          

      
        
        636 stars today
  

  

      
            
        
          Star


  

  
    

      
        cloudcommunity /

      Free-Certifications  

    
      A curated list of free courses with certifications. Also available at https://free-certifications.com/
    

  

      
        31,814
      
        2,267
      
        Built by

          
          
          
          
          

      
        
        750 stars today
  

  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        bregman-arie /

      devops-exercises  

    
      Linux, Jenkins, AWS, SRE, Prometheus, Docker, Python, Ansible, Git, Kubernetes, Terraform, OpenStack, SQL, NoSQL, Azure, GCP, DNS, Elastic, Network, Virtualization. DevOps Interview Questions
    

  
      
  
  Python



      
        74,612
      
        16,647
      
        Built by

          
          
          
          
          

      
        
        265 stars today
  

  

      
            
        
          Star


  

  
    

      
        microsoft /

      generative-ai-for-beginners  

    
      21 Lessons, Get Started Building with Generative AI üîó https://microsoft.github.io/generative-ai-for-beginners/
    

  
      
  
  Jupyter Notebook



      
        79,880
      
        41,299
      
        Built by

          
          
          
          
          

      
        
        423 stars today
  

  

      
            
        
          Star


  

  
    

      
        go-playground /

      validator  

    
      üíØGo Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving
    

  
      
  
  Go



      
        18,168
      
        1,365
      
        Built by

          
          
          
          
          

      
        
        21 stars today
  

  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        fastrepl /

      hyprnote  

    
      AI Notepad for back-to-back meetings. Local-first & Extensible.
    

  
      
  
  TypeScript



      
        984
      
        51
      
        Built by

          
          
          
          
          

      
        
        150 stars today
  

  

      
            
        
          Star


  

  
    

      
        getzep /

      graphiti  

    
      Build Real-Time Knowledge Graphs for AI Agents
    

  
      
  
  Python



      
        5,063
      
        380
      
        Built by

          
          
          
          
          

      
        
        549 stars today
  

  

      
            
        
          Star


  

  
    

      
        aquasecurity /

      trivy  

    
      Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more
    

  
      
  
  Go



      
        25,708
      
        2,510
      
        Built by

          
          
          
          
          

      
        
        45 stars today
  

  

      
            
        
          Star


  

  
    

      
        drawdb-io /

      drawdb  

    
      Free, simple, and intuitive online database diagram editor and SQL generator.
    

  
      
  
  JavaScript



      
        28,240
      
        1,990
      
        Built by

          
          
          
          
          

      
        
        90 stars today
  

  

      
            
        
          Star


  

  
    

      
        joho /

      godotenv  

    
      A Go port of Ruby's dotenv library (Loads environment variables from .env files)
    

  
      
  
  Go



      
        9,151
      
        426
      
        Built by

          
          
          
          
          

      
        
        6 stars today
  

  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        khoj-ai /

      khoj  

    
      Your AI second brain. Self-hostable. Get answers from the web or your docs. Build custom agents, schedule automations, do deep research. Turn any online or local LLM into your personal, autonomous AI (gpt, claude, gemini, llama, qwen, mistral). Get started - free.
    

  
      
  
  Python



      
        29,324
      
        1,637
      
        Built by

          
          
          
          
          

      
        
        343 stars today
  

  

      
            
        
          Star


  

  
    

      
        tracel-ai /

      burn  

    
      Burn is a next generation Deep Learning Framework that doesn't compromise on flexibility, efficiency and portability.
    

  
      
  
  Rust



      
        10,515
      
        540
      
        Built by

          
          
          
          
          

      
        
        48 stars today
  

  

      
            
        
          Star


  

  
    

      
        BerriAI /

      litellm  

    
      Python SDK, Proxy Server (LLM Gateway) to call 100+ LLM APIs in OpenAI format - [Bedrock, Azure, OpenAI, VertexAI, Cohere, Anthropic, Sagemaker, HuggingFace, Replicate, Groq]
    

  
      
  
  Python



      
        21,418
      
        2,718
      
        Built by

          
          
          
          
          

      
        
        96 stars today
  

  

      
            
        
          Star


  

  
    

      
        Stirling-Tools /

      Stirling-PDF  

    
      #1 Locally hosted web application that allows you to perform various operations on PDF files
    

  
      
  
  Java



      
        56,637
      
        4,744
      
        Built by

          
          
          
          
          

      
        
        113 stars today
  

  

      
            
        
          Star


  

  
    

      
        FortAwesome /

      Font-Awesome  

    
      The iconic SVG, font, and CSS toolkit
    

  
      
  
  JavaScript



      
        75,076
      
        12,205
      
        Built by

          
          
          
          
          

      
        
        19 stars today\n\nExplore

      Topics

        Trending

        Collections

        Events

        GitHub Sponsors
    
  




  
    Trending

    
      See what the GitHub community is most excited about today.
    
  



  
    
      
  Repositories
  Developers



      
        
          
        Spoken Language:

    
        Any


  
    
      
        Select a spoken language

      

    

    
      
        
      
    

    

      
          
              Abkhazian
          
              Afar
          
              Afrikaans
          
              Akan
          
              Albanian
          
              Amharic
          
              Arabic
          
              Aragonese
          
              Armenian
          
              Assamese
          
              Avaric
          
              Avestan
          
              Aymara
          
              Azerbaijani
          
              Bambara
          
              Bashkir
          
              Basque
          
              Belarusian
          
              Bengali
          
              Bihari languages
          
              Bislama
          
              Bosnian
          
              Breton
          
              Bulgarian
          
              Burmese
          
              Catalan, Valencian
          
              Chamorro
          
              Chechen
          
              Chichewa, Chewa, Nyanja
          
              Chinese
          
              Chuvash
          
              Cornish
          
              Corsican
          
              Cree
          
              Croatian
          
              Czech
          
              Danish
          
              Divehi, Dhivehi, Maldivian
          
              Dutch, Flemish
          
              Dzongkha
          
              English
          
              Esperanto
          
              Estonian
          
              Ewe
          
              Faroese
          
              Fijian
          
              Finnish
          
              French
          
              Fulah
          
              Galician
          
              Georgian
          
              German
          
              Greek, Modern
          
              Guarani
          
              Gujarati
          
              Haitian, Haitian Creole
          
              Hausa
          
              Hebrew
          
              Herero
          
              Hindi
          
              Hiri Motu
          
              Hungarian
          
              Interlingua (International Auxil...
          
              Indonesian
          
              Interlingue, Occidental
          
              Irish
          
              Igbo
          
              Inupiaq
          
              Ido
          
              Icelandic
          
              Italian
          
              Inuktitut
          
              Japanese
          
              Javanese
          
              Kalaallisut, Greenlandic
          
              Kannada
          
              Kanuri
          
              Kashmiri
          
              Kazakh
          
              Central Khmer
          
              Kikuyu, Gikuyu
          
              Kinyarwanda
          
              Kirghiz, Kyrgyz
          
              Komi
          
              Kongo
          
              Korean
          
              Kurdish
          
              Kuanyama, Kwanyama
          
              Latin
          
              Luxembourgish, Letzeburgesch
          
              Ganda
          
              Limburgan, Limburger, Limburgish
          
              Lingala
          
              Lao
          
              Lithuanian
          
              Luba-Katanga
          
              Latvian
          
              Manx
          
              Macedonian
          
              Malagasy
          
              Malay
          
              Malayalam
          
              Maltese
          
              Maori
          
              Marathi
          
              Marshallese
          
              Mongolian
          
              Nauru
          
              Navajo, Navaho
          
              North Ndebele
          
              Nepali
          
              Ndonga
          
              Norwegian Bokm√•l
          
              Norwegian Nynorsk
          
              Norwegian
          
              Sichuan Yi, Nuosu
          
              South Ndebele
          
              Occitan
          
              Ojibwa
          
              Church Slavic, Old Slavonic, Chu...
          
              Oromo
          
              Oriya
          
              Ossetian, Ossetic
          
              Punjabi, Panjabi
          
              Pali
          
              Persian
          
              Polish
          
              Pashto, Pushto
          
              Portuguese
          
              Quechua
          
              Romansh
          
              Rundi
          
              Romanian, Moldavian, Moldovan
          
              Russian
          
              Sanskrit
          
              Sardinian
          
              Sindhi
          
              Northern Sami
          
              Samoan
          
              Sango
          
              Serbian
          
              Gaelic, Scottish Gaelic
          
              Shona
          
              Sinhala, Sinhalese
          
              Slovak
          
              Slovenian
          
              Somali
          
              Southern Sotho
          
              Spanish, Castilian
          
              Sundanese
          
              Swahili
          
              Swati
          
              Swedish
          
              Tamil
          
              Telugu
          
              Tajik
          
              Thai
          
              Tigrinya
          
              Tibetan
          
              Turkmen
          
              Tagalog
          
              Tswana
          
              Tonga (Tonga Islands)
          
              Turkish
          
              Tsonga
          
              Tatar
          
              Twi
          
              Tahitian
          
              Uighur, Uyghur
          
              Ukrainian
          
              Urdu
          
              Uzbek
          
              Venda
          
              Vietnamese
          
              Volap√ºk
          
              Walloon
          
              Welsh
          
              Wolof
          
              Western Frisian
          
              Xhosa
          
              Yiddish
          
              Yoruba
          
              Zhuang, Chuang
          
              Zulu
      
    

    
      
      Loading

    
  



        

        
          
        Language:

    
        Any


  
    
      
        Select a language

      
    

    
      
        
      
    

    

      
          
              Unknown languages
          
              1C Enterprise
          
              2-Dimensional Array
          
              4D
          
              ABAP
          
              ABAP CDS
          
              ABNF
          
              ActionScript
          
              Ada
          
              Adblock Filter List
          
              Adobe Font Metrics
          
              Agda
          
              AGS Script
          
              AIDL
          
              AL
          
              Alloy
          
              Alpine Abuild
          
              Altium Designer
          
              AMPL
          
              AngelScript
          
              Answer Set Programming
          
              Ant Build System
          
              Antlers
          
              ANTLR
          
              ApacheConf
          
              Apex
          
              API Blueprint
          
              APL
          
              Apollo Guidance Computer
          
              AppleScript
          
              Arc
          
              AsciiDoc
          
              ASL
          
              ASN.1
          
              Classic ASP
          
              ASP.NET
          
              AspectJ
          
              Assembly
          
              Astro
          
              Asymptote
          
              ATS
          
              Augeas
          
              AutoHotkey
          
              AutoIt
          
              Avro IDL
          
              Awk
          
              B4X
          
              Ballerina
          
              BASIC
          
              Batchfile
          
              Beef
          
              Befunge
          
              Berry
          
              BibTeX
          
              BibTeX Style
          
              Bicep
          
              Bikeshed
          
              Bison
          
              BitBake
          
              Blade
          
              BlitzBasic
          
              BlitzMax
          
              Bluespec
          
              Bluespec BH
          
              Boo
          
              Boogie
          
              BQN
          
              Brainfuck
          
              BrighterScript
          
              Brightscript
          
              Zeek
          
              Browserslist
          
              C
          
              C#
          
              C++
          
              C-ObjDump
          
              C2hs Haskell
          
              Cabal Config
          
              Caddyfile
          
              Cadence
          
              Cairo
          
              Cairo Zero
          
              CameLIGO
          
              CAP CDS
          
              Cap'n Proto
          
              Carbon
          
              CartoCSS
          
              Ceylon
          
              Chapel
          
              Charity
          
              Checksums
          
              ChucK
          
              CIL
          
              Circom
          
              Cirru
          
              Clarion
          
              Clarity
          
              Classic ASP
          
              Clean
          
              Click
          
              CLIPS
          
              Clojure
          
              Closure Templates
          
              Cloud Firestore Security Rules
          
              CMake
          
              COBOL
          
              CODEOWNERS
          
              CodeQL
          
              CoffeeScript
          
              ColdFusion
          
              ColdFusion CFC
          
              COLLADA
          
              Common Lisp
          
              Common Workflow Language
          
              Component Pascal
          
              CoNLL-U
          
              Cool
          
              Coq
          
              Cpp-ObjDump
          
              Creole
          
              crontab
          
              Crystal
          
              CSON
          
              Csound
          
              Csound Document
          
              Csound Score
          
              CSS
          
              CSV
          
              Cuda
          
              CUE
          
              Cue Sheet
          
              cURL Config
          
              Curry
          
              CWeb
          
              Cycript
          
              Cylc
          
              Cypher
          
              Cython
          
              D
          
              D-ObjDump
          
              D2
          
              Dafny
          
              Darcs Patch
          
              Dart
          
              DataWeave
          
              Debian Package Control File
          
              DenizenScript
          
              desktop
          
              Dhall
          
              Diff
          
              DIGITAL Command Language
          
              dircolors
          
              DirectX 3D File
          
              DM
          
              DNS Zone
          
              Dockerfile
          
              Dogescript
          
              Dotenv
          
              DTrace
          
              Dune
          
              Dylan
          
              E
          
              E-mail
          
              Eagle
          
              Earthly
          
              Easybuild
          
              EBNF
          
              eC
          
              Ecere Projects
          
              ECL
          
              ECLiPSe
          
              Ecmarkup
          
              Edge
          
              EdgeQL
          
              EditorConfig
          
              Edje Data Collection
          
              edn
          
              Eiffel
          
              EJS
          
              Elixir
          
              Elm
          
              Elvish
          
              Elvish Transcript
          
              Emacs Lisp
          
              EmberScript
          
              E-mail
          
              EQ
          
              Erlang
          
              Euphoria
          
              F#
          
              F*
          
              Factor
          
              Fancy
          
              Fantom
          
              Faust
          
              Fennel
          
              FIGlet Font
          
              Filebench WML
          
              Filterscript
          
              FIRRTL
          
              fish
          
              Fluent
          
              FLUX
          
              Formatted
          
              Forth
          
              Fortran
          
              Fortran Free Form
          
              FreeBASIC
          
              FreeMarker
          
              Frege
          
              Futhark
          
              G-code
          
              Game Maker Language
          
              GAML
          
              GAMS
          
              GAP
          
              GCC Machine Description
          
              GDB
          
              GDScript
          
              GEDCOM
          
              Gemfile.lock
          
              Gemini
          
              Genero 4gl
          
              Genero per
          
              Genie
          
              Genshi
          
              Gentoo Ebuild
          
              Gentoo Eclass
          
              Gerber Image
          
              Gettext Catalog
          
              Gherkin
          
              Git Attributes
          
              Git Config
          
              Git Revision List
          
              Gleam
          
              Glimmer JS
          
              Glimmer TS
          
              GLSL
          
              Glyph
          
              Glyph Bitmap Distribution Format
          
              GN
          
              Gnuplot
          
              Go
          
              Go Checksums
          
              Go Module
          
              Go Workspace
          
              Godot Resource
          
              Golo
          
              Gosu
          
              Grace
          
              Gradle
          
              Gradle Kotlin DSL
          
              Grammatical Framework
          
              Graph Modeling Language
          
              GraphQL
          
              Graphviz (DOT)
          
              Groovy
          
              Groovy Server Pages
          
              GSC
          
              Hack
          
              Haml
          
              Handlebars
          
              HAProxy
          
              Harbour
          
              Hare
          
              Haskell
          
              Haxe
          
              HCL
          
              HiveQL
          
              HLSL
          
              HOCON
          
              HolyC
          
              hoon
          
              Hosts File
          
              HTML
          
              Jinja
          
              HTML+ECR
          
              HTML+EEX
          
              HTML+ERB
          
              HTML+PHP
          
              HTML+Razor
          
              HTTP
          
              HXML
          
              Hy
          
              HyPhy
          
              iCalendar
          
              IDL
          
              Idris
          
              Ignore List
          
              IGOR Pro
          
              ImageJ Macro
          
              Imba
          
              Inform 7
          
              INI
          
              Ink
          
              Inno Setup
          
              Io
          
              Ioke
          
              IRC log
          
              Isabelle
          
              Isabelle ROOT
          
              ISPC
          
              J
          
              Jai
          
              Janet
          
              JAR Manifest
          
              Jasmin
          
              Java
          
              Java Properties
          
              Java Server Pages
          
              Java Template Engine
          
              JavaScript
          
              JavaScript+ERB
          
              JCL
          
              Jest Snapshot
          
              JetBrains MPS
          
              JFlex
          
              Jinja
          
              Jison
          
              Jison Lex
          
              Jolie
          
              jq
          
              JSON
          
              JSON with Comments
          
              JSON5
          
              JSONiq
          
              JSONLD
          
              Jsonnet
          
              Julia
          
              Julia REPL
          
              Jupyter Notebook
          
              Just
          
              Kaitai Struct
          
              KakouneScript
          
              KDL
          
              KerboScript
          
              KiCad Layout
          
              KiCad Legacy Layout
          
              KiCad Schematic
          
              Kickstart
          
              Kit
          
              Kotlin
          
              KRL
          
              Kusto
          
              kvlang
          
              LabVIEW
          
              Lark
          
              Lasso
          
              Latte
          
              Lean
          
              Lean 4
          
              Less
          
              Lex
          
              LFE
          
              LigoLANG
          
              LilyPond
          
              Limbo
          
              Linear Programming
          
              Linker Script
          
              Linux Kernel Module
          
              Liquid
          
              Literate Agda
          
              Literate CoffeeScript
          
              Literate Haskell
          
              LiveCode Script
          
              LiveScript
          
              LLVM
          
              Logos
          
              Logtalk
          
              LOLCODE
          
              LookML
          
              LoomScript
          
              LSL
          
              LTspice Symbol
          
              Lua
          
              Luau
          
              M
          
              M4
          
              M4Sugar
          
              Macaulay2
          
              Makefile
          
              Mako
          
              Markdown
          
              Marko
          
              Mask
          
              Mathematica
          
              MATLAB
          
              Maven POM
          
              Max
          
              MAXScript
          
              mcfunction
          
              mdsvex
          
              MDX
          
              Wikitext
          
              Mercury
          
              Mermaid
          
              Meson
          
              Metal
          
              Microsoft Developer Studio Project
          
              Microsoft Visual Studio Solution
          
              MiniD
          
              MiniYAML
          
              MiniZinc
          
              MiniZinc Data
          
              Mint
          
              Mirah
          
              mIRC Script
          
              MLIR
          
              Modelica
          
              Modula-2
          
              Modula-3
          
              Module Management System
          
              Mojo
          
              Monkey
          
              Monkey C
          
              Moocode
          
              MoonBit
          
              MoonScript
          
              Motoko
          
              Motorola 68K Assembly
          
              Move
          
              MQL4
          
              MQL5
          
              MTML
          
              MUF
          
              mupad
          
              Muse
          
              Mustache
          
              Myghty
          
              nanorc
          
              Nasal
          
              NASL
          
              NCL
          
              Nearley
          
              Nemerle
          
              NEON
          
              nesC
          
              NetLinx
          
              NetLinx+ERB
          
              NetLogo
          
              NewLisp
          
              Nextflow
          
              Nginx
          
              Nim
          
              Ninja
          
              Nit
          
              Nix
          
              NL
          
              NMODL
          
              Noir
          
              NPM Config
          
              NSIS
          
              Nu
          
              NumPy
          
              Nunjucks
          
              Nushell
          
              NWScript
          
              OASv2-json
          
              OASv2-yaml
          
              OASv3-json
          
              OASv3-yaml
          
              Oberon
          
              ObjDump
          
              Object Data Instance Notation
          
              Objective-C
          
              Objective-C++
          
              Objective-J
          
              ObjectScript
          
              OCaml
          
              Odin
          
              Omgrofl
          
              OMNeT++ MSG
          
              OMNeT++ NED
          
              OMNeT++ MSG
          
              OMNeT++ NED
          
              ooc
          
              Opa
          
              Opal
          
              Open Policy Agent
          
              OpenAPI Specification v2
          
              OpenAPI Specification v3
          
              OpenCL
          
              OpenEdge ABL
          
              OpenQASM
          
              OpenRC runscript
          
              OpenSCAD
          
              OpenStep Property List
          
              OpenType Feature File
          
              Option List
          
              Org
          
              OverpassQL
          
              Ox
          
              Oxygene
          
              Oz
          
              P4
          
              Pact
          
              Pan
          
              Papyrus
          
              Parrot
          
              Parrot Assembly
          
              Parrot Internal Representation
          
              Pascal
          
              Pawn
          
              PDDL
          
              PEG.js
          
              Pep8
          
              Perl
          
              PHP
          
              Pic
          
              Pickle
          
              PicoLisp
          
              PigLatin
          
              Pike
          
              Pip Requirements
          
              Pkl
          
              PlantUML
          
              PLpgSQL
          
              PLSQL
          
              Pod
          
              Pod 6
          
              PogoScript
          
              Polar
          
              Pony
          
              Portugol
          
              PostCSS
          
              PostScript
          
              POV-Ray SDL
          
              PowerBuilder
          
              PowerShell
          
              Praat
          
              Prisma
          
              Processing
          
              Procfile
          
              Proguard
          
              Prolog
          
              Promela
          
              Propeller Spin
          
              Protocol Buffer
          
              Protocol Buffer Text Format
          
              Public Key
          
              Pug
          
              Puppet
          
              Pure Data
          
              PureBasic
          
              PureScript
          
              Pyret
          
              Python
          
              Python console
          
              Python traceback
          
              q
          
              Q#
          
              QMake
          
              QML
          
              Qt Script
          
              Quake
          
              QuickBASIC
          
              R
          
              Racket
          
              Ragel
          
              Raku
          
              RAML
          
              Rascal
          
              Raw token data
          
              RBS
          
              RDoc
          
              Readline Config
          
              REALbasic
          
              Reason
          
              ReasonLIGO
          
              Rebol
          
              Record Jar
          
              Red
          
              Redcode
          
              Redirect Rules
          
              Regular Expression
          
              Ren'Py
          
              RenderScript
          
              ReScript
          
              reStructuredText
          
              REXX
          
              Rez
          
              Rich Text Format
          
              Ring
          
              Riot
          
              RMarkdown
          
              RobotFramework
          
              robots.txt
          
              Roc
          
              Roff
          
              Roff Manpage
          
              RON
          
              Rouge
          
              RouterOS Script
          
              RPC
          
              RPGLE
          
              RPM Spec
          
              Ruby
          
              RUNOFF
          
              Rust
          
              Sage
          
              SaltStack
          
              SAS
          
              Sass
          
              Scala
          
              Scaml
          
              Scenic
          
              Scheme
          
              Scilab
          
              SCSS
          
              sed
          
              Self
          
              SELinux Policy
          
              ShaderLab
          
              Shell
          
              ShellCheck Config
          
              ShellSession
          
              Shen
          
              Sieve
          
              Simple File Verification
          
              Singularity
          
              Slang
          
              Slash
          
              Slice
          
              Slim
          
              Slint
          
              Smali
          
              Smalltalk
          
              Smarty
          
              Smithy
          
              SmPL
          
              SMT
          
              Snakemake
          
              Solidity
          
              Soong
          
              SourcePawn
          
              SPARQL
          
              Spline Font Database
          
              SQF
          
              SQL
          
              SQLPL
          
              Squirrel
          
              SRecode Template
          
              SSH Config
          
              Stan
          
              Standard ML
          
              STAR
          
              Starlark
          
              Stata
          
              STL
          
              STON
          
              StringTemplate
          
              Stylus
          
              SubRip Text
          
              SugarSS
          
              SuperCollider
          
              Svelte
          
              SVG
          
              Sway
          
              Sweave
          
              Swift
          
              SWIG
          
              SystemVerilog
          
              Tact
          
              Talon
          
              Tcl
          
              Tcsh
          
              Tea
          
              templ
          
              Terra
          
              Terraform Template
          
              TeX
          
              Texinfo
          
              Text
          
              TextGrid
          
              Textile
          
              TextMate Properties
          
              Thrift
          
              TI Program
          
              TL-Verilog
          
              TLA
          
              Toit
          
              TOML
          
              Tree-sitter Query
          
              TSPLIB data
          
              TSQL
          
              TSV
          
              TSX
          
              Turing
          
              Turtle
          
              Twig
          
              TXL
          
              Type Language
          
              TypeScript
          
              TypeSpec
          
              Typst
          
              Unified Parallel C
          
              Unity3D Asset
          
              Unix Assembly
          
              Uno
          
              UnrealScript
          
              UrWeb
          
              V
          
              Vala
          
              Valve Data Format
          
              VBA
          
              VBScript
          
              vCard
          
              VCL
          
              Velocity Template Language
          
              Verilog
          
              VHDL
          
              Vim Help File
          
              Vim Script
          
              Vim Snippet
          
              Visual Basic .NET
          
              Visual Basic .NET
          
              Visual Basic 6.0
          
              Volt
          
              Vue
          
              Vyper
          
              Wavefront Material
          
              Wavefront Object
          
              WDL
          
              Web Ontology Language
          
              WebAssembly
          
              WebAssembly Interface Type
          
              WebIDL
          
              WebVTT
          
              Wget Config
          
              WGSL
          
              Whiley
          
              Wikitext
          
              Win32 Message File
          
              Windows Registry Entries
          
              wisp
          
              Witcher Script
          
              Wollok
          
              World of Warcraft Addon Data
          
              Wren
          
              X BitMap
          
              X Font Directory Index
          
              X PixMap
          
              X10
          
              xBase
          
              XC
          
              XCompose
          
              Xmake
          
              XML
          
              XML Property List
          
              Xojo
          
              Xonsh
          
              XPages
          
              XProc
          
              XQuery
          
              XS
          
              XSLT
          
              Xtend
          
              Yacc
          
              YAML
          
              YANG
          
              YARA
          
              YASnippet
          
              Yul
          
              ZAP
          
              Zeek
          
              ZenScript
          
              Zephir
          
              Zig
          
              ZIL
          
              Zimpl
      
    
    
      
      Loading

    
  


        

        
          
        Date range:

    
      Today


  
    
      
        Adjust time span

      
    

    
        

          
            Today
        

          
            This week
        

          
            This month
    
  


        
      
    

    
          
  

      
            
        
          Star


  

  
    

      
        kortix-ai /

      suna  

    
      Suna - Open Source Generalist AI Agent
    

  
      
  
  TypeScript



      
        5,670
      
        633
      
        Built by

          
          
          
          
          

      
        
        2,126 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        bytedance /

      UI-TARS  


  
      
  
  Python



      
        5,189
      
        347
      
        Built by

          
          
          
          
          

      
        
        267 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        jujumilk3 /

      leaked-system-prompts  

    
      Collection of leaked system prompts
    

  

      
        3,539
      
        435
      
        Built by

          
          
          
          
          

      
        
        636 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        cloudcommunity /

      Free-Certifications  

    
      A curated list of free courses with certifications. Also available at https://free-certifications.com/
    

  

      
        31,814
      
        2,267
      
        Built by

          
          
          
          
          

      
        
        750 stars today
  


          
  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        bregman-arie /

      devops-exercises  

    
      Linux, Jenkins, AWS, SRE, Prometheus, Docker, Python, Ansible, Git, Kubernetes, Terraform, OpenStack, SQL, NoSQL, Azure, GCP, DNS, Elastic, Network, Virtualization. DevOps Interview Questions
    

  
      
  
  Python



      
        74,612
      
        16,647
      
        Built by

          
          
          
          
          

      
        
        265 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        microsoft /

      generative-ai-for-beginners  

    
      21 Lessons, Get Started Building with Generative AI üîó https://microsoft.github.io/generative-ai-for-beginners/
    

  
      
  
  Jupyter Notebook



      
        79,880
      
        41,299
      
        Built by

          
          
          
          
          

      
        
        423 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        go-playground /

      validator  

    
      üíØGo Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving
    

  
      
  
  Go



      
        18,168
      
        1,365
      
        Built by

          
          
          
          
          

      
        
        21 stars today
  


          
  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        fastrepl /

      hyprnote  

    
      AI Notepad for back-to-back meetings. Local-first & Extensible.
    

  
      
  
  TypeScript



      
        984
      
        51
      
        Built by

          
          
          
          
          

      
        
        150 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        getzep /

      graphiti  

    
      Build Real-Time Knowledge Graphs for AI Agents
    

  
      
  
  Python



      
        5,063
      
        380
      
        Built by

          
          
          
          
          

      
        
        549 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        aquasecurity /

      trivy  

    
      Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more
    

  
      
  
  Go



      
        25,708
      
        2,510
      
        Built by

          
          
          
          
          

      
        
        45 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        drawdb-io /

      drawdb  

    
      Free, simple, and intuitive online database diagram editor and SQL generator.
    

  
      
  
  JavaScript



      
        28,240
      
        1,990
      
        Built by

          
          
          
          
          

      
        
        90 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        joho /

      godotenv  

    
      A Go port of Ruby's dotenv library (Loads environment variables from .env files)
    

  
      
  
  Go



      
        9,151
      
        426
      
        Built by

          
          
          
          
          

      
        
        6 stars today
  


          
  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        khoj-ai /

      khoj  

    
      Your AI second brain. Self-hostable. Get answers from the web or your docs. Build custom agents, schedule automations, do deep research. Turn any online or local LLM into your personal, autonomous AI (gpt, claude, gemini, llama, qwen, mistral). Get started - free.
    

  
      
  
  Python



      
        29,324
      
        1,637
      
        Built by

          
          
          
          
          

      
        
        343 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        tracel-ai /

      burn  

    
      Burn is a next generation Deep Learning Framework that doesn't compromise on flexibility, efficiency and portability.
    

  
      
  
  Rust



      
        10,515
      
        540
      
        Built by

          
          
          
          
          

      
        
        48 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        BerriAI /

      litellm  

    
      Python SDK, Proxy Server (LLM Gateway) to call 100+ LLM APIs in OpenAI format - [Bedrock, Azure, OpenAI, VertexAI, Cohere, Anthropic, Sagemaker, HuggingFace, Replicate, Groq]
    

  
      
  
  Python



      
        21,418
      
        2,718
      
        Built by

          
          
          
          
          

      
        
        96 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        Stirling-Tools /

      Stirling-PDF  

    
      #1 Locally hosted web application that allows you to perform various operations on PDF files
    

  
      
  
  Java



      
        56,637
      
        4,744
      
        Built by

          
          
          
          
          

      
        
        113 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        FortAwesome /

      Font-Awesome  

    
      The iconic SVG, font, and CSS toolkit
    

  
      
  
  JavaScript



      
        75,076
      
        12,205
      
        Built by

          
          
          
          
          

      
        
        19 stars today\n\n\n\n#
    

    
      How to choose (and contribute to) your first open source project
      New to open source? Here‚Äôs how to find projects that need help and start making impactful contributions.
    
  
    
        #
    

    
      Clean code linters
      Make sure your code matches your style guide with these essential code linters.
    
  
    
        #
    

    
      Open journalism
      See how publications and data-driven journalists use open source to power their newsroom and ensure information is reported fairly and accurately.
    
  
    
        #
    

    
      Design essentials
      This collection of design libraries are the best on the web, and will complete your toolset for designing stunning products.
    
  
    
        #
    

    
      Music
      Drop the code bass with these musically themed repositories.
    
  
    
        
    

    
      Government apps
      Sites, apps, and tools built by governments across the world to make government work better, together. Read more at https://government.github.com
    
  
    
        #
    

    
      DevOps tools
      These tools help you manage servers and deploy happier and more often with more confidence.
    
  
    
        #
    

    
      Front-end JavaScript frameworks
      While the number of ways to organize JavaScript is almost infinite, here are some tools that help you build single-page applications.
    
  
    
        #
    

    
      GitHub Browser Extensions
      Some useful and fun browser extensions to personalize your GitHub browser experience.
    
  
    
        
    

    
      GitHub Pages examples
      Fine examples of projects using GitHub Pages (https://pages.github.com).
    
  
    
        
    

    
      Hacking Minecraft
      Minecraft is a game about building blocks, but it doesn‚Äôt end there. Take Minecraft further with some of the projects below, or dive into the code mines and hammer your own!
    
  
    
        #
    

    
      JavaScript Game Engines
      Learn or level up your 1337 gamedev skills and build amazing games together for web, desktop, or mobile using these HTML5 / JavaScript game engines.
    
  
    
        
    

    
      Learn to Code
      Resources to help people learn to code
    
  
    
        #
    

    
      Getting started with machine learning
      Today, machine learning‚Äîthe study of algorithms that make data-based predictions‚Äîhas found a new audience and a new set of possibilities.
    
  
    
        
    

    
      Made in Africa
      Developers in Africa use open source technology to solve some of the world's most intractable problems and grow their business ecosystems. Here's a snapshot of local projects across the continent.
    
  
    
        
    

    
      Net neutrality
      Software, research, and organizations protecting the free and open internet.
    
  
    
        #
    

    
      Open data
      Examples of using GitHub to store, publish, and collaborate on open, machine-readable datasets
    
  
    
        
    

    
      Open source organizations
      A showcase of organizations showcasing their open source projects.
    
  
    
        #
    

    
      Policies
      From federal governments to corporations to student clubs, groups of all sizes are using GitHub to share, discuss, and improve laws. *Ask not what the repository can do for you...*
    
  
    
        #
    

    
      Software productivity tools
      Build software faster with fewer headaches, using these tools and tricks.\n\nExplore

      Topics

        Trending

        Collections

        Events

        GitHub Sponsors
    
  




  
    Collections
    Curated lists and insight into burgeoning industries, topics, and communities.
  

  
    
        
  
      #
    Game Engines
    Frameworks for building games across multiple platforms.
  


        
  
      
    Made in Brazil
    Open source projects built in or receiving significant contributions from Brazil :brazil:
  


        
  
      
    Pixel Art Tools
    Creating pixel art for fun or animated sprites for a game? The digital artist in you will love these apps and tools!
  


    
  

    
    
        #
    

    
      How to choose (and contribute to) your first open source project
      New to open source? Here‚Äôs how to find projects that need help and start making impactful contributions.
    
  
  
    
        #
    

    
      Clean code linters
      Make sure your code matches your style guide with these essential code linters.
    
  
  
    
        #
    

    
      Open journalism
      See how publications and data-driven journalists use open source to power their newsroom and ensure information is reported fairly and accurately.
    
  
  
    
        #
    

    
      Design essentials
      This collection of design libraries are the best on the web, and will complete your toolset for designing stunning products.
    
  
  
    
        #
    

    
      Music
      Drop the code bass with these musically themed repositories.
    
  
  
    
        
    

    
      Government apps
      Sites, apps, and tools built by governments across the world to make government work better, together. Read more at https://government.github.com
    
  
  
    
        #
    

    
      DevOps tools
      These tools help you manage servers and deploy happier and more often with more confidence.
    
  
  
    
        #
    

    
      Front-end JavaScript frameworks
      While the number of ways to organize JavaScript is almost infinite, here are some tools that help you build single-page applications.
    
  
  
    
        #
    

    
      GitHub Browser Extensions
      Some useful and fun browser extensions to personalize your GitHub browser experience.
    
  
  
    
        
    

    
      GitHub Pages examples
      Fine examples of projects using GitHub Pages (https://pages.github.com).
    
  
  
    
        
    

    
      Hacking Minecraft
      Minecraft is a game about building blocks, but it doesn‚Äôt end there. Take Minecraft further with some of the projects below, or dive into the code mines and hammer your own!
    
  
  
    
        #
    

    
      JavaScript Game Engines
      Learn or level up your 1337 gamedev skills and build amazing games together for web, desktop, or mobile using these HTML5 / JavaScript game engines.
    
  
  
    
        
    

    
      Learn to Code
      Resources to help people learn to code
    
  
  
    
        #
    

    
      Getting started with machine learning
      Today, machine learning‚Äîthe study of algorithms that make data-based predictions‚Äîhas found a new audience and a new set of possibilities.
    
  
  
    
        
    

    
      Made in Africa
      Developers in Africa use open source technology to solve some of the world's most intractable problems and grow their business ecosystems. Here's a snapshot of local projects across the continent.
    
  
  
    
        
    

    
      Net neutrality
      Software, research, and organizations protecting the free and open internet.
    
  
  
    
        #
    

    
      Open data
      Examples of using GitHub to store, publish, and collaborate on open, machine-readable datasets
    
  
  
    
        
    

    
      Open source organizations
      A showcase of organizations showcasing their open source projects.
    
  
  
    
        #
    

    
      Policies
      From federal governments to corporations to student clubs, groups of all sizes are using GitHub to share, discuss, and improve laws. *Ask not what the repository can do for you...*
    
  
  
    
        #
    

    
      Software productivity tools
      Build software faster with fewer headaches, using these tools and tricks.
    
  
  
    
    Load more‚Ä¶\n\n\n\nGitHub CopilotFor businessExtensions TutorialsWhat‚Äôs newPlans & pricingCopilot for BusinessBuild what‚Äôs next with GitHub‚ÄØ‚ÄØCopilotView plans & pricingContact salesAccelerating Commerce: Mercado Libre + GitHubGitHub Copilot equips you to build the future, whether you're charged with scaling operations or boosting developer productivity. AI that grows with you. Use your code as context while setting boundaries for what to exclude and governance on use.Velocity with quality. Developers want tools without toil, and GitHub Copilot provides AI assistance from the IDE to GitHub to the CLI and more, with agents to review and suggest.Choose your AI adventure. From choice of model to third-party integrations, GitHub Copilot meets your challenges your way.
/features/copilot/copilot-business logoThe competitive advantage developers ask for by nameQuantifying GitHub Copilot's impactSince bringing GitHub Copilot to market, we‚Äôve conducted several lab studies to discover its impact on developer efficiency, developer satisfaction, and overall code quality.Learn moreLeader in the Gartner Magic Quadrant for AI Code AssistantsIn 2024, Gartner published a first-of-its-kind report analyzing the state of play in the AI Code Assistants market‚Äìand named GitHub a Leader.View Gartner reportCommitted to your privacy, security, and trustGitHub is committed to building secure defaults for developers and organizations.Visit the trust centerHow Thomson Reuters successfully adopted AI ‚Äîand how your organization can, tooRead more55%faster coding39%improvement in code quality68%had a positive experienceResources and insightsStay ahead with GitHub‚Äôs latest innovationsSee how our recent and upcoming releases can help your organization drive efficiency, security, and innovation.
See what's newMeasuring the impact of GitHub CopilotMany enterprises quite reasonably ask, ‚ÄúHow do I know Copilot is conferring these benefits for my team?‚Äù To answer that question, this guide will walk you through a framework for evaluating impact across four stages. Learn moreHow developers spend the ‚Ä®time they save thanks to AI coding toolsDevelopers tell us how GitHub Copilot and other AI coding tools are transforming their work and changing how they spend their days.Learn moreGet approved onceHands-on consulting, guided workshops, and trainingInsights, best practices, and knowledge to help you adopt GitHub quickly and efficiently.Explore GitHub Expert ServicesMeet the companies who build with GitHubLeading organizations choose GitHub to plan, build, secure and ship software.Read customer storiesExecutive insights, curated just for youThought leadership from subject matter experts that extends beyond tooling into business impact.Explore Executive Insights‚ÄúWith the time savings Copilot unlocks, our developers are empowered to spend more time on the tasks they enjoy most ‚Äî creative-problem solving, innovative projects and experimentation.‚ÄùJasmine RamosIT Principal Product Manager, Mercedes-Benz Build what‚Äôs nextWhether you're charged with scaling enterprise operations or boosting developer productivity, GitHub Copilot equips you to build what‚Äôs next.View plans & pricingContact salesFAQsCan I use code hosting platforms other than GitHub for my repositories and still use GitHub Copilot?Yes. GitHub Copilot functionality works in code editors regardless of code hosting platform. Some features are enhanced with the use of GitHub because Copilot can directly draw context and knowledge from repositories, pull requests, issues, and other data structures in the GitHub platform.
Does GitHub use Copilot Business or Enterprise data to train GitHub‚Äôs model?No. GitHub does not use either Copilot Business or Enterprise data to train its models.¬†
Does GitHub Copilot include a filtering mechanism to mitigate risk?Yes, GitHub Copilot does include an optional code referencing filter to detect and suppress certain suggestions that match public code on GitHub.GitHub has created a duplication detection filter to detect and suppress suggestions that contain code segments over a certain length that match public code on GitHub. This filter can be enabled by the administrator for your enterprise and it can apply for all organizations within your enterprise, or the administrator can defer control to individual organizations.¬†With the filter enabled, Copilot checks code suggestions for matches or near-matches against public code on GitHub of 65 lexemes or more (on average,150 characters). If there is a match, the suggestion will not be shown to the user.In addition to off-topic, harmful, and offensive output filters, GitHub Copilot also scans the outputs for vulnerable code.Does GitHub Copilot support compliance with the GDPR and other data protection laws?Yes. GitHub and customers can enter a Data Protection Agreement that supports compliance with the GDPR and similar legislation.\n\n\n\nEnterprise

      
        
        
      

      
          Advanced Security
          Premium Support
      

    


  


  Get 24/7 support for your business with GitHub Premium¬†Support

  
    
      
        
          
            
          
          Protect your business and manage IT health with a comprehensive support plan.
        

        
          
            
          
          Drive operational efficiency and boost uptime with dedicated GitHub experts.
        

        
          
            
          
          Empower your team and meet your goals with the resources to maximize your investment.
        

        
          
            
          
          
  Get a quote
  
  


          
            Looking for general support questions? Contact GitHub Support.
          
        
      
    

    
      
        
        
        
          
          
        
        
  
  
  

      
    
  

  
      
      
      
      
      
      
      
  


  
  Already an existing customer?

  
    
      
        
        Upgrade to GitHub Premium Support to drive impact quickly.
        
            
              
              Experience faster responses 24/7 to maximize your uptime
            
            
              
              Receive expert support in one central location
            
            
              
              Get a dedicated engineer who knows your account
            
        
        
          
  Discover all features
  
  

        
      
    

    
      
        
        Get GitHub Premium Support with your Microsoft Unified Support plan.
        
            
              
              Provide your team with convenient, self-service tools
            
            
              
              Ensure the reliability of your environment
            
            
              
              Accelerate your goals with best-in-class support
            
        
        
          
  Check your benefits
  
  

        
      
    

    
      
        
          
            
              Not a GitHub Enterprise customer yet?
              Learn more about GitHub Premium¬†Support and GitHub Premium¬†Plus¬†Support to discover the plan that‚Äôs right for you.
              
                
  Get a quote
  
  


              
            
          
          
            
              
  
  
  

            
          
        
        
      
    
  


  

  Why choose GitHub Premium¬†Support?
  
    
      
      
        ‚Äú
          
            At TSIA, we're seeing technology leaders take an active role in helping their customers adopt new technologies. GitHub is demonstrating a thoughtful, deliberate approach to creating compelling service offerings.
            
            
              With three tiers of service options, GitHub Premium Support provides customers with smart services at the right time to drive business goals, while simplifying customer choice and allowing for service expansion as needed.
            
          
        
          Hal Stanley // VP Service Offer Management Research & Advisory, TSIA
          
            
          
        
      
    
  


  
  
    
      Discover the plan that‚Äôs right for you
      Use the dropdown filters to reflect your organization‚Äôs properties.
    
    
        
    
            Product

          

            GHES

            GHEC/GHES dual use + GHAS

            GHEC




        
    
            License seats

          

            < 1000

            < 2000

            >= 2000

            < 6000

            >= 6000




        
    
            Complexity

          

            Standard

            High




    

    
        
          
            
            Enterprise

            
                    
                      24/5
                      Support
                    
                    
                      < 8 hours
                      Initial response for urgent requests
                    
                    
                      < 8 hours
                      Initial response for high requests
                    
                    
                      ‚Äî
                      ¬†
                    
                    
                      ‚Äî
                      ¬†
                    
                    
                      ‚Äî
                      ¬†
                    
                    
                      ‚Äî
                      ¬†
                    
                    
                      ‚Äî
                      ¬†
                    
            

              
                  
                    Already included with your Enterprise license:
                  
                  
                      Support via online ticket submission
                      Expert guidance from a shared support team
                  
              

        
        
          
            
            Premium

            
                    
                      24/7
                      Support
                    
                    
                      30 min
                      Initial response for urgent requests
                    
                    
                      4 hours
                      Initial response for high requests
                    
                    
                      48 hours
                      Initial response for normal requests
                    
                    
                      48 hours
                      Initial response for low requests
                    
                    
                      20
                      Support entitlements
                    
                    
                      ‚Äî
                      ¬†
                    
                    
                      ‚Äî
                      ¬†
                    
            

              
                  
                    Get everything in the Enterprise support plan, along with:
                  
                  
                      Phone support in English via callback request
                      Screenshare support for critical issues
                      Guaranteed service level agreements (SLAs)
                      20 support entitlement licenses
                      Priority ticket handling
                      Escalation management
                      Unlimited automated health check reports
                      Access to premium training content
                  
              

              
                
  Get a quote
  
  


              
        
        
          
            
            Premium Plus

            
                    
                      24/7
                      Support
                    
                    
                      30 min
                      Initial response for urgent requests
                    
                    
                      4 hours
                      Initial response for high requests
                    
                    
                      24 hours
                      Initial response for normal requests
                    
                    
                      48 hours
                      Initial response for low requests
                    
                    
                      40
                      Support entitlements
                    
                    
                      Named CRE
                      Per account
                    
                    
                      1 training
                      Per year
                    
            

              
                  
                    Get everything in Premium support plan, along with:
                  
                  
                      Additional 20 support entitlement licenses
                      Designated Customer Reliability Engineer (CRE)
                      Incident management
                      Quarterly enhanced health checks with findings, interpretations, and recommendations from a CRE (by request)
                      Crisis prevention: Guided incident simulations that help you prepare for ‚Äî and experience ‚Äî an incident without risk (available for GitHub Enterprise Server)
                      1 virtual training class per year
                      12 hours of technical advisory hours per quarter
                      Application upgrade assistance (by request)
                      Cloud planning (by request)
                  
              

              
                
  Get a quote
  
  


              
        
    
  
  
  
    
    Compare all features
  

  
    
      
        
          Features on Premium
        
        Switch plans
      
    
    
      
        
          Select a plan to review its features
        
        
          Enterprise
          Premium
          Premium Plus
        
      
    
  

  
    
      
        
          Features
        
          
            Enterprise
          
          
            Premium
          
          
            Premium Plus
          
      
      
        
          How to get started?
        
            
              Already included with your Enterprise license
            
            
              
                  
  Get a quote
  
  


              
            
            
              
                  
  Get a quote
  
  


              
            
      
    

    
          
      
          
            
  
    
      
        Plan coverage
      
    
  
  
    
        Included with Enterprise Cloud and Enterprise Server
    
    
        Available for Enterprise Cloud and Enterprise Server
    
    
        Available for Enterprise Cloud and Enterprise Server
    
  


          
      

      
        
            Included with Enterprise Cloud and Enterprise Server
        
      

      
        
            Available for Enterprise Cloud and Enterprise Server
        
      

      
        
            Available for Enterprise Cloud and Enterprise Server
        
      
    
    
      
          
            
  
    
      
        Support hours
      
    
  
  
    
        24/5
    
    
        24/7
    
    
        24/7
    
  


          
      

      
        
            24/5
        
      

      
        
            24/7
        
      

      
        
            24/7
        
      
    
    
      
          
            
  
    
      
        Initial response time
      
    
  
  
    
        < 8 hours
    
    
        30 minutes for Urgent (including initial troubleshooting)
4 hours for High
48 hours for Normal
48 hours for Low
    
    
        30 minutes for Urgent (including initial troubleshooting)
4 hours for High
24 hours for Normal
48 hours for Low
    
  


          
      

      
        
            < 8 hours
        
      

      
        
            30 minutes for Urgent (including initial troubleshooting)
4 hours for High
48 hours for Normal
48 hours for Low
        
      

      
        
            30 minutes for Urgent (including initial troubleshooting)
4 hours for High
24 hours for Normal
48 hours for Low
        
      
    
    
      
          
            
              
              
  
    
      
        Training
      
    
  
  
    
        n/a
    
    
        Access to premium content
    
    
        Access to premium content
1 virtual training class per year
    
  


            
            
              One virtual training class is offered per year, with topics such as ‚ÄúGitHub for developers‚Äù and ‚ÄúGitHub for admins‚Äù.
          
      

      
        
            n/a
        
      

      
        
            Access to premium content
        
      

      
        
            Access to premium content
1 virtual training class per year
        
      
    
    
      
          
            
              
              
  
    
      
        Members with support entitlements
      
    
  
  
    
        n/a
    
    
        20
    
    
        40
    
  


            
            
              These members determine if incoming inquiries can be addressed via their company‚Äôs admin or only by GitHub.
          
      

      
        
            n/a
        
      

      
        
            20
        
      

      
        
            40
        
      
    
    
      
          
            
  
    
      
        Dedicated resources
      
    
  
  
    
        n/a
    
    
        Priority ticket handling
    
    
        Priority ticket handling + named Customer Reliability Engineer
    
  


          
      

      
        
            n/a
        
      

      
        
            Priority ticket handling
        
      

      
        
            Priority ticket handling + named Customer Reliability Engineer
        
      
    
    
      
          
            
  
    
      
        Escalation management
      
    
  
  
    
        n/a
    
    
        For High and Urgent priority tickets
    
    
        For High and Urgent priority tickets
    
  


          
      

      
        
            n/a
        
      

      
        
            For High and Urgent priority tickets
        
      

      
        
            For High and Urgent priority tickets
        
      
    
    
      
          
            
              
              
  
    
      
        Incident management
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        For Urgent priority tickets, as needed
    
  


            
            
              Ensures you have the technical resources needed for case resolution, and is available 24/7.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            For Urgent priority tickets, as needed
        
      
    
    
      
          
            
  
    
      
        Health Checks
      
    
  
  
    
        n/a
    
    
        Unlimited automated Health Check reports (see ‚ÄúGenerating a Health Check for your enterprise‚Äù)
    
    
        Unlimited automated Health Check reports (see ‚ÄúGenerating a Health Check for your enterprise‚Äù)
Quarterly enhanced health checks with findings, interpretations, and recommendations from a CRE (by request)
    
  


          
      

      
        
            n/a
        
      

      
        
            Unlimited automated Health Check reports (see ‚ÄúGenerating a Health Check for your enterprise‚Äù)
        
      

      
        
            Unlimited automated Health Check reports (see ‚ÄúGenerating a Health Check for your enterprise‚Äù)
Quarterly enhanced health checks with findings, interpretations, and recommendations from a CRE (by request)
        
      
    
    
      
          
            
  
    
      
        Crisis Prevention
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        Up to four sessions about reliability best practices, preparing for a potential incident, and efficiently interacting with GitHub Support.
    
  


          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            Up to four sessions about reliability best practices, preparing for a potential incident, and efficiently interacting with GitHub Support.
        
      
    
    
      
          
            
              
              
  
    
      
        Technical advisory hours
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        12 hours per quarter
    
  


            
            
              Hours can be scheduled at your discretion. You can use them for technical tasks, such as prepping for a GitHub Enterprise Server upgrade.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            12 hours per quarter
        
      
    
    
      
          
            
              
              
  
    
      
        Application upgrade assistance
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        By request
    
  


            
            
              Delivered upon request via our Customer Reliability Engineers.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            By request
        
      
    
    
      
          
            
              
              
  
    
      
        Cloud planning
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        By request
    
  


            
            
              Delivered upon request via our Customer Reliability Engineers.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            By request
        
      
    

    
  




  
  See what customers are saying about GitHub Premium¬†Support

  
    
    
        
          ‚Äú
          Our support engineer was very helpful in pointing me to the exact resource I needed in minutes.
          
            
          
        
        
          ‚Äú
          The support agent took care of the request with a great sense of urgency and addressed the issue well.
          
            
          
        
        
          ‚Äú
          I'd like to applaud our engineer for how he exceptionally responded to our query. This ticket was not a simple, one-answer investigation and I was very happy with how he explored multiple angles to investigate.
          
            
          
        
        
          ‚Äú
          Our engineer was super helpful and spot on with figuring out the problem. The steps he suggested helped me figure out the problem quickly. Kudos!
          
            
          
        
    
  


  
  Meet your dedicated GitHub Premium¬†Support team

  
      
        
  
  
  

        Premium Support Engineers
        Premium Support Engineers, available only for GitHub Premium Support customers, are dedicated resources who manage and coordinate your entire GitHub Premium Support experience.
      
      
        
  
  
  

        Support Incident Coordinators
        Support Incident Coordinators are responsible for any major incident management, from initiation until resolution, and are available to you 24/7.
      
      
        
  
  
  

        Customer Reliability Engineers (CREs)
        Customer Reliability Engineers (CREs), available only for GitHub Premium Plus Support customers, know your customer account in detail and can provide answers faster than Premium Support Engineers.
      
  



  
    
  
  
    Frequently asked¬†questions


          About GitHub Premium Support


    
  
    
      
      
        What is GitHub Premium Support for?
      
    
    
      GitHub Premium Support helps customers implement GitHub Enterprise quickly and effectively across the organization with 24/7 support.
      
    
  


    
  
    
      
      
        How much does GitHub Premium Support cost?
      
    
    
      For pricing information, please get in touch with the GitHub Premium Support Sales sales team.
      
    
  


    
  
    
      
      
        What are the levels of support in GitHub Premium Support?
      
    
    
      There are three levels of support:

The basic plan included with your GitHub Enterprise license
GitHub Premium Support
GitHub Premium Plus Support

Please refer to our plan comparison table for more details.
      
    
  


    
  
    
      
      
        How do I contact GitHub Premium Support?
      
    
    
      If you are an existing GitHub Premium Support customer, please sign in to our support portal. If you don‚Äôt already have GitHub Premium Support, please contact sales.
      
    
  



          Choosing your plan


    
  
    
      
      
        What is escalation and incident management?
      
    
    
      Escalation and incident management is the ability to escalate ticket progression in the GitHub support portal. After someone escalates a ticket, Support Incident Coordinators orchestrate all necessary parties to resolve the ticket. Additionally, Senior Escalation Engineers (SEEs) facilitate GitHub-internal technical communications and liaise with the rest of GitHub to improve the support team‚Äôs capability in similar future circumstances.
      
    
  


    
  
    
      
      
        What is incident response management?
      
    
    
      Incident response management helps manage the technical resources needed for case resolution. Support Incident Coordinators are available for incident response management 24/7.
      
    
  


    
  
    
      
      
        What are my SLAs for initial response?
      
    
    
      GitHub Premium Support and GitHub Premium Plus Support customers have SLAs. For urgent priority tickets, your SLA guarantees a 30-minute initial response time, which includes troubleshooting. For high priority tickets, your SLA provides a four-hour initial response time.
      
    
  


    
  
    
      
      
        What‚Äôs included in initial troubleshooting?
      
    
    
      For initial troubleshooting, the assigned Premium Support Engineer/Customer Reliability Engineer will review and acknowledge your ticket. To better understand the issue and start troubleshooting, the engineer may ask for additional information such as screenshots, error messages, log files, diagnostics files, support bundles, or the output of specific console commands. They may also collaborate with others in support, engineering, or in the regional incident commander.
If a callback was requested, the engineer will determine if screen sharing is the most effective way to drive ticket resolution. If so, they will invite you to join a screen-sharing session.
      
    
  


    
  
    
      
      
        How do I get health check reports?
      
    
    
      GitHub Premium Support and GitHub Premium Plus Support customers are entitled to unlimited automated health check reports. Additionally, GitHub Premium Plus Support customers can request quarterly enhanced health checks with findings, interpretations, and recommendations from a Customer Reliability Engineer (CRE).
      
    
  


    
  
    
      
      
        What is crisis prevention?
      
    
    
      Crisis prevention allows GitHub Enterprise Server customers to prepare for ‚Äî and experience ‚Äî an incident without risk. Your Customer Reliability Engineer (CRE) guides your team through an incident simulation in a safe and controlled environment.
Crisis Prevention consists of up to four sessions about reliability best practices, preparing for a potential incident, and efficiently interacting with GitHub Support. After the incident simulation, your CRE will run a detailed retrospective, uncovering lessons learned and improvement suggestions for the future.
      
    
  


    
  
    
      
      
        How long does GitHub Premium Support take?
      
    
    
      GitHub Premium Support and GitHub Premium Plus Support Plus customers have service-level agreements (SLAs) for initial response. For urgent priority tickets, the initial response SLA guarantees a 30-minute initial response time, which includes troubleshooting. For high-priority tickets, the initial response SLA provides a four-hour time.
We currently do not provide estimates for time to resolution, as the complexity of tickets varies. However, we review these metrics on a regular basis and reduce times whenever possible.
      
    
  


    
  
    
      
      
        How do I resolve a problem in GitHub Enterprise?
      
    
    
      You can get support via online ticket submission if you‚Äôre using the basic plan included with your GitHub Enterprise license. If you have GitHub Premium Support or GitHub Premium Plus Support, you can submit a ticket online. For urgent tickets, GitHub Premium Support and GitHub Premium Plus Support customers can request a callback and have a screen-sharing session with one of our Premium Support Engineers or Customer Reliability Engineers (CREs). Please refer to our plan comparison table for more details.
      
    
  



          Rules and policies


    
  
    
      
      
        If I do not use all the technical advisory hours in a given quarter, can they be carried over?
      
    
    
      Premium Plus customers may use up to 12 technical advisory hours per quarter. Unused technical advisory hours may not be carried over into the next quarter.
      
    
  


    
  
    
      
      
        How can the technical advisory support hours be used? 
      
    
    
      There are multiple ways you can use technical advisory hours, including but not limited to:

Consultations regarding GitHub best practices and general recommendations
GitHub Enterprise Server upgrade preparation and assistance

      
    
  


    
  
    
      
      
        Does GitHub Premium Support provide service on weekends?
      
    
    
      Yes! GitHub Premium Support and GitHub Premium Plus Support customers receive 24/7 support.
      
    
  



          Upgrading your plan


    
  
    
      
      
        What virtual trainings are available with GitHub Premium Plus Support and who can participate?
      
    
    
      Customers get access to one virtual training class per year. Topics include:

GitHub for developers
GitHub for admins (Server)
GitHub for admins (Cloud)
GitHub for non-developers
GH API Training
GH Actions Fundamentals
GH Actions Intermediate
GH Copilot Fundamentals
GH Copilot Intermediate
GH Copilot Administration & Security
GitHub Enterprise Implementation (Cloud)

We recommend limiting training sessions to a maximum of 16 participants to ensure an optimal provider-to-participant ratio and a high-quality delivery experience. However, in specific cases where it makes sense, we can accommodate up to 20‚Äì25 participants while maintaining our commitment to delivering a valuable training experience for your team.
      
    
  


    
  
    
      
      
        What value will I get by upgrading to GitHub Premium Plus Support?
      
    
    
      GitHub Premium Plus Support customers get an assigned Customer Reliability Engineer (CRE), quarterly enhanced health checks, access to crisis prevention, technical advisory hours, and many additional benefits, which you can review in our plan comparison table.
      
    
  


    
  
    
      
      
        What‚Äôs the benefit of having a Customer Reliability Engineer (CRE) over a Premium Support Engineer?
      
    
    
      A CRE knows your customer account in detail and can help you expedite case resolution faster than a Premium Support Engineer.
      
    
  


    
  
    
      
      
        Since I get GitHub Enterprise Support for free, why should I upgrade to GitHub Premium Support?
      
    
    
      Most customers upgrade to GitHub Premium Support because they need initial response SLAs for urgent and high priority requests, phone support, screen share support for critical issues, and health checks. To see a full list of features for GitHub Premium Support packages, please refer to our plan comparison table.
      
    
  




  


  



    
  
    
      Ready to maximize your investment?
      Get in touch with a GitHub Premium Support specialist today.
      Click below to fill out the form, and our management team will contact you within 48 hours.
      
  Get a quote\n\n\n\nTry the Copilot-powered platform

  
  
    We get it, there's a lot you can do with GitHub.
    That‚Äôs why we've packed all of it into a single risk-free trial that includes GitHub Enterprise, Copilot,
    and Advanced Security.
  

    Start free for 30 days
  




  
    




  

  
    
      
        Free
        The basics for individuals and organizations
          
    
      
        
            $
            0
            USD
        
        
          per month
        
      
    
  

  
    
      
        
          
              $
              0
              USD
          
        
        
          
            per month
          
          
              forever
          
        
      
    
  






        
            
  Join for free
  
  

        
      

        
  
    
          
  
    
      
        
          
        

        
          
            Unlimited public/private repositories
          

          
        
      
    

    
      
        Host open source projects in public GitHub repositories, accessible via web or command line. Public repositories are accessible to anyone at GitHub.com.
      


    
  
    
      
        
          
        

        
          
            Dependabot security and version updates
          

          
        
      
    

    
      
        Keep projects secure by automatically opening pull requests to update vulnerable dependencies and keep them up to date.
      


    
  
    
      
        
          
        

        
          
            2,000 CI/CD minutes/month
          

          Free for public repositories
        
      
    

    
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub.
      


    
  
    
      
        
          
        

        
          
            500MB of Packages storage
          

          Free for public repositories
        
      
    

    
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available.
      


    
  
    
      
        
          
        

        
          
            Issues & Projects
          

          
        
      
    

    
      
        Give your developers flexible features for project management that adapts to any team, project, and workflow ‚Äî all alongside your code.
      


    
  
    
      
        
          
        

        
          
            Community support
          

          
        
      
    

    
      
        Get help with most of your GitHub questions and issues in our Community Forum.
      



    

    
      Featured add-ons
    

    
          
  
    
      
        
          
        

        
          
            GitHub Copilot Access
          

          
        
      
    

    
      
        With GitHub Copilot, get suggestions for whole lines or entire functions‚Äîright inside your¬†editor.
      


    
  
    
      
        
          
        

        
          
            GitHub Codespaces Access
          

          
        
      
    

    
      
        With GitHub Codespaces, get an instant dev environment in the cloud, so you can code anywhere on any device.
      



    
  
  Show features


    
  



    


  
    Most popular
    
      
        Team
        Advanced collaboration for individuals and organizations
          
    
      
        
            $
            4
            USD
        
        
          per user/month
        
      
    
  

  
    
      
        
          
              $
              4
              USD
          
        
        
          
            per user/month
          
          
              for the first 12 months*
          
        
      
    
  






        
            
  Continue with Team
  
  

        
      

        
  
    
      
        
          
        
        Everything included in Free, plus...
      

          
  
    
      
        
          
        

        
          
            Access to GitHub Codespaces
          

          
        
      
    

    
      
        Blazing fast cloud developer environments with flexible compute and pre-configured containers, developers can code, collaborate, and debug from any browser. Pay only for what you use with compute fees starting at $0.18/hr and storage fees at $0.07/GB per month.
      


    
  
    
      
        
          
        

        
          
            Protected branches
          

          
        
      
    

    
      
        Enforce restrictions on how code branches are merged, including requiring reviews by selected collaborators, or allowing only specific contributors to work on a particular branch.
      


    
  
    
      
        
          
        

        
          
            Multiple reviewers in pull requests
          

          
        
      
    

    
      
        Assign multiple users or a team to review a pull request.
      


    
  
    
      
        
          
        

        
          
            Draft pull requests
          

          
        
      
    

    
      
        Easily discuss and collaborate on pull requests before submitting to formal review.
      


    
  
    
      
        
          
        

        
          
            Code owners
          

          
        
      
    

    
      
        Automatically request reviews‚Äîor require approval‚Äîby selected contributors when changes are made to sections of code that they own.
      


    
  
    
      
        
          
        

        
          
            Required reviewers
          

          
        
      
    

    
      
        Ensure that pull requests have a specific number of approving reviews before collaborators can make changes to a protected branch.
      


    
  
    
      
        
          
        

        
          
            Pages and Wikis
          

          
        
      
    

    
      
        Host documentation and simple websites for your project in a wiki format that contributors can easily edit either on the web or command line.
      


    
  
    
      
        
          
        

        
          
            Environment deployment branches and secrets
          

          
        
      
    

    
      
        A job cannot access secrets that are defined in an environment unless it is running on the specified branch.
      


    
  
    
      
        
          
        

        
          
            3,000 CI/CD minutes/month
          

          Free for public repositories
        
      
    

    
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub.
      


    
  
    
      
        
          
        

        
          
            2GB of Packages storage
          

          Free for public repositories
        
      
    

    
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available.
      


    
  
    
      
        
          
        

        
          
            Web-based support
          

          
        
      
    

    
      
        GitHub Support can help you troubleshoot issues you run into while using GitHub.
      



    

    
      Featured add-ons
    

    
          
  
    
      
        
          
        

        
          
            GitHub Secret Protection
          

          
        
      
    

    
      
        Ensure your secrets stay secure. Mitigate risk associated with exposed secrets in your repositories, while preventing new leaks before they happen with push protection.
      


    
  
    
      
        
          
        

        
          
            GitHub Code Security
          

          
        
      
    

    
      
        Find and fix vulnerabilities in your code before they reach production. Prioritize your Dependabot alerts with automated triage rules.
      



    
  
  Show features


    
  



      

  
    Recommended
    
      
        Enterprise
        Security, compliance, and flexible deployment
        Starting at
          
    
      
        
            $
            21
            USD
        
        
          per user/month
        
      
    
  

  
    
      
        
          
              $
              21
              USD
          
        
        
          
            per user/month
          
          
              for the first 12 months*
          
        
      
    
  






        
          
                
                  
                        Start a free trial

                  
                  
                    
                      Contact Sales
                    
                  
                
          
        
      

        
  
    
      
        
          
        
        Everything included in Team, plus...
      


          
  
    
      
        
          
        

        
          
            Data residency
          

          
        
      
    

    
      
        GitHub Enterprise Cloud offers a multi-tenant enterprise SaaS solution on Microsoft Azure, allowing you to choose a regional cloud deployment for data residency, so your in-scope data is stored at rest in a designated location. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.
      


    
  
    
      
        
          
        

        
          
            Enterprise Managed Users
          

          
        
      
    

    
      
        Own and control the user accounts of your enterprise members through your identity provider (IdP).
      


    
  
    
      
        
          
        

        
          
            User provisioning through SCIM
          

          
        
      
    

    
      
        Automatically invite members to join your organization when you grant access on your IdP. If you remove a member's access to your GitHub organization on your SAML IdP, the member will be automatically removed from the GitHub organization.
      


    
  
    
      
        
          
        

        
          
            Enterprise Account to centrally manage multiple organizations
          

          
        
      
    

    
      
        GitHub Enterprise Cloud includes the option to create an enterprise account, which enables collaboration between multiple organizations, gives administrators a single point of visibility and management and brings license cost savings for identical users in multiple organizations.
      


    
  
    
      
        
          
        

        
          
            Environment protection rules
          

          
        
      
    

    
      
        When a workflow job references an environment, the job won't start until all of the environment's protection rules pass.
      


    
  
    
      
        
          
        

        
          
            Repository rules
          

          
        
      
    

    
      
        Enforce branch and tag restrictions across your organization, ensuring branch and tag protection across your repositories. Evaluate rules to asses impact before enforcement.
      


    
  
    
      
        
          
        

        
          
            Audit Log API
          

          
        
      
    

    
      
        As a GitHub Enterprise Cloud organization administrator, you can now access log events using our GraphQL API and monitor the activity in your organization.
      


    
  
    
      
        
          
        

        
          
            SOC1, SOC2, type 2 reports annually
          

          
        
      
    

    
      
        GitHub offers AICPA System and Organization Controls (SOC) 1 Type 2 and SOC 2 Type 2 reports with IAASB International Standards on Assurance Engagements, ISAE 3000, and ISAE 3402.
      


    
  
    
      
        
          
        

        
          
            FedRAMP Tailored Authority to Operate (ATO)
          

          
        
      
    

    
      
        Government users can host projects on GitHub Enterprise Cloud with the confidence that our platform meets the low impact software-as-a-service (SaaS) baseline of security standards set by our U.S. federal government partners.
      


    
  
    
      
        
          
        

        
          
            SAML single sign-on
          

          
        
      
    

    
      
        Use an identity provider to manage the identities of GitHub users and applications.
      


    
  
    
      
        
          
        

        
          
            Advanced auditing
          

          
        
      
    

    
      
        Quickly review the actions performed by members of your organization. Keep copies of audit log data to ensure secure IP and maintain compliance for your organization.
      


    
  
    
      
        
          
        

        
          
            GitHub Connect
          

          
        
      
    

    
      
        Share features and workflows between your GitHub Enterprise Server instance and GitHub Enterprise Cloud.
      


    
  
    
      
        
          
        

        
          
            50,000 CI/CD minutes/month
          

          Free for public repositories
        
      
    

    
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub.
      


    
  
    
      
        
          
        

        
          
            50GB of Packages storage
          

          Free for public repositories
        
      
    

    
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available.
      



    

    
      Exclusive add-on
    
    
          
  
    
      
        
          
        

        
          
            Premium support
          

          
        
      
    

    
      
        With Premium, get a 30-minute SLA on Urgent tickets and 24/7 web and phone support via callback request. With Premium Plus, get everything in Premium, assigned Customer Reliability Engineer and more. Learn more about Premium¬†Support
      
    



    
  
  Show features


    
  





    
  
    Additional add-ons
  

  
  
        
    
        
            
              
            

          
        

      GitHub Copilot

      
        Get started for free with up to 2,000 completions and 50 chat requests per month.
      

      
        Compare plans 

      

        
    
        
            
              
            

          
        

      GitHub Codespaces

      
        Starting at $0.18 per hour of compute and $0.07 per GB of storage.
      

      
        Learn more 

      

        
    
        
            
              
            

          
        

      Git Large File Storage

      
        $5 per month for 50 GB bandwidth and 50 GB of storage.
      

      
        Learn more 

      

        
    
        
            
              
            

          
        

      GitHub Advanced Security

      
        Secret Protection $19 per committer/ per month. Code Security $30 per committer/ per month
      

      
        Learn more 

      






    
      
        Compare all features
        
      
    
  




  
      
        
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
        

        
          
            
                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

            
          

          
              
                
                  ‚ÄúGitHub is the world‚Äôs mono repository, so sharing our open source there is natural.‚Äù
                
                ‚Äî Martin Andersen, VP of Engineering, Trustpilot
                  
    Read the case study 


              
              
                
                  ‚ÄúGitHub Advanced Security is there for every pull request and excels compared to other static analysis tools we have used.‚Äù
                
                ‚Äî Dimosthenis Kaponis, CTO, Netdata
                  
    Read the case study 


              
              
                
                  ‚ÄúGitHub keeps us up to speed with the industry‚Äôs best tools. We want new hires to know GitHub is in our toolchain‚Äîit makes them excited to join us.‚Äù
                
                ‚Äî Spencer Kaiser, Principal Architect of Emerging Tech, American Airlines
                  
    Read the case study 


              
              
                
                  ‚ÄúThis collaborative way of building software is unstoppable. It isn‚Äôt going away‚Äîand GitHub has its place in that. We can make the whole company rethink how they build software.‚Äù
                
                ‚Äî Ingo Sauerzapf, SAP Cloud Development Tools Manager
                  
    Read the case study 


              
              
                
                  ‚ÄúPeople know what a pull request is because it‚Äôs how they contribute to open source projects. We have many developers who are well-versed with GitHub, either for personal development or previous roles. With GitHub Enterprise, no one has to relearn the wheel.‚Äù
                
                ‚Äî Laurent Ploix, Product Manager, Spotify
                  
    Read the case study 


              
              
                
                  ‚ÄúI have seen some truly revolutionary actions happen in communities on GitHub. People are collaborating on code but they‚Äôre also having foundational conversations on best practices and how software, as a whole, is built. More and more, GitHub is an internet archive. It‚Äôs a deeply social and critical piece of our infrastructure.‚Äù
                
                ‚Äî Michael Glukhovsky, Developer, Stripe
                  
    Read the case study 


              
              
                
                  ‚ÄúWhen we started talking about code reuse, we felt like we already had the perfect platform in place: GitHub.‚Äù
                
                ‚Äî Timothy Carmean, Software Processes and Tools Supervisor, Ford
                  
    Read the case study 


              
              
                
                  ‚ÄúUsing GitHub Enterprise Cloud removes the burden of managing infrastructure, and we don‚Äôt need to worry about the availability of our versioning code, source code and versioning tools. It lets us focus on what‚Äôs important for our business, and that‚Äôs our customers.‚Äù
                
                ‚Äî Victor Gomes, Infosec Tech Manager, Nubank
                  
    Read the case study 


              
          
        
      
  



  
    Compare features
  







  
    
      
        
          Features on team
        
        Switch plans
      
    
    
      
        
          Select a plan to review its features
        
        
          Free
            Team
              Enterprise
        
      
    
  

  
    
      
        
          
            
              Features
            
          

          
            
              Free
            
          


            
              
                Team
              
            

              
                
                  Enterprise
                
              
        
      

      
        
          
            
              Pricing
            
          

          
            
              
                
  
    
      
        $0
        USD
      
      
        per month
      
    

    
      
        $0
        USD
      
      
        per month
          forever
      
    
  



              
            
          


            
              
                
                  
  
    
      
        $4
        USD
      
      
        per user/month
      
    

    
      
        $4
        USD
      
      
        per user/month
          for the first 12 months*
      
    
  



                
              
            

              
                
                  
                    
  
    
      
        $21
        USD
      
      
        per user/month
      
    

    
      
        $21
        USD
      
      
        per user/month
          for the first 12 months*
      
    
  



                  
                
              
        
      

      
        
          
            
              How to get started
            
          

          
            
                  Join for free

            
          


            
              
                    Continue with Team

              
            

              
                
                        Start a free trial

                        
      Contact Sales
    

                
              
        
      
    

    
      

  
    Code management
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Public repositories
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Host open source projects in public GitHub repositories, accessible via web or command line. Public repositories are accessible to anyone at GitHub.com.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Private repositories
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Host code in private GitHub repositories, accessible via appliance, web, and command line. Private repositories are only accessible to you and people you share them with.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      



    

    
      

  
    Code workflow
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                GitHub Codespaces
              
            
          
          
            
              $0 spend limitWith policies and controls
              
            
              
                Ability to increase spend limit
                
              
                
                  Ability to increase spend limit
                  
                
          
        
      
      
        Spin up fully configured dev environments in the cloud with the power of your favorite editor. A "core hour" denotes compute usage. On a 2-core machine, you would get 60 hours free. On a 4-core machine, you would get 30 hours free, etc. Free hours are assigned to personal accounts, rather than free organizations.
  

  
    
      $0 spend limitWith policies and controls
      
    
  

    
      
        Ability to increase spend limit
        
      
    

      
        
          Ability to increase spend limit
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Actions
              
            
          
          
            
              2,000 minutes/month
              Free for public repositories
            
              
                3,000 minutes/month
                Free for public repositories
              
                
                  50,000 minutes/month
                  Free for public repositories
                
          
        
      
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub. Minutes are free for public repositories.Learn more about billing
  

  
    
      2,000 minutes/month
      Free for public repositories
    
  

    
      
        3,000 minutes/month
        Free for public repositories
      
    

      
        
          50,000 minutes/month
          Free for public repositories
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Packages
              
            
          
          
            
              500 MB
              Free for public repositories
            
              
                2GB
                Free for public repositories
              
                
                  50GB
                  Free for public repositories
                
          
        
      
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available. Packages are free for public repositories.
  

  
    
      500 MB
      Free for public repositories
    
  

    
      
        2GB
        Free for public repositories
      
    

      
        
          50GB
          Free for public repositories
        
      


    
  
    
      
        
          
            
              
            
            
              
                Code reviews
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Review new code, see visual code changes, and confidently merge code changes with automated status checks.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Pull requests
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Allow contributors to easily notify you of changes they've pushed to a repository ‚Äì with access limited to the contributors you specify. Easily merge changes you accept.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Protected branches
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Enforce restrictions on how code branches are merged, including requiring reviews by selected collaborators, or allowing only specific contributors to work on a particular branch.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Code owners
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automatically request reviews ‚Äì or require approval ‚Äì by selected contributors when changes are made to sections of code that they own.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Draft pull requests
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Easily discuss and collaborate on pull requests before submitting to formal review.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Multiple pull request assignees
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Assign more than one person to a pull request.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Repository insights
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        See data about activity and contributions within your repositories, including trends. You can use this data to improve collaboration and make development faster and more effective.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Scheduled reminders
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Send scheduled messages to you or your team listing open pull requests.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Automatic code review assignment
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automatically assign code reviews to members of your team based on one of two algorithms.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Environment protection rules
              
            
          
          
            
              Public repositories
              
            
              
                Public repositories
                
              
                
                  
                  
                
          
        
      
      
        When a workflow job references an environment, the job won't start until all of the environment's protection rules pass.
  

  
    
      Public repositories
      
    
  

    
      
        Public repositories
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Environment deployment branches and secrets
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        A job cannot access secrets that are defined in an environment unless it is running on the specified branch.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



    

    
      

  
    Collaboration
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Collaborators for public repositories
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Invite any GitHub member, or all GitHub members, to work with you on code in a public repository you control ‚Äì including making changes and opening issues.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Collaborators for private repositories
              
            
          
          
            
              Unlimited
              
            
              
                


  
    
      
        $4
      
      
        per user/month
      
    
  

                
              
                
                  


  
    
      
        $21
      
      
        per user/month
      
    
  

                  
                
          
        
      
      
        Invite any GitHub member, or all GitHub members, to work with you on code in a private repository you control ‚Äì including making changes and opening issues.
  

  
    
      Unlimited
      
    
  

    
      
        


  
    
      
        $4
      
      
        per user/month
      
    
  

        
      
    

      
        
          


  
    
      
        $21
      
      
        per user/month
      
    
  

          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Issues
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Track bugs, enhancements, and other requests, prioritize work, and communicate with stakeholders as changes are proposed and merged.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Projects
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Visualize and manage issues and pull requests across tables, boards, and roadmaps with custom fields and views that you can arrange to suit your workflow.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Milestones
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Track progress on groups of issues or pull requests in a repository, and map groups to overall project goals.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Team discussions
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Discuss any topic, unattached to a specific project or issue. Control who has access, notify discussion participants with updates, and link from anywhere.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Organization and team management
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Manage access to projects on a team-by-team, or individual user, basis.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Pages and wikis
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Host documentation and simple websites for your project in a wiki format that contributors can easily edit either on the web or command line.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Multiple issue assignees
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Assign more than one person to an issue.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      




    

    
      

  
    GitHub Secret Protection
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Push protection
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Prevent secret exposures by proactively blocking secrets before they reach your code.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Secret scanning
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Detect and manage exposed secrets across git history, pull requests, issues, and wikis.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Provider patterns
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        GitHub collaborates with AWS, Azure, and Google Cloud to detect secrets with high accuracy. This minimizes false positives, letting you focus on what matters.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Provider notification
              
            
          
          
            
              Public repositories
              
            
              
                Public repositories
                
              
                
                  Public repositories
                  
                
          
        
      
      
        Providers get real-time alerts when their tokens appear in public code, enabling them to notify, quarantine, or revoke secrets.
  

  
    
      Public repositories
      
    
  

    
      
        Public repositories
        
      
    

      
        
          Public repositories
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Validity checks
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Prioritize active secrets with validity checks for provider patterns.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Copilot secret scanning
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Use AI to detect unstructured like passwords‚Äîwithout the noise.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Generic patterns
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Detect tokens from unknown providers, including HTTP authentication headers, connection strings, and private keys.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Custom patterns
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Create your own patterns and find organization-specific secrets.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Push protection bypass controls
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Manage who can bypass push protection and when.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Insights in security overview
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Understand how risk is distributed across your organization with security metrics and insight dashboards.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Scan history API 
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Review how and when GitHub scans your repositories for secrets.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



    

    
      

  
    Code Security
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Copilot Autofix
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Powered by GitHub Copilot, generate automatic fixes for 90% of alert types in JavaScript, Typescript, Java, and Python.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Third party extensibility for code scanning alerts
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Centralize your findings across all your scanning tools via SARIF upload to GitHub.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Contextual vulnerability intelligence and advice
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Quickly remediate with context provided by Copilot Autofix.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                CodeQL
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Uncover vulnerabilities in your code with our industry-leading semantic code analysis.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Security campaigns
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Reduce security debt and burn down your security backlog with security campaigns.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependency graph
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Get a clear view of your project‚Äôs dependencies with a summary of manifest, lock files, and submitted dependencies via the API.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependency review action
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Catch insecure dependencies before adding them and get insights on licenses, dependents, and age.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependabot custom auto-triage rules
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Define alert-centric policies to control how Dependabot handles alerts and pull requests.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependabot security updates with grouped updates
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automated pull requests that batch dependency updates for known vulnerabilities.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependabot version updates
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automated pull requests that keep your dependencies up to date.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Insights in security overview
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Get a clear view of risk distribution with security metrics and dashboards.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



    

    
      

  
    Platform security and compliance
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Repository rulesets
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Enforce consistent code standards, security, and compliance across branches and tags.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                SBOMs
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Export a software bill of materials (SBOM) for your repository.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Artifact attestations
              
            
          
          
            
              Public repositories
              
            
              
                Public repositories
                
              
                
                  
                  
                
          
        
      
      
        Ensure unfalsifiable provenance and integrity for your software.
  

  
    
      Public repositories
      
    
  

    
      
        Public repositories
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Security Advisories
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Role-based access control
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Define users' level of access to your code, data and settings.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Required 2FA
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Use an extra layer of security with two factor authentication (2FA) when logging into GitHub.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Audit log
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Quickly review the actions performed by members of your organization.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      




            
  
    
      
        
          
            
              
            
            
              
                Audit log API
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Keep copies of audit log data to ensure secure IP and maintain compliance for your organization.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Connect
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Share features and workflows between your GitHub Enterprise Server instance and GitHub Enterprise Cloud.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                SAML single sign-on (SSO)
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Use an identity provider to manage the identities of GitHub users and applications.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                LDAP
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Access GitHub Enterprise Server using your existing accounts and centrally manage repository access.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                IP allow list
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Cloud
                  
                
          
        
      
      
        Limit access to known allowed IP addresses.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Cloud
          
        
      



    

    
      

  
    Marketplace and integrations
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                GitHub Apps
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Install apps that integrate directly with GitHub's API to improve development workflows ‚Äì or build your own for private use or publication in the GitHub Marketplace.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Status checks
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Define tests that GitHub automatically runs against code being committed to your repository, and get details about failures and what is causing them.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



        
  
    
      
        
          
            
              
            
            
              
                Pre-receive hooks
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Server
                  
                
          
        
      
      
        Create requirements for automatically accepting or rejecting a push based on the contents of the push.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Server
          
        
      


    

    
      

  
    Support and deployment
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Community Support
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Get help with most of your GitHub questions and issues in our Community Forum.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Standard Support
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        GitHub Support can help you troubleshoot issues you run into while using GitHub. Get support via the web.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



            
  
    
      
        
          
            
              
            
            
              
                Premium and Premium Plus Support
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Available
                  
                
          
        
      
      
        With Premium, get a 30-minute SLA on Urgent tickets and 24/7 web and phone support via callback request. With Premium Plus, get everything in Premium, assigned Customer Reliability Engineer and more. Learn more about Premium¬†Support
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Available
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Invoice billing
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Pay bills via invoice, rather than using your credit card.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Self-hosted deployment
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Server
                  
                
          
        
      
      
        Self-hosted GitHub for on-prem appliances or self-managed cloud tenants.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Server
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Data residency
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Cloud
                  
                
          
        
      
      
        Multi-tenant enterprise SaaS solution on Microsoft Azure, allowing you to choose a regional cloud deployment for data residency, so your in-scope data is stored at rest in a designated location. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Cloud
          
        
      



    

    
      
        
        
          
        
        
          
        
          
            
          
      
    
  





  
    
      
      
        We love people who are changing the¬†world
      
    

    
  
        
    
        
            
              
            

          
        

      Open source teams

      
        If you manage multiple contributors, there‚Äôs a free option. We also run GitHub Sponsors, where we help fund your work.
      

      
        Learn more 

      


        
    
        
            
              
            

          
        

      Students and teachers

      
        We‚Äôve partnered with industry leaders to give students and teachers free access to the best developer tools‚Äîfor the school year and beyond.
      

      
        Learn more 

      


        
    
        
            
              
            

          
        

      Nonprofits

      
        Work for a government-recognized nonprofit, association, or 501(c)(3)? Get a discounted Organization on us.
      

      
        Learn more\n\n\n\nCreate your free account
            Explore GitHub's core features for individuals and organizations.

              
              
                See what's included
                
                  
                
              
              
                
  
      
        
          
        
        
          Access to GitHub Copilot
          Increase your productivity and accelerate software development.
      
      
        
          
        
        
          Unlimited repositories
          Collaborate securely on public and private projects.
      
      
        
          
        
        
          Integrated code reviews
          Boost code quality with built-in review tools.
      
      
        
          
        
        
          Automated workflows
          Save time with CI/CD integrations and GitHub Actions.
      
      
        
          
        
        
          Community support
          Connect with developers worldwide for instant feedback and insights.
      
  

              
            
          
          
            
            
          
        
        
          
          
            
  
  


  
    
  
  
    
      
        
        
        

        
          Sign up to GitHub
        

        

        
          
            
              Email*
            
            
              
                
                
              
            
          

          
            
              Password*
            
            
              
                
                    
                    
                    
                  
                
              
              
                Password should be at least 15 characters OR at least 8 characters including a number and a lowercase letter.
              
            
          

          
            
              
                Username*
              
            
            
              
                
                  
                  
                
              
              
                Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen.
              
            
          
          
  
    
      
        Your Country/Region*, required
      
    
    
      
  
      
    Select Country/Region
  
    
      
    


    
      
  
    
      
        Select Country/Region
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
  
      
        
      
    
        
    
    
    
        
          
        
      
        
          Afghanistan
      

  

        
    
    
    
        
          
        
      
        
          √Öland
      

  

        
    
    
    
        
          
        
      
        
          Albania
      

  

        
    
    
    
        
          
        
      
        
          Algeria
      

  

        
    
    
    
        
          
        
      
        
          American Samoa
      

  

        
    
    
    
        
          
        
      
        
          Andorra
      

  

        
    
    
    
        
          
        
      
        
          Angola
      

  

        
    
    
    
        
          
        
      
        
          Anguilla
      

  

        
    
    
    
        
          
        
      
        
          Antarctica
      

  

        
    
    
    
        
          
        
      
        
          Antigua and Barbuda
      

  

        
    
    
    
        
          
        
      
        
          Argentina
      

  

        
    
    
    
        
          
        
      
        
          Armenia
      

  

        
    
    
    
        
          
        
      
        
          Aruba
      

  

        
    
    
    
        
          
        
      
        
          Australia
      

  

        
    
    
    
        
          
        
      
        
          Austria
      

  

        
    
    
    
        
          
        
      
        
          Azerbaijan
      

  

        
    
    
    
        
          
        
      
        
          Bahamas
      

  

        
    
    
    
        
          
        
      
        
          Bahrain
      

  

        
    
    
    
        
          
        
      
        
          Bangladesh
      

  

        
    
    
    
        
          
        
      
        
          Barbados
      

  

        
    
    
    
        
          
        
      
        
          Belarus
      

  

        
    
    
    
        
          
        
      
        
          Belgium
      

  

        
    
    
    
        
          
        
      
        
          Belize
      

  

        
    
    
    
        
          
        
      
        
          Benin
      

  

        
    
    
    
        
          
        
      
        
          Bermuda
      

  

        
    
    
    
        
          
        
      
        
          Bhutan
      

  

        
    
    
    
        
          
        
      
        
          Bolivia
      

  

        
    
    
    
        
          
        
      
        
          Bonaire, Sint Eustatius and Saba
      

  

        
    
    
    
        
          
        
      
        
          Bosnia and Herzegovina
      

  

        
    
    
    
        
          
        
      
        
          Botswana
      

  

        
    
    
    
        
          
        
      
        
          Bouvet Island
      

  

        
    
    
    
        
          
        
      
        
          Brazil
      

  

        
    
    
    
        
          
        
      
        
          British Indian Ocean Territory
      

  

        
    
    
    
        
          
        
      
        
          Brunei Darussalam
      

  

        
    
    
    
        
          
        
      
        
          Bulgaria
      

  

        
    
    
    
        
          
        
      
        
          Burkina Faso
      

  

        
    
    
    
        
          
        
      
        
          Burundi
      

  

        
    
    
    
        
          
        
      
        
          Cambodia
      

  

        
    
    
    
        
          
        
      
        
          Cameroon
      

  

        
    
    
    
        
          
        
      
        
          Canada
      

  

        
    
    
    
        
          
        
      
        
          Cape Verde
      

  

        
    
    
    
        
          
        
      
        
          Cayman Islands
      

  

        
    
    
    
        
          
        
      
        
          Central African Republic
      

  

        
    
    
    
        
          
        
      
        
          Chad
      

  

        
    
    
    
        
          
        
      
        
          Chile
      

  

        
    
    
    
        
          
        
      
        
          China
      

  

        
    
    
    
        
          
        
      
        
          Christmas Island
      

  

        
    
    
    
        
          
        
      
        
          Cocos (Keeling) Islands
      

  

        
    
    
    
        
          
        
      
        
          Colombia
      

  

        
    
    
    
        
          
        
      
        
          Comoros
      

  

        
    
    
    
        
          
        
      
        
          Congo (Brazzaville)
      

  

        
    
    
    
        
          
        
      
        
          Congo (Kinshasa)
      

  

        
    
    
    
        
          
        
      
        
          Cook Islands
      

  

        
    
    
    
        
          
        
      
        
          Costa Rica
      

  

        
    
    
    
        
          
        
      
        
          C√¥te d'Ivoire
      

  

        
    
    
    
        
          
        
      
        
          Croatia
      

  

        
    
    
    
        
          
        
      
        
          Cura√ßao
      

  

        
    
    
    
        
          
        
      
        
          Cyprus
      

  

        
    
    
    
        
          
        
      
        
          Czech Republic
      

  

        
    
    
    
        
          
        
      
        
          Denmark
      

  

        
    
    
    
        
          
        
      
        
          Djibouti
      

  

        
    
    
    
        
          
        
      
        
          Dominica
      

  

        
    
    
    
        
          
        
      
        
          Dominican Republic
      

  

        
    
    
    
        
          
        
      
        
          Ecuador
      

  

        
    
    
    
        
          
        
      
        
          Egypt
      

  

        
    
    
    
        
          
        
      
        
          El Salvador
      

  

        
    
    
    
        
          
        
      
        
          Equatorial Guinea
      

  

        
    
    
    
        
          
        
      
        
          Eritrea
      

  

        
    
    
    
        
          
        
      
        
          Estonia
      

  

        
    
    
    
        
          
        
      
        
          Ethiopia
      

  

        
    
    
    
        
          
        
      
        
          Falkland Islands
      

  

        
    
    
    
        
          
        
      
        
          Faroe Islands
      

  

        
    
    
    
        
          
        
      
        
          Fiji
      

  

        
    
    
    
        
          
        
      
        
          Finland
      

  

        
    
    
    
        
          
        
      
        
          France
      

  

        
    
    
    
        
          
        
      
        
          French Guiana
      

  

        
    
    
    
        
          
        
      
        
          French Polynesia
      

  

        
    
    
    
        
          
        
      
        
          French Southern Lands
      

  

        
    
    
    
        
          
        
      
        
          Gabon
      

  

        
    
    
    
        
          
        
      
        
          Gambia
      

  

        
    
    
    
        
          
        
      
        
          Georgia
      

  

        
    
    
    
        
          
        
      
        
          Germany
      

  

        
    
    
    
        
          
        
      
        
          Ghana
      

  

        
    
    
    
        
          
        
      
        
          Gibraltar
      

  

        
    
    
    
        
          
        
      
        
          Greece
      

  

        
    
    
    
        
          
        
      
        
          Greenland
      

  

        
    
    
    
        
          
        
      
        
          Grenada
      

  

        
    
    
    
        
          
        
      
        
          Guadeloupe
      

  

        
    
    
    
        
          
        
      
        
          Guam
      

  

        
    
    
    
        
          
        
      
        
          Guatemala
      

  

        
    
    
    
        
          
        
      
        
          Guernsey
      

  

        
    
    
    
        
          
        
      
        
          Guinea
      

  

        
    
    
    
        
          
        
      
        
          Guinea-Bissau
      

  

        
    
    
    
        
          
        
      
        
          Guyana
      

  

        
    
    
    
        
          
        
      
        
          Haiti
      

  

        
    
    
    
        
          
        
      
        
          Heard and McDonald Islands
      

  

        
    
    
    
        
          
        
      
        
          Honduras
      

  

        
    
    
    
        
          
        
      
        
          Hong Kong
      

  

        
    
    
    
        
          
        
      
        
          Hungary
      

  

        
    
    
    
        
          
        
      
        
          Iceland
      

  

        
    
    
    
        
          
        
      
        
          India
      

  

        
    
    
    
        
          
        
      
        
          Indonesia
      

  

        
    
    
    
        
          
        
      
        
          Iran
      

  

        
    
    
    
        
          
        
      
        
          Iraq
      

  

        
    
    
    
        
          
        
      
        
          Ireland
      

  

        
    
    
    
        
          
        
      
        
          Isle of Man
      

  

        
    
    
    
        
          
        
      
        
          Israel
      

  

        
    
    
    
        
          
        
      
        
          Italy
      

  

        
    
    
    
        
          
        
      
        
          Jamaica
      

  

        
    
    
    
        
          
        
      
        
          Japan
      

  

        
    
    
    
        
          
        
      
        
          Jersey
      

  

        
    
    
    
        
          
        
      
        
          Jordan
      

  

        
    
    
    
        
          
        
      
        
          Kazakhstan
      

  

        
    
    
    
        
          
        
      
        
          Kenya
      

  

        
    
    
    
        
          
        
      
        
          Kiribati
      

  

        
    
    
    
        
          
        
      
        
          Korea, South
      

  

        
    
    
    
        
          
        
      
        
          Kuwait
      

  

        
    
    
    
        
          
        
      
        
          Kyrgyzstan
      

  

        
    
    
    
        
          
        
      
        
          Laos
      

  

        
    
    
    
        
          
        
      
        
          Latvia
      

  

        
    
    
    
        
          
        
      
        
          Lebanon
      

  

        
    
    
    
        
          
        
      
        
          Lesotho
      

  

        
    
    
    
        
          
        
      
        
          Liberia
      

  

        
    
    
    
        
          
        
      
        
          Libya
      

  

        
    
    
    
        
          
        
      
        
          Liechtenstein
      

  

        
    
    
    
        
          
        
      
        
          Lithuania
      

  

        
    
    
    
        
          
        
      
        
          Luxembourg
      

  

        
    
    
    
        
          
        
      
        
          Macau
      

  

        
    
    
    
        
          
        
      
        
          Macedonia
      

  

        
    
    
    
        
          
        
      
        
          Madagascar
      

  

        
    
    
    
        
          
        
      
        
          Malawi
      

  

        
    
    
    
        
          
        
      
        
          Malaysia
      

  

        
    
    
    
        
          
        
      
        
          Maldives
      

  

        
    
    
    
        
          
        
      
        
          Mali
      

  

        
    
    
    
        
          
        
      
        
          Malta
      

  

        
    
    
    
        
          
        
      
        
          Marshall Islands
      

  

        
    
    
    
        
          
        
      
        
          Martinique
      

  

        
    
    
    
        
          
        
      
        
          Mauritania
      

  

        
    
    
    
        
          
        
      
        
          Mauritius
      

  

        
    
    
    
        
          
        
      
        
          Mayotte
      

  

        
    
    
    
        
          
        
      
        
          Mexico
      

  

        
    
    
    
        
          
        
      
        
          Micronesia
      

  

        
    
    
    
        
          
        
      
        
          Moldova
      

  

        
    
    
    
        
          
        
      
        
          Monaco
      

  

        
    
    
    
        
          
        
      
        
          Mongolia
      

  

        
    
    
    
        
          
        
      
        
          Montenegro
      

  

        
    
    
    
        
          
        
      
        
          Montserrat
      

  

        
    
    
    
        
          
        
      
        
          Morocco
      

  

        
    
    
    
        
          
        
      
        
          Mozambique
      

  

        
    
    
    
        
          
        
      
        
          Myanmar
      

  

        
    
    
    
        
          
        
      
        
          Namibia
      

  

        
    
    
    
        
          
        
      
        
          Nauru
      

  

        
    
    
    
        
          
        
      
        
          Nepal
      

  

        
    
    
    
        
          
        
      
        
          Netherlands
      

  

        
    
    
    
        
          
        
      
        
          New Caledonia
      

  

        
    
    
    
        
          
        
      
        
          New Zealand
      

  

        
    
    
    
        
          
        
      
        
          Nicaragua
      

  

        
    
    
    
        
          
        
      
        
          Niger
      

  

        
    
    
    
        
          
        
      
        
          Nigeria
      

  

        
    
    
    
        
          
        
      
        
          Niue
      

  

        
    
    
    
        
          
        
      
        
          Norfolk Island
      

  

        
    
    
    
        
          
        
      
        
          Northern Mariana Islands
      

  

        
    
    
    
        
          
        
      
        
          Norway
      

  

        
    
    
    
        
          
        
      
        
          Oman
      

  

        
    
    
    
        
          
        
      
        
          Pakistan
      

  

        
    
    
    
        
          
        
      
        
          Palau
      

  

        
    
    
    
        
          
        
      
        
          Palestine
      

  

        
    
    
    
        
          
        
      
        
          Panama
      

  

        
    
    
    
        
          
        
      
        
          Papua New Guinea
      

  

        
    
    
    
        
          
        
      
        
          Paraguay
      

  

        
    
    
    
        
          
        
      
        
          Peru
      

  

        
    
    
    
        
          
        
      
        
          Philippines
      

  

        
    
    
    
        
          
        
      
        
          Pitcairn
      

  

        
    
    
    
        
          
        
      
        
          Poland
      

  

        
    
    
    
        
          
        
      
        
          Portugal
      

  

        
    
    
    
        
          
        
      
        
          Puerto Rico
      

  

        
    
    
    
        
          
        
      
        
          Qatar
      

  

        
    
    
    
        
          
        
      
        
          Reunion
      

  

        
    
    
    
        
          
        
      
        
          Romania
      

  

        
    
    
    
        
          
        
      
        
          Rwanda
      

  

        
    
    
    
        
          
        
      
        
          Saint Barth√©lemy
      

  

        
    
    
    
        
          
        
      
        
          Saint Helena
      

  

        
    
    
    
        
          
        
      
        
          Saint Kitts and Nevis
      

  

        
    
    
    
        
          
        
      
        
          Saint Lucia
      

  

        
    
    
    
        
          
        
      
        
          Saint Martin (French part)
      

  

        
    
    
    
        
          
        
      
        
          Saint Pierre and Miquelon
      

  

        
    
    
    
        
          
        
      
        
          Saint Vincent and the Grenadines
      

  

        
    
    
    
        
          
        
      
        
          Samoa
      

  

        
    
    
    
        
          
        
      
        
          San Marino
      

  

        
    
    
    
        
          
        
      
        
          Sao Tome and Principe
      

  

        
    
    
    
        
          
        
      
        
          Saudi Arabia
      

  

        
    
    
    
        
          
        
      
        
          Senegal
      

  

        
    
    
    
        
          
        
      
        
          Serbia
      

  

        
    
    
    
        
          
        
      
        
          Seychelles
      

  

        
    
    
    
        
          
        
      
        
          Sierra Leone
      

  

        
    
    
    
        
          
        
      
        
          Singapore
      

  

        
    
    
    
        
          
        
      
        
          Sint Maarten (Dutch part)
      

  

        
    
    
    
        
          
        
      
        
          Slovakia
      

  

        
    
    
    
        
          
        
      
        
          Slovenia
      

  

        
    
    
    
        
          
        
      
        
          Solomon Islands
      

  

        
    
    
    
        
          
        
      
        
          Somalia
      

  

        
    
    
    
        
          
        
      
        
          South Africa
      

  

        
    
    
    
        
          
        
      
        
          South Georgia and South Sandwich Islands
      

  

        
    
    
    
        
          
        
      
        
          South Sudan
      

  

        
    
    
    
        
          
        
      
        
          Spain
      

  

        
    
    
    
        
          
        
      
        
          Sri Lanka
      

  

        
    
    
    
        
          
        
      
        
          Sudan
      

  

        
    
    
    
        
          
        
      
        
          Suriname
      

  

        
    
    
    
        
          
        
      
        
          Svalbard and Jan Mayen Islands
      

  

        
    
    
    
        
          
        
      
        
          Swaziland
      

  

        
    
    
    
        
          
        
      
        
          Sweden
      

  

        
    
    
    
        
          
        
      
        
          Switzerland
      

  

        
    
    
    
        
          
        
      
        
          Taiwan
      

  

        
    
    
    
        
          
        
      
        
          Tajikistan
      

  

        
    
    
    
        
          
        
      
        
          Tanzania
      

  

        
    
    
    
        
          
        
      
        
          Thailand
      

  

        
    
    
    
        
          
        
      
        
          Timor-Leste
      

  

        
    
    
    
        
          
        
      
        
          Togo
      

  

        
    
    
    
        
          
        
      
        
          Tokelau
      

  

        
    
    
    
        
          
        
      
        
          Tonga
      

  

        
    
    
    
        
          
        
      
        
          Trinidad and Tobago
      

  

        
    
    
    
        
          
        
      
        
          Tunisia
      

  

        
    
    
    
        
          
        
      
        
          T√ºrkiye
      

  

        
    
    
    
        
          
        
      
        
          Turkmenistan
      

  

        
    
    
    
        
          
        
      
        
          Turks and Caicos Islands
      

  

        
    
    
    
        
          
        
      
        
          Tuvalu
      

  

        
    
    
    
        
          
        
      
        
          Uganda
      

  

        
    
    
    
        
          
        
      
        
          Ukraine
      

  

        
    
    
    
        
          
        
      
        
          United Arab Emirates
      

  

        
    
    
    
        
          
        
      
        
          United Kingdom
      

  

        
    
    
    
        
          
        
      
        
          United States Minor Outlying Islands
      

  

        
    
    
    
        
          
        
      
        
          United States of America
      

  

        
    
    
    
        
          
        
      
        
          Uruguay
      

  

        
    
    
    
        
          
        
      
        
          Uzbekistan
      

  

        
    
    
    
        
          
        
      
        
          Vanuatu
      

  

        
    
    
    
        
          
        
      
        
          Vatican City
      

  

        
    
    
    
        
          
        
      
        
          Venezuela
      

  

        
    
    
    
        
          
        
      
        
          Vietnam
      

  

        
    
    
    
        
          
        
      
        
          Virgin Islands, British
      

  

        
    
    
    
        
          
        
      
        
          Virgin Islands, U.S.
      

  

        
    
    
    
        
          
        
      
        
          Wallis and Futuna Islands
      

  

        
    
    
    
        
          
        
      
        
          Yemen
      

  

        
    
    
    
        
          
        
      
        
          Zambia
      

  

        
    
    
    
        
          
        
      
        
          Zimbabwe
      

  

    


            
            
              No results found
            
        
      
  
      
      
        For compliance reasons, we're required to collect country information to send you occasional updates and announcements.
      
    
  
  
    
       Email preferences 
      
        
  
  
    
      Receive occasional product updates and announcements
      
  

      
    
  


        

          
              
    Continue
              
  

          

        
            Verify your account
            
              


  
    
  

  
    
  

  
      
  

  


            

          



        

        
            
    Create account
              
  

        

        
          
  By creating an account, you agree to the
  Terms of Service.
  For more information about GitHub's privacy practices, see the
  GitHub Privacy Statement.
  We'll occasionally send you account-related emails.\n\n\n\nEngineer, open-sourcer, and ride-or-die TypeScripter. I build and maintain Zod, a TypeScript schema validation library with static type inference. I also wrote the initial proof-of-concept for tRPC, though the modern incarnation is entirely built and maintained by @katt.\n\ncolinhacks
                  
  
    
      Follow
    
  

                
              
            

              
              
  
    
    Overview

  
    
    Repositories
    146

  
    
    Projects
    0

    
      
      Packages
      0

  
    
    Stars
    383

    
      
      Sponsoring
      0




  
    
            
        
        More
      

            
        
          
            Overview
          
          
            Repositories
          
          
            Projects
          
            
              Packages
            
          
            Stars
          
            
              Sponsoring
            
        
      




            

    
  


  
  
        
          
            
              
                
              
              
                
                  colinhacks
              
              
                
  
    
      Follow
    
  

              
            
          

          
  
    
        
      

    

    
      
        
          Colin McDonnell
        
        
          colinhacks

        
      
    
  

  

  
    
        
              
                
                
  
    
      Follow
    
  

              
              
                  
    
    
      Sponsor
    
  


              
        


    

    

  I have come here to chew bubblegum and write code. And _InsufficientBubblegumException_


    
      
        
          
          3k
          followers
        ¬∑ 
          55
          following
      
    

  

      
        Seattle, WA



    
      https://colinhacks.com


      

        @colinhacks
      

        @colinhacks.com

  


  

      
    
      Sponsors

      
          
    


          
    


          
    


          
    


          
    


          
    


          
    


          
    


          
    


          
    


          
    


          
    


          
    



          
            
              +62
            
          
      
    



    Achievementsx3x2x3x4Achievementsx3x2x3x4
    
    
      
    Block or Report
  



  
    
  
    
      
        Block or report colinhacks
      
        
    
    
      
    
  
  

      
            
      
          
        

        Block user
        
            Prevent this user from interacting with your repositories and sending you notifications.
          Learn more about blocking users.
        





            
              You must be logged in to block users.
            

          
              
      
        Add an optional note:
    
  
    
      

      
  
  
  

      Please don't include any personal information such as legal names or email addresses. Maximum 100 characters, markdown supported. This note will be visible to only you.



          

        
          Block user
        
    
    
      Report abuse
      
        Contact GitHub support about this user‚Äôs behavior.
        Learn more about reporting abuse.
      
      Report abuse
    

      
      




      

          
          
  
    
    Overview

  
    
    Repositories
    146

  
    
    Projects
    0

    
      
      Packages
      0

  
    
    Stars
    383

    
      
      Sponsoring
      0




  
    
            
        
        More
      

            
        
          
            Overview
          
          
            Repositories
          
          
            Projects
          
            
              Packages
            
          
            Stars
          
            
              Sponsoring
            
        
      




        
      

        
          
    




  
  
    
      
        colinhacks/README.md
      

    
    Engineer, open-sourcer, and ride-or-die TypeScripter. I build and maintain Zod, a TypeScript schema validation library with static type inference. I also wrote the initial proof-of-concept for tRPC, though the modern incarnation is entirely built and maintained by @katt.

  




  
  
      Pinned
    
      Loading

    
  

      
      
  
    
      
        
            
          zod  zod          Public
        
      


      
        TypeScript-first schema validation with static type inference
      

      
          
  
  TypeScript


          
            
            37.4k
          
          
            
            1.4k
          
      
    
  


      
  
    
      
        
            
          trpc/trpc  trpc/trpc          Public
        
      


      
        üßô‚Äç‚ôÄÔ∏è Move Fast and Break Nothing. End-to-end typesafe APIs made easy. 
      

      
          
  
  TypeScript


          
            
            37.1k
          
          
            
            1.4k
          
      
    
  









      
        
          
  
        
        
          Something went wrong, please refresh the page to try again.
          If the problem persists, check the GitHub status page
          or contact support.\n\n\n\nZod
  
  zod.dev
  
    TypeScript-first schema validation with static type inference
  









  Website
  ¬†¬†‚Ä¢¬†¬†
  Discord
  ¬†¬†‚Ä¢¬†¬†
  ùïè
  ¬†¬†‚Ä¢¬†¬†
  Bluesky
  



  Zod 4 is now in beta!
  
  Read the announcement üëâ



Featured sponsor: Fern

  
    
      
      
    
  
  
  Learn more about featured sponsorships




Table of contents

These docs have been translated into Chinese and Korean.


Table of contents
Introduction

Sponsors

Platinum
Gold
Silver
Bronze
Copper


Ecosystem

Resources
API libraries
Form integrations
Zod to X
X to Zod
Mocking
Powered by Zod
Utilities for Zod




Installation

Requirements
From npm


Basic usage
Primitives
Coercion for primitives
Literals
Strings

Datetimes
Dates
Times
IP addresses
IP ranges


Numbers
BigInts
NaNs
Booleans
Dates
Zod enums
Native enums
Optionals
Nullables
Objects

.shape
.keyof
.extend
.merge
.pick/.omit
.partial
.deepPartial
.required
.passthrough
.strict
.strip
.catchall


Arrays

.element
.nonempty
.min/.max/.length


Tuples
Unions
Discriminated unions
Records

Record key type


Maps
Sets
Intersections
Recursive types

ZodType with ZodEffects
JSON type
Cyclical objects


Promises
Instanceof
Functions
Preprocess
Custom schemas
Schema methods

.parse
.parseAsync
.safeParse
.safeParseAsync
.refine

Arguments
Customize error path
Asynchronous refinements
Relationship to transforms


.superRefine

Abort early
Type refinements


.transform

Chaining order
Validating during transform
Relationship to refinements
Async transforms


.default
.describe
.catch
.optional
.nullable
.nullish
.array
.promise
.or
.and
.brand
.readonly
.pipe

You can use .pipe() to fix common issues with z.coerce.




Guides and concepts

Type inference
Writing generic functions

Constraining allowable inputs


Error handling
Error formatting


Comparison

Joi
Yup
io-ts
Runtypes
Ow


Changelog


Introduction
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.
Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
Some other great aspects:

Zero dependencies
Works in Node.js and all modern browsers
Tiny: 8kb minified + zipped
Immutable: methods (e.g. .optional()) return a new instance
Concise, chainable interface
Functional approach: parse, don't validate
Works with plain JavaScript too! You don't need to use TypeScript.


Sponsors
Sponsorship at any level is appreciated and encouraged. If you built a paid product using Zod, consider one of the corporate tiers.

Platinum

  
    
      
      
      
        
          
          
        
      
         
      Cut code review time & bugs in half
      
      coderabbit.ai
      
      
    
  


Gold

  
    
      
      
      
        
          
          
        
      
         
      The API platform for sending notifications
      
      courier.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      Generate better SDKs for your APIs
      
      liblab.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Serverless Postgres ‚Äî Ship faster
      
      neon.tech
      
      
    
    
      
      
      
        
          
          
        
      
         
      Build AI apps and workflows with Retool AI
      
      retool.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Generate best-in-class SDKs
      
      stainless.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      SDKs & Terraform providers for your API
      
      speakeasy.com
      
      
    
  


Silver

  
    
      
      
      Nitric
    
    
      
      
      PropelAuth
    
    
      
      
      Cerbos
    
    
      
      
      Scalar
    
    
    
      
      
      Trigger.dev
    
    
      
      
      Transloadit
    
    
      
      
      Infisical
    
    
      
      
      Whop
    
    
    
      
      
      CryptoJobsList
    
    
      
      
      Plain.
    
    
      
      
      Inngest
    
    
      
      
      Storyblok
    
    
    
      
      
      Mux
    
    
      
      
      Cybozu
    
  


Bronze

  
    
      
        
          
          
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
  


Ecosystem
There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it on Twitter or start a Discussion. I'll add it below and tweet it out.
Resources

Total TypeScript Zod Tutorial by @mattpocockuk
Fixing TypeScript's Blindspot: Runtime Typechecking by @jherr

API libraries

tRPC: Build end-to-end typesafe APIs without GraphQL.
@anatine/zod-nestjs: Helper methods for using Zod in a NestJS project.
zod-endpoints: Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
zhttp: An OpenAPI compatible, strictly typed http library with Zod input and response validation.
domain-functions: Decouple your business logic from your framework using composable functions. With first-class type inference from end to end powered by Zod schemas.
@zodios/core: A typescript API client with runtime and compile time validation backed by axios and zod.
express-zod-api: Build Express-based APIs with I/O schema validation and custom middlewares.
tapiduck: End-to-end typesafe JSON APIs with Zod and Express; a bit like tRPC, but simpler.
koa-zod-router: Create typesafe routes in Koa with I/O validation using Zod.
zod-sockets: Zod-powered Socket.IO microframework with I/O validation and built-in AsyncAPI specs
oas-tszod-gen: Client SDK code generator to convert OpenApi v3 specifications into TS endpoint caller functions with Zod types.
GQLoom: Weave GraphQL schema and resolvers using Zod.
oRPC: Typesafe APIs Made Simple

Form integrations

react-hook-form: A first-party Zod resolver for React Hook Form.
TanStack Form: Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit
zod-validation-error: Generate user-friendly error messages from ZodErrors.
zod-formik-adapter: A community-maintained Formik adapter for Zod.
react-zorm: Standalone <form> generation and validation for React using Zod.
zodix: Zod utilities for FormData and URLSearchParams in Remix loaders and actions.
conform: A typesafe form validation library for progressive enhancement of HTML forms. Works with Remix and Next.js.
remix-params-helper: Simplify integration of Zod with standard URLSearchParams and FormData for Remix apps.
formik-validator-zod: Formik-compliant validator library that simplifies using Zod with Formik.
zod-i18n-map: Useful for translating Zod error messages.
@modular-forms/solid: Modular form library for SolidJS that supports Zod for validation.
houseform: A React form library that uses Zod for validation.
sveltekit-superforms: Supercharged form library for SvelteKit with Zod validation.
mobx-zod-form: Data-first form builder based on MobX & Zod.
@vee-validate/zod: Form library for Vue.js with Zod schema validation.
zod-form-renderer: Auto-infer form fields from zod schema and render them with react-hook-form with E2E type safety.
antd-zod: Zod adapter for Ant Design form fields validation.
frrm: Tiny 0.5kb Zod-based, HTML form abstraction that goes brr.

Zod to X

zod-to-ts: Generate TypeScript definitions from Zod schemas.
zod-to-json-schema: Convert your Zod schemas into JSON Schemas.
@anatine/zod-openapi: Converts a Zod schema to an OpenAPI v3.x SchemaObject.
zod-fast-check: Generate fast-check arbitraries from Zod schemas.
zod-dto: Generate Nest.js DTOs from a Zod schema.
fastify-type-provider-zod: Create Fastify type providers from Zod schemas.
zod-to-openapi: Generate full OpenAPI (Swagger) docs from Zod, including schemas, endpoints & parameters.
nestjs-graphql-zod: Generates NestJS GraphQL model classes from Zod schemas. Provides GraphQL method decorators working with Zod schemas.
zod-openapi: Create full OpenAPI v3.x documentation from Zod schemas.
fastify-zod-openapi: Fastify type provider, validation, serialization and @fastify/swagger support for Zod schemas.
typeschema: Universal adapter for schema validation.
zodex: (De)serialization for zod schemas

X to Zod

ts-to-zod: Convert TypeScript definitions into Zod schemas.
@runtyping/zod: Generate Zod from static types & JSON schema.
json-schema-to-zod: Convert your JSON Schemas into Zod schemas. Live demo.
json-to-zod: Convert JSON objects into Zod schemas. Live demo.
graphql-codegen-typescript-validation-schema: GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema.
zod-prisma: Generate Zod schemas from your Prisma schema.
Supervillain: Generate Zod schemas from your Go structs.
prisma-zod-generator: Emit Zod schemas from your Prisma schema.
drizzle-zod: Emit Zod schemas from your Drizzle schema.
prisma-trpc-generator: Emit fully implemented tRPC routers and their validation schemas using Zod.
zod-prisma-types Create Zod types from your Prisma models.
quicktype: Convert JSON objects and JSON schemas into Zod schemas.
@sanity-typed/zod: Generate Zod Schemas from Sanity Schemas.
java-to-zod: Convert POJOs to Zod schemas
Orval: Generate Zod schemas from OpenAPI schemas
Kubb: Generate SDKs and Zod schemas from your OpenAPI schemas

Mocking

@anatine/zod-mock: Generate mock data from a Zod schema. Powered by faker.js.
zod-mocking: Generate mock data from your Zod schemas.
zod-fixture: Use your zod schemas to automate the generation of non-relevant test fixtures in a deterministic way.
zocker: Generate plausible mock-data from your schemas.
zodock Generate mock data based on Zod schemas.
zod-schema-faker Generates mock data from Zod schemas. Powered by @faker-js/faker and randexp.js

Powered by Zod

freerstore: Firestore cost optimizer.
slonik: Node.js Postgres client with strong Zod integration.
schemql: Enhances your SQL workflow by combining raw SQL with targeted type safety and schema validation.
soly: Create CLI applications with zod.
pastel: Create CLI applications with react, zod, and ink.
zod-xlsx: A xlsx based resource validator using Zod schemas.
znv: Type-safe environment parsing and validation for Node.js with Zod schemas.
zod-config: Load configurations across multiple sources with flexible adapters, ensuring type safety with Zod.
unplugin-environment: A plugin for loading enviroment variables safely with schema validation, simple with virtual module, type-safe with intellisense, and better DX üî• üöÄ üë∑. Powered by Zod.
zod-struct: Create runtime-checked structs with Zod.
zod-csv: Validation helpers for zod for parsing CSV data.
fullproduct.dev: Universal Expo + Next.js App Starter that uses Zod schemas as the single source of truth to keep generated MDX docs, GraphQL, database models, forms, and fetcher functions in sync.

Utilities for Zod

zod_utilz: Framework agnostic utilities for Zod.
zod-playground: A tool for learning and testing Zod schema validation functionalities. Link.
zod-sandbox: Controlled environment for testing zod schemas. Live demo.
zod-dev: Conditionally disables Zod runtime parsing in production.
zod-accelerator: Accelerates Zod's throughput up to ~100x.


Installation
Requirements


TypeScript 4.5+!


You must enable strict mode in your tsconfig.json. This is a best practice for all TypeScript projects.
// tsconfig.json
{
  // ...
  "compilerOptions": {
    // ...
    "strict": true
  }
}


From npm
npm install zod       # npm
deno add npm:zod      # deno
yarn add zod          # yarn
bun add zod           # bun
pnpm add zod          # pnpm
Zod also publishes a canary version on every commit. To install the canary:
npm install zod@canary       # npm
deno add npm:zod@canary      # deno
yarn add zod@canary          # yarn
bun add zod@canary           # bun
pnpm add zod@canary          # pnpm

The rest of this README assumes you are using npm and importing directly from the "zod" package.


Basic usage
Creating a simple string schema
import { z } from "zod";

// creating a schema for strings
const mySchema = z.string();

// parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError

// "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
Creating an object schema
import { z } from "zod";

const User = z.object({
  username: z.string(),
});

User.parse({ username: "Ludwig" });

// extract the inferred type
type User = z.infer<typeof User>;
// { username: string }

Primitives
import { z } from "zod";

// primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol();

// empty types
z.undefined();
z.null();
z.void(); // accepts undefined

// catch-all types
// allows any value
z.any();
z.unknown();

// never type
// allows no values
z.never();

Coercion for primitives
Zod now provides a more convenient way to coerce primitive values.
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
During the parsing step, the input is passed through the String() function, which is a JavaScript built-in for coercing data into strings.
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
The returned schema is a normal ZodString instance so you can use all string methods.
z.coerce.string().email().min(5);
How coercion works
All primitive types support coercion. Zod coerces all inputs using the built-in constructors: String(input), Number(input), new Date(input), etc.
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
Note ‚Äî¬†Boolean coercion with z.coerce.boolean() may not work how you expect. Any truthy value is coerced to true, and any falsy value is coerced to false.
const schema = z.coerce.boolean(); // Boolean(input)

schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true

schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
For more control over coercion logic, consider using z.preprocess or z.pipe().

Literals
Literal schemas represent a literal type, like "hello world" or 5.
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true);

const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol);

// retrieve literal value
tuna.value; // "tuna"

Currently there is no support for Date literals in Zod. If you have a use case for this feature, please file an issue.


Strings
Zod includes a handful of string-specific validations.
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6

// transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase

// added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS])
z.string().duration(); // ISO 8601 duration
z.string().base64();

Check out validator.js for a bunch of other useful string validation functions that can be used in conjunction with Refinements.

You can customize some common error messages when creating a string schema.
const name = z.string({
  required_error: "Name is required",
  invalid_type_error: "Name must be a string",
});
When using validation methods, you can pass in an additional argument to provide a custom error message.
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
Datetimes
As you may have noticed, Zod string includes a few date/time related validations. These validations are regular expression based, so they are not as strict as a full date/time library. However, they are very convenient for validating user input.
The z.string().datetime() method enforces ISO 8601; default is no timezone offsets and arbitrary sub-second decimal precision.
const datetime = z.string().datetime();

datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
Timezone offsets can be allowed by setting the offset option to true.
const datetime = z.string().datetime({ offset: true });

datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
Allow unqualified (timezone-less) datetimes with the local flag.
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
You can additionally constrain the allowable precision. By default, arbitrary sub-second precision is supported (but optional).
const datetime = z.string().datetime({ precision: 3 });

datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
Dates

Added in Zod 3.23

The z.string().date() method validates strings in the format YYYY-MM-DD.
const date = z.string().date();

date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
Times

Added in Zod 3.23

The z.string().time() method validates strings in the format HH:MM:SS[.s+]. The second can include arbitrary decimal precision. It does not allow timezone offsets of any kind.
const time = z.string().time();

time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision)

time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
You can set the precision option to constrain the allowable decimal precision.
const time = z.string().time({ precision: 3 });

time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
IP addresses
By default .ip() allows both IPv4 and IPv6.
const ip = z.string().ip();

ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass

ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
You can additionally set the IP version.
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
IP ranges (CIDR)
Validate IP address ranges specified with CIDR notation. By default, .cidr() allows both IPv4 and IPv6.
const cidr = z.string().cidr();
cidr.parse("192.168.0.0/24"); // pass
cidr.parse("2001:db8::/32"); // pass
You can specify a version with the version parameter.
const ipv4Cidr = z.string().cidr({ version: "v4" });
ipv4Cidr.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6Cidr = z.string().cidr({ version: "v6" });
ipv6Cidr.parse("192.168.1.1"); // fail

Numbers
You can customize certain error messages when creating a number schema.
const age = z.number({
  required_error: "Age is required",
  invalid_type_error: "Age must be a number",
});
Zod includes a handful of number-specific validations.
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)

z.number().int(); // value must be an integer

z.number().positive(); //     > 0
z.number().nonnegative(); //  >= 0
z.number().negative(); //     < 0
z.number().nonpositive(); //  <= 0

z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)

z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
Optionally, you can pass in a second argument to provide a custom error message.
z.number().lte(5, { message: "thisüëèisüëètooüëèbig" });

BigInts
Zod includes a handful of bigint-specific validations.
z.bigint().gt(5n);
z.bigint().gte(5n); // alias `.min(5n)`
z.bigint().lt(5n);
z.bigint().lte(5n); // alias `.max(5n)`

z.bigint().positive(); // > 0n
z.bigint().nonnegative(); // >= 0n
z.bigint().negative(); // < 0n
z.bigint().nonpositive(); // <= 0n

z.bigint().multipleOf(5n); // Evenly divisible by 5n.

NaNs
You can customize certain error messages when creating a nan schema.
const isNaN = z.nan({
  required_error: "isNaN is required",
  invalid_type_error: "isNaN must be 'not a number'",
});

Booleans
You can customize certain error messages when creating a boolean schema.
const isActive = z.boolean({
  required_error: "isActive is required",
  invalid_type_error: "isActive must be a boolean",
});

Dates
Use z.date() to validate Date instances.
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
You can customize certain error messages when creating a date schema.
const myDateSchema = z.date({
  required_error: "Please select a date and time",
  invalid_type_error: "That's not a date!",
});
Zod provides a handful of date-specific validations.
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
Coercion to Date
Since zod 3.20, use z.coerce.date() to pass the input through new Date(input).
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date

/* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true

/* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
For older zod versions, use z.preprocess like described in this thread.

Zod enums
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
z.enum is a Zod-native way to declare a schema with a fixed set of allowable string values. Pass the array of values directly into z.enum(). Alternatively, use as const to define your enum values as a tuple of strings. See the const assertion docs for details.
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
This is not allowed, since Zod isn't able to infer the exact values of each element.
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
.enum
To get autocompletion with a Zod enum, use the .enum property of your schema:
FishEnum.enum.Salmon; // => autocompletes

FishEnum.enum;
/*
=> {
  Salmon: "Salmon",
  Tuna: "Tuna",
  Trout: "Trout",
}
*/
You can also retrieve the list of options as a tuple with the .options property:
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
.exclude/.extract()
You can create subsets of a Zod enum with the .exclude and .extract methods.
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);

Native enums
Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use z.nativeEnum().
Numeric enums
enum Fruits {
  Apple,
  Banana,
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
String enums
enum Fruits {
  Apple = "apple",
  Banana = "banana",
  Cantaloupe, // you can mix numerical and string enums
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Cantaloupe); // passes
FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse("Cantaloupe"); // fails
Const enums
The .nativeEnum() function works for as const objects as well. ‚ö†Ô∏è as const requires TypeScript 3.4+!
const Fruits = {
  Apple: "apple",
  Banana: "banana",
  Cantaloupe: 3,
} as const;

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3

FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
You can access the underlying object with the .enum property:
FruitEnum.enum.Apple; // "apple"

Optionals
You can make any schema optional with z.optional(). This wraps the schema in a ZodOptional instance and returns the result.
const schema = z.optional(z.string());

schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
For convenience, you can also call the .optional() method on an existing schema.
const user = z.object({
  username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
You can extract the wrapped schema from a ZodOptional instance with .unwrap().
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true

Nullables
Similarly, you can create nullable types with z.nullable().
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
Or use the .nullable() method.
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
Extract the inner schema with .unwrap().
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true

Objects
// all properties are required by default
const Dog = z.object({
  name: z.string(),
  age: z.number(),
});

// extract the inferred type like this
type Dog = z.infer<typeof Dog>;

// equivalent to:
type Dog = {
  name: string;
  age: number;
};
.shape
Use .shape to access the schemas for a particular key.
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
.keyof
Use .keyof to create a ZodEnum schema from the keys of an object schema.
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
.extend
You can add additional fields to an object schema with the .extend method.
const DogWithBreed = Dog.extend({
  breed: z.string(),
});
You can use .extend to overwrite fields! Be careful with this power!
.merge
Equivalent to A.extend(B.shape).
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() });

const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }

If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.

.pick/.omit
Inspired by TypeScript's built-in Pick and Omit utility types, all Zod object schemas have .pick and .omit methods that return a modified version. Consider this Recipe schema:
const Recipe = z.object({
  id: z.string(),
  name: z.string(),
  ingredients: z.array(z.string()),
});
To only keep certain keys, use .pick .
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
To remove certain keys, use .omit .
const NoIDRecipe = Recipe.omit({ id: true });

type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
.partial
Inspired by the built-in TypeScript utility type Partial, the .partial method makes all properties optional.
Starting from this object:
const user = z.object({
  email: z.string(),
  username: z.string(),
});
// { email: string; username: string }
We can create a partial version:
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
You can also specify which properties to make optional:
const optionalEmail = user.partial({
  email: true,
});
/*
{
  email?: string | undefined;
  username: string
}
*/
.deepPartial
The .partial method is shallow ‚Äî it only applies one level deep. There is also a "deep" version:
const user = z.object({
  username: z.string(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  strings: z.array(z.object({ value: z.string() })),
});

const deepPartialUser = user.deepPartial();

/*
{
  username?: string | undefined,
  location?: {
    latitude?: number | undefined;
    longitude?: number | undefined;
  } | undefined,
  strings?: { value?: string}[]
}
*/

Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.

.required
Contrary to the .partial method, the .required method makes all properties required.
Starting from this object:
const user = z
  .object({
    email: z.string(),
    username: z.string(),
  })
  .partial();
// { email?: string | undefined; username?: string | undefined }
We can create a required version:
const requiredUser = user.required();
// { email: string; username: string }
You can also specify which properties to make required:
const requiredEmail = user.required({
  email: true,
});
/*
{
  email: string;
  username?: string | undefined;
}
*/
.passthrough
By default Zod object schemas strip out unrecognized keys during parsing.
const person = z.object({
  name: z.string(),
});

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
Instead, if you want to pass through unknown keys, use .passthrough() .
person.passthrough().parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
.strict
By default Zod object schemas strip out unrecognized keys during parsing. You can disallow unknown keys with .strict() . If there are any unknown keys in the input, Zod will throw an error.
const person = z
  .object({
    name: z.string(),
  })
  .strict();

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => throws ZodError
.strip
You can use the .strip method to reset an object schema to the default behavior (stripping unrecognized keys).
.catchall
You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
const person = z
  .object({
    name: z.string(),
  })
  .catchall(z.number());

person.parse({
  name: "bob dylan",
  validExtraKey: 61, // works fine
});

person.parse({
  name: "bob dylan",
  validExtraKey: false, // fails
});
// => throws ZodError
Using .catchall() obviates .passthrough() , .strip() , or .strict(). All keys are now considered "known".

Arrays
const stringArray = z.array(z.string());

// equivalent
const stringArray = z.string().array();
Be careful with the .array() method. It returns a new ZodArray instance. This means the order in which you call methods matters. For instance:
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
.element
Use .element to access the schema for an element of the array.
stringArray.element; // => string schema
.nonempty
If you want to ensure that an array contains at least one element, use .nonempty().
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]]

nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
You can optionally specify a custom error message:
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({
  message: "Can't be empty!",
});
.min/.max/.length
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
Unlike .nonempty() these methods do not change the inferred type.

Tuples
Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
const athleteSchema = z.tuple([
  z.string(), // name
  z.number(), // jersey number
  z.object({
    pointsScored: z.number(),
  }), // statistics
]);

type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
A variadic ("rest") argument can be added with the .rest method.
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];

Unions
Zod includes a built-in z.union method for composing "OR" types.
const stringOrNumber = z.union([z.string(), z.number()]);

stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
Zod will test the input against each of the "options" in order and return the first value that validates successfully.
For convenience, you can also use the .or method:
const stringOrNumber = z.string().or(z.number());
Optional string validation:
To validate an optional form input, you can union the desired string validation with an empty string literal.
This example validates an input that is optional but needs to contain a valid URL:
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]);

console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false

Discriminated unions
A discriminated union is a union of object schemas that all share a particular key.
type MyUnion =
  | { status: "success"; data: string }
  | { status: "failed"; error: Error };
Such unions can be represented with the z.discriminatedUnion method. This enables faster evaluation, because Zod can check the discriminator key (status in the example above) to determine which schema should be used to parse the input. This makes parsing more efficient and lets Zod report friendlier errors.
With the basic union method, the input is tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing against it, and showing only the issues related to this "option".
const myUnion = z.discriminatedUnion("status", [
  z.object({ status: z.literal("success"), data: z.string() }),
  z.object({ status: z.literal("failed"), error: z.instanceof(Error) }),
]);

myUnion.parse({ status: "success", data: "yippie ki yay" });
You can extract a reference to the array of schemas with the .options property.
myUnion.options; // [ZodObject<...>, ZodObject<...>]
To merge two or more discriminated unions, use .options with destructuring.
const A = z.discriminatedUnion("status", [
  /* options */
]);
const B = z.discriminatedUnion("status", [
  /* options */
]);

const AB = z.discriminatedUnion("status", [...A.options, ...B.options]);

Records
Record schemas are used to validate types such as Record<string, number>. This is particularly useful for storing or caching items by ID.

const User = z.object({ name: z.string() });

const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
The schema and inferred type can be used like so:
const userStore: UserStore = {};

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  name: "Carlotta",
}; // passes

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  whatever: "Ice cream sundae",
}; // TypeError
A note on numerical keys
While z.record(keyType, valueType) is able to accept numerical key types and TypeScript's built-in Record type is Record<KeyType, ValueType>, it's hard to represent the TypeScript type Record<number, any> in Zod.
As it turns out, TypeScript's behavior surrounding [k: number] is a little unintuitive:
const testMap: { [k: number]: string } = {
  1: "one",
};

for (const key in testMap) {
  console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.

Maps
const stringNumberMap = z.map(z.string(), z.number());

type StringNumberMap = z.infer<typeof stringNumberMap>;
// type StringNumberMap = Map<string, number>

Sets
const numberSet = z.set(z.number());
type NumberSet = z.infer<typeof numberSet>;
// type NumberSet = Set<number>
Set schemas can be further constrained with the following utility methods.
z.set(z.string()).nonempty(); // must contain at least one item
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly

Intersections
Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
const Person = z.object({
  name: z.string(),
});

const Employee = z.object({
  role: z.string(),
});

const EmployedPerson = z.intersection(Person, Employee);

// equivalent to:
const EmployedPerson = Person.and(Employee);
Though in many cases, it is recommended to use A.merge(B) to merge two objects. The .merge method returns a new ZodObject instance, whereas A.and(B) returns a less useful ZodIntersection instance that lacks common object methods like pick and omit.
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b);

type c = z.infer<typeof c>; // => number



Recursive types
You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
const baseCategorySchema = z.object({
  name: z.string(),
});

type Category = z.infer<typeof baseCategorySchema> & {
  subcategories: Category[];
};

const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
  subcategories: z.lazy(() => categorySchema.array()),
});

categorySchema.parse({
  name: "People",
  subcategories: [
    {
      name: "Politicians",
      subcategories: [
        {
          name: "Presidents",
          subcategories: [],
        },
      ],
    },
  ],
}); // passes
Thanks to crasite for this example.
ZodType with ZodEffects
When using z.ZodType with z.ZodEffects (
.refine,
.transform,
preprocess,
etc...
), you will need to define the input and output types of the schema. z.ZodType<Output, z.ZodTypeDef, Input>
const isValidId = (id: string): id is `${string}/${string}` =>
  id.split("/").length === 2;

const baseSchema = z.object({
  id: z.string().refine(isValidId),
});

type Input = z.input<typeof baseSchema> & {
  children: Input[];
};

type Output = z.output<typeof baseSchema> & {
  children: Output[];
};

const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({
  children: z.lazy(() => schema.array()),
});
Thanks to marcus13371337 and JoelBeeldi for this example.
JSON type
If you want to validate any JSON value, you can use the snippet below.
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
);

jsonSchema.parse(data);
Thanks to ggoodman for suggesting this.
Cyclical objects
Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop in some cases.

To detect cyclical objects before they cause problems, consider this approach.


Promises
const numberPromise = z.promise(z.number());
"Parsing" works a little differently with promise schemas. Validation happens in two parts:

Zod synchronously checks that the input is an instance of Promise (i.e. an object with .then and .catch methods.).
Zod uses .then to attach an additional validation step onto the existing Promise. You'll have to use .catch on the returned Promise to handle validation failures.

numberPromise.parse("tuna");
// ZodError: Non-Promise type: string

numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number>

const test = async () => {
  await numberPromise.parse(Promise.resolve("tuna"));
  // ZodError: Non-number type: string

  await numberPromise.parse(Promise.resolve(3.14));
  // => 3.14
};


Instanceof
You can use z.instanceof to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
class Test {
  name: string;
}

const TestSchema = z.instanceof(Test);

const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws

Functions
Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
You can create a function schema with z.function(args, returnType) .
const myFunction = z.function();

type myFunction = z.infer<typeof myFunction>;
// => ()=>unknown
Define inputs and outputs.
const myFunction = z
  .function()
  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
  .returns(z.boolean());

type myFunction = z.infer<typeof myFunction>;
// => (arg0: string, arg1: number)=>boolean

Function schemas have an .implement() method which accepts a function and returns a new function that automatically validates its inputs and outputs.
const trimmedLength = z
  .function()
  .args(z.string()) // accepts an arbitrary number of arguments
  .returns(z.number())
  .implement((x) => {
    // TypeScript knows x is a string!
    return x.trim().length;
  });

trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
If you only care about validating inputs, just don't call the .returns() method. The output type will be inferred from the implementation.

You can use the special z.void() option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)

const myFunction = z
  .function()
  .args(z.string())
  .implement((arg) => {
    return [arg.length];
  });

myFunction; // (arg: string)=>number[]
Extract the input and output schemas from a function schema.
myFunction.parameters();
// => ZodTuple<[ZodString, ZodNumber]>

myFunction.returnType();
// => ZodBoolean


Preprocess

Zod now supports primitive coercion without the need for .preprocess(). See the coercion docs for more information.

Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the .transform docs.)
But sometimes you want to apply some transform to the input before parsing happens. A common use case: type coercion. Zod enables this with the z.preprocess().
const castToString = z.preprocess((val) => String(val), z.string());
This returns a ZodEffects instance. ZodEffects is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.

Custom schemas
You can create a Zod schema for any TypeScript type by using z.custom(). This is useful for creating schemas for types that are not supported by Zod out of the box, such as template string literals.
const px = z.custom<`${number}px`>((val) => {
  return typeof val === "string" ? /^\d+px$/.test(val) : false;
});

type px = z.infer<typeof px>; // `${number}px`

px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
If you don't provide a validation function, Zod will allow any value. This can be dangerous!
z.custom<{ arg: string }>(); // performs no validation
You can customize the error message and other options by passing a second argument. This parameter works the same way as the params parameter of .refine.
z.custom<...>((val) => ..., "custom error message");

Schema methods
All Zod schemas contain certain methods.
.parse
.parse(data: unknown): T
Given any Zod schema, you can call its .parse method to check data is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.

IMPORTANT: The value returned by .parse is a deep clone of the variable you passed in.

const stringSchema = z.string();

stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
.parseAsync
.parseAsync(data:unknown): Promise<T>
If you use asynchronous refinements or transforms (more on those later), you'll need to use .parseAsync.
const stringSchema = z.string().refine(async (val) => val.length <= 8);

await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
.safeParse
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
If you don't want Zod to throw errors when validation fails, use .safeParse. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
stringSchema.safeParse(12);
// => { success: false; error: ZodError }

stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
The result is a discriminated union, so you can handle errors very conveniently:
const result = stringSchema.safeParse("billie");
if (!result.success) {
  // handle error then return
  result.error;
} else {
  // do something
  result.data;
}
.safeParseAsync

Alias: .spa

An asynchronous version of safeParse.
await stringSchema.safeParseAsync("billie");
For convenience, this has been aliased to .spa:
await stringSchema.spa("billie");
.refine
.refine(validator: (data:T)=>any, params?: RefineParams)
Zod lets you provide custom validation logic via refinements. (For advanced features like creating multiple issues and customizing error codes, see .superRefine.)
Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
For example, you can define a custom validation check on any Zod schema with .refine :
const myString = z.string().refine((val) => val.length <= 255, {
  message: "String can't be more than 255 characters",
});

‚ö†Ô∏è Refinement functions should not throw. Instead they should return a falsy value to signal failure.

Arguments
As you can see, .refine takes two arguments.

The first is the validation function. This function takes one input (of type T ‚Äî the inferred type of the schema) and returns any. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
The second argument accepts some options. You can use this to customize certain error-handling behavior:

type RefineParams = {
  // override error message
  message?: string;

  // appended to error path
  path?: (string | number)[];

  // params object you can use to customize message
  // in error map
  params?: object;
};
For advanced cases, the second argument can also be a function that returns RefineParams.
const longString = z.string().refine(
  (val) => val.length > 10,
  (val) => ({ message: `${val} is not more than 10 characters` })
);
Customize error path
const passwordForm = z
  .object({
    password: z.string(),
    confirm: z.string(),
  })
  .refine((data) => data.password === data.confirm, {
    message: "Passwords don't match",
    path: ["confirm"], // path of error
  });

passwordForm.parse({ password: "asdf", confirm: "qwer" });
Because you provided a path parameter, the resulting error will be:
ZodError {
  issues: [{
    "code": "custom",
    "path": [ "confirm" ],
    "message": "Passwords don't match"
  }]
}
Asynchronous refinements
Refinements can also be async:
const userId = z.string().refine(async (id) => {
  // verify that ID exists in database
  return true;
});

‚ö†Ô∏è If you use async refinements, you must use the .parseAsync method to parse data! Otherwise Zod will throw an error.

Relationship to transforms
Transforms and refinements can be interleaved:
z.string()
  .transform((val) => val.length)
  .refine((val) => val > 25);

.superRefine
The .refine method is actually syntactic sugar atop a more versatile (and verbose) method called superRefine. Here's an example:
const Strings = z.array(z.string()).superRefine((val, ctx) => {
  if (val.length > 3) {
    ctx.addIssue({
      code: z.ZodIssueCode.too_big,
      maximum: 3,
      type: "array",
      inclusive: true,
      message: "Too many items üò°",
    });
  }

  if (val.length !== new Set(val).size) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: `No duplicates allowed.`,
    });
  }
});
You can add as many issues as you like. If ctx.addIssue is not called during the execution of the function, validation passes.
Normally refinements always create issues with a ZodIssueCode.custom error code, but with superRefine it's possible to throw issues of any ZodIssueCode. Each issue code is described in detail in the Error Handling guide: ERROR_HANDLING.md.
Abort early
By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to abort early to prevent later refinements from being executed. To achieve this, pass the fatal flag to ctx.addIssue and return z.NEVER.
const schema = z.number().superRefine((val, ctx) => {
  if (val < 10) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be >= 10",
      fatal: true,
    });

    return z.NEVER;
  }

  if (val !== 12) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be twelve",
    });
  }
});
Type refinements
If you provide a type predicate to .refine() or .superRefine(), the resulting type will be narrowed down to your predicate's type. This is useful if you are mixing multiple chained refinements and transformations:
const schema = z
  .object({
    first: z.string(),
    second: z.number(),
  })
  .nullable()
  .superRefine((arg, ctx): arg is { first: string; second: number } => {
    if (!arg) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom, // customize your issue
        message: "object should exist",
      });
    }

    return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing
  })
  // here, TS knows that arg is not null
  .refine((arg) => arg.first === "bob", "`first` is not `bob`!");

‚ö†Ô∏è You must use ctx.addIssue() instead of returning a boolean value to indicate whether the validation passes. If ctx.addIssue is not called during the execution of the function, validation passes.

.transform
To transform data after parsing, use the transform method.
const stringToNumber = z.string().transform((val) => val.length);

stringToNumber.parse("string"); // => 6
Chaining order
Note that stringToNumber above is an instance of the ZodEffects subclass. It is NOT an instance of ZodString. If you want to use the built-in methods of ZodString (e.g. .email()) you must apply those methods before any transforms.
const emailToDomain = z
  .string()
  .email()
  .transform((val) => val.split("@")[1]);

emailToDomain.parse("colinhacks@example.com"); // => example.com
Validating during transform
The .transform method can simultaneously validate and transform the value. This is often simpler and less duplicative than chaining transform and refine.
As with .superRefine, the transform function receives a ctx object with an addIssue method that can be used to register validation issues.
const numberInString = z.string().transform((val, ctx) => {
  const parsed = parseInt(val);
  if (isNaN(parsed)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Not a number",
    });

    // This is a special symbol you can use to
    // return early from the transform function.
    // It has type `never` so it does not affect the
    // inferred return type.
    return z.NEVER;
  }
  return parsed;
});
Relationship to refinements
Transforms and refinements can be interleaved. These will be executed in the order they are declared.
const nameToGreeting = z
  .string()
  .transform((val) => val.toUpperCase())
  .refine((val) => val.length > 15)
  .transform((val) => `Hello ${val}`)
  .refine((val) => val.indexOf("!") === -1);
Async transforms
Transforms can also be async.
const IdToUser = z
  .string()
  .uuid()
  .transform(async (id) => {
    return await getUserById(id);
  });

‚ö†Ô∏è If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.

.default
You can use transforms to implement the concept of "default values" in Zod.
const stringWithDefault = z.string().default("tuna");

stringWithDefault.parse(undefined); // => "tuna"
Optionally, you can pass a function into .default that will be re-executed whenever a default value needs to be generated:
const numberWithRandomDefault = z.number().default(Math.random);

numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
Conceptually, this is how Zod processes default values:

If the input is undefined, the default value is returned
Otherwise, the data is parsed using the base schema

.describe
Use .describe() to add a description property to the resulting schema.
const documentedString = z
  .string()
  .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text‚Ä¶
This can be useful for documenting a field, for example in a JSON Schema using a library like zod-to-json-schema).
.catch
Use .catch() to provide a "catch value" to be returned in the event of a parsing error.
const numberWithCatch = z.number().catch(42);

numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
Optionally, you can pass a function into .catch that will be re-executed whenever a default value needs to be generated. A ctx object containing the caught error will be passed into this function.
const numberWithRandomCatch = z.number().catch((ctx) => {
  ctx.error; // the caught ZodError
  return Math.random();
});

numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
Conceptually, this is how Zod processes "catch values":

The data is parsed using the base schema
If the parsing fails, the "catch value" is returned

.optional
A convenience method that returns an optional version of a schema.
const optionalString = z.string().optional(); // string | undefined

// equivalent to
z.optional(z.string());
.nullable
A convenience method that returns a nullable version of a schema.
const nullableString = z.string().nullable(); // string | null

// equivalent to
z.nullable(z.string());
.nullish
A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both undefined and null. Read more about the concept of "nullish" in the TypeScript 3.7 release notes.
const nullishString = z.string().nullish(); // string | null | undefined

// equivalent to
z.string().nullable().optional();
.array
A convenience method that returns an array schema for the given type:
const stringArray = z.string().array(); // string[]

// equivalent to
z.array(z.string());
.promise
A convenience method for promise types:
const stringPromise = z.string().promise(); // Promise<string>

// equivalent to
z.promise(z.string());
.or
A convenience method for union types.
const stringOrNumber = z.string().or(z.number()); // string | number

// equivalent to
z.union([z.string(), z.number()]);
.and
A convenience method for creating intersection types.
const nameAndAge = z
  .object({ name: z.string() })
  .and(z.object({ age: z.number() })); // { name: string } & { age: number }

// equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
.brand
.brand<T>() => ZodBranded<this, B>
TypeScript's type system is structural, which means that any two types that are structurally equivalent are considered the same.
type Cat = { name: string };
type Dog = { name: string };

const petCat = (cat: Cat) => {};
const fido: Dog = { name: "fido" };
petCat(fido); // works fine
In some cases, its can be desirable to simulate nominal typing inside TypeScript. For instance, you may wish to write a function that only accepts an input that has been validated by Zod. This can be achieved with branded types (AKA opaque types).
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;

const petCat = (cat: Cat) => {};

// this works
const simba = Cat.parse({ name: "simba" });
petCat(simba);

// this doesn't
petCat({ name: "fido" });
Under the hood, this works by attaching a "brand" to the inferred type using an intersection type. This way, plain/unbranded data structures are no longer assignable to the inferred type of the schema.
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;
// {name: string} & {[symbol]: "Cat"}
Note that branded types do not affect the runtime result of .parse. It is a static-only construct.
.readonly
.readonly() => ZodReadonly<this>
This method returns a ZodReadonly schema instance that parses the input using the base schema, then calls Object.freeze() on the result. The inferred type is also marked as readonly.
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}>

const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
The inferred type uses TypeScript's built-in readonly types when relevant.
z.array(z.string()).readonly();
// readonly string[]

z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number]

z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date>

z.set(z.string()).readonly();
// ReadonlySet<string>
.pipe
Schemas can be chained into validation "pipelines". It's useful for easily validating the result after a .transform():
z.string()
  .transform((val) => val.length)
  .pipe(z.number().min(5));
The .pipe() method returns a ZodPipeline instance.

Guides and concepts
Type inference
You can extract the TypeScript type of any schema with z.infer<typeof mySchema> .
const A = z.string();
type A = z.infer<typeof A>; // string

const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
What about transforms?
In reality each Zod schema internally tracks two types: an input and an output. For most schemas (e.g. z.string()) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance z.string().transform(val => val.length) has an input of string and an output of number.
You can separately extract the input and output types like so:
const stringToNumber = z.string().transform((val) => val.length);

// ‚ö†Ô∏è Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
Writing generic functions
With TypeScript generics, you can write reusable functions that accept Zod schemas as parameters. This enables you to create custom validation logic, schema transformations, and more, while maintaining type safety and inference.
When attempting to write a function that accepts a Zod schema as an input, it's tempting to try something like this:
function inferSchema<T>(schema: z.ZodType<T>) {
  return schema;
}
This approach is incorrect, and limits TypeScript's ability to properly infer the argument. No matter what you pass in, the type of schema will be an instance of ZodType.
inferSchema(z.string());
// => ZodType<string>
This approach loses type information, namely which subclass the input actually is (in this case, ZodString). That means you can't call any string-specific methods like .min() on the result of inferSchema.
A better approach is to infer the schema as a whole instead of merely its inferred type. You can do this with a utility type called z.ZodTypeAny.
function inferSchema<T extends z.ZodTypeAny>(schema: T) {
  return schema;
}

inferSchema(z.string());
// => ZodString

ZodTypeAny is just a shorthand for ZodType<any, any, any>, a type that is broad enough to match any Zod schema.

The Result is now fully and properly typed, and the type system can infer the specific subclass of the schema.
Inferring the inferred type
If you follow the best practice of using z.ZodTypeAny as the generic parameter for your schema, you may encounter issues with the parsed data being typed as any instead of the inferred type of the schema.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data);
}

parseData("sup", z.string());
// => any
Due to how TypeScript inference works, it is treating schema like a ZodTypeAny instead of the inferred type. You can fix this with a type cast using z.infer.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data) as z.infer<T>;
  //                        ^^^^^^^^^^^^^^ <- add this
}

parseData("sup", z.string());
// => string
Constraining allowable inputs
The ZodType class has three generic parameters.
class ZodType<
  Output = any,
  Def extends ZodTypeDef = ZodTypeDef,
  Input = Output
> { ... }
By constraining these in your generic input, you can limit what schemas are allowable as inputs to your function:
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) {
  return schema.optional();
}

makeSchemaOptional(z.string());
// works fine

makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
Error handling
Zod provides a subclass of Error called ZodError. ZodErrors contain an issues array containing detailed information about the validation problems.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  result.error.issues;
  /* [
      {
        "code": "invalid_type",
        "expected": "string",
        "received": "number",
        "path": [ "name" ],
        "message": "Expected string, received number"
      }
  ] */
}

For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: ERROR_HANDLING.md

Zod's error reporting emphasizes completeness and correctness. If you are looking to present a useful error message to the end user, you should either override Zod's error messages using an error map (described in detail in the Error Handling guide) or use a third-party library like zod-validation-error
Error formatting
You can use the .format() method to convert this error into a nested object.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  const formatted = result.error.format();
  /* {
    name: { _errors: [ 'Expected string, received number' ] }
  } */

  formatted.name?._errors;
  // => ["Expected string, received number"]
}

Comparison
There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.



Joi
https://github.com/hapijs/joi
Doesn't support static type inference üòï
Yup
https://github.com/jquense/yup
Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.

Supports casting and transforms
All object fields are optional by default



Missing promise schemas
Missing function schemas
Missing union & intersection schemas


io-ts
https://github.com/gcanti/io-ts
io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
import * as t from "io-ts";

const A = t.type({
  foo: t.string,
});

const B = t.partial({
  bar: t.number,
});

const C = t.intersection([A, B]);

type C = t.TypeOf<typeof C>;
// returns { foo: string; bar?: number | undefined }
You must define the required and optional props in separate object validators, pass the optionals through t.partial (which marks all properties as optional), then combine them with t.intersection .
Consider the equivalent in Zod:
const C = z.object({
  foo: z.string(),
  bar: z.number().optional(),
});

type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
This more declarative API makes schema definitions vastly more concise.
io-ts also requires the use of gcanti's functional programming library fp-ts to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on fp-ts necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the fp-ts nomenclature to use the library.

Supports codecs with serialization & deserialization transforms
Supports branded types
Supports advanced functional programming, higher-kinded types, fp-ts compatibility
Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
Missing nonempty arrays with proper typing ([T, ...T[]])
Missing promise schemas
Missing function schemas

Runtypes
https://github.com/runtypes/runtypes
Runtypes is focused on ergonomics, with good type inference support.

Supports "pattern matching": computed properties that distribute over unions
Supports branded types
Supports template literals
Supports conformance to predefined static types
Missing object methods: (deepPartial, merge)
Missing promise schemas
Missing error customization

Ow
https://github.com/sindresorhus/ow
Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. int32Array , see full list in their README).
If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.

Changelog
View the changelog at CHANGELOG.md\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        
      
      
        TypeScript-first schema validation with static type inference
      
      
        
        
          zod.dev
        
      

    
      License
  
    
      
     MIT license
    
  


    
        
          
          37.4k
          stars
        
          
          1.4k
          forks
        
          
          Branches
        
          
          Tags
        
          
          Activity
    

      
        
            
            
          Star


        
        
                    Notifications
    You must be signed in to change notification settings

        
        
          

        
      
  




          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  colinhacks/zod
  
    

  
        












  
  
     ¬†mainBranchesTagsGo to fileCodeFolders and filesNameNameLast commit messageLast commit dateLatest commit¬†History2,144 Commits.devcontainer.devcontainer¬†¬†.github/workflows.github/workflows¬†¬†.husky.husky¬†¬†.vscode.vscode¬†¬†blogblog¬†¬†configsconfigs¬†¬†deno/libdeno/lib¬†¬†packages/docspackages/docs¬†¬†srcsrc¬†¬†staticstatic¬†¬†.dependency-cruiser.js.dependency-cruiser.js¬†¬†.editorconfig.editorconfig¬†¬†.eslintignore.eslintignore¬†¬†.eslintrc.js.eslintrc.js¬†¬†.gitignore.gitignore¬†¬†.nojekyll.nojekyll¬†¬†.prettierrc.yaml.prettierrc.yaml¬†¬†CHANGELOG.mdCHANGELOG.md¬†¬†CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md¬†¬†CONTRIBUTING.mdCONTRIBUTING.md¬†¬†ERROR_HANDLING.mdERROR_HANDLING.md¬†¬†FUNDING.jsonFUNDING.json¬†¬†FUNDING.ymlFUNDING.yml¬†¬†LICENSELICENSE¬†¬†MIGRATION.mdMIGRATION.md¬†¬†README.mdREADME.md¬†¬†README_KO.mdREADME_KO.md¬†¬†README_ZH.mdREADME_ZH.md¬†¬†_redirects_redirects¬†¬†deno-build.mjsdeno-build.mjs¬†¬†index.d.tsindex.d.ts¬†¬†index.htmlindex.html¬†¬†jest.config.jsonjest.config.json¬†¬†logo.svglogo.svg¬†¬†package.jsonpackage.json¬†¬†playground.tsplayground.ts¬†¬†robots.txtrobots.txt¬†¬†tea.yamltea.yaml¬†¬†tsconfig.jsontsconfig.json¬†¬†yarn.lockyarn.lock¬†¬†View all filesRepository files navigationREADMECode of conductMIT license
  
  Zod
  
  zod.dev
  
    TypeScript-first schema validation with static type inference
  









  Website
  ¬†¬†‚Ä¢¬†¬†
  Discord
  ¬†¬†‚Ä¢¬†¬†
  ùïè
  ¬†¬†‚Ä¢¬†¬†
  Bluesky
  



  Zod 4 is now in beta!
  
  Read the announcement üëâ



Featured sponsor: Fern

  
    
      
      
    
  
  
  Learn more about featured sponsorships




Table of contents

These docs have been translated into Chinese and Korean.


Table of contents
Introduction

Sponsors

Platinum
Gold
Silver
Bronze
Copper


Ecosystem

Resources
API libraries
Form integrations
Zod to X
X to Zod
Mocking
Powered by Zod
Utilities for Zod




Installation

Requirements
From npm


Basic usage
Primitives
Coercion for primitives
Literals
Strings

Datetimes
Dates
Times
IP addresses
IP ranges


Numbers
BigInts
NaNs
Booleans
Dates
Zod enums
Native enums
Optionals
Nullables
Objects

.shape
.keyof
.extend
.merge
.pick/.omit
.partial
.deepPartial
.required
.passthrough
.strict
.strip
.catchall


Arrays

.element
.nonempty
.min/.max/.length


Tuples
Unions
Discriminated unions
Records

Record key type


Maps
Sets
Intersections
Recursive types

ZodType with ZodEffects
JSON type
Cyclical objects


Promises
Instanceof
Functions
Preprocess
Custom schemas
Schema methods

.parse
.parseAsync
.safeParse
.safeParseAsync
.refine

Arguments
Customize error path
Asynchronous refinements
Relationship to transforms


.superRefine

Abort early
Type refinements


.transform

Chaining order
Validating during transform
Relationship to refinements
Async transforms


.default
.describe
.catch
.optional
.nullable
.nullish
.array
.promise
.or
.and
.brand
.readonly
.pipe

You can use .pipe() to fix common issues with z.coerce.




Guides and concepts

Type inference
Writing generic functions

Constraining allowable inputs


Error handling
Error formatting


Comparison

Joi
Yup
io-ts
Runtypes
Ow


Changelog


Introduction
Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.
Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
Some other great aspects:

Zero dependencies
Works in Node.js and all modern browsers
Tiny: 8kb minified + zipped
Immutable: methods (e.g. .optional()) return a new instance
Concise, chainable interface
Functional approach: parse, don't validate
Works with plain JavaScript too! You don't need to use TypeScript.


Sponsors
Sponsorship at any level is appreciated and encouraged. If you built a paid product using Zod, consider one of the corporate tiers.

Platinum

  
    
      
      
      
        
          
          
        
      
         
      Cut code review time & bugs in half
      
      coderabbit.ai
      
      
    
  


Gold

  
    
      
      
      
        
          
          
        
      
         
      The API platform for sending notifications
      
      courier.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      Generate better SDKs for your APIs
      
      liblab.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Serverless Postgres ‚Äî Ship faster
      
      neon.tech
      
      
    
    
      
      
      
        
          
          
        
      
         
      Build AI apps and workflows with Retool AI
      
      retool.com
      
      
    
  
  
    
      
      
      
        
          
          
        
      
         
      Generate best-in-class SDKs
      
      stainless.com
      
      
    
    
      
      
      
        
          
          
        
      
         
      SDKs & Terraform providers for your API
      
      speakeasy.com
      
      
    
  


Silver

  
    
      
      
      Nitric
    
    
      
      
      PropelAuth
    
    
      
      
      Cerbos
    
    
      
      
      Scalar
    
    
    
      
      
      Trigger.dev
    
    
      
      
      Transloadit
    
    
      
      
      Infisical
    
    
      
      
      Whop
    
    
    
      
      
      CryptoJobsList
    
    
      
      
      Plain.
    
    
      
      
      Inngest
    
    
      
      
      Storyblok
    
    
    
      
      
      Mux
    
    
      
      
      Cybozu
    
  


Bronze

  
    
      
        
          
          
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
  
  
    
      
        
      
    
    
      
        
      
    
  


Ecosystem
There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it on Twitter or start a Discussion. I'll add it below and tweet it out.
Resources

Total TypeScript Zod Tutorial by @mattpocockuk
Fixing TypeScript's Blindspot: Runtime Typechecking by @jherr

API libraries

tRPC: Build end-to-end typesafe APIs without GraphQL.
@anatine/zod-nestjs: Helper methods for using Zod in a NestJS project.
zod-endpoints: Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
zhttp: An OpenAPI compatible, strictly typed http library with Zod input and response validation.
domain-functions: Decouple your business logic from your framework using composable functions. With first-class type inference from end to end powered by Zod schemas.
@zodios/core: A typescript API client with runtime and compile time validation backed by axios and zod.
express-zod-api: Build Express-based APIs with I/O schema validation and custom middlewares.
tapiduck: End-to-end typesafe JSON APIs with Zod and Express; a bit like tRPC, but simpler.
koa-zod-router: Create typesafe routes in Koa with I/O validation using Zod.
zod-sockets: Zod-powered Socket.IO microframework with I/O validation and built-in AsyncAPI specs
oas-tszod-gen: Client SDK code generator to convert OpenApi v3 specifications into TS endpoint caller functions with Zod types.
GQLoom: Weave GraphQL schema and resolvers using Zod.
oRPC: Typesafe APIs Made Simple

Form integrations

react-hook-form: A first-party Zod resolver for React Hook Form.
TanStack Form: Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit
zod-validation-error: Generate user-friendly error messages from ZodErrors.
zod-formik-adapter: A community-maintained Formik adapter for Zod.
react-zorm: Standalone <form> generation and validation for React using Zod.
zodix: Zod utilities for FormData and URLSearchParams in Remix loaders and actions.
conform: A typesafe form validation library for progressive enhancement of HTML forms. Works with Remix and Next.js.
remix-params-helper: Simplify integration of Zod with standard URLSearchParams and FormData for Remix apps.
formik-validator-zod: Formik-compliant validator library that simplifies using Zod with Formik.
zod-i18n-map: Useful for translating Zod error messages.
@modular-forms/solid: Modular form library for SolidJS that supports Zod for validation.
houseform: A React form library that uses Zod for validation.
sveltekit-superforms: Supercharged form library for SvelteKit with Zod validation.
mobx-zod-form: Data-first form builder based on MobX & Zod.
@vee-validate/zod: Form library for Vue.js with Zod schema validation.
zod-form-renderer: Auto-infer form fields from zod schema and render them with react-hook-form with E2E type safety.
antd-zod: Zod adapter for Ant Design form fields validation.
frrm: Tiny 0.5kb Zod-based, HTML form abstraction that goes brr.

Zod to X

zod-to-ts: Generate TypeScript definitions from Zod schemas.
zod-to-json-schema: Convert your Zod schemas into JSON Schemas.
@anatine/zod-openapi: Converts a Zod schema to an OpenAPI v3.x SchemaObject.
zod-fast-check: Generate fast-check arbitraries from Zod schemas.
zod-dto: Generate Nest.js DTOs from a Zod schema.
fastify-type-provider-zod: Create Fastify type providers from Zod schemas.
zod-to-openapi: Generate full OpenAPI (Swagger) docs from Zod, including schemas, endpoints & parameters.
nestjs-graphql-zod: Generates NestJS GraphQL model classes from Zod schemas. Provides GraphQL method decorators working with Zod schemas.
zod-openapi: Create full OpenAPI v3.x documentation from Zod schemas.
fastify-zod-openapi: Fastify type provider, validation, serialization and @fastify/swagger support for Zod schemas.
typeschema: Universal adapter for schema validation.
zodex: (De)serialization for zod schemas

X to Zod

ts-to-zod: Convert TypeScript definitions into Zod schemas.
@runtyping/zod: Generate Zod from static types & JSON schema.
json-schema-to-zod: Convert your JSON Schemas into Zod schemas. Live demo.
json-to-zod: Convert JSON objects into Zod schemas. Live demo.
graphql-codegen-typescript-validation-schema: GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema.
zod-prisma: Generate Zod schemas from your Prisma schema.
Supervillain: Generate Zod schemas from your Go structs.
prisma-zod-generator: Emit Zod schemas from your Prisma schema.
drizzle-zod: Emit Zod schemas from your Drizzle schema.
prisma-trpc-generator: Emit fully implemented tRPC routers and their validation schemas using Zod.
zod-prisma-types Create Zod types from your Prisma models.
quicktype: Convert JSON objects and JSON schemas into Zod schemas.
@sanity-typed/zod: Generate Zod Schemas from Sanity Schemas.
java-to-zod: Convert POJOs to Zod schemas
Orval: Generate Zod schemas from OpenAPI schemas
Kubb: Generate SDKs and Zod schemas from your OpenAPI schemas

Mocking

@anatine/zod-mock: Generate mock data from a Zod schema. Powered by faker.js.
zod-mocking: Generate mock data from your Zod schemas.
zod-fixture: Use your zod schemas to automate the generation of non-relevant test fixtures in a deterministic way.
zocker: Generate plausible mock-data from your schemas.
zodock Generate mock data based on Zod schemas.
zod-schema-faker Generates mock data from Zod schemas. Powered by @faker-js/faker and randexp.js

Powered by Zod

freerstore: Firestore cost optimizer.
slonik: Node.js Postgres client with strong Zod integration.
schemql: Enhances your SQL workflow by combining raw SQL with targeted type safety and schema validation.
soly: Create CLI applications with zod.
pastel: Create CLI applications with react, zod, and ink.
zod-xlsx: A xlsx based resource validator using Zod schemas.
znv: Type-safe environment parsing and validation for Node.js with Zod schemas.
zod-config: Load configurations across multiple sources with flexible adapters, ensuring type safety with Zod.
unplugin-environment: A plugin for loading enviroment variables safely with schema validation, simple with virtual module, type-safe with intellisense, and better DX üî• üöÄ üë∑. Powered by Zod.
zod-struct: Create runtime-checked structs with Zod.
zod-csv: Validation helpers for zod for parsing CSV data.
fullproduct.dev: Universal Expo + Next.js App Starter that uses Zod schemas as the single source of truth to keep generated MDX docs, GraphQL, database models, forms, and fetcher functions in sync.

Utilities for Zod

zod_utilz: Framework agnostic utilities for Zod.
zod-playground: A tool for learning and testing Zod schema validation functionalities. Link.
zod-sandbox: Controlled environment for testing zod schemas. Live demo.
zod-dev: Conditionally disables Zod runtime parsing in production.
zod-accelerator: Accelerates Zod's throughput up to ~100x.


Installation
Requirements


TypeScript 4.5+!


You must enable strict mode in your tsconfig.json. This is a best practice for all TypeScript projects.
// tsconfig.json
{
  // ...
  "compilerOptions": {
    // ...
    "strict": true
  }
}


From npm
npm install zod       # npm
deno add npm:zod      # deno
yarn add zod          # yarn
bun add zod           # bun
pnpm add zod          # pnpm
Zod also publishes a canary version on every commit. To install the canary:
npm install zod@canary       # npm
deno add npm:zod@canary      # deno
yarn add zod@canary          # yarn
bun add zod@canary           # bun
pnpm add zod@canary          # pnpm

The rest of this README assumes you are using npm and importing directly from the "zod" package.


Basic usage
Creating a simple string schema
import { z } from "zod";

// creating a schema for strings
const mySchema = z.string();

// parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError

// "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
Creating an object schema
import { z } from "zod";

const User = z.object({
  username: z.string(),
});

User.parse({ username: "Ludwig" });

// extract the inferred type
type User = z.infer<typeof User>;
// { username: string }

Primitives
import { z } from "zod";

// primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol();

// empty types
z.undefined();
z.null();
z.void(); // accepts undefined

// catch-all types
// allows any value
z.any();
z.unknown();

// never type
// allows no values
z.never();

Coercion for primitives
Zod now provides a more convenient way to coerce primitive values.
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
During the parsing step, the input is passed through the String() function, which is a JavaScript built-in for coercing data into strings.
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
The returned schema is a normal ZodString instance so you can use all string methods.
z.coerce.string().email().min(5);
How coercion works
All primitive types support coercion. Zod coerces all inputs using the built-in constructors: String(input), Number(input), new Date(input), etc.
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
Note ‚Äî¬†Boolean coercion with z.coerce.boolean() may not work how you expect. Any truthy value is coerced to true, and any falsy value is coerced to false.
const schema = z.coerce.boolean(); // Boolean(input)

schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true

schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
For more control over coercion logic, consider using z.preprocess or z.pipe().

Literals
Literal schemas represent a literal type, like "hello world" or 5.
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true);

const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol);

// retrieve literal value
tuna.value; // "tuna"

Currently there is no support for Date literals in Zod. If you have a use case for this feature, please file an issue.


Strings
Zod includes a handful of string-specific validations.
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6

// transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase

// added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS])
z.string().duration(); // ISO 8601 duration
z.string().base64();

Check out validator.js for a bunch of other useful string validation functions that can be used in conjunction with Refinements.

You can customize some common error messages when creating a string schema.
const name = z.string({
  required_error: "Name is required",
  invalid_type_error: "Name must be a string",
});
When using validation methods, you can pass in an additional argument to provide a custom error message.
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
Datetimes
As you may have noticed, Zod string includes a few date/time related validations. These validations are regular expression based, so they are not as strict as a full date/time library. However, they are very convenient for validating user input.
The z.string().datetime() method enforces ISO 8601; default is no timezone offsets and arbitrary sub-second decimal precision.
const datetime = z.string().datetime();

datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
Timezone offsets can be allowed by setting the offset option to true.
const datetime = z.string().datetime({ offset: true });

datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
Allow unqualified (timezone-less) datetimes with the local flag.
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
You can additionally constrain the allowable precision. By default, arbitrary sub-second precision is supported (but optional).
const datetime = z.string().datetime({ precision: 3 });

datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
Dates

Added in Zod 3.23

The z.string().date() method validates strings in the format YYYY-MM-DD.
const date = z.string().date();

date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
Times

Added in Zod 3.23

The z.string().time() method validates strings in the format HH:MM:SS[.s+]. The second can include arbitrary decimal precision. It does not allow timezone offsets of any kind.
const time = z.string().time();

time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision)

time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
You can set the precision option to constrain the allowable decimal precision.
const time = z.string().time({ precision: 3 });

time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
IP addresses
By default .ip() allows both IPv4 and IPv6.
const ip = z.string().ip();

ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass

ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
You can additionally set the IP version.
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
IP ranges (CIDR)
Validate IP address ranges specified with CIDR notation. By default, .cidr() allows both IPv4 and IPv6.
const cidr = z.string().cidr();
cidr.parse("192.168.0.0/24"); // pass
cidr.parse("2001:db8::/32"); // pass
You can specify a version with the version parameter.
const ipv4Cidr = z.string().cidr({ version: "v4" });
ipv4Cidr.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail

const ipv6Cidr = z.string().cidr({ version: "v6" });
ipv6Cidr.parse("192.168.1.1"); // fail

Numbers
You can customize certain error messages when creating a number schema.
const age = z.number({
  required_error: "Age is required",
  invalid_type_error: "Age must be a number",
});
Zod includes a handful of number-specific validations.
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)

z.number().int(); // value must be an integer

z.number().positive(); //     > 0
z.number().nonnegative(); //  >= 0
z.number().negative(); //     < 0
z.number().nonpositive(); //  <= 0

z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)

z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
Optionally, you can pass in a second argument to provide a custom error message.
z.number().lte(5, { message: "thisüëèisüëètooüëèbig" });

BigInts
Zod includes a handful of bigint-specific validations.
z.bigint().gt(5n);
z.bigint().gte(5n); // alias `.min(5n)`
z.bigint().lt(5n);
z.bigint().lte(5n); // alias `.max(5n)`

z.bigint().positive(); // > 0n
z.bigint().nonnegative(); // >= 0n
z.bigint().negative(); // < 0n
z.bigint().nonpositive(); // <= 0n

z.bigint().multipleOf(5n); // Evenly divisible by 5n.

NaNs
You can customize certain error messages when creating a nan schema.
const isNaN = z.nan({
  required_error: "isNaN is required",
  invalid_type_error: "isNaN must be 'not a number'",
});

Booleans
You can customize certain error messages when creating a boolean schema.
const isActive = z.boolean({
  required_error: "isActive is required",
  invalid_type_error: "isActive must be a boolean",
});

Dates
Use z.date() to validate Date instances.
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
You can customize certain error messages when creating a date schema.
const myDateSchema = z.date({
  required_error: "Please select a date and time",
  invalid_type_error: "That's not a date!",
});
Zod provides a handful of date-specific validations.
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
Coercion to Date
Since zod 3.20, use z.coerce.date() to pass the input through new Date(input).
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date

/* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true

/* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
For older zod versions, use z.preprocess like described in this thread.

Zod enums
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
z.enum is a Zod-native way to declare a schema with a fixed set of allowable string values. Pass the array of values directly into z.enum(). Alternatively, use as const to define your enum values as a tuple of strings. See the const assertion docs for details.
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
This is not allowed, since Zod isn't able to infer the exact values of each element.
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
.enum
To get autocompletion with a Zod enum, use the .enum property of your schema:
FishEnum.enum.Salmon; // => autocompletes

FishEnum.enum;
/*
=> {
  Salmon: "Salmon",
  Tuna: "Tuna",
  Trout: "Trout",
}
*/
You can also retrieve the list of options as a tuple with the .options property:
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
.exclude/.extract()
You can create subsets of a Zod enum with the .exclude and .extract methods.
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);

Native enums
Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use z.nativeEnum().
Numeric enums
enum Fruits {
  Apple,
  Banana,
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
String enums
enum Fruits {
  Apple = "apple",
  Banana = "banana",
  Cantaloupe, // you can mix numerical and string enums
}

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits

FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Cantaloupe); // passes
FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse("Cantaloupe"); // fails
Const enums
The .nativeEnum() function works for as const objects as well. ‚ö†Ô∏è as const requires TypeScript 3.4+!
const Fruits = {
  Apple: "apple",
  Banana: "banana",
  Cantaloupe: 3,
} as const;

const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3

FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
You can access the underlying object with the .enum property:
FruitEnum.enum.Apple; // "apple"

Optionals
You can make any schema optional with z.optional(). This wraps the schema in a ZodOptional instance and returns the result.
const schema = z.optional(z.string());

schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
For convenience, you can also call the .optional() method on an existing schema.
const user = z.object({
  username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
You can extract the wrapped schema from a ZodOptional instance with .unwrap().
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true

Nullables
Similarly, you can create nullable types with z.nullable().
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
Or use the .nullable() method.
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
Extract the inner schema with .unwrap().
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true

Objects
// all properties are required by default
const Dog = z.object({
  name: z.string(),
  age: z.number(),
});

// extract the inferred type like this
type Dog = z.infer<typeof Dog>;

// equivalent to:
type Dog = {
  name: string;
  age: number;
};
.shape
Use .shape to access the schemas for a particular key.
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
.keyof
Use .keyof to create a ZodEnum schema from the keys of an object schema.
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
.extend
You can add additional fields to an object schema with the .extend method.
const DogWithBreed = Dog.extend({
  breed: z.string(),
});
You can use .extend to overwrite fields! Be careful with this power!
.merge
Equivalent to A.extend(B.shape).
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() });

const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }

If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.

.pick/.omit
Inspired by TypeScript's built-in Pick and Omit utility types, all Zod object schemas have .pick and .omit methods that return a modified version. Consider this Recipe schema:
const Recipe = z.object({
  id: z.string(),
  name: z.string(),
  ingredients: z.array(z.string()),
});
To only keep certain keys, use .pick .
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
To remove certain keys, use .omit .
const NoIDRecipe = Recipe.omit({ id: true });

type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
.partial
Inspired by the built-in TypeScript utility type Partial, the .partial method makes all properties optional.
Starting from this object:
const user = z.object({
  email: z.string(),
  username: z.string(),
});
// { email: string; username: string }
We can create a partial version:
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
You can also specify which properties to make optional:
const optionalEmail = user.partial({
  email: true,
});
/*
{
  email?: string | undefined;
  username: string
}
*/
.deepPartial
The .partial method is shallow ‚Äî it only applies one level deep. There is also a "deep" version:
const user = z.object({
  username: z.string(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  strings: z.array(z.object({ value: z.string() })),
});

const deepPartialUser = user.deepPartial();

/*
{
  username?: string | undefined,
  location?: {
    latitude?: number | undefined;
    longitude?: number | undefined;
  } | undefined,
  strings?: { value?: string}[]
}
*/

Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.

.required
Contrary to the .partial method, the .required method makes all properties required.
Starting from this object:
const user = z
  .object({
    email: z.string(),
    username: z.string(),
  })
  .partial();
// { email?: string | undefined; username?: string | undefined }
We can create a required version:
const requiredUser = user.required();
// { email: string; username: string }
You can also specify which properties to make required:
const requiredEmail = user.required({
  email: true,
});
/*
{
  email: string;
  username?: string | undefined;
}
*/
.passthrough
By default Zod object schemas strip out unrecognized keys during parsing.
const person = z.object({
  name: z.string(),
});

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
Instead, if you want to pass through unknown keys, use .passthrough() .
person.passthrough().parse({
  name: "bob dylan",
  extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
.strict
By default Zod object schemas strip out unrecognized keys during parsing. You can disallow unknown keys with .strict() . If there are any unknown keys in the input, Zod will throw an error.
const person = z
  .object({
    name: z.string(),
  })
  .strict();

person.parse({
  name: "bob dylan",
  extraKey: 61,
});
// => throws ZodError
.strip
You can use the .strip method to reset an object schema to the default behavior (stripping unrecognized keys).
.catchall
You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
const person = z
  .object({
    name: z.string(),
  })
  .catchall(z.number());

person.parse({
  name: "bob dylan",
  validExtraKey: 61, // works fine
});

person.parse({
  name: "bob dylan",
  validExtraKey: false, // fails
});
// => throws ZodError
Using .catchall() obviates .passthrough() , .strip() , or .strict(). All keys are now considered "known".

Arrays
const stringArray = z.array(z.string());

// equivalent
const stringArray = z.string().array();
Be careful with the .array() method. It returns a new ZodArray instance. This means the order in which you call methods matters. For instance:
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
.element
Use .element to access the schema for an element of the array.
stringArray.element; // => string schema
.nonempty
If you want to ensure that an array contains at least one element, use .nonempty().
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]]

nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
You can optionally specify a custom error message:
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({
  message: "Can't be empty!",
});
.min/.max/.length
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
Unlike .nonempty() these methods do not change the inferred type.

Tuples
Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
const athleteSchema = z.tuple([
  z.string(), // name
  z.number(), // jersey number
  z.object({
    pointsScored: z.number(),
  }), // statistics
]);

type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
A variadic ("rest") argument can be added with the .rest method.
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];

Unions
Zod includes a built-in z.union method for composing "OR" types.
const stringOrNumber = z.union([z.string(), z.number()]);

stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
Zod will test the input against each of the "options" in order and return the first value that validates successfully.
For convenience, you can also use the .or method:
const stringOrNumber = z.string().or(z.number());
Optional string validation:
To validate an optional form input, you can union the desired string validation with an empty string literal.
This example validates an input that is optional but needs to contain a valid URL:
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]);

console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false

Discriminated unions
A discriminated union is a union of object schemas that all share a particular key.
type MyUnion =
  | { status: "success"; data: string }
  | { status: "failed"; error: Error };
Such unions can be represented with the z.discriminatedUnion method. This enables faster evaluation, because Zod can check the discriminator key (status in the example above) to determine which schema should be used to parse the input. This makes parsing more efficient and lets Zod report friendlier errors.
With the basic union method, the input is tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing against it, and showing only the issues related to this "option".
const myUnion = z.discriminatedUnion("status", [
  z.object({ status: z.literal("success"), data: z.string() }),
  z.object({ status: z.literal("failed"), error: z.instanceof(Error) }),
]);

myUnion.parse({ status: "success", data: "yippie ki yay" });
You can extract a reference to the array of schemas with the .options property.
myUnion.options; // [ZodObject<...>, ZodObject<...>]
To merge two or more discriminated unions, use .options with destructuring.
const A = z.discriminatedUnion("status", [
  /* options */
]);
const B = z.discriminatedUnion("status", [
  /* options */
]);

const AB = z.discriminatedUnion("status", [...A.options, ...B.options]);

Records
Record schemas are used to validate types such as Record<string, number>. This is particularly useful for storing or caching items by ID.

const User = z.object({ name: z.string() });

const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
The schema and inferred type can be used like so:
const userStore: UserStore = {};

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  name: "Carlotta",
}; // passes

userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
  whatever: "Ice cream sundae",
}; // TypeError
A note on numerical keys
While z.record(keyType, valueType) is able to accept numerical key types and TypeScript's built-in Record type is Record<KeyType, ValueType>, it's hard to represent the TypeScript type Record<number, any> in Zod.
As it turns out, TypeScript's behavior surrounding [k: number] is a little unintuitive:
const testMap: { [k: number]: string } = {
  1: "one",
};

for (const key in testMap) {
  console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.

Maps
const stringNumberMap = z.map(z.string(), z.number());

type StringNumberMap = z.infer<typeof stringNumberMap>;
// type StringNumberMap = Map<string, number>

Sets
const numberSet = z.set(z.number());
type NumberSet = z.infer<typeof numberSet>;
// type NumberSet = Set<number>
Set schemas can be further constrained with the following utility methods.
z.set(z.string()).nonempty(); // must contain at least one item
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly

Intersections
Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
const Person = z.object({
  name: z.string(),
});

const Employee = z.object({
  role: z.string(),
});

const EmployedPerson = z.intersection(Person, Employee);

// equivalent to:
const EmployedPerson = Person.and(Employee);
Though in many cases, it is recommended to use A.merge(B) to merge two objects. The .merge method returns a new ZodObject instance, whereas A.and(B) returns a less useful ZodIntersection instance that lacks common object methods like pick and omit.
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b);

type c = z.infer<typeof c>; // => number



Recursive types
You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
const baseCategorySchema = z.object({
  name: z.string(),
});

type Category = z.infer<typeof baseCategorySchema> & {
  subcategories: Category[];
};

const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
  subcategories: z.lazy(() => categorySchema.array()),
});

categorySchema.parse({
  name: "People",
  subcategories: [
    {
      name: "Politicians",
      subcategories: [
        {
          name: "Presidents",
          subcategories: [],
        },
      ],
    },
  ],
}); // passes
Thanks to crasite for this example.
ZodType with ZodEffects
When using z.ZodType with z.ZodEffects (
.refine,
.transform,
preprocess,
etc...
), you will need to define the input and output types of the schema. z.ZodType<Output, z.ZodTypeDef, Input>
const isValidId = (id: string): id is `${string}/${string}` =>
  id.split("/").length === 2;

const baseSchema = z.object({
  id: z.string().refine(isValidId),
});

type Input = z.input<typeof baseSchema> & {
  children: Input[];
};

type Output = z.output<typeof baseSchema> & {
  children: Output[];
};

const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({
  children: z.lazy(() => schema.array()),
});
Thanks to marcus13371337 and JoelBeeldi for this example.
JSON type
If you want to validate any JSON value, you can use the snippet below.
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
);

jsonSchema.parse(data);
Thanks to ggoodman for suggesting this.
Cyclical objects
Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop in some cases.

To detect cyclical objects before they cause problems, consider this approach.


Promises
const numberPromise = z.promise(z.number());
"Parsing" works a little differently with promise schemas. Validation happens in two parts:

Zod synchronously checks that the input is an instance of Promise (i.e. an object with .then and .catch methods.).
Zod uses .then to attach an additional validation step onto the existing Promise. You'll have to use .catch on the returned Promise to handle validation failures.

numberPromise.parse("tuna");
// ZodError: Non-Promise type: string

numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number>

const test = async () => {
  await numberPromise.parse(Promise.resolve("tuna"));
  // ZodError: Non-number type: string

  await numberPromise.parse(Promise.resolve(3.14));
  // => 3.14
};


Instanceof
You can use z.instanceof to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
class Test {
  name: string;
}

const TestSchema = z.instanceof(Test);

const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws

Functions
Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
You can create a function schema with z.function(args, returnType) .
const myFunction = z.function();

type myFunction = z.infer<typeof myFunction>;
// => ()=>unknown
Define inputs and outputs.
const myFunction = z
  .function()
  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
  .returns(z.boolean());

type myFunction = z.infer<typeof myFunction>;
// => (arg0: string, arg1: number)=>boolean

Function schemas have an .implement() method which accepts a function and returns a new function that automatically validates its inputs and outputs.
const trimmedLength = z
  .function()
  .args(z.string()) // accepts an arbitrary number of arguments
  .returns(z.number())
  .implement((x) => {
    // TypeScript knows x is a string!
    return x.trim().length;
  });

trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
If you only care about validating inputs, just don't call the .returns() method. The output type will be inferred from the implementation.

You can use the special z.void() option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)

const myFunction = z
  .function()
  .args(z.string())
  .implement((arg) => {
    return [arg.length];
  });

myFunction; // (arg: string)=>number[]
Extract the input and output schemas from a function schema.
myFunction.parameters();
// => ZodTuple<[ZodString, ZodNumber]>

myFunction.returnType();
// => ZodBoolean


Preprocess

Zod now supports primitive coercion without the need for .preprocess(). See the coercion docs for more information.

Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the .transform docs.)
But sometimes you want to apply some transform to the input before parsing happens. A common use case: type coercion. Zod enables this with the z.preprocess().
const castToString = z.preprocess((val) => String(val), z.string());
This returns a ZodEffects instance. ZodEffects is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.

Custom schemas
You can create a Zod schema for any TypeScript type by using z.custom(). This is useful for creating schemas for types that are not supported by Zod out of the box, such as template string literals.
const px = z.custom<`${number}px`>((val) => {
  return typeof val === "string" ? /^\d+px$/.test(val) : false;
});

type px = z.infer<typeof px>; // `${number}px`

px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
If you don't provide a validation function, Zod will allow any value. This can be dangerous!
z.custom<{ arg: string }>(); // performs no validation
You can customize the error message and other options by passing a second argument. This parameter works the same way as the params parameter of .refine.
z.custom<...>((val) => ..., "custom error message");

Schema methods
All Zod schemas contain certain methods.
.parse
.parse(data: unknown): T
Given any Zod schema, you can call its .parse method to check data is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.

IMPORTANT: The value returned by .parse is a deep clone of the variable you passed in.

const stringSchema = z.string();

stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
.parseAsync
.parseAsync(data:unknown): Promise<T>
If you use asynchronous refinements or transforms (more on those later), you'll need to use .parseAsync.
const stringSchema = z.string().refine(async (val) => val.length <= 8);

await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
.safeParse
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
If you don't want Zod to throw errors when validation fails, use .safeParse. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
stringSchema.safeParse(12);
// => { success: false; error: ZodError }

stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
The result is a discriminated union, so you can handle errors very conveniently:
const result = stringSchema.safeParse("billie");
if (!result.success) {
  // handle error then return
  result.error;
} else {
  // do something
  result.data;
}
.safeParseAsync

Alias: .spa

An asynchronous version of safeParse.
await stringSchema.safeParseAsync("billie");
For convenience, this has been aliased to .spa:
await stringSchema.spa("billie");
.refine
.refine(validator: (data:T)=>any, params?: RefineParams)
Zod lets you provide custom validation logic via refinements. (For advanced features like creating multiple issues and customizing error codes, see .superRefine.)
Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
For example, you can define a custom validation check on any Zod schema with .refine :
const myString = z.string().refine((val) => val.length <= 255, {
  message: "String can't be more than 255 characters",
});

‚ö†Ô∏è Refinement functions should not throw. Instead they should return a falsy value to signal failure.

Arguments
As you can see, .refine takes two arguments.

The first is the validation function. This function takes one input (of type T ‚Äî the inferred type of the schema) and returns any. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
The second argument accepts some options. You can use this to customize certain error-handling behavior:

type RefineParams = {
  // override error message
  message?: string;

  // appended to error path
  path?: (string | number)[];

  // params object you can use to customize message
  // in error map
  params?: object;
};
For advanced cases, the second argument can also be a function that returns RefineParams.
const longString = z.string().refine(
  (val) => val.length > 10,
  (val) => ({ message: `${val} is not more than 10 characters` })
);
Customize error path
const passwordForm = z
  .object({
    password: z.string(),
    confirm: z.string(),
  })
  .refine((data) => data.password === data.confirm, {
    message: "Passwords don't match",
    path: ["confirm"], // path of error
  });

passwordForm.parse({ password: "asdf", confirm: "qwer" });
Because you provided a path parameter, the resulting error will be:
ZodError {
  issues: [{
    "code": "custom",
    "path": [ "confirm" ],
    "message": "Passwords don't match"
  }]
}
Asynchronous refinements
Refinements can also be async:
const userId = z.string().refine(async (id) => {
  // verify that ID exists in database
  return true;
});

‚ö†Ô∏è If you use async refinements, you must use the .parseAsync method to parse data! Otherwise Zod will throw an error.

Relationship to transforms
Transforms and refinements can be interleaved:
z.string()
  .transform((val) => val.length)
  .refine((val) => val > 25);

.superRefine
The .refine method is actually syntactic sugar atop a more versatile (and verbose) method called superRefine. Here's an example:
const Strings = z.array(z.string()).superRefine((val, ctx) => {
  if (val.length > 3) {
    ctx.addIssue({
      code: z.ZodIssueCode.too_big,
      maximum: 3,
      type: "array",
      inclusive: true,
      message: "Too many items üò°",
    });
  }

  if (val.length !== new Set(val).size) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: `No duplicates allowed.`,
    });
  }
});
You can add as many issues as you like. If ctx.addIssue is not called during the execution of the function, validation passes.
Normally refinements always create issues with a ZodIssueCode.custom error code, but with superRefine it's possible to throw issues of any ZodIssueCode. Each issue code is described in detail in the Error Handling guide: ERROR_HANDLING.md.
Abort early
By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to abort early to prevent later refinements from being executed. To achieve this, pass the fatal flag to ctx.addIssue and return z.NEVER.
const schema = z.number().superRefine((val, ctx) => {
  if (val < 10) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be >= 10",
      fatal: true,
    });

    return z.NEVER;
  }

  if (val !== 12) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "should be twelve",
    });
  }
});
Type refinements
If you provide a type predicate to .refine() or .superRefine(), the resulting type will be narrowed down to your predicate's type. This is useful if you are mixing multiple chained refinements and transformations:
const schema = z
  .object({
    first: z.string(),
    second: z.number(),
  })
  .nullable()
  .superRefine((arg, ctx): arg is { first: string; second: number } => {
    if (!arg) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom, // customize your issue
        message: "object should exist",
      });
    }

    return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing
  })
  // here, TS knows that arg is not null
  .refine((arg) => arg.first === "bob", "`first` is not `bob`!");

‚ö†Ô∏è You must use ctx.addIssue() instead of returning a boolean value to indicate whether the validation passes. If ctx.addIssue is not called during the execution of the function, validation passes.

.transform
To transform data after parsing, use the transform method.
const stringToNumber = z.string().transform((val) => val.length);

stringToNumber.parse("string"); // => 6
Chaining order
Note that stringToNumber above is an instance of the ZodEffects subclass. It is NOT an instance of ZodString. If you want to use the built-in methods of ZodString (e.g. .email()) you must apply those methods before any transforms.
const emailToDomain = z
  .string()
  .email()
  .transform((val) => val.split("@")[1]);

emailToDomain.parse("colinhacks@example.com"); // => example.com
Validating during transform
The .transform method can simultaneously validate and transform the value. This is often simpler and less duplicative than chaining transform and refine.
As with .superRefine, the transform function receives a ctx object with an addIssue method that can be used to register validation issues.
const numberInString = z.string().transform((val, ctx) => {
  const parsed = parseInt(val);
  if (isNaN(parsed)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Not a number",
    });

    // This is a special symbol you can use to
    // return early from the transform function.
    // It has type `never` so it does not affect the
    // inferred return type.
    return z.NEVER;
  }
  return parsed;
});
Relationship to refinements
Transforms and refinements can be interleaved. These will be executed in the order they are declared.
const nameToGreeting = z
  .string()
  .transform((val) => val.toUpperCase())
  .refine((val) => val.length > 15)
  .transform((val) => `Hello ${val}`)
  .refine((val) => val.indexOf("!") === -1);
Async transforms
Transforms can also be async.
const IdToUser = z
  .string()
  .uuid()
  .transform(async (id) => {
    return await getUserById(id);
  });

‚ö†Ô∏è If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.

.default
You can use transforms to implement the concept of "default values" in Zod.
const stringWithDefault = z.string().default("tuna");

stringWithDefault.parse(undefined); // => "tuna"
Optionally, you can pass a function into .default that will be re-executed whenever a default value needs to be generated:
const numberWithRandomDefault = z.number().default(Math.random);

numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
Conceptually, this is how Zod processes default values:

If the input is undefined, the default value is returned
Otherwise, the data is parsed using the base schema

.describe
Use .describe() to add a description property to the resulting schema.
const documentedString = z
  .string()
  .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text‚Ä¶
This can be useful for documenting a field, for example in a JSON Schema using a library like zod-to-json-schema).
.catch
Use .catch() to provide a "catch value" to be returned in the event of a parsing error.
const numberWithCatch = z.number().catch(42);

numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
Optionally, you can pass a function into .catch that will be re-executed whenever a default value needs to be generated. A ctx object containing the caught error will be passed into this function.
const numberWithRandomCatch = z.number().catch((ctx) => {
  ctx.error; // the caught ZodError
  return Math.random();
});

numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
Conceptually, this is how Zod processes "catch values":

The data is parsed using the base schema
If the parsing fails, the "catch value" is returned

.optional
A convenience method that returns an optional version of a schema.
const optionalString = z.string().optional(); // string | undefined

// equivalent to
z.optional(z.string());
.nullable
A convenience method that returns a nullable version of a schema.
const nullableString = z.string().nullable(); // string | null

// equivalent to
z.nullable(z.string());
.nullish
A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both undefined and null. Read more about the concept of "nullish" in the TypeScript 3.7 release notes.
const nullishString = z.string().nullish(); // string | null | undefined

// equivalent to
z.string().nullable().optional();
.array
A convenience method that returns an array schema for the given type:
const stringArray = z.string().array(); // string[]

// equivalent to
z.array(z.string());
.promise
A convenience method for promise types:
const stringPromise = z.string().promise(); // Promise<string>

// equivalent to
z.promise(z.string());
.or
A convenience method for union types.
const stringOrNumber = z.string().or(z.number()); // string | number

// equivalent to
z.union([z.string(), z.number()]);
.and
A convenience method for creating intersection types.
const nameAndAge = z
  .object({ name: z.string() })
  .and(z.object({ age: z.number() })); // { name: string } & { age: number }

// equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
.brand
.brand<T>() => ZodBranded<this, B>
TypeScript's type system is structural, which means that any two types that are structurally equivalent are considered the same.
type Cat = { name: string };
type Dog = { name: string };

const petCat = (cat: Cat) => {};
const fido: Dog = { name: "fido" };
petCat(fido); // works fine
In some cases, its can be desirable to simulate nominal typing inside TypeScript. For instance, you may wish to write a function that only accepts an input that has been validated by Zod. This can be achieved with branded types (AKA opaque types).
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;

const petCat = (cat: Cat) => {};

// this works
const simba = Cat.parse({ name: "simba" });
petCat(simba);

// this doesn't
petCat({ name: "fido" });
Under the hood, this works by attaching a "brand" to the inferred type using an intersection type. This way, plain/unbranded data structures are no longer assignable to the inferred type of the schema.
const Cat = z.object({ name: z.string() }).brand<"Cat">();
type Cat = z.infer<typeof Cat>;
// {name: string} & {[symbol]: "Cat"}
Note that branded types do not affect the runtime result of .parse. It is a static-only construct.
.readonly
.readonly() => ZodReadonly<this>
This method returns a ZodReadonly schema instance that parses the input using the base schema, then calls Object.freeze() on the result. The inferred type is also marked as readonly.
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}>

const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
The inferred type uses TypeScript's built-in readonly types when relevant.
z.array(z.string()).readonly();
// readonly string[]

z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number]

z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date>

z.set(z.string()).readonly();
// ReadonlySet<string>
.pipe
Schemas can be chained into validation "pipelines". It's useful for easily validating the result after a .transform():
z.string()
  .transform((val) => val.length)
  .pipe(z.number().min(5));
The .pipe() method returns a ZodPipeline instance.

Guides and concepts
Type inference
You can extract the TypeScript type of any schema with z.infer<typeof mySchema> .
const A = z.string();
type A = z.infer<typeof A>; // string

const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
What about transforms?
In reality each Zod schema internally tracks two types: an input and an output. For most schemas (e.g. z.string()) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance z.string().transform(val => val.length) has an input of string and an output of number.
You can separately extract the input and output types like so:
const stringToNumber = z.string().transform((val) => val.length);

// ‚ö†Ô∏è Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
Writing generic functions
With TypeScript generics, you can write reusable functions that accept Zod schemas as parameters. This enables you to create custom validation logic, schema transformations, and more, while maintaining type safety and inference.
When attempting to write a function that accepts a Zod schema as an input, it's tempting to try something like this:
function inferSchema<T>(schema: z.ZodType<T>) {
  return schema;
}
This approach is incorrect, and limits TypeScript's ability to properly infer the argument. No matter what you pass in, the type of schema will be an instance of ZodType.
inferSchema(z.string());
// => ZodType<string>
This approach loses type information, namely which subclass the input actually is (in this case, ZodString). That means you can't call any string-specific methods like .min() on the result of inferSchema.
A better approach is to infer the schema as a whole instead of merely its inferred type. You can do this with a utility type called z.ZodTypeAny.
function inferSchema<T extends z.ZodTypeAny>(schema: T) {
  return schema;
}

inferSchema(z.string());
// => ZodString

ZodTypeAny is just a shorthand for ZodType<any, any, any>, a type that is broad enough to match any Zod schema.

The Result is now fully and properly typed, and the type system can infer the specific subclass of the schema.
Inferring the inferred type
If you follow the best practice of using z.ZodTypeAny as the generic parameter for your schema, you may encounter issues with the parsed data being typed as any instead of the inferred type of the schema.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data);
}

parseData("sup", z.string());
// => any
Due to how TypeScript inference works, it is treating schema like a ZodTypeAny instead of the inferred type. You can fix this with a type cast using z.infer.
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) {
  return schema.parse(data) as z.infer<T>;
  //                        ^^^^^^^^^^^^^^ <- add this
}

parseData("sup", z.string());
// => string
Constraining allowable inputs
The ZodType class has three generic parameters.
class ZodType<
  Output = any,
  Def extends ZodTypeDef = ZodTypeDef,
  Input = Output
> { ... }
By constraining these in your generic input, you can limit what schemas are allowable as inputs to your function:
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) {
  return schema.optional();
}

makeSchemaOptional(z.string());
// works fine

makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
Error handling
Zod provides a subclass of Error called ZodError. ZodErrors contain an issues array containing detailed information about the validation problems.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  result.error.issues;
  /* [
      {
        "code": "invalid_type",
        "expected": "string",
        "received": "number",
        "path": [ "name" ],
        "message": "Expected string, received number"
      }
  ] */
}

For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: ERROR_HANDLING.md

Zod's error reporting emphasizes completeness and correctness. If you are looking to present a useful error message to the end user, you should either override Zod's error messages using an error map (described in detail in the Error Handling guide) or use a third-party library like zod-validation-error
Error formatting
You can use the .format() method to convert this error into a nested object.
const result = z
  .object({
    name: z.string(),
  })
  .safeParse({ name: 12 });

if (!result.success) {
  const formatted = result.error.format();
  /* {
    name: { _errors: [ 'Expected string, received number' ] }
  } */

  formatted.name?._errors;
  // => ["Expected string, received number"]
}

Comparison
There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.



Joi
https://github.com/hapijs/joi
Doesn't support static type inference üòï
Yup
https://github.com/jquense/yup
Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.

Supports casting and transforms
All object fields are optional by default



Missing promise schemas
Missing function schemas
Missing union & intersection schemas


io-ts
https://github.com/gcanti/io-ts
io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
import * as t from "io-ts";

const A = t.type({
  foo: t.string,
});

const B = t.partial({
  bar: t.number,
});

const C = t.intersection([A, B]);

type C = t.TypeOf<typeof C>;
// returns { foo: string; bar?: number | undefined }
You must define the required and optional props in separate object validators, pass the optionals through t.partial (which marks all properties as optional), then combine them with t.intersection .
Consider the equivalent in Zod:
const C = z.object({
  foo: z.string(),
  bar: z.number().optional(),
});

type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
This more declarative API makes schema definitions vastly more concise.
io-ts also requires the use of gcanti's functional programming library fp-ts to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on fp-ts necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the fp-ts nomenclature to use the library.

Supports codecs with serialization & deserialization transforms
Supports branded types
Supports advanced functional programming, higher-kinded types, fp-ts compatibility
Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
Missing nonempty arrays with proper typing ([T, ...T[]])
Missing promise schemas
Missing function schemas

Runtypes
https://github.com/runtypes/runtypes
Runtypes is focused on ergonomics, with good type inference support.

Supports "pattern matching": computed properties that distribute over unions
Supports branded types
Supports template literals
Supports conformance to predefined static types
Missing object methods: (deepPartial, merge)
Missing promise schemas
Missing error customization

Ow
https://github.com/sindresorhus/ow
Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. int32Array , see full list in their README).
If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.

Changelog
View the changelog at CHANGELOG.md
   


      

        

      
        
          
            
  About

      
        TypeScript-first schema validation with static type inference
      
      
        
        
          zod.dev
        
      

    Topics
    
        
      
  typescript

      
  static-types

      
  schema-validation

      
  type-inference

      
  runtime-validation

  

    

    Resources
    
      
        
        Readme
    

  
    License
  
    
      
     MIT license
    
  


    Code of conduct
    
      
        
        Code of conduct
      
    


  

  
    
      Activity  


  Stars
  
    
      37.4k
      stars  

  Watchers
  
    
      70
      watching  

  Forks
  
    
      1.4k
      forks  


    
      
          Report repository
    


          
        

        
            
              
                
  Releases
      94

  
    
    
      
        v3.24.3
        
          Latest
      
      Apr 16, 2025
    
    
      + 93 releases
              
            

        
            
              
                
Sponsor this project

        
          
          ¬†
        
               Sponsor
  
    Learn more about GitHub Sponsors
  

              
            

        
            
              
                
  
  Packages
      0


      
        No packages published 
      



              
            

        
            
              
                
  
    Used by 2.2m  

  
    
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
    
      
        + 2,156,500
      
  

              
            

        
            
              
                
  Contributors
      335


    
  
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    
    
      
        
      
    





  
    + 321 contributors
              
            

        
        
            
              
                Languages

  
    
    
    


    
        
          
          TypeScript
          96.3%
        
    
    
        
          
          JavaScript
          1.9%
        
    
    
        
          
          HTML
          1.8%\n\n\n\nSign in to GitHub
    


    



  
    

  
    
      
    
    
      
      {{ message }}

    
  

  



    
      
        
      
    

    
      
  

    
      Username or email address
    
    

  
    
      Password
    
    
    Forgot password?
    













    
  
  
      
  

    


        Password login alternatives
        
            
    
        
    Sign in with a passkey
  

    
  

          
            New to GitHub?
              Create an account\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/LICENSECopy path Blame  Blame        Latest commit¬†HistoryHistory21 lines (17 loc) ¬∑ 1.05 KB¬†mainBreadcrumbszod/LICENSETopFile metadata and controlsCodeBlame21 lines (17 loc) ¬∑ 1.05 KBRaw123456789101112131415161718192021MIT License
Copyright (c) 2020 Colin McDonnell
Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  
    
          Stargazers

  
  
    
  
      
      All 5,000+
      
      You know
  


      
          
  
    
      
        
      

      
        
          
    fux-plus
        
        
 Joined on Nov 11, 2024

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    d-stoll
        
        

  
  Is from Munich
  
    Munich
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    CauaYves
        
        

  Works for MultiClubes
  
  
    MultiClubes
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    jaaymes
        
        

  
  Is from Ara√ßatuba - SP
  
    Ara√ßatuba - SP
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    nicolasribeiroo
        
        

  Works for @withmenth
  
  
    @withmenth
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    0x3c
        
        

  Works for China
  
  
    China
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    lessquo
        
        

  
  Is from Seoul, South Korea
  
    Seoul, South Korea
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    UnownPlain
        
        

  
  Is from Milky Way Galaxy
  
    Milky Way Galaxy
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    mitkury
        
        
 Joined on Feb 19, 2011

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    Archi711
        
        

  Works for NFU Studio
  
  
    NFU Studio
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    baltazartroisville
        
        
 Joined on Mar 19, 2023

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    mavrekc
        
        

  
  Is from Pakistan
  
    Pakistan
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    MarkFontenot
        
        

  Works for Northeastern University
  
  
    Northeastern University
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    rickluo94
        
        

  
  Is from Taiwan
  
    Taiwan
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    infodusha
        
        

  
  Is from Belgrade, Serbia
  
    Belgrade, Serbia
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    radcolor
        
        

  Works for Indian Institute of Technology Bhilai
  
  
    Indian Institute of Technology Bhilai
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    amumubuku
        
        

  
  Is from GuangZhou, China
  
    GuangZhou, China
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    gabrielbaltar
        
        

  Works for Mongeral Aegon 
  
  
    Mongeral Aegon 
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    kk-vv
        
        

  Works for Alone
  
  
    Alone
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    nferreira1
        
        

  Works for C√≠rculo Militar de S√£o Paulo
  
  
    C√≠rculo Militar de S√£o Paulo
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    ishahroz
        
        

  
  Is from Halifax, Canada
  
    Halifax, Canada
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    pedrodevelopagens
        
        

  Works for @OpSystemsInc 
  
  
    @OpSystemsInc 
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    Mikael-R
        
        
 Joined on Jan 23, 2020

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    tumbuzed12983
        
        
 Joined on Apr 24, 2025

        
          
  
    
      Follow
    
  


        
      
    
  

      
      
        PreviousNext\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Insights: colinhacks/zod

  
  
        

  
    Pulse
    Contributors
      Community Standards
    Commits
    Code frequency
      Dependency graph
    Network
    Forks
  



  
      
  
  Switch to tree view

  
    Forks
      
      
        
      Period:
    2 years


  
    
      
  
        Filter by period


    


      


          
  

    

    
        
  1 month

        
  6 months

        
  1 year

        
  2 years

        
  5 years


      Nothing to show
    


          Any repository that has not been created or
    updated during this period will be excluded.



        
      Repository type:
    
        Active



  
    
      
  
        Filter by repository type


    


      


          
  

    

    
        
            
            Active
            Repositories with push activity


        
            
            Inactive
            Repositories with no push activity


        
            
            Network
            Forks of other forks


        
            
            Archived
            Archived repositories


        
            
            Starred
            Repositories with at least 1 star



      Nothing to show
    


      


        
      Sort:
    Most starred


  
    
      
  
        Sort by


    


      


          
  

    

    
        
          Most starred

        
          Recently updated

        
          Open issues

        
          Open pull requests


      Nothing to show
    


      





  
  
  
  
    
        
  
    
      
      
        kentcdodds
    
      /
    zod  
      
    
      7

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    July 13, 2023 23:20


      
  
    Updated
    July 13, 2023 23:22


  

        
  
    
      
      
        KATT
    
      /
    zod  
      
    
      3

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    May 26, 2021 23:03


      
  
    Updated
    December 17, 2024 10:26


  

        
  
    
      
      
        AsharibAli
    
      /
    zod  
      
    
      2

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 17, 2025 08:46


      
  
    Updated
    April 17, 2025 10:36


  

        
  
    
      
      
        JonnyBurger
    
      /
    zod  
      
    
      2

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    February 5, 2024 13:27


      
  
    Updated
    February 5, 2024 13:29


  

        
  
    
      
      
        dellamora
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    May 22, 2024 18:30


      
  
    Updated
    May 22, 2024 23:47


  

        
  
    
      
      
        Kumar06Lav
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      1

      
  
    Created
    August 8, 2024 14:37


      
  
    Updated
    October 7, 2024 09:00


  

        
  
    
      
      
        AmirulAndalib
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      1

      
  
    Created
    February 5, 2023 02:52


      
  
    Updated
    May 16, 2024 00:10


  

        
  
    
      
      
        ecyrbe
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    June 20, 2022 21:11


      
  
    Updated
    June 25, 2023 08:06


  

        
  
    
      
      
        davidjbng
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    October 7, 2022 11:45


      
  
    Updated
    December 19, 2024 15:31


  

        
  
    
      
      
        YehonatanMoreno
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    May 24, 2024 06:52


      
  
    Updated
    May 24, 2024 13:40


  

        
  
    
      
      
        rakheesingh
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    December 2, 2023 12:35


      
  
    Updated
    April 27, 2024 00:55


  

        
  
    
      
      
        sumit6499
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    February 6, 2025 05:31


      
  
    Updated
    March 7, 2025 14:08


  

        
  
    
      
      
        udahal2
    
      /
    zen  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 7, 2025 21:08


      
  
    Updated
    April 17, 2025 13:05


  

        
  
    
      
      
        underwater
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    October 25, 2023 07:34


      
  
    Updated
    May 19, 2024 09:24


  

        
  
    
      
      
        schalkventer
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    January 6, 2024 05:59


      
  
    Updated
    December 10, 2024 02:59


  

        
  
    
      
      
        NextThread
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    August 13, 2023 05:29


      
  
    Updated
    August 13, 2023 05:34


  

        
  
    
      
      
        m7yue
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    July 11, 2023 08:10


      
  
    Updated
    July 11, 2023 12:54


  

        
  
    
      
      
        Rofram
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    February 3, 2023 15:32


      
  
    Updated
    September 16, 2023 22:30


  

        
  
    
      
      
        jackton1
    
      /
    zod  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    June 23, 2022 15:12


      
  
    Updated
    April 8, 2024 05:47


  

        
  
    
      
      
        oussamaBGZ
    
      /
    zod  
      
    
      0

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    August 5, 2023 21:35


      
  
    Updated
    September 10, 2023 00:31


  

        
  
    
      
      
        ozgurozalp
    
      /
    zod  
      
    
      0

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 16, 2025 17:16


      
  
    Updated
    April 21, 2025 20:28


  

        
  
    
      
      
        oljimenez
    
      /
    zod  
      
    
      0

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    August 5, 2023 09:29


      
  
    Updated
    September 7, 2023 02:08


  

        
  
    
      
      
        olehmisar
    
      /
    zod  
      
    
      0

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    October 8, 2023 10:13


      
  
    Updated
    July 22, 2024 20:45


  

        
  
    
      
      
        oimo23
    
      /
    zod  
      
    
      0

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    February 22, 2025 15:12


      
  
    Updated
    February 22, 2025 16:37


  

        
  
    
      
      
        odbol
    
      /
    zod  
      
    
      0

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    November 7, 2024 19:58


      
  
    Updated
    November 7, 2024 20:03


  

  

  Previous 1 2 3 4 5 ‚Ä¶ 16 17 Next\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
    BranchesOverviewActiveStaleAllSearchDefaultBranchUpdatedCheck statusBehindAheadPull requestAction menumainCopy branch name to clipboard¬†Apr 22, 2025Delete branchBranch menuActive branchesBranchUpdatedCheck statusBehindAheadPull requestAction menuv4Copy branch name to clipboard¬†Apr 24, 2025Delete branchBranch menudeemphasize-extendCopy branch name to clipboard¬†Apr 23, 2025Delete branchBranch menuv4-add-back-docsCopy branch name to clipboard¬†Apr 10, 2025Delete branchBranch menuv4-remove-docsCopy branch name to clipboard¬†Apr 10, 2025Delete branchBranch menucolinhacks-patch-1Copy branch name to clipboard¬†Apr 8, 2025Delete branchBranch menuView more branches\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Tags: colinhacks/zod

  
  
    
  Releases
  Tags


  


  
      
  
  
            
          Tags


              
              
                
  
    
      v3.24.3
        
          
Toggle v3.24.3's commit message

        
    
    
      


    
  

    
      add back packages/docs


    

  
      
        
        Apr 16, 2025
      

    
      
        
        a18d25b
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v4.0.0-beta
        
          
Toggle v4.0.0-beta's commit message

        
    
    
      


    
  

    
      Add install instructions


    

  
      
        
        Apr 10, 2025
      

    
      
        
        46e96c7
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.24.2
    
    
      


    
  


  
      
        
        Feb 11, 2025
      

    
      
        
        e308703
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.24.1
    
    
      


    
  


  
      
        
        Dec 11, 2024
      

    
      
        
        65adeea
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.24.0
        
          
Toggle v3.24.0's commit message

        
    
    
      


    
  

    
      Fix deno tests


    

  
      
        
        Dec 10, 2024
      

    
      
        
        b333f96
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.23.8
    
    
      


    
  


  
      
        
        May 8, 2024
      

    
      
        
        ca42965
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.23.7
        
          
Toggle v3.23.7's commit message

        
    
    
      


    
  

    
      3.23.7


    

  
      
        
        May 7, 2024
      

    
      
        
        f985b5b
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.23.6
    
    
      


    
  


  
      
        
        May 3, 2024
      

    
      
        
        93b480b
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.23.5
        
          
Toggle v3.23.5's commit message

        
    
    
      


    
  

    
      3.23.5


    

  
      
        
        Apr 29, 2024
      

    
      
        
        541a862
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            
            
              
                
  
    
      v3.23.4
    
    
      


    
  


  
      
        
        Apr 23, 2024
      

    
      
        
        45107f7
      
    

    
      
        
        zip
      
    

    
      
        
        tar.gz
      
    

      
        
          
          Notes
        
      

  



              
            

  
      
        PreviousNext\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
  


  Issues: colinhacks/zod



  
      Beta
      
    ‚ö°Try the new experience
  


    


  

    
      
      
    
      

  
    
    Labels
      25
  
    
    Milestones
      0


    
  
  
    
      

  
    
    Labels
      25
  
    
    Milestones
      0


    
             


  
    
    New issue
  
  
            
    
              
  



  
    Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
  

  
          Sign up for GitHub

  

  By clicking ‚ÄúSign up for GitHub‚Äù, you agree to our terms of service and
  privacy statement. We‚Äôll occasionally send you account related emails.

  
    Already on GitHub?
    Sign in
    to your account
  



  

  




  
    

    
      
      581 Open
    

    
      
      1,618 Closed
    


  

  
        

  
    
      

    
      
      581 Open
    

    
      
      1,618 Closed
    


    

      
        
  
    
      Author
      
    
    
      
        
          Filter by author
          
            
          
        
        
          
        
        
          
            
              
      Loading

          
          
            
            
              author:
              Filter by this user
            
        
      
    
  

          

  
    Label
    
  
  
    
      
        Filter by label
        
          
        
      
      
        
      
      
        
      Loading

      
        
          Use alt + click/return to exclude labels
        
        
          or ‚áß + click/return for logical OR
        
      
    
  


        
            

        Projects
    
  
    
      
        Filter by project
        
          
        
      
      
        
      Loading

     
  


            

        Milestones
    
  
    
      
        Filter by milestone
        
          
        
      
      
        
      
      
        
      Loading

    
  


        
        

  
    Assignee
    
  
  
    
      
        Filter by who‚Äôs assigned
        
          
        
      
      
        
      
      
        
          
            
            Assigned to nobody
          
          
            
      Loading

        
        
          
          
            assignee:
            Filter by this user
          
      
    
  


        

  
    Sort
    
  
  
    
      
        Sort by
        
          
        
      

      
          
            
            Newest
          
          
            
            Oldest
          
          
            
            Most commented
          
          
            
            Least commented
          
          
            
            Recently updated
          
          
            
            Least recently updated
          
          
            
            Best match
          

        Most reactions
        
            
              üëç
            
            
              üëé
            
            
              üòÑ
            
            
              üéâ
            
            
              üòï
            
            
              ‚ù§Ô∏è
            
            
              üöÄ
            
            
              üëÄ
            
        
      
    
  


      
  




      Issues list
      
        
              

  


    
      
        
      
    

    
    

      v4 & v3: base64 check causes "Maximum call stack size exceeded"


      
        
          #4283
            opened Apr 25, 2025 by
            infodusha
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: toJSONSchema: inability to customize references


      
        
          #4281
            opened Apr 25, 2025 by
            RobinTail
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Type signature of enum input is not properly inferred


      
        
          #4278
            opened Apr 24, 2025 by
            pattobrien
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Providing default value for base schema doesn't reference base schema in generated JSON Schema


      
        
          #4276
            opened Apr 24, 2025 by
            pattobrien
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: toJSONSchema: _ref complicates overrides


      
        
          #4275
            opened Apr 24, 2025 by
            RobinTail
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: toJSONSchema: "input" io is ignored for transformations meta


      
        
          #4274
            opened Apr 24, 2025 by
            RobinTail
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime


      
        
          #4273
            opened Apr 24, 2025 by
            samnang
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: The isPlainObject fails on objects without a prototype


      
        
          #4270
            opened Apr 23, 2025 by
            noahmayr
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Missing native support for recursive types as plain function parameters


      
        
          #4269
            opened Apr 23, 2025 by
            LorenzoBloedow
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Error formatting in v4 using format and treeifyError has different output


      
        
          #4268
            opened Apr 23, 2025 by
            0xMurage
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Recursive types don't work with discriminated unions


      
        
          #4264
            opened Apr 23, 2025 by
            pauldraper
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Question(v4): What is the setting value for path in issues when an error occurs in the discriminatedUnion schema?


      
        
          #4263
            opened Apr 23, 2025 by
            chimame
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Question(v4): What is the behavior of the error message for the file schema in @zod/mini?


      
        
          #4262
            opened Apr 23, 2025 by
            chimame
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Consider exporting $ZodTypes


      
        
          #4258
            opened Apr 22, 2025 by
            MaciejDabek
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      V4: toJSONSchema does not render recursive reference


      
        
          #4254
            opened Apr 21, 2025 by
            pakrym-oai
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Schema key order is no longer preserved


        
              

                zod4

        
      
        
          #4251
            opened Apr 21, 2025 by
            crisog
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            3
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      V4: toJSONSchema z.literal is missing "type"


      
        
          #4249
            opened Apr 20, 2025 by
            marclp-es
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Zod Mini Edge runtime compatibility


      
        
          #4248
            opened Apr 20, 2025 by
            SjoerdDev02
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: z.interface cyclical reference with z.discriminatedUnion


      
        
          #4245
            opened Apr 20, 2025 by
            riywo
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Error in Enum docs for .exclude() / .extract()


      
        
          #4240
            opened Apr 20, 2025 by
            juangiordana
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4(feature): Add cron string format


      
        
          #4239
            opened Apr 19, 2025 by
            NuroDev
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Infer with key optional properties on an extended interface are not represented correctly


      
        
          #4238
            opened Apr 19, 2025 by
            justin-prather
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: Type violation upon piping into coerced types


      
        
          #4236
            opened Apr 19, 2025 by
            martinjlowm
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      core 0.8.0: circular schemas via ZodLazy stopped working


      
        
          #4234
            opened Apr 19, 2025 by
            RobinTail
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      v4: add z.record().partial() for v3 compatibility


      
        
          #4232
            opened Apr 18, 2025 by
            MaciejDabek
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


        
      
  

  
      Previous 1 2 3 4 5 ‚Ä¶ 23 24 Next
  

  
      Previous Next
  

  
  
  ProTip!
  Type g p on any issue or pull request to go back to the pull request listing page.\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
  


  Pull requests: colinhacks/zod




    


  

    
      
      
    
      

  
    
    Labels
      25
  
    
    Milestones
      0


    
  
  
    
      

  
    
    Labels
      25
  
    
    Milestones
      0


    
            
    New pull request
            New
  

  




  
    

    
      
      107 Open
    

    
      
      924 Closed
    


  

  
        

  
    
      

    
      
      107 Open
    

    
      
      924 Closed
    


    

      
        
  
    
      Author
      
    
    
      
        
          Filter by author
          
            
          
        
        
          
        
        
          
            
              
      Loading

          
          
            
            
              author:
              Filter by this user
            
        
      
    
  

          

  
    Label
    
  
  
    
      
        Filter by label
        
          
        
      
      
        
      
      
        
      Loading

      
        
          Use alt + click/return to exclude labels
        
        
          or ‚áß + click/return for logical OR
        
      
    
  


        
            

        Projects
    
  
    
      
        Filter by project
        
          
        
      
      
        
      Loading

     
  


            

        Milestones
    
  
    
      
        Filter by milestone
        
          
        
      
      
        
      
      
        
      Loading

    
  


            
        Reviews
    
  
    
      
        Filter by reviews
        
          
        
      
      
          
            
            No reviews
          
          
            
            Review required
          
          
            
            Approved review
          
          
            
            Changes requested
          
      
    
  


        
        

  
    Assignee
    
  
  
    
      
        Filter by who‚Äôs assigned
        
          
        
      
      
        
      
      
        
          
            
            Assigned to nobody
          
          
            
      Loading

        
        
          
          
            assignee:
            Filter by this user
          
      
    
  


        

  
    Sort
    
  
  
    
      
        Sort by
        
          
        
      

      
          
            
            Newest
          
          
            
            Oldest
          
          
            
            Most commented
          
          
            
            Least commented
          
          
            
            Recently updated
          
          
            
            Least recently updated
          
          
            
            Best match
          

        Most reactions
        
            
              üëç
            
            
              üëé
            
            
              üòÑ
            
            
              üéâ
            
            
              üòï
            
            
              ‚ù§Ô∏è
            
            
              üöÄ
            
            
              üëÄ
            
        
      
    
  


      
  




      Pull requests list
      
        
              

  


    
      
        
      
    

    
    

      Update ecosystem.tsx to add "zod-config" with v4 support via RC


      
        
          #4282
            opened Apr 25, 2025 by
            alexmarqs
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      [v4 beta] Properly support branded keys in records


      
        
          #4277
            opened Apr 24, 2025 by
            jthemphill
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      .catchall() method should accept undefined


      
        
          #4272
            opened Apr 24, 2025 by
            called-d
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Deemphasize extend


      
        
          #4271
            opened Apr 24, 2025 by
            colinhacks
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            19
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      V4(fix): generate json-schema with min/max(0)


      
        
          #4267
            opened Apr 23, 2025 by
            PandaWorker
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      fix(transform): abort further processing when inner value is invalid


      
        
          #4266
            opened Apr 23, 2025 by
            DASPRiD
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
          
              
                
                3 
              
          
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Add composable-functions as a library powered by Zod supporting v4


      
        
          #4261
            opened Apr 22, 2025 by
            gustavoguichard
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Add support for kubb as part of the v4 upgrade


      
        
          #4260
            opened Apr 22, 2025 by
            stijnvanhulle
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      #4238 Fix extended interfaces causing optional keys to break types


      
        
          #4257
            opened Apr 22, 2025 by
            SeeJayy
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      chore: add orval to XtoZod ecosystems in v4


      
        
          #4256
            opened Apr 22, 2025 by
            soartec-lab
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Languages: add German language


      
        
          #4253
            opened Apr 21, 2025 by
            simon04
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
          
              
                
                  
                  1
                
              
          
      

      
        
          
          
        
      

      
          
            
            4
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(lang): Added initial Tamil locale


      
        
          #4237
            opened Apr 19, 2025 by
            sasivarnan
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): Add SL locale


      
        
          #4231
            opened Apr 18, 2025 by
            TadejPolajnar
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(lang): Added initial Thai locale


      
        
          #4230
            opened Apr 18, 2025 by
            mildronize
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            16
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): Add Norwegian


      
        
          #4229
            opened Apr 18, 2025 by
            mskutle
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): add Traditional Chinese


      
        
          #4226
            opened Apr 18, 2025 by
            neighborhood999
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            3
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Add-fr-ca-locale


      
        
          #4218
            opened Apr 17, 2025 by
            sohocine
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            21
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): add Macedonian üá≤üá∞ language 


      
        
          #4214
            opened Apr 17, 2025 by
            antonio-ivanovski
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            3
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): Add Urdu language


      
        
          #4208
            opened Apr 17, 2025 by
            AsharibAli
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            3
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Languages: Add Farsi language


      
        
          #4207
            opened Apr 17, 2025 by
            Mojtaba-NA
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            10
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Languages: Add Korean language


      
        
          #4206
            opened Apr 17, 2025 by
            Geuni620
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            9
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Languages: Add Malay language


      
        
          #4204
            opened Apr 17, 2025 by
            kyziq
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            3
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(lang): Add ota locale in Latin script


      
        
          #4200
            opened Apr 16, 2025 by
            kadimelifba
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): add belarusian language


      
        
          #4199
            opened Apr 16, 2025 by
            VladSez
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            5
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      feat(locale): add russian language


      
        
          #4197
            opened Apr 16, 2025 by
            VladSez
            
        

        
          
  
    

  
    Loading‚Ä¶




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            13
          
      
    

      
  


        
      
  

  
      Previous 1 2 3 4 5 Next
  

  
      Previous Next
  

  
  
  ProTip!
  Find all pull requests that aren't related to any open issues with -linked:issue.\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
    colinhacks zod Discussions

    
  
    Pinned Discussions
    
        
          
  
    
      

      
        A "create a schema according to this type" helper

      
              üí°
          Ideas

    ¬∑
              rphlmr
          

    


        
        
          
  
    
      

      
        Package Governance

      
              üí°
          Ideas

    ¬∑
              prescience-data
          

    


        
    
  



  
  
    
  
    
      
        Search all discussions
      
      
          
            
          
        
          
          
            
            
          
        
          Clear
            


      
      
  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  



  


        
            
              
                
                
                
              
            
        
      
        
          
        
        
    
    
  

  
    
        
      
    
        Sort by:
        Latest activity
      
  
    
      
    


    
      
          
            
            Latest activity
          
          
            
            Date created
          
          
            
            Top: Past day
          
          
            
            Top: Past week
          
          
            
            Top: Past month
          
          
            
            Top: Past year
          
          
            
            Top: All
          
      
    
  

    

    
      
  
      
    Label
  
    
      
    


    
      
  
    
      
        Filter by label
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
                  
                    
                      
  
                    
                    
                        
                          
                          Sorry, something went wrong.
                        
                    
            
            
              No labels found. Sorry about that.
            
        
          Use alt + click/return to exclude labels.

  

    

    
      
  
      
    Filter: Open
  
    
      
    




  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Open
      

  

        
    
    
    
        
          
        
      
        
          Closed
      

  

        
    
    
    
        
          
        
      
        
          Locked
      

  

        
    
    
    
        
          
        
      
        
          Unlocked
      

  

        
    
    
    
        
          
        
      
        
          Answered
      

  

        
    
    
    
        
          
        
      
        
          Unanswered
      

  

        
    
    
    
        
          
        
      
        
          All
      

  

    




      
  

    

    
    
  



  
  
        
    Categories, most helpful, and community links

  
  
    Categories

  


  
  
    
        
  
      
        
      
    
            View all discussions

    

        
  
      
        üì£
      
    
              Announcements

    

        
  
      
        üí¨
      
    
              General

    

        
  
      
        üí°
      
    
              Ideas

    

        
  
      
        üó≥Ô∏è
      
    
              Polls

    

        
  
      
        üôè
      
    
              Q&A

    

        
  
      
        üôå
      
    
              Show and tell

    




    
      
        
      Loading

    

  Community links
  
    
  
    
      
    
    Code of conduct



    
  
    
      
    
    zod.dev








          Discussions

  
      
  
    
      
          
            


    
    
            
        4
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            When z.infer a Record with Brand as a key, it becomes a Partial Record.

          
            Hiroshiba
            
            asked
            Feb 19, 2023
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              19          
        
      
    
  


      
  
    
      
          
            


    
    
            
        7
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Zod schema serialize/deserialize

          
            valerii15298
            
            asked
            Feb 11, 2023
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              20          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Circular Dependency with Lazy

          
            ayazemre
            
            asked
            Apr 14, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              1          
        
      
    
  


      
  
    
      
          
            


    
    
            
        2
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Is it possible to access currently validated values in schema definition?

          
            Julian24Design
            
            asked
            Mar 18, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              1          
        
      
    
  


      
  
    
      
          
            


    
    
            
        2
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            In Zod 4, why does .catch() change the input types?

          
            rostero1
            
            asked
            Apr 22, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              2          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            transform hyphenated string to camelCase

          
            jonathanstanley
            
            asked
            Mar 25, 2023
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              3          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Best regex / validation for email + email providers

          
            Steveb599
            
            asked
            Apr 20, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              1          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            z.discriminatedUnion where the field doesn't exist on one of the options

          
            GavynWithLayer
            
            asked
            Apr 20, 2025
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              5          
        
      
    
  


      
  
    
      
          
            


    
    
            
        4
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            z.coerce.number() defaults empty strings to 0

          
            srowe0091
            
            asked
            May 26, 2023
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              26          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            How do I use .default() and .coerce in validation?

          
            nksfrank
            
            asked
            Apr 19, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              0          
        
      
    
  


      
  
    
      
          
            


    
    
            
        2
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Zod: allow undefined as default value for a required field

          
            knoefel
            
            asked
            Jun 8, 2022
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              5          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            v4: How to get the base type of a generic Zod schema?

          
            ben-eb
            
            asked
            Apr 15, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              0          
        
      
    
  


      
  
    
      
          
            


    
    
            
        2
        You must be logged in to vote
    
  


          
        
          
            üí¨
          
        
      
      
        
          
            Custom library types in Zod v4

          
            DASPRiD
            
            started
            Apr 13, 2025
             in 
            General
            
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              0          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üí°
          
        
      
      
        
          
            z.codec for freely converting between isomorphic data structures

          
            stefan-wullems
            
            started
            Apr 11, 2025
             in 
            Ideas
            
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              0          
        
      
    
  


      
  
    
      
          
            


    
    
            
        3
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Calling .merge() after refining an object

          
            ravinggenius
            
            asked
            Jan 12, 2023
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              1          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üí°
          
        
      
      
        
          
            Custom parse context

          
            strblr
            
            started
            Apr 10, 2025
             in 
            Ideas
            
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              0          
        
      
    
  


      
  
    
      
          
            


    
    
            
        4
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Is there a way to sanitise request inputs  using zod?

          
            SandeepGamot
            
            asked
            Aug 27, 2022
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              12          
        
      
    
  


      
  
    
      
          
            


    
    
            
        6
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Return data and errors

          
            danvoyce
            
            asked
            Mar 28, 2023
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              13          
        
      
    
  


      
  
    
      
          
            


    
    
            
        2
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Case insensitive keys on objects

          
            alexhumph
            
            asked
            Oct 31, 2023
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              2          
        
      
    
  


      
  
    
      
          
            


    
    
            
        2
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            How to check for dayjs type with zod?

          
            anthonyma94
            
            asked
            Jul 13, 2022
             in 
            Q&A
            
                
                  ¬∑ Answered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              10          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Create XOR type using z.infer

          
            CRT3D-TD
            
            asked
            Mar 27, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              1          
        
      
    
  


      
  
    
      
          
            


    
    
            
        26
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            What is zod's approach to conditionally requiring fields?

          
            ljunio
            
            asked
            Feb 15, 2022
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              23          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Block email providers

          
            Steveb599
            
            asked
            Mar 26, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      

            
  
      
      
          
          
            
              1          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            Extended zod error messages from existing objects?

          
            anthonyalayo
            
            asked
            Mar 27, 2025
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      

            
  
      
          
          
            
              0          
        
      
    
  


      
  
    
      
          
            


    
    
            
        1
        You must be logged in to vote
    
  


          
        
          
            üôè
          
        
      
      
        
          
            A schema for an array that includes at least one item of a certain type

          
            vincent822
            
            asked
            Nov 4, 2023
             in 
            Q&A
            
                
                  ¬∑ Unanswered
                
            
          
        
        
          
            
  
      
      
        
      

            
  
      
      
        
      
          
          
            
              13          
        
      
    
  


  

        
          
            
              Previous 1 2 3 4 5 ‚Ä¶ 37 38 Next\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  Actions: colinhacks/zod
  
  
    
      
                  

  
    Actions
  

  
    
      

        
  
  
    
        
          

    
    
    
      
        
                        All workflows

      

  


          
        
          


  
      
  
    Workflows
  

    
        

    
    
    
      
        
          
  Dependabot Updates

      

  



        

    
    
    
      
        
          
  Release betas

      

  



        

    
    
    
      
        
          
  Release on npm

      

  



        

    
    
    
      
        
          
  Release on npm (canary)

      

  



        

    
    
    
      
        
          
  test

      

  



          

    
    
    
      
        
                        Show more workflows...

      

  






          
        
          


  
      
  
    Management
  

    
        

    
    
    
        
          
        
      
        
                        Caches

      

  


        

    
    
    
        
          
        
      
        
                          Deployments

      
        
          
        

  


    



  

        
          
        

        
          
        
      
    



                
      

  
  
  
    
            
          
            
              All workflows
            
          
      
      
              All workflows
      


  
      
        
          
            Actions
          
          
            
          
        
      
    
      
                
        Loading...
        
      Loading

      
      
        Sorry, something went wrong.
      


    


      

      

                
          
  
    
    
    
      
    

    
      
        
      
      
        
        
        will be ignored since log searching is not yet available
      
    


        

  
            Showing runs from all workflows

            
  
    
    
    
      
    

    
      
        
      
      
        
        
        will be ignored since log searching is not yet available
      
    




      
    




  
    
      984 workflow runs
    
  


  
    
        
          984 workflow runs
        
    
    
      
  
      
    Event
  
    
      
    


    
      
  
    
      
        Filter by Event
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
                  
                    
                      
  
                    
                    
                        
                          
                          Sorry, something went wrong.
                        
                    
            
            
              No matching events.
            
        
      
  

      
  
      
    Status
  
    
      
    


    
      
  
    
      
        Filter by Status
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
                  
                    
                      
  
                    
                    
                        
                          
                          Sorry, something went wrong.
                        
                    
            
            
              No matching statuses.
            
        
      
  

      
  
      
    Branch
  
    
      
    


    
      
  
    
      
        Filter by Branch
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
                  
                    
                      
  
                    
                    
                        
                          
                          Sorry, something went wrong.
                        
                    
            
            
              No matching branches.
            
        
      
  

      
  
      
    Actor
  
    
      
    


    
      
  
    
      
        Filter by Actor
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
                  
                    
                      
  
                    
                    
                        
                          
                          Sorry, something went wrong.
                        
                    
            
            
              No matching users.
            
        
      
  

    
  


      


    
  
    
      
          

    


          
            Update ecosystem.tsx to add "zod-config" with v4 support via RC
          
        

      
        test
        #2533:

        
            Pull request #4282

            synchronize
            by
              alexmarqs
              
        
      

      
        
  
  April 25, 2025 08:42


            
      
      
        1m 5s
      
    

          alexmarqs:patch-1
      
    

    
        alexmarqs:patch-1
    

    
      
        
          
  
  April 25, 2025 08:42


              
      
      
        1m 5s
      
    

        

        
            
                    

              

                  
                    
                      View #4282
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Update ecosystem.tsx to add "zod-config" with v4 support via RC
          
        

      
        test
        #2532:

        
            Pull request #4282

            opened
            by
              alexmarqs
              
        
      

      
        
  
  April 25, 2025 08:31


            
      
      
        1m 5s
      
    

          alexmarqs:patch-1
      
    

    
        alexmarqs:patch-1
    

    
      
        
          
  
  April 25, 2025 08:31


              
      
      
        1m 5s
      
    

        

        
            
                    

              

                  
                    
                      View #4282
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            [v4 beta] Properly support branded keys in records
          
        

      
        test
        #2531:

        
            Pull request #4277

            synchronize
            by
              jthemphill
              
        
      

      
        
  
  April 24, 2025 22:27


            
      
      
        59s
      
    

          jthemphill:record-branded-keys
      
    

    
        jthemphill:record-branded-keys
    

    
      
        
          
  
  April 24, 2025 22:27


              
      
      
        59s
      
    

        

        
            
                    

              

                  
                    
                      View #4277
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            [v4 beta] Properly support branded keys in records
          
        

      
        test
        #2530:

        
            Pull request #4277

            synchronize
            by
              jthemphill
              
        
      

      
        
  
  April 24, 2025 22:26


            
      
      
        1m 0s
      
    

          jthemphill:record-branded-keys
      
    

    
        jthemphill:record-branded-keys
    

    
      
        
          
  
  April 24, 2025 22:26


              
      
      
        1m 0s
      
    

        

        
            
                    

              

                  
                    
                      View #4277
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            [v4 beta] Properly support branded keys in records
          
        

      
        test
        #2529:

        
            Pull request #4277

            synchronize
            by
              jthemphill
              
        
      

      
        
  
  April 24, 2025 22:14


            
      
      
        1m 1s
      
    

          jthemphill:record-branded-keys
      
    

    
        jthemphill:record-branded-keys
    

    
      
        
          
  
  April 24, 2025 22:14


              
      
      
        1m 1s
      
    

        

        
            
                    

              

                  
                    
                      View #4277
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            [v4 beta] Properly support branded keys in records
          
        

      
        test
        #2528:

        
            Pull request #4277

            opened
            by
              jthemphill
              
        
      

      
        
  
  April 24, 2025 22:05


            
      
      
        1m 0s
      
    

          jthemphill:record-branded-keys
      
    

    
        jthemphill:record-branded-keys
    

    
      
        
          
  
  April 24, 2025 22:05


              
      
      
        1m 0s
      
    

        

        
            
                    

              

                  
                    
                      View #4277
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            0.9.0
          
        

      
        Release betas
        #34:

        
            Commit 5a01d8d

            pushed
            by
              colinhacks
              
        
      

      
        
  
  April 24, 2025 16:38


            
      
      
        1m 8s
      
    

          v4
      
    

    
        v4
    

    
      
        
          
  
  April 24, 2025 16:38


              
      
      
        1m 8s
      
    

        

        
            
                    

              

                  
                    
                      View #4074
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            .catchall() method should accept undefined
          
        

      
        test
        #2527:

        
            Pull request #4272

            synchronize
            by
              called-d
              
        
      

      
        
  
  April 24, 2025 07:41


            
      
      
        1m 3s
      
    

          called-d:catchall-accepts-undefined
      
    

    
        called-d:catchall-accepts-undefined
    

    
      
        
          
  
  April 24, 2025 07:41


              
      
      
        1m 3s
      
    

        

        
            
                    

              

                  
                    
                      View #4272
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            .catchall() method should accept undefined
          
        

      
        test
        #2526:

        
            Pull request #4272

            opened
            by
              called-d
              
        
      

      
        
  
  April 24, 2025 07:33


            
      
      
        1m 11s
      
    

          called-d:catchall-accepts-undefined
      
    

    
        called-d:catchall-accepts-undefined
    

    
      
        
          
  
  April 24, 2025 07:33


              
      
      
        1m 11s
      
    

        

        
            
                    

              

                  
                    
                      View #4272
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Deemphasize extend
          
        

      
        test
        #2525:

        
            Pull request #4271

            opened
            by
              colinhacks
              
        
      

      
        
  
  April 24, 2025 00:01


            
      
      
        1m 4s
      
    

          deemphasize-extend
      
    

    
        deemphasize-extend
    

    
      
        
          
  
  April 24, 2025 00:01


              
      
      
        1m 4s
      
    

        

        
            
                    

              

                  
                    
                      View #4271
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Languages: add Polish üáµüá± language
          
        

      
        test
        #2524:

        
            Pull request #4184

            synchronize
            by
              szarbartosz
              
        
      

      
        
  
  April 23, 2025 12:40


            
      
      
        1m 3s
      
    

          szarbartosz:add-polish-language
      
    

    
        szarbartosz:add-polish-language
    

    
      
        
          
  
  April 23, 2025 12:40


              
      
      
        1m 3s
      
    

        

        
            
                    

              

                  
                    
                      View #4184
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            V4(fix): generate json-schema with min/max(0)
          
        

      
        test
        #2523:

        
            Pull request #4267

            opened
            by
              PandaWorker
              
        
      

      
        
  
  April 23, 2025 11:45


            
      
      
        1m 0s
      
    

          PandaWorker:v4
      
    

    
        PandaWorker:v4
    

    
      
        
          
  
  April 23, 2025 11:45


              
      
      
        1m 0s
      
    

        

        
            
                    

              

                  
                    
                      View #4267
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            fix(transform): abort further processing when inner value is invalid
          
        

      
        test
        #2522:

        
            Pull request #4266

            synchronize
            by
              DASPRiD
              
        
      

      
        
  
  April 23, 2025 10:12


            
      
      
        1m 27s
      
    

          DASPRiD:fix/early-transform-abort
      
    

    
        DASPRiD:fix/early-transform-abort
    

    
      
        
          
  
  April 23, 2025 10:12


              
      
      
        1m 27s
      
    

        

        
            
                    

              

                  
                    
                      View #4266
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            fix(transform): abort further processing when inner value is invalid
          
        

      
        test
        #2521:

        
            Pull request #4266

            opened
            by
              DASPRiD
              
        
      

      
        
  
  April 23, 2025 10:09


            
      
      
        1m 43s
      
    

          DASPRiD:fix/early-transform-abort
      
    

    
        DASPRiD:fix/early-transform-abort
    

    
      
        
          
  
  April 23, 2025 10:09


              
      
      
        1m 43s
      
    

        

        
            
                    

              

                  
                    
                      View #4266
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Add composable-functions as a library powered by Zod supporting v4
          
        

      
        test
        #2520:

        
            Pull request #4261

            opened
            by
              gustavoguichard
              
        
      

      
        
  
  April 22, 2025 21:09


            
      
      
        1m 4s
      
    

          gustavoguichard:composable-functions-v4-support
      
    

    
        gustavoguichard:composable-functions-v4-support
    

    
      
        
          
  
  April 22, 2025 21:09


              
      
      
        1m 4s
      
    

        

        
            
                    

              

                  
                    
                      View #4261
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Add cybozu
          
        

      
        test
        #2519:

        
            Commit 638b8b5

            pushed
            by
              colinhacks
              
        
      

      
        
  
  April 22, 2025 17:00


            
      
      
        1m 43s
      
    

          main
      
    

    
        main
    

    
      
        
          
  
  April 22, 2025 17:00


              
      
      
        1m 43s
      
    

        

        
            
                    

              


                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Add support for kubb as part of the v4 upgrade
          
        

      
        test
        #2518:

        
            Pull request #4260

            opened
            by
              stijnvanhulle
              
        
      

      
        
  
  April 22, 2025 15:32


            
      
      
        1m 2s
      
    

          stijnvanhulle:chore/kubb-v4-support
      
    

    
        stijnvanhulle:chore/kubb-v4-support
    

    
      
        
          
  
  April 22, 2025 15:32


              
      
      
        1m 2s
      
    

        

        
            
                    

              

                  
                    
                      View #4260
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            #4238 Fix extended interfaces causing optional keys to break types
          
        

      
        test
        #2517:

        
            Pull request #4257

            synchronize
            by
              SeeJayy
              
        
      

      
        
  
  April 22, 2025 12:24


            
      
      
        1m 3s
      
    

          SeeJayy:v4
      
    

    
        SeeJayy:v4
    

    
      
        
          
  
  April 22, 2025 12:24


              
      
      
        1m 3s
      
    

        

        
            
                    

              

                  
                    
                      View #4257
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            #4238 Fix extended interfaces causing optional keys to break types
          
        

      
        test
        #2516:

        
            Pull request #4257

            synchronize
            by
              SeeJayy
              
        
      

      
        
  
  April 22, 2025 12:20


            
      
      
        1m 2s
      
    

          SeeJayy:v4
      
    

    
        SeeJayy:v4
    

    
      
        
          
  
  April 22, 2025 12:20


              
      
      
        1m 2s
      
    

        

        
            
                    

              

                  
                    
                      View #4257
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            #4238 Fix extended interfaces causing optional keys to break types
          
        

      
        test
        #2515:

        
            Pull request #4257

            synchronize
            by
              SeeJayy
              
        
      

      
        
  
  April 22, 2025 12:18


            
      
      
        1m 8s
      
    

          SeeJayy:v4
      
    

    
        SeeJayy:v4
    

    
      
        
          
  
  April 22, 2025 12:18


              
      
      
        1m 8s
      
    

        

        
            
                    

              

                  
                    
                      View #4257
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            feat(locale): add Macedonian üá≤üá∞ language 
          
        

      
        test
        #2514:

        
            Pull request #4214

            synchronize
            by
              antonio-ivanovski
              
        
      

      
        
  
  April 22, 2025 09:50


            
      
      
        59s
      
    

          antonio-ivanovski:v4-locales-mk
      
    

    
        antonio-ivanovski:v4-locales-mk
    

    
      
        
          
  
  April 22, 2025 09:50


              
      
      
        59s
      
    

        

        
            
                    

              

                  
                    
                      View #4214
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            #4238 Fix extended interfaces causing optional keys to break types
          
        

      
        test
        #2513:

        
            Pull request #4257

            opened
            by
              SeeJayy
              
        
      

      
        
  
  April 22, 2025 07:07


            
      
      
        1m 4s
      
    

          SeeJayy:v4
      
    

    
        SeeJayy:v4
    

    
      
        
          
  
  April 22, 2025 07:07


              
      
      
        1m 4s
      
    

        

        
            
                    

              

                  
                    
                      View #4257
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            chore: add orval to XtoZod ecosystems in v4
          
        

      
        test
        #2512:

        
            Pull request #4256

            synchronize
            by
              soartec-lab
              
        
      

      
        
  
  April 22, 2025 00:28


            
      
      
        1m 5s
      
    

          soartec-lab:docs/add-orval-to-v4-ecosystem
      
    

    
        soartec-lab:docs/add-orval-to-v4-ecosystem
    

    
      
        
          
  
  April 22, 2025 00:28


              
      
      
        1m 5s
      
    

        

        
            
                    

              

                  
                    
                      View #4256
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            chore: add orval to XtoZod ecosystems in v4
          
        

      
        test
        #2511:

        
            Pull request #4256

            opened
            by
              soartec-lab
              
        
      

      
        
  
  April 22, 2025 00:25


            
      
      
        1m 7s
      
    

          soartec-lab:docs/add-orval-to-v4-ecosystem
      
    

    
        soartec-lab:docs/add-orval-to-v4-ecosystem
    

    
      
        
          
  
  April 22, 2025 00:25


              
      
      
        1m 7s
      
    

        

        
            
                    

              

                  
                    
                      View #4256
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  


  
    
      
          

    


          
            Improve handling of .meta()/.describe() in JSON Schema converter
          
        

      
        test
        #2510:

        
            Pull request #4255

            opened
            by
              colinhacks
              
        
      

      
        
  
  April 21, 2025 22:51


            
      
      
        1m 0s
      
    

          meta/describe
      
    

    
        meta/describe
    

    
      
        
          
  
  April 21, 2025 22:51


              
      
      
        1m 0s
      
    

        

        
            
                    

              

                  
                    
                      View #4255
                    
                  

                  
                    
                      View workflow file
                    
                  


              
            
        
      
    
  







  
    
      Previous 1 2 3 4 5 ‚Ä¶ 39 40 Next\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
  colinhacks/zod projects
  
    
  
      

    
        
      
      
          
            
              
  
    
      
      
        Search all projects
    
  
      
        
      
    
      
      
        
      

      
  
  
  

    


    
    







  Search results
  
    0 open and 0 closed projects found.
  
  
  
    
                    
  
    
      

            No open projects\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Security: colinhacks/zod



    
    
    
  Security
  
  


  
  
    
    No security policy detected
  
    This project has not set up a SECURITY.md file yet.
            Report a vulnerability






    
  
    
      

              There aren‚Äôt any published security advisories\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Insights: colinhacks/zod

  
  
        

  
    Pulse
    Contributors
      Community Standards
    Commits
    Code frequency
      Dependency graph
    Network
    Forks
  



  
      
  
  April 18, 2025 ‚Äì April 25, 2025
  
        
              Period:
          1 week
        
          
            Filter activity
          
          
              
                
                24 hours
              
              
                
                3 days
              
              
                
                1 week
              
              
                
                1 month
              
          
        
      


  
    
      Overview
    

    
      
        
          
                
                
          
          
            23
            Active pull requests
          
        

        
          
                
                
          
          
            31
            Active issues
          
        
      

      
        
          
              
                
                  
                  11
                
                Merged pull requests
              
          
          
              
                
                  
                  12
                
                Open pull requests
              
          
          
              
                
                  
                  7
                
                Closed issues
              
          
          
              
                
                  
                  24
                
                New issues
              
          
        
      
    
  

    

      

        
      Loading


        
          Could not load contribution data
          Please try again later
        
      
      
        
  
    
      Loading

  


      
    

  
      
    
      
        
        11
        Pull requests merged by
        5 people
      
    
    
      
        
        
          Improve handling of .meta()/.describe() in JSON Schema converter
          
            #4255 merged Apr 21, 2025
          
        
      
      
        
        
          fix(docs): Grammatical error in Refinements
          
            #4252 merged Apr 21, 2025
          
        
      
      
        
        
          fix(docs): Swap Enum .exclude() / .extract() code samples.
          
            #4242 merged Apr 21, 2025
          
        
      
      
        
        
          v4: add GQLoom to ecosystem
          
            #4225 merged Apr 21, 2025
          
        
      
      
        
        
          v4: Clarify defaults for toJsonSchema options
          
            #4223 merged Apr 21, 2025
          
        
      
      
        
        
          v4: Reusing Number.MAX_VALUE for float64 range
          
            #4222 merged Apr 21, 2025
          
        
      
      
        
        
          v4: Correcting the default numeric range to be inclusive
          
            #4224 merged Apr 21, 2025
          
        
      
      
        
        
          fix(docs): Typo in z.object() vs z.interface()
          
            #4241 merged Apr 21, 2025
          
        
      
      
        
        
          fix(docs): Correct typo in Records
          
            #4244 merged Apr 21, 2025
          
        
      
      
        
        
          fix(docs): Correct "with with" typo.
          
            #4243 merged Apr 21, 2025
          
        
      
      
        
        
          docs: add zod-schema-faker to ecosystem
          
            #4247 merged Apr 21, 2025
          
        
      
    

    
      
        
        12
        Pull requests opened by 12 people
      
    
    
      
        
        
          feat(lang): Added initial `Tamil` locale
          
            #4237 opened Apr 19, 2025
          
        
      
      
        
        
          Languages: add German language
          
            #4253 opened Apr 21, 2025
          
        
      
      
        
        
          chore: add `orval` to XtoZod ecosystems in v4
          
            #4256 opened Apr 22, 2025
          
        
      
      
        
        
          #4238 Fix extended interfaces causing optional keys to break types
          
            #4257 opened Apr 22, 2025
          
        
      
      
        
        
          Add support for `kubb` as part of the v4 upgrade
          
            #4260 opened Apr 22, 2025
          
        
      
      
        
        
          Add composable-functions as a library powered by Zod supporting v4
          
            #4261 opened Apr 22, 2025
          
        
      
      
        
        
          fix(transform): abort further processing when inner value is invalid
          
            #4266 opened Apr 23, 2025
          
        
      
      
        
        
          V4(fix): generate json-schema with min/max(0)
          
            #4267 opened Apr 23, 2025
          
        
      
      
        
        
          Deemphasize extend
          
            #4271 opened Apr 24, 2025
          
        
      
      
        
        
          .catchall() method should accept undefined
          
            #4272 opened Apr 24, 2025
          
        
      
      
        
        
          [v4 beta] Properly support branded keys in records
          
            #4277 opened Apr 24, 2025
          
        
      
      
        
        
          Update ecosystem.tsx to add "zod-config" with v4 support via RC
          
            #4282 opened Apr 25, 2025
          
        
      
    



      
    
      
        
        7 Issues
        closed by 6 people
      
    
    
      
        
        
          v4: `z.toJSONSchema` incorrectly generates required properties for `default` values
          
            #4279 closed Apr 25, 2025
          
        
      
      
        
        
          [V4] discriminatedUnion not working when there are more than two z.literals in the schema
          
            #4280 closed Apr 25, 2025
          
        
      
      
        
        
          issue with Zod branded type def : suggestion to make [$brand] property optional
          
            #4265 closed Apr 24, 2025
          
        
      
      
        
        
          ZodObject.extends() metadata
          
            #2310 closed Apr 22, 2025
          
        
      
      
        
        
          Stricter Array Types
          
            #2658 closed Apr 22, 2025
          
        
      
      
        
        
          v4: Can't properly coerce int number (.int() marked as deprecated)
          
            #4212 closed Apr 19, 2025
          
        
      
      
        
        
          email validation fails for special characters like "√ü" in the address
          
            #4174 closed Apr 19, 2025
          
        
      
    

    
      
        
        24 Issues
        opened by 19 people
      
    
    
      
        
        
          v4 & v3: base64 check causes "Maximum call stack size exceeded"
          
            #4283 opened Apr 25, 2025
          
        
      
      
        
        
          v4: toJSONSchema: inability to customize references
          
            #4281 opened Apr 25, 2025
          
        
      
      
        
        
          v4: Type signature of enum input is not properly inferred
          
            #4278 opened Apr 24, 2025
          
        
      
      
        
        
          v4: Providing default value for base schema doesn't reference base schema in generated JSON Schema
          
            #4276 opened Apr 24, 2025
          
        
      
      
        
        
          v4: toJSONSchema: `_ref` complicates overrides
          
            #4275 opened Apr 24, 2025
          
        
      
      
        
        
          v4: toJSONSchema: "input" `io` is ignored for transformations meta
          
            #4274 opened Apr 24, 2025
          
        
      
      
        
        
          v4: Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
          
            #4273 opened Apr 24, 2025
          
        
      
      
        
        
          v4: The `isPlainObject` fails on objects without a prototype
          
            #4270 opened Apr 23, 2025
          
        
      
      
        
        
          v4: Missing native support for recursive types as plain function parameters
          
            #4269 opened Apr 23, 2025
          
        
      
      
        
        
          v4: Error formatting in v4 using `format` and `treeifyError` has different output
          
            #4268 opened Apr 23, 2025
          
        
      
      
        
        
          v4: Recursive types don't work with discriminated unions
          
            #4264 opened Apr 23, 2025
          
        
      
      
        
        
          Question(v4): What is the setting value for `path` in `issues` when an error occurs in the `discriminatedUnion` schema?
          
            #4263 opened Apr 23, 2025
          
        
      
      
        
        
          Question(v4): What is the behavior of the error message for the `file` schema in `@zod/mini`?
          
            #4262 opened Apr 23, 2025
          
        
      
      
        
        
          v4: Consider exporting $ZodTypes
          
            #4258 opened Apr 22, 2025
          
        
      
      
        
        
          V4: toJSONSchema does not render recursive reference
          
            #4254 opened Apr 21, 2025
          
        
      
      
        
        
          v4: Schema key order is no longer preserved
          
            #4251 opened Apr 21, 2025
          
        
      
      
        
        
          V4: toJSONSchema z.literal is missing "type"
          
            #4249 opened Apr 20, 2025
          
        
      
      
        
        
          Zod Mini Edge runtime compatibility
          
            #4248 opened Apr 20, 2025
          
        
      
      
        
        
          v4: `z.interface` cyclical reference with `z.discriminatedUnion`
          
            #4245 opened Apr 20, 2025
          
        
      
      
        
        
          Error in Enum docs for `.exclude()` / `.extract()`
          
            #4240 opened Apr 20, 2025
          
        
      
      
        
        
          v4(feature): Add cron string format
          
            #4239 opened Apr 19, 2025
          
        
      
      
        
        
          Infer with key optional properties on an extended interface are not represented correctly
          
            #4238 opened Apr 19, 2025
          
        
      
      
        
        
          v4: Type violation upon piping into coerced types
          
            #4236 opened Apr 19, 2025
          
        
      
      
        
        
          core 0.8.0: circular schemas via ZodLazy stopped working
          
            #4234 opened Apr 19, 2025
          
        
      
    




      
  
    
      
      35
      Unresolved conversations
    
  
  
    Sometimes conversations happen on old items that aren‚Äôt yet closed.
    Here is a list of all the Issues and Pull Requests with unresolved
    conversations.
  

  
    
      
      
        Languages: Add Portuguese language
        
          #4171 commented on Apr 25, 2025 ‚Ä¢ 9 new comments
        
      
    
    
      
      
        feat(lang): Added initial Thai locale
        
          #4230 commented on Apr 19, 2025 ‚Ä¢ 2 new comments
        
      
    
    
      
      
        Zod 4
        
          #4074 commented on Apr 24, 2025 ‚Ä¢ 1 new comment
        
      
    
    
      
      
        feat(locale): Add Norwegian
        
          #4229 commented on Apr 20, 2025 ‚Ä¢ 1 new comment
        
      
    
    
      
      
        feat(locale): add russian language
        
          #4197 commented on Apr 23, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        feat(lang): Added initial Turkish locale
        
          #4196 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Languages: add Czech language üá®üáø
        
          #4192 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        feat(lang): add Vietnamese (vi) locale
        
          #4191 commented on Apr 20, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Languages: add Polish üáµüá± language
        
          #4184 commented on Apr 23, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Languages: Add Arabic language
        
          #4176 commented on Apr 21, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        feat(locale): add Macedonian üá≤üá∞ language 
        
          #4214 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: what is the replacement for using z.function as a schema?
        
          #4143 commented on Apr 25, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        optional should not add undefined to type signature
        
          #3186 commented on Apr 25, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Zod Preprocess returning unknown type
        
          #3537 commented on Apr 25, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4:  ZodInterface - Property 'shape' does not exist on type 'ZodInterface'
        
          #4147 commented on Apr 25, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: Impossible to represent a key+value-optional field with the default value with `z.interface()`
        
          #4181 commented on Apr 24, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Warnings from schema
        
          #3320 commented on Apr 24, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: Make `.partial()` avaliable on `z.record()`
        
          #4106 commented on Apr 19, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: no longer able to extract discriminator options‚Äô concrete values
        
          #4142 commented on Apr 19, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: `isOptional` may throw despite using `safeParse`
        
          #4159 commented on Apr 20, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        [i18n] Request for internationalization (locales)
        
          #4168 commented on Apr 20, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        How to avoid redundancy in generated .d.ts files?
        
          #4227 commented on Apr 21, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Usage of .nonstrict() which is deprecated instead of .passthrough() in some tests
        
          #3522 commented on Apr 21, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: `.meta()` behaviour questions/bugs
        
          #4094 commented on Apr 21, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: toJSONSchema on optionals should mark them somehow
        
          #4164 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: toJSONSchema `pipes` should be `input` by default, not `output`
        
          #4167 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: use in nextjs middleware generates DynamicCodeEvaluationWarning
        
          #4113 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        "Type instantiation is excessively deep and possibly infinite" when using Zod with React Hook Form and @hookform/resolvers
        
          #3987 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        possible bug: standard schema introduction v3.24 breaks libraries that depend on core zod exposed types
        
          #4056 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        Zod 3.22.2 TS 5.2.2: TS2589: Type instantiation is excessively deep and possibly infinite
        
          #2697 commented on Apr 22, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        z.infer returns z.object for objects with passthrough and preprocess or transform
        
          #2938 commented on Apr 23, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        @zod/mini: extend and merge return plain object
        
          #4154 commented on Apr 23, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        `z.record` with a key of a union or enum schema results in a partial record
        
          #2623 commented on Apr 23, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        v4: defaults in zod object are no longer optional when defining a default for wrapped zod object
        
          #4140 commented on Apr 24, 2025 ‚Ä¢ 0 new comments
        
      
    
    
      
      
        How to transform empty strings into null? `z.emptyStringToNull()`
        
          #1721 commented on Apr 24, 2025 ‚Ä¢ 0 new comments\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
    CommitsBranch selector¬†mainUser selectorAll usersDatepickerAll timeCommit HistoryCommits on Apr 22, 2025Add cybozucolinhackscommitted638b8b5Copy full SHA for 638b8b5Commits on Apr 16, 2025add back packages/docscolinhackscommitteda18d25bCopy full SHA for a18d25b3.24.3colinhackscommitted06db7f8Copy full SHA for 06db7f8Optimize `extendShape` (#4150)Show description for 3e602d4 Andaristandahejlsbergauthored3e602d4Copy full SHA for 3e602d4Remove packages/docscolinhackscommittedbfd0913Copy full SHA for bfd0913Add packages/docscolinhackscommitted8fc309aCopy full SHA for 8fc309aFix broken logo link (#3974)Show description for a801ddd kantuniandcolinhacksauthoreda801dddCopy full SHA for a801dddCommits on Apr 14, 2025Added FullProduct.dev to 'Powered by Zod' in Ecosystem section (#4131)Show description for d114394codinsonnauthoredd114394Copy full SHA for d114394Commits on Apr 10, 2025Fix CIcolinhackscommitted8cca93bCopy full SHA for 8cca93bFix CIcolinhackscommittedfaac697Copy full SHA for faac697Add zod 4 beta anno (#4081)Show description for 12e5866colinhacksauthored12e5866Copy full SHA for 12e5866Commits on Apr 9, 2025Fix formattingcolinhackscommitted0615af8Copy full SHA for 0615af8update readme.md with zod-csv library (#4021)Show description for b865062bartoszgolebiowskiauthoredb865062Copy full SHA for b865062Commits on Apr 8, 2025Fix imagescolinhackscommitted220aedaCopy full SHA for 220aedaCommits on Apr 7, 2025Update alt tag for Retool and Stainless URL (#4071)mrlubosauthored859ad24Copy full SHA for 859ad24Commits on Apr 3, 2025removed unnecessary console logs (#4059)Show description for 91dcd30Sumaanyu-Nayakauthored91dcd30Copy full SHA for 91dcd30Commits on Apr 1, 2025Update Fern art/link (#4062)Show description for 4c7d8e5colinhacksauthored4c7d8e5Copy full SHA for 4c7d8e5Commits on Mar 31, 2025Update linkcolinhackscommitted07ff0daCopy full SHA for 07ff0daCommits on Mar 29, 2025WIP (#4060)colinhacksauthored1061293Copy full SHA for 1061293Commits on Mar 28, 2025docs: update README_KO (#4025)haejunejungauthored19c6d2eCopy full SHA for 19c6d2edocs: Remove outdated doc 'avoid coercions that throw uncaught errors' (#4005)Show description for b999b4b catnipanandcolinhacksauthoredb999b4bCopy full SHA for b999b4bdocs: add oRPC to Ecosystem (#4042)unnoqauthored099fe85Copy full SHA for 099fe85docs: add TanStack Form to Ecosystem/Form integrations (#4055)muningisauthoredcb2b857Copy full SHA for cb2b857Commits on Mar 22, 2025WIP (#4045)colinhacksauthored5041dfaCopy full SHA for 5041dfaCommits on Mar 15, 2025WIP (#4028)colinhacksauthoredf204123Copy full SHA for f204123Commits on Mar 5, 2025Fix table formatcolinhackscommitted850871dCopy full SHA for 850871dAdd Clerk fellowship mention (#4020)Show description for 69d8436colinhacksauthored69d8436Copy full SHA for 69d8436Commits on Mar 2, 2025Update mintlify feature (#4015)Show description for 47dbb2dcolinhacksauthored47dbb2dCopy full SHA for 47dbb2dCommits on Mar 1, 2025Feature Mintlify (#4014)Show description for 0b5d29ecolinhacksauthored0b5d29eCopy full SHA for 0b5d29eCommits on Feb 27, 2025Update feature (#4009)colinhacksauthorede2b9a5fCopy full SHA for e2b9a5fCommits on Feb 26, 2025docs(README): add GQLoom to tools and integrations section (#3995)xcfoxauthored1d6e1cbCopy full SHA for 1d6e1cbTweak feature layout (#4008)Show description for 446644fcolinhacksauthored446644fCopy full SHA for 446644fCommits on Feb 21, 2025Fix headers (#4003)colinhacksauthoredeea05aeCopy full SHA for eea05aeCommits on Feb 20, 2025Switch to featured sponsors (#4001)Show description for de1f090colinhacksauthoredde1f090Copy full SHA for de1f090Commits on Feb 11, 2025v3.24.2colinhackscommittede308703Copy full SHA for e308703PaginationPreviousNext\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/.devcontainer/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit¬†HistoryHistory¬†mainBreadcrumbszod/.devcontainer/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..devcontainer.jsondevcontainer.json¬†¬†View all files\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/.github/workflows/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit¬†HistoryHistory¬†mainBreadcrumbszod/.github/workflows/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..release-canary.ymlrelease-canary.yml¬†¬†release.ymlrelease.yml¬†¬†test.ymltest.yml¬†¬†View all files\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/.husky/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit¬†HistoryHistory¬†mainBreadcrumbszod/.husky/TopFolders and filesNameNameLast commit messageLast commit dateparent directory...gitignore.gitignore¬†¬†pre-commitpre-commit¬†¬†pre-pushpre-push¬†¬†View all files\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/.vscode/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit¬†HistoryHistory¬†mainBreadcrumbszod/.vscode/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..launch.jsonlaunch.json¬†¬†settings.jsonsettings.json¬†¬†View all files\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/blog/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit¬†HistoryHistory¬†mainBreadcrumbszod/blog/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..clerk-fellowship.mdclerk-fellowship.md¬†¬†index.htmlindex.html¬†¬†View all files\n\n\n\ncolinhacks
    
    /
    
      zod
    

    Public
  


        

        
            
    
        
          
        

      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1.4k

  

  
        
            
          Star
          37.4k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          581


    

      
  
    
              
        Pull requests
          107


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files¬†mainBreadcrumbszod/configs/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit¬†HistoryHistory¬†mainBreadcrumbszod/configs/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..babel-jest.config.jsonbabel-jest.config.json¬†¬†babel.config.jsbabel.config.js¬†¬†jest.config.jsonjest.config.json¬†¬†rollup.config.jsrollup.config.js¬†¬†swc-jest.config.jsonswc-jest.config.json¬†¬†ts-jest.config.jsonts-jest.config.json¬†¬†tsconfig.base.jsontsconfig.base.json¬†¬†tsconfig.cjs.jsontsconfig.cjs.json¬†¬†tsconfig.esm.jsontsconfig.esm.json¬†¬†tsconfig.test.jsontsconfig.test.json¬†¬†tsconfig.types.jsontsconfig.types.json¬†¬†vitest.config.tsvitest.config.ts¬†¬†View all files\n\n\n\n