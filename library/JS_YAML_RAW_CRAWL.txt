JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nInstallation

npm install --save @types/js-yaml

Summary
This package contains type definitions for js-yaml (https://github.com/nodeca/js-yaml).
Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/js-yaml.
Additional Details

Last updated: Tue, 07 Nov 2023 20:08:00 GMT
Dependencies: none

Credits
These definitions were written by Bart van der Schoor, Sebastian Clausen, ExE Boss, Armaan Tobaccowalla, and Linus Unnebäck.\n\n@types/js-yaml4.0.9 • Public • Published a year ago ReadmeCode Beta0 Dependencies907 Dependents44 VersionsInstallation

npm install --save @types/js-yaml

Summary
This package contains type definitions for js-yaml (https://github.com/nodeca/js-yaml).
Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/js-yaml.
Additional Details

Last updated: Tue, 07 Nov 2023 20:08:00 GMT
Dependencies: none

Credits
These definitions were written by Bart van der Schoor, Sebastian Clausen, ExE Boss, Armaan Tobaccowalla, and Linus Unnebäck.
ReadmeKeywordsnonePackage SidebarInstallnpm i @types/js-yamlRepositorygithub.com/DefinitelyTyped/DefinitelyTypedHomepagegithub.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/js-yamlWeekly Downloads6,556,045Version4.0.9LicenseMITUnpacked Size9.12 kBTotal Files6Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n@types/js-yaml4.0.9 • Public • Published a year ago ReadmeCode Beta0 Dependencies907 Dependents44 VersionsInstallation

npm install --save @types/js-yaml

Summary
This package contains type definitions for js-yaml (https://github.com/nodeca/js-yaml).
Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/js-yaml.
Additional Details

Last updated: Tue, 07 Nov 2023 20:08:00 GMT
Dependencies: none

Credits
These definitions were written by Bart van der Schoor, Sebastian Clausen, ExE Boss, Armaan Tobaccowalla, and Linus Unnebäck.
ReadmeKeywordsnonePackage SidebarInstallnpm i @types/js-yamlRepositorygithub.com/DefinitelyTyped/DefinitelyTypedHomepagegithub.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/js-yamlWeekly Downloads6,556,045Version4.0.9LicenseMITUnpacked Size9.12 kBTotal Files6Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
ReadmeKeywordsyamlparserserializerpyyamlPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
/js-yaml//js-yaml/Package SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
/js-yaml//js-yaml/Package SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
Dependencies (1)argparseDev Dependencies (14)@rollup/plugin-commonjs@rollup/plugin-node-resolveansibenchmarkcodemirroreslintfast-checkgh-pagesmochanycrolluprollup-plugin-node-polyfillsrollup-plugin-tersershelljsPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
Dependencies (1)argparseDev Dependencies (14)@rollup/plugin-commonjs@rollup/plugin-node-resolveansibenchmarkcodemirroreslintfast-checkgh-pagesmochanycrolluprollup-plugin-node-polyfillsrollup-plugin-tersershelljsPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
Dependents (21042)preset-lint-zhnode-red-contrib-ellitrakmds-to-jsonpatternlibraryflipflopskoa-boilerplategrunt-data-injectorgulp-tplontology2dotgrunt-cellarise-istanbulexpress-apiapis-expressionistgulp-ymlnaccustom-event-serversiempreextended-yaml-brunchstarphleet-clijasmine-integrationsplat-generatormulti-configdeploy-ymlconfuciusmashbashdocmodaceticjustjadedsafelinkfenixxsettingsloadlocalfileshared-configtidal.jsjstaticocreepnode-flatpagesidonethisgenrconsoloid-serversvgmulepattern-replaceslash-dot-yaml-cachei18n-yamlzeyos-tasksyncpg-validatorotoeb-enveoptimistmarkxnode-hammerand more...Package SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
Dependents (21042)preset-lint-zhnode-red-contrib-ellitrakmds-to-jsonpatternlibraryflipflopskoa-boilerplategrunt-data-injectorgulp-tplontology2dotgrunt-cellarise-istanbulexpress-apiapis-expressionistgulp-ymlnaccustom-event-serversiempreextended-yaml-brunchstarphleet-clijasmine-integrationsplat-generatormulti-configdeploy-ymlconfuciusmashbashdocmodaceticjustjadedsafelinkfenixxsettingsloadlocalfileshared-configtidal.jsjstaticocreepnode-flatpagesidonethisgenrconsoloid-serversvgmulepattern-replaceslash-dot-yaml-cachei18n-yamlzeyos-tasksyncpg-validatorotoeb-enveoptimistmarkxnode-hammerand more...Package SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nJS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag4.1.056,810,568latestVersion HistoryVersionDownloads (Last 7 Days)Published4.1.056,810,5684 years ago4.0.0582,5494 years ago3.14.137,506,2894 years ago3.14.01,713,4935 years ago3.13.14,302,1916 years ago3.13.017,9996 years ago3.12.214,0456 years ago3.12.151,6076 years ago3.12.0191,7477 years ago3.11.056,0397 years ago3.10.089,5318 years ago3.9.115,7518 years ago3.9.04,2358 years ago3.8.411,1318 years ago3.8.34,5428 years ago3.8.28,7868 years ago3.8.13,0998 years ago3.8.0338 years ago3.7.0388,2168 years ago3.6.189,9769 years ago3.6.08879 years ago3.5.530,8209 years ago3.5.41,0789 years ago3.5.33,0909 years ago3.5.27259 years ago3.5.1769 years ago3.5.0399 years ago3.4.651,1399 years ago3.4.521,6509 years ago3.4.4339 years ago3.4.31,23410 years ago3.4.25410 years ago3.4.17310 years ago3.4.04710 years ago3.3.14,89210 years ago3.3.049310 years ago3.2.73,49610 years ago3.2.68810 years ago3.2.54110 years ago3.2.43910 years ago3.2.349310 years ago3.2.25511 years ago3.2.114111 years ago3.1.03,98511 years ago3.0.27,31411 years ago3.0.12,14611 years ago3.0.04611 years ago2.1.313,66312 years ago2.1.22712 years ago2.1.13412 years ago2.1.03612 years ago2.0.5108,28212 years ago2.0.43812 years ago2.0.33112 years ago2.0.23312 years ago2.0.13912 years ago2.0.044912 years ago1.0.31,90012 years ago1.0.210213 years ago1.0.14013 years ago1.0.03413 years ago0.3.738,58713 years ago0.3.63613 years ago0.3.53613 years ago0.3.44013 years ago0.3.34013 years ago0.3.24213 years ago0.3.13713 years ago0.3.03613 years ago0.2.23413 years ago0.2.13313 years ago0.2.03313 years agoPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\njs-yaml4.1.0 • Public • Published 4 years ago ReadmeCode Beta1 Dependency21,042 Dependents72 Versions
JS-YAML - YAML 1.2 parser / writer for JavaScript


Online Demo
This is an implementation of YAML, a human-friendly data
serialization language. Started as PyYAML port, it was
completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.

Installation

YAML module for node.js
npm install js-yaml


CLI executable
If you want to inspect your YAML files from CLI, install js-yaml globally:
npm install -g js-yaml


Usage
usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error


API
Here we cover the most 'useful' methods. If you need advanced details (creating
your own tags), see examples
for more info.
const yaml = require('js-yaml');
const fs   = require('fs');

// Get document, or throw exception on error
try {
  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));
  console.log(doc);
} catch (e) {
  console.log(e);
}

load (string [ , options ])
Parses string as single YAML document. Returns either a
plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does
not support regexps, functions and undefined.
options:


filename (default: null) - string to be used as a file path in
error/warning messages.

onWarning (default: null) - function to call on warning messages.
Loader will call this function with an instance of YAMLException for each warning.

schema (default: DEFAULT_SCHEMA) - specifies a schema to use.


FAILSAFE_SCHEMA - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346


JSON_SCHEMA - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231


CORE_SCHEMA - same as JSON_SCHEMA:
http://www.yaml.org/spec/1.2/spec.html#id2804923


DEFAULT_SCHEMA - all supported YAML types.



json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.

NOTE: This function does not understand multi-document sources, it throws
exception on those.
NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use Null and NULL as null, etc.
The core schema also has no such restrictions. It allows binary notation for integers.

loadAll (string [, iterator] [, options ])
Same as load(), but understands multi-document sources. Applies
iterator to each document if specified, or returns array of documents.
const yaml = require('js-yaml');

yaml.loadAll(data, function (doc) {
  console.log(doc);
});

dump (object [ , options ])
Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the skipInvalid option to true.
options:


indent (default: 2) - indentation width to use (in spaces).

noArrayIndent (default: false) - when true, will not add an indentation level to array elements

skipInvalid (default: false) - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.

flowLevel (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere

styles - "tag" => "style" map. Each tag may have own set of styles.

schema (default: DEFAULT_SCHEMA) specifies a schema to use.

sortKeys (default: false) - if true, sort keys when dumping YAML. If a
function, use the function to sort the keys.

lineWidth (default: 80) - set max line width. Set -1 for unlimited width.

noRefs (default: false) - if true, don't convert duplicate objects into references

noCompatMode (default: false) - if true don't try to be compatible with older
yaml versions. Currently: don't quote "yes", "no" and so on, as required for YAML 1.1

condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{"a":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded.

quotingType (' or ", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.

forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to.

replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify).

The following table show availlable styles (e.g. "canonical",
"binary"...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after => (default setting) or ->:
!!null
  "canonical"   -> "~"
  "lowercase"   => "null"
  "uppercase"   -> "NULL"
  "camelcase"   -> "Null"

!!int
  "binary"      -> "0b1", "0b101010", "0b1110001111010"
  "octal"       -> "0o1", "0o52", "0o16172"
  "decimal"     => "1", "42", "7290"
  "hexadecimal" -> "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   => "true", "false"
  "uppercase"   -> "TRUE", "FALSE"
  "camelcase"   -> "True", "False"

!!float
  "lowercase"   => ".nan", '.inf'
  "uppercase"   -> ".NAN", '.INF'
  "camelcase"   -> ".NaN", '.Inf'

Example:
dump(object, {
  'styles': {
    '!!null': 'canonical' // dump null as ~
  },
  'sortKeys': true        // sort object keys
});

Supported YAML types
The list of standard YAML tags and corresponding JavaScript types. See also
YAML tag discussion and
YAML types repository.
!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object

JavaScript-specific tags
See js-yaml-js-types for
extra types.

Caveats
Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling toString() method) them at the
moment of adding them.
---
? [ foo, bar ]
: - baz
? { foo: bar }
: - baz
  - baz
{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }
Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.
&anchor foo:
  foo: bar
  *anchor: duplicate key
  baz: bat
  *anchor: duplicate key

js-yaml for enterprise
Available as part of the Tidelift Subscription
The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag4.1.056,810,568latestVersion HistoryVersionDownloads (Last 7 Days)Published4.1.056,810,5684 years ago4.0.0582,5494 years ago3.14.137,506,2894 years ago3.14.01,713,4935 years ago3.13.14,302,1916 years ago3.13.017,9996 years ago3.12.214,0456 years ago3.12.151,6076 years ago3.12.0191,7477 years ago3.11.056,0397 years ago3.10.089,5318 years ago3.9.115,7518 years ago3.9.04,2358 years ago3.8.411,1318 years ago3.8.34,5428 years ago3.8.28,7868 years ago3.8.13,0998 years ago3.8.0338 years ago3.7.0388,2168 years ago3.6.189,9769 years ago3.6.08879 years ago3.5.530,8209 years ago3.5.41,0789 years ago3.5.33,0909 years ago3.5.27259 years ago3.5.1769 years ago3.5.0399 years ago3.4.651,1399 years ago3.4.521,6509 years ago3.4.4339 years ago3.4.31,23410 years ago3.4.25410 years ago3.4.17310 years ago3.4.04710 years ago3.3.14,89210 years ago3.3.049310 years ago3.2.73,49610 years ago3.2.68810 years ago3.2.54110 years ago3.2.43910 years ago3.2.349310 years ago3.2.25511 years ago3.2.114111 years ago3.1.03,98511 years ago3.0.27,31411 years ago3.0.12,14611 years ago3.0.04611 years ago2.1.313,66312 years ago2.1.22712 years ago2.1.13412 years ago2.1.03612 years ago2.0.5108,28212 years ago2.0.43812 years ago2.0.33112 years ago2.0.23312 years ago2.0.13912 years ago2.0.044912 years ago1.0.31,90012 years ago1.0.210213 years ago1.0.14013 years ago1.0.03413 years ago0.3.738,58713 years ago0.3.63613 years ago0.3.53613 years ago0.3.44013 years ago0.3.34013 years ago0.3.24213 years ago0.3.13713 years ago0.3.03613 years ago0.2.23413 years ago0.2.13313 years ago0.2.03313 years agoPackage SidebarInstallnpm i js-yamlRepositorygithub.com/nodeca/js-yamlHomepagegithub.com/nodeca/js-yaml#readmeWeekly Downloads102,159,663Version4.1.0LicenseMITUnpacked Size405 kBTotal Files33Last publish4 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedjs-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650interpretA dictionary of file extensions and associated module loaders.coffeecoffee.mdcoffeescripteses6jsjsonjson5jsxreactlitcoffeetomltstypescriptView morephated• 3.1.1 • 3 years ago •  1,382 dependents •  MITpublished version 3.1.1, 3 years ago1382 dependents licensed under $MIT91,766,234confboxCompact YAML, TOML, JSONC, JSON5 and INI parser and serializeryamltomljsoncjson5unjsconfiginipi0• 0.2.2 • 18 days ago •  59 dependents •  MITpublished version 0.2.2, 18 days ago59 dependents licensed under $MIT33,475,563@zkochan/js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlzkochan• 0.0.7 • a year ago •  6 dependents •  MITpublished version 0.0.7, a year ago6 dependents licensed under $MIT16,365,809yaml-ast-parser[![Build Status](https://travis-ci.org/mulesoft-labs/yaml-ast-parser.svg?branch=master)](https://travis-ci.org/mulesoft-labs/yaml-ast-parser)ramlastyamldenis.denisenko• 0.0.43 • 6 years ago •  107 dependents •  Apache-2.0published version 0.0.43, 6 years ago107 dependents licensed under $Apache-2.022,157,982json-to-pretty-yamlA node module to convert JSON to YAMLymlyamljsoncliutilalexcrist• 1.2.2 • 7 years ago •  163 dependents •  Apache-2.0published version 1.2.2, 7 years ago163 dependents licensed under $Apache-2.011,638,142front-matterExtract YAML front matter from a stringyamlfront mattermeta datajxson• 4.0.2 • 5 years ago •  889 dependents •  MITpublished version 4.0.2, 5 years ago889 dependents licensed under $MIT11,478,879read-yaml-fileRead and parse a YAML fileyamlreadzkochan• 2.1.0 • 4 years ago •  80 dependents •  MITpublished version 2.1.0, 4 years ago80 dependents licensed under $MIT11,688,349yamljsStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.yamljsonyaml2jsonjson2yamljeremyfa• 0.3.0 • 8 years ago •  1,973 dependents •  MITpublished version 0.3.0, 8 years ago1973 dependents licensed under $MIT8,024,049gray-matterParse front-matter from a string or file. Fast, reliable and easy to use. Parses YAML front matter by default, but also has support for YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters. Used by metalsmith, assemble, verb and assemblecoffeecoffee-scriptdatadocsdocumentationextractextractingfrontfront-matterfrontmattergenerategeneratorgh-pagesView morermassaioli• 4.0.3 • 4 years ago •  1,599 dependents •  MITpublished version 4.0.3, 4 years ago1599 dependents licensed under $MIT7,645,947@apidevtools/swagger-parserSwagger 2.0 and OpenAPI 3.0 parser and validator for Node and browsersswaggeropenapiopen-apijsonyamlparseparservalidatevalidatorvalidationspecspecificationschemareferencephilsturgeon• 10.1.1 • 3 months ago •  446 dependents •  MITpublished version 10.1.1, 3 months ago446 dependents licensed under $MIT9,049,709remark-frontmatterremark plugin to support frontmatter (yaml, toml, and more)frontmattermarkdownmdastpluginremarkremark-plugintomlunifiedyamlwooorm• 5.0.0 • 2 years ago •  714 dependents •  MITpublished version 5.0.0, 2 years ago714 dependents licensed under $MIT6,335,101@stoplight/yamlUseful functions when working with YAML.yamlyaml parseryaml.parseparsersourcemapstoplight-devops• 4.3.0 • a year ago •  46 dependents •  Apache-2.0published version 4.3.0, a year ago46 dependents licensed under $Apache-2.05,102,792micromark-extension-frontmattermicromark extension to support frontmatter (YAML, TOML, etc)micromarkmicromark-extensionfrontmatteryamltomlgfmmarkdownunifiedwooorm• 2.0.0 • 2 years ago •  55 dependents •  MITpublished version 2.0.0, 2 years ago55 dependents licensed under $MIT6,186,844mdast-util-frontmattermdast extension to parse and serialize frontmatter (YAML, TOML, etc)unistmdastmdast-utilutilutilitymarkdownmarkupfrontmatteryamltomlgfmwooorm• 2.0.1 • 2 years ago •  61 dependents •  MITpublished version 2.0.1, 2 years ago61 dependents licensed under $MIT6,171,523@stoplight/yaml-ast-parser[![Build Status](https://travis-ci.org/mulesoft-labs/yaml-ast-parser.svg?branch=master)](https://travis-ci.org/mulesoft-labs/yaml-ast-parser)ramlastyamlstoplight-devops• 0.0.50 • a year ago •  1 dependents •  Apache-2.0published version 0.0.50, a year ago1 dependents licensed under $Apache-2.04,916,889swagger-parserSwagger 2.0 and OpenAPI 3.0 parser and validator for Node and browsersswaggeropenapiopen-apijsonyamlparseparservalidatevalidatorvalidationspecspecificationschemareferencejamesmessinger• 10.0.3 • 4 years ago •  582 dependents •  MITpublished version 10.0.3, 4 years ago582 dependents licensed under $MIT3,876,055yaml-eslint-parserA YAML parser that produces output compatible with ESLintyamleslintparserota-meshi• 1.3.0 • 2 months ago •  832 dependents •  MITpublished version 1.3.0, 2 months ago832 dependents licensed under $MIT4,537,804rc-config-loaderload config file from .{product}rc.{json,yml,js}configconfigurationjsonloaderrcyamlymlazu• 4.1.3 • 2 years ago •  69 dependents •  MITpublished version 4.1.3, 2 years ago69 dependents licensed under $MIT2,677,591remark-mdx-frontmatterA remark plugin for converting frontmatter metadata into MDX exportsfrontmattermarkdownmarkdown-frontmattermdastmdxremarkremark-plugintomlunifiedyamlremcohaszing• 5.1.0 • a month ago •  102 dependents •  MITpublished version 5.1.0, a month ago102 dependents licensed under $MIT1,994,336123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedjs-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650interpretA dictionary of file extensions and associated module loaders.coffeecoffee.mdcoffeescripteses6jsjsonjson5jsxreactlitcoffeetomltstypescriptView morephated• 3.1.1 • 3 years ago •  1,382 dependents •  MITpublished version 3.1.1, 3 years ago1382 dependents licensed under $MIT91,766,234confboxCompact YAML, TOML, JSONC, JSON5 and INI parser and serializeryamltomljsoncjson5unjsconfiginipi0• 0.2.2 • 18 days ago •  59 dependents •  MITpublished version 0.2.2, 18 days ago59 dependents licensed under $MIT33,475,563@zkochan/js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlzkochan• 0.0.7 • a year ago •  6 dependents •  MITpublished version 0.0.7, a year ago6 dependents licensed under $MIT16,365,809yaml-ast-parser[![Build Status](https://travis-ci.org/mulesoft-labs/yaml-ast-parser.svg?branch=master)](https://travis-ci.org/mulesoft-labs/yaml-ast-parser)ramlastyamldenis.denisenko• 0.0.43 • 6 years ago •  107 dependents •  Apache-2.0published version 0.0.43, 6 years ago107 dependents licensed under $Apache-2.022,157,982json-to-pretty-yamlA node module to convert JSON to YAMLymlyamljsoncliutilalexcrist• 1.2.2 • 7 years ago •  163 dependents •  Apache-2.0published version 1.2.2, 7 years ago163 dependents licensed under $Apache-2.011,638,142front-matterExtract YAML front matter from a stringyamlfront mattermeta datajxson• 4.0.2 • 5 years ago •  889 dependents •  MITpublished version 4.0.2, 5 years ago889 dependents licensed under $MIT11,478,879read-yaml-fileRead and parse a YAML fileyamlreadzkochan• 2.1.0 • 4 years ago •  80 dependents •  MITpublished version 2.1.0, 4 years ago80 dependents licensed under $MIT11,688,349yamljsStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.yamljsonyaml2jsonjson2yamljeremyfa• 0.3.0 • 8 years ago •  1,973 dependents •  MITpublished version 0.3.0, 8 years ago1973 dependents licensed under $MIT8,024,049gray-matterParse front-matter from a string or file. Fast, reliable and easy to use. Parses YAML front matter by default, but also has support for YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters. Used by metalsmith, assemble, verb and assemblecoffeecoffee-scriptdatadocsdocumentationextractextractingfrontfront-matterfrontmattergenerategeneratorgh-pagesView morermassaioli• 4.0.3 • 4 years ago •  1,599 dependents •  MITpublished version 4.0.3, 4 years ago1599 dependents licensed under $MIT7,645,947@apidevtools/swagger-parserSwagger 2.0 and OpenAPI 3.0 parser and validator for Node and browsersswaggeropenapiopen-apijsonyamlparseparservalidatevalidatorvalidationspecspecificationschemareferencephilsturgeon• 10.1.1 • 3 months ago •  446 dependents •  MITpublished version 10.1.1, 3 months ago446 dependents licensed under $MIT9,049,709remark-frontmatterremark plugin to support frontmatter (yaml, toml, and more)frontmattermarkdownmdastpluginremarkremark-plugintomlunifiedyamlwooorm• 5.0.0 • 2 years ago •  714 dependents •  MITpublished version 5.0.0, 2 years ago714 dependents licensed under $MIT6,335,101@stoplight/yamlUseful functions when working with YAML.yamlyaml parseryaml.parseparsersourcemapstoplight-devops• 4.3.0 • a year ago •  46 dependents •  Apache-2.0published version 4.3.0, a year ago46 dependents licensed under $Apache-2.05,102,792micromark-extension-frontmattermicromark extension to support frontmatter (YAML, TOML, etc)micromarkmicromark-extensionfrontmatteryamltomlgfmmarkdownunifiedwooorm• 2.0.0 • 2 years ago •  55 dependents •  MITpublished version 2.0.0, 2 years ago55 dependents licensed under $MIT6,186,844mdast-util-frontmattermdast extension to parse and serialize frontmatter (YAML, TOML, etc)unistmdastmdast-utilutilutilitymarkdownmarkupfrontmatteryamltomlgfmwooorm• 2.0.1 • 2 years ago •  61 dependents •  MITpublished version 2.0.1, 2 years ago61 dependents licensed under $MIT6,171,523@stoplight/yaml-ast-parser[![Build Status](https://travis-ci.org/mulesoft-labs/yaml-ast-parser.svg?branch=master)](https://travis-ci.org/mulesoft-labs/yaml-ast-parser)ramlastyamlstoplight-devops• 0.0.50 • a year ago •  1 dependents •  Apache-2.0published version 0.0.50, a year ago1 dependents licensed under $Apache-2.04,916,889swagger-parserSwagger 2.0 and OpenAPI 3.0 parser and validator for Node and browsersswaggeropenapiopen-apijsonyamlparseparservalidatevalidatorvalidationspecspecificationschemareferencejamesmessinger• 10.0.3 • 4 years ago •  582 dependents •  MITpublished version 10.0.3, 4 years ago582 dependents licensed under $MIT3,876,055yaml-eslint-parserA YAML parser that produces output compatible with ESLintyamleslintparserota-meshi• 1.3.0 • 2 months ago •  832 dependents •  MITpublished version 1.3.0, 2 months ago832 dependents licensed under $MIT4,537,804rc-config-loaderload config file from .{product}rc.{json,yml,js}configconfigurationjsonloaderrcyamlymlazu• 4.1.3 • 2 years ago •  69 dependents •  MITpublished version 4.1.3, 2 years ago69 dependents licensed under $MIT2,677,591remark-mdx-frontmatterA remark plugin for converting frontmatter metadata into MDX exportsfrontmattermarkdownmarkdown-frontmattermdastmdxremarkremark-plugintomlunifiedyamlremcohaszing• 5.1.0 • a month ago •  102 dependents •  MITpublished version 5.1.0, a month ago102 dependents licensed under $MIT1,994,336123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcommanderthe complete solution for node.js command-line programscommandercommandoptionparsercliargumentargsargvabetomo• 13.1.0 • 3 months ago •  92,283 dependents •  MITpublished version 13.1.0, 3 months ago92283 dependents licensed under $MIT786,955,194yargs-parserthe mighty option parser used by yargsargumentparseryargscommandcliparsingoptionargsoss-bot• 21.1.1 • 3 years ago •  3,852 dependents •  ISCpublished version 21.1.1, 3 years ago3852 dependents licensed under $ISC456,473,325argparseCLI arguments parser. Native port of python's argparse.cliparserargparseoptionargsvitaly• 2.0.1 • 5 years ago •  3,830 dependents •  Python-2.0published version 2.0.1, 5 years ago3830 dependents licensed under $Python-2.0448,860,017postcssTool for transforming styles with JS pluginscsspostcssreworkpreprocessorparsersource maptransformmanipulationtranspilerai• 8.5.3 • 2 months ago •  14,819 dependents •  MITpublished version 8.5.3, 2 months ago14819 dependents licensed under $MIT368,933,968js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  24,957 dependents •  MITpublished version 1.2.8, 2 years ago24957 dependents licensed under $MIT283,673,629yargsyargs the modern, pirate-themed, successor to optimist.argumentargsoptionparserparsingclicommandoss-bot• 17.7.2 • 2 years ago •  40,197 dependents •  MITpublished version 17.7.2, 2 years ago40197 dependents licensed under $MIT433,063,091@babel/parserA JavaScript parserbabeljavascriptparsertc39ecmascript@babel/parsernicolo-ribaudo• 7.27.0 • a month ago •  4,297 dependents •  MITpublished version 7.27.0, a month ago4297 dependents licensed under $MIT299,077,435yamlJavaScript parser and stringifier for YAMLYAMLparserstringifiereemeli• 2.7.1 • 23 days ago •  8,133 dependents •  ISCpublished version 2.7.1, 23 days ago8133 dependents licensed under $ISC275,741,761@typescript-eslint/typescript-estreeA parser that converts TypeScript source code into an ESTree compatible formastestreeecmascriptjavascripttypescriptparsersyntaxjameshenry• 8.31.0 • 6 hours ago •  346 dependents •  MITpublished version 8.31.0, 6 hours ago346 dependents licensed under $MIT270,296,612espreeAn Esprima-compatible JavaScript parser built on Acornastecmascriptjavascriptparsersyntaxacorneslintbot• 10.3.0 • 6 months ago •  2,048 dependents •  BSD-2-Clausepublished version 10.3.0, 6 months ago2048 dependents licensed under $BSD-2-Clause222,534,397json-parse-even-better-errorsJSON.parse with context information on errorJSONparsernpm-cli-ops• 4.0.0 • 8 months ago •  1,471 dependents •  MITpublished version 4.0.0, 8 months ago1471 dependents licensed under $MIT220,136,035bytesUtility to parse a string bytes to bytes and vice-versabytebytesutilityparseparserconvertconverterdougwilson• 3.1.2 • 3 years ago •  2,510 dependents •  MITpublished version 3.1.2, 3 years ago2510 dependents licensed under $MIT219,997,885lines-and-columnsMaps lines and columns to character offsets and back.linescolumnsparsereventualbuddha• 2.0.4 • a year ago •  1,634 dependents •  MITpublished version 2.0.4, a year ago1634 dependents licensed under $MIT214,290,396flattedA super light and fast circular JSON parser.circularJSONfastparserminimalwebreflection• 3.3.3 • 2 months ago •  2,238 dependents •  ISCpublished version 3.3.3, 2 months ago2238 dependents licensed under $ISC208,975,004jackspeakA very strict and proper argument parser.argumentparserargsoptionflagclicommandlineparseparsingisaacs• 4.1.0 • 2 months ago •  597 dependents •  BlueOak-1.0.0published version 4.1.0, 2 months ago597 dependents licensed under $BlueOak-1.0.0198,120,526@typescript-eslint/parserAn ESLint custom parser which leverages TypeScript ESTreeastecmascriptjavascripttypescriptparsersyntaxeslintjameshenry• 8.31.0 • 6 hours ago •  14,530 dependents •  MITpublished version 8.31.0, 6 hours ago14530 dependents licensed under $MIT186,205,754parse5HTML parser and serializer.htmlparserhtml5WHATWGspecificationfasthtml parserhtml5 parserhtmlparserparse5serializerhtml serializerhtmlserializerparse43081j• 7.2.1 • 6 months ago •  2,092 dependents •  MITpublished version 7.2.1, 6 months ago2092 dependents licensed under $MIT202,679,384postcss-value-parserTransforms css values and at-rule params into the treepostcssvalueparserevilebottnawi• 4.2.0 • 3 years ago •  1,495 dependents •  MITpublished version 4.2.0, 3 years ago1495 dependents licensed under $MIT185,247,809@eslint-community/regexppRegular expression parser for ECMAScript.regexpregularexpressionparservalidatorastabstractsyntaxtreeecmascriptes2015es2016es2017es2018View moreeslint-community-bot• 4.12.1 • 6 months ago •  20 dependents •  MITpublished version 4.12.1, 6 months ago20 dependents licensed under $MIT160,865,500123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcommanderthe complete solution for node.js command-line programscommandercommandoptionparsercliargumentargsargvabetomo• 13.1.0 • 3 months ago •  92,283 dependents •  MITpublished version 13.1.0, 3 months ago92283 dependents licensed under $MIT786,955,194yargs-parserthe mighty option parser used by yargsargumentparseryargscommandcliparsingoptionargsoss-bot• 21.1.1 • 3 years ago •  3,852 dependents •  ISCpublished version 21.1.1, 3 years ago3852 dependents licensed under $ISC456,473,325argparseCLI arguments parser. Native port of python's argparse.cliparserargparseoptionargsvitaly• 2.0.1 • 5 years ago •  3,830 dependents •  Python-2.0published version 2.0.1, 5 years ago3830 dependents licensed under $Python-2.0448,860,017postcssTool for transforming styles with JS pluginscsspostcssreworkpreprocessorparsersource maptransformmanipulationtranspilerai• 8.5.3 • 2 months ago •  14,819 dependents •  MITpublished version 8.5.3, 2 months ago14819 dependents licensed under $MIT368,933,968js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  24,957 dependents •  MITpublished version 1.2.8, 2 years ago24957 dependents licensed under $MIT283,673,629yargsyargs the modern, pirate-themed, successor to optimist.argumentargsoptionparserparsingclicommandoss-bot• 17.7.2 • 2 years ago •  40,197 dependents •  MITpublished version 17.7.2, 2 years ago40197 dependents licensed under $MIT433,063,091@babel/parserA JavaScript parserbabeljavascriptparsertc39ecmascript@babel/parsernicolo-ribaudo• 7.27.0 • a month ago •  4,297 dependents •  MITpublished version 7.27.0, a month ago4297 dependents licensed under $MIT299,077,435yamlJavaScript parser and stringifier for YAMLYAMLparserstringifiereemeli• 2.7.1 • 23 days ago •  8,133 dependents •  ISCpublished version 2.7.1, 23 days ago8133 dependents licensed under $ISC275,741,761@typescript-eslint/typescript-estreeA parser that converts TypeScript source code into an ESTree compatible formastestreeecmascriptjavascripttypescriptparsersyntaxjameshenry• 8.31.0 • 6 hours ago •  346 dependents •  MITpublished version 8.31.0, 6 hours ago346 dependents licensed under $MIT270,296,612espreeAn Esprima-compatible JavaScript parser built on Acornastecmascriptjavascriptparsersyntaxacorneslintbot• 10.3.0 • 6 months ago •  2,048 dependents •  BSD-2-Clausepublished version 10.3.0, 6 months ago2048 dependents licensed under $BSD-2-Clause222,534,397json-parse-even-better-errorsJSON.parse with context information on errorJSONparsernpm-cli-ops• 4.0.0 • 8 months ago •  1,471 dependents •  MITpublished version 4.0.0, 8 months ago1471 dependents licensed under $MIT220,136,035bytesUtility to parse a string bytes to bytes and vice-versabytebytesutilityparseparserconvertconverterdougwilson• 3.1.2 • 3 years ago •  2,510 dependents •  MITpublished version 3.1.2, 3 years ago2510 dependents licensed under $MIT219,997,885lines-and-columnsMaps lines and columns to character offsets and back.linescolumnsparsereventualbuddha• 2.0.4 • a year ago •  1,634 dependents •  MITpublished version 2.0.4, a year ago1634 dependents licensed under $MIT214,290,396flattedA super light and fast circular JSON parser.circularJSONfastparserminimalwebreflection• 3.3.3 • 2 months ago •  2,238 dependents •  ISCpublished version 3.3.3, 2 months ago2238 dependents licensed under $ISC208,975,004jackspeakA very strict and proper argument parser.argumentparserargsoptionflagclicommandlineparseparsingisaacs• 4.1.0 • 2 months ago •  597 dependents •  BlueOak-1.0.0published version 4.1.0, 2 months ago597 dependents licensed under $BlueOak-1.0.0198,120,526@typescript-eslint/parserAn ESLint custom parser which leverages TypeScript ESTreeastecmascriptjavascripttypescriptparsersyntaxeslintjameshenry• 8.31.0 • 6 hours ago •  14,530 dependents •  MITpublished version 8.31.0, 6 hours ago14530 dependents licensed under $MIT186,205,754parse5HTML parser and serializer.htmlparserhtml5WHATWGspecificationfasthtml parserhtml5 parserhtmlparserparse5serializerhtml serializerhtmlserializerparse43081j• 7.2.1 • 6 months ago •  2,092 dependents •  MITpublished version 7.2.1, 6 months ago2092 dependents licensed under $MIT202,679,384postcss-value-parserTransforms css values and at-rule params into the treepostcssvalueparserevilebottnawi• 4.2.0 • 3 years ago •  1,495 dependents •  MITpublished version 4.2.0, 3 years ago1495 dependents licensed under $MIT185,247,809@eslint-community/regexppRegular expression parser for ECMAScript.regexpregularexpressionparservalidatorastabstractsyntaxtreeecmascriptes2015es2016es2017es2018View moreeslint-community-bot• 4.12.1 • 6 months ago •  20 dependents •  MITpublished version 4.12.1, 6 months ago20 dependents licensed under $MIT160,865,500123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedjs-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650parse5HTML parser and serializer.htmlparserhtml5WHATWGspecificationfasthtml parserhtml5 parserhtmlparserparse5serializerhtml serializerhtmlserializerparse43081j• 7.2.1 • 6 months ago •  2,092 dependents •  MITpublished version 7.2.1, 6 months ago2092 dependents licensed under $MIT202,679,384jjua set of utilities to work with JSON / JSON5 documentsjsonjson5parserserializerdatarlidwka• 1.4.0 • 7 years ago •  174 dependents •  MITpublished version 1.4.0, 7 years ago174 dependents licensed under $MIT18,757,707@zkochan/js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlzkochan• 0.0.7 • a year ago •  6 dependents •  MITpublished version 0.0.7, a year ago6 dependents licensed under $MIT16,365,809parseleyCSS selectors parserCSSselectorsparserASTserializerspecificitykilly.mxi• 0.12.1 • 2 years ago •  5 dependents •  MITpublished version 0.12.1, 2 years ago5 dependents licensed under $MIT10,764,591smol-tomlA small, fast, and correct TOML parser/serializertomlparserserializercyyynthia• 1.3.3 • 5 days ago •  120 dependents •  BSD-3-Clausepublished version 1.3.3, 5 days ago120 dependents licensed under $BSD-3-Clause9,579,310diffable-htmlOpinionated HTML formatter focused towards making HTML diffs readable.htmlformatterdiffdiffablejestsnapshotserializersnapshotSerializerstringvuevue.jstestbeautifierjs-beautifyharoenv• 6.0.1 • 2 months ago •  15 dependents •  MITpublished version 6.0.1, 2 months ago15 dependents licensed under $MIT4,948,760jest-serializer-htmlJest snapshot serializer that beautifies HTML.jestsnapshotserializerhtmlsnapshotSerializerstringvuevue.jstestbeautifierjs-beautifyeunjae-lee• 7.1.0 • 4 years ago •  53 dependents •  MITpublished version 7.1.0, 4 years ago53 dependents licensed under $MIT4,854,241borshBinary Object Representation Serializer for Hashingserializerbinarydeserializerconsistencydeterministicboatnear• 2.0.0 • a year ago •  515 dependents •  Apache-2.0published version 2.0.0, a year ago515 dependents licensed under $Apache-2.02,563,025@elastic/ecs-pino-formatA formatter for the pino logger compatible with Elastic Common Schema.pinoserializerformatterelasticsearchecsecs-loggingelasticcommonschematrentm• 1.5.0 • a year ago •  43 dependents •  Apache-2.0published version 1.5.0, a year ago43 dependents licensed under $Apache-2.01,546,995sdp-transformA simple parser/writer for the Session Description Protocolsdpwebrtcserializerclux• 2.15.0 • 5 months ago •  281 dependents •  MITpublished version 2.15.0, 5 months ago281 dependents licensed under $MIT1,133,959hjsonA user interface for JSON.jsoncommentsconfighjsonparserserializerhumandqsully• 3.2.2 • 4 years ago •  283 dependents •  MITpublished version 3.2.2, 4 years ago283 dependents licensed under $MIT1,120,273@swaggerexpert/cookieRFC 6265 compliant cookie parser, validator and serializer.cookieparservalidatorserializercookiesrfc6265char0n• 2.0.2 • 2 months ago •  1 dependents •  Apache-2.0published version 2.0.2, 2 months ago1 dependents licensed under $Apache-2.0929,938@fluent/syntaxAST and parser for Fluentlocalizationl10ninternationalizationi18nftlpluralgenderlocalelanguageformattingtranslatetranslationformatastView moreeemeli• 0.19.0 • 2 years ago •  26 dependents •  Apache-2.0published version 0.19.0, 2 years ago26 dependents licensed under $Apache-2.0626,035slate-base64-serializerA Base64 serializer for Slate editors.deserializebase64editorserializeserializerslatedamareyoh• 0.2.115 • 5 years ago •  75 dependents •  MITpublished version 0.2.115, 5 years ago75 dependents licensed under $MIT460,418@cyclonedx/cyclonedx-libraryCore functionality of CycloneDX for JavaScript (Node.js or WebBrowser).CycloneDXmodelsnormalizerserializerbill-of-materialsBOMsoftware-bill-of-materialsSBOMOBOMMBOMSaaSBOMVEXVDRpackage-urlView morecyclonedx-automation• 8.0.0 • a month ago •  11 dependents •  Apache-2.0published version 8.0.0, a month ago11 dependents licensed under $Apache-2.0583,826@elastic/ecs-winston-formatA formatter for the winston logger compatible with Elastic Common Schema.winstonserializerformatterelasticsearchecsecs-loggingelasticcommonschematrentm• 1.5.3 • a year ago •  66 dependents •  Apache-2.0published version 1.5.3, a year ago66 dependents licensed under $Apache-2.0476,454slate-plain-serializerA plain text serializer for Slate editors.deserializeeditorplainplaintextserializeserializerslatestringtextxmldamareyoh• 0.7.13 • 5 years ago •  188 dependents •  MITpublished version 0.7.13, 5 years ago188 dependents licensed under $MIT492,297@udecode/plate-serializer-docxDocx serializer plugin for Platedocxplatepluginserializerslatezbeyens• 36.5.8 • 8 months ago •  23 dependents •  MITpublished version 36.5.8, 8 months ago23 dependents licensed under $MIT287,903@udecode/plate-serializer-htmlHTML serializer plugin for Platehtmlplatepluginserializerslate12joan• 21.5.1 • 7 months ago •  15 dependents •  MITpublished version 21.5.1, 7 months ago15 dependents licensed under $MIT248,084123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedjs-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650parse5HTML parser and serializer.htmlparserhtml5WHATWGspecificationfasthtml parserhtml5 parserhtmlparserparse5serializerhtml serializerhtmlserializerparse43081j• 7.2.1 • 6 months ago •  2,092 dependents •  MITpublished version 7.2.1, 6 months ago2092 dependents licensed under $MIT202,679,384jjua set of utilities to work with JSON / JSON5 documentsjsonjson5parserserializerdatarlidwka• 1.4.0 • 7 years ago •  174 dependents •  MITpublished version 1.4.0, 7 years ago174 dependents licensed under $MIT18,757,707@zkochan/js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlzkochan• 0.0.7 • a year ago •  6 dependents •  MITpublished version 0.0.7, a year ago6 dependents licensed under $MIT16,365,809parseleyCSS selectors parserCSSselectorsparserASTserializerspecificitykilly.mxi• 0.12.1 • 2 years ago •  5 dependents •  MITpublished version 0.12.1, 2 years ago5 dependents licensed under $MIT10,764,591smol-tomlA small, fast, and correct TOML parser/serializertomlparserserializercyyynthia• 1.3.3 • 5 days ago •  120 dependents •  BSD-3-Clausepublished version 1.3.3, 5 days ago120 dependents licensed under $BSD-3-Clause9,579,310diffable-htmlOpinionated HTML formatter focused towards making HTML diffs readable.htmlformatterdiffdiffablejestsnapshotserializersnapshotSerializerstringvuevue.jstestbeautifierjs-beautifyharoenv• 6.0.1 • 2 months ago •  15 dependents •  MITpublished version 6.0.1, 2 months ago15 dependents licensed under $MIT4,948,760jest-serializer-htmlJest snapshot serializer that beautifies HTML.jestsnapshotserializerhtmlsnapshotSerializerstringvuevue.jstestbeautifierjs-beautifyeunjae-lee• 7.1.0 • 4 years ago •  53 dependents •  MITpublished version 7.1.0, 4 years ago53 dependents licensed under $MIT4,854,241borshBinary Object Representation Serializer for Hashingserializerbinarydeserializerconsistencydeterministicboatnear• 2.0.0 • a year ago •  515 dependents •  Apache-2.0published version 2.0.0, a year ago515 dependents licensed under $Apache-2.02,563,025@elastic/ecs-pino-formatA formatter for the pino logger compatible with Elastic Common Schema.pinoserializerformatterelasticsearchecsecs-loggingelasticcommonschematrentm• 1.5.0 • a year ago •  43 dependents •  Apache-2.0published version 1.5.0, a year ago43 dependents licensed under $Apache-2.01,546,995sdp-transformA simple parser/writer for the Session Description Protocolsdpwebrtcserializerclux• 2.15.0 • 5 months ago •  281 dependents •  MITpublished version 2.15.0, 5 months ago281 dependents licensed under $MIT1,133,959hjsonA user interface for JSON.jsoncommentsconfighjsonparserserializerhumandqsully• 3.2.2 • 4 years ago •  283 dependents •  MITpublished version 3.2.2, 4 years ago283 dependents licensed under $MIT1,120,273@swaggerexpert/cookieRFC 6265 compliant cookie parser, validator and serializer.cookieparservalidatorserializercookiesrfc6265char0n• 2.0.2 • 2 months ago •  1 dependents •  Apache-2.0published version 2.0.2, 2 months ago1 dependents licensed under $Apache-2.0929,938@fluent/syntaxAST and parser for Fluentlocalizationl10ninternationalizationi18nftlpluralgenderlocalelanguageformattingtranslatetranslationformatastView moreeemeli• 0.19.0 • 2 years ago •  26 dependents •  Apache-2.0published version 0.19.0, 2 years ago26 dependents licensed under $Apache-2.0626,035slate-base64-serializerA Base64 serializer for Slate editors.deserializebase64editorserializeserializerslatedamareyoh• 0.2.115 • 5 years ago •  75 dependents •  MITpublished version 0.2.115, 5 years ago75 dependents licensed under $MIT460,418@cyclonedx/cyclonedx-libraryCore functionality of CycloneDX for JavaScript (Node.js or WebBrowser).CycloneDXmodelsnormalizerserializerbill-of-materialsBOMsoftware-bill-of-materialsSBOMOBOMMBOMSaaSBOMVEXVDRpackage-urlView morecyclonedx-automation• 8.0.0 • a month ago •  11 dependents •  Apache-2.0published version 8.0.0, a month ago11 dependents licensed under $Apache-2.0583,826@elastic/ecs-winston-formatA formatter for the winston logger compatible with Elastic Common Schema.winstonserializerformatterelasticsearchecsecs-loggingelasticcommonschematrentm• 1.5.3 • a year ago •  66 dependents •  Apache-2.0published version 1.5.3, a year ago66 dependents licensed under $Apache-2.0476,454slate-plain-serializerA plain text serializer for Slate editors.deserializeeditorplainplaintextserializeserializerslatestringtextxmldamareyoh• 0.7.13 • 5 years ago •  188 dependents •  MITpublished version 0.7.13, 5 years ago188 dependents licensed under $MIT492,297@udecode/plate-serializer-docxDocx serializer plugin for Platedocxplatepluginserializerslatezbeyens• 36.5.8 • 8 months ago •  23 dependents •  MITpublished version 36.5.8, 8 months ago23 dependents licensed under $MIT287,903@udecode/plate-serializer-htmlHTML serializer plugin for Platehtmlplatepluginserializerslate12joan• 21.5.1 • 7 months ago •  15 dependents •  MITpublished version 21.5.1, 7 months ago15 dependents licensed under $MIT248,084123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedjs-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650@zkochan/js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlzkochan• 0.0.7 • a year ago •  6 dependents •  MITpublished version 0.0.7, a year ago6 dependents licensed under $MIT16,365,809js-yaml-bespokenYAML 1.2 parser and serializeryamlparserserializerpyyamljperata• 3.11.6 • 5 years ago •  2 dependents •  MITpublished version 3.11.6, 5 years ago2 dependents licensed under $MIT2,024yaml-parserYAML 1.2 parser and serializeryamlparserserializerpyyamlfloby• 3.5.3 • 9 years ago •  6 dependents •  MITpublished version 3.5.3, 9 years ago6 dependents licensed under $MIT1,486@zitterorg/illo-hic-voluptatemReact components for [Stripe.js and Elements](https://stripe.com/docs/stripe-js).tapeasyncises6prunefunction.lengthReflect.getPrototypeOfjavascriptexpresstrimRighttrimEndwgetreact posevalidView moreloandinhb931• 7.6.72 • 9 months ago •  0 dependents •  MITpublished version 7.6.72, 9 months ago0 dependents licensed under $MIT687@dramaorg/delectus-culpa-reprehenderit[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imeverybrowsercompile lesspatchregular expressionssetterString.prototype.trimdefinePropertycompare__proto__typed arrayRegExp.prototype.flagsvalidationtypedView morevanthuanbt26• 3.5.94 • 8 months ago •  0 dependents •  MITpublished version 3.5.94, 8 months ago0 dependents licensed under $MIT670js-yaml-parserYAML parser and serializer that allows duplicate keysyamlparserserializerpyyamlankraiza• 1.0.0 • 7 years ago •  6 dependents •  MITpublished version 1.0.0, 7 years ago6 dependents licensed under $MIT174@merger203/reimagined-rotary-phone![Async Logo](https://raw.githubusercontent.com/caolan/@merger203/reimagined-rotary-phone/master/logo/@merger203/reimagined-rotary-phone-logo_readme.jpg)ECMAScript 2020bootstrap lessbreakcomputed-typesclonestringifykoreanredux-toolkitless.jserror-handlingsettingsfind-upschemesomeView morehongthanh9856• 2.0.3 • a year ago •  1 dependents •  MITpublished version 2.0.3, a year ago1 dependents licensed under $MIT162@hutechwebsite/soluta-eius-nesciunt-a[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][5]][6] [![dev dependency status][7]][8] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]typeerrorbindshimsuperagentPushsameValueZeromime-dbtypedeslint-pluginchromiumbyteLengthbusykeystarterView morekhaipham1002• 1.0.0 • a year ago •  75 dependents •  MITpublished version 1.0.0, a year ago75 dependents licensed under $MIT94@omegion1npm/officiis-eius-suscipit@omegion1npm/officiis-eius-suscipit
 ===============sliceassertshrinkwrapescapermdirfpstylingbreakUnderscoreconfigurablepicomatchnumberregexsymbolsView moreptkhanh1994• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT84@hoangcung1804npm/quidem-minus-hic<!--rateconfigArray.prototype.findLastIndexstatelessinspectECMAScript 2016spinnershtmlJSONcode pointsrulesvalidationbrowserrobustView morehoangcung1804• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT96@hutechwebsite/beatae-animi-non-optioCommon Utils For React Component.full-widthpositiveesbootstrap csslibphonenumberrm -frawesomesaucetraverseliveawsdirconnectArray.prototype.findLastcorsView morekhaipham1002• 1.0.0 • a year ago •  74 dependents •  MITpublished version 1.0.0, a year ago74 dependents licensed under $MIT81@lambrioanpm/error-numquam-accusantium<div align="center">   <a href="https://www.@lambrioanpm/error-numquam-accusantium.com">     <img alt="@lambrioanpm/error-numquam-accusantium" src="https://raw.githubusercontent.com/@lambrioanpm/error-numquam-accusantium/brand/master/@lambrioanpm/error-nuvalueqscollection.es6takeopenerlinewraptypescriptObject.getPrototypeOfESnextargvrobustexit-codeupRegExp#flagsView moreduchoang1212zz• 1.0.0 • a year ago •  79 dependents •  MITpublished version 1.0.0, a year ago79 dependents licensed under $MIT58@a-2-c-2-anpm/eaque-amet-nihil[![npm](https://img.shields.io/npm/v/@a-2-c-2-anpm/eaque-amet-nihil.svg)](https://www.npmjs.com/package/@a-2-c-2-anpm/eaque-amet-nihil) ![downloads](https://img.shields.io/npm/dt/@a-2-c-2-anpm/eaque-amet-nihil.svg) [![CI](https://github.com/a-2-c-2-anpm/einternalObject.isES2020matchAlltermrandomelboptimizerdirectoryieidleFunction.prototype.nameutilwalkView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT47@a-2-c-2-anpm/sint-sequi-beataeA Node.js wrapper for the Backpack.tf economy Web API.guidECMAScript 2017mobileYAMLObject.ispicomatchscheme-validationstreams2installerassignECMAScript 2015hardlinksInt16ArraygetPrototypeOfView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT46@a-2-c-2-anpm/rerum-iste-ducimusA powerful JSON path processor with no third-party dependencies. Allows you to traverse JSON object trees with a simple dot-delimited path format e.g. "obj.name"ratelimitjsxcss variablesnsdirschemetypesafepolyfillrandomsesES2018requirelintcreateView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT44@odczynflnpm/repellendus-commodi-sunt[![Buil@odczynflnpm/repellendus-commodi-sunt status][buil@odczynflnpm/repellendus-commodi-sunt-image]][buil@odczynflnpm/repellendus-commodi-sunt-url] [![Tests coverage][cov-image]][cov-url] [![npm version][npm-image]][npm-url]censorequalityreal-timefindupprotoless compilerirqpersistentclassnamemime-dbprivate dataeveryoptimistshellView moreducvinh101011z• 1.0.0 • a year ago •  75 dependents •  MITpublished version 1.0.0, a year ago75 dependents licensed under $MIT43@a-2-c-2-anpm/molestiae-saepe-neque[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]lruES2015byteLengthcheckcolorajaxiterationpropformatfast-deep-copybcryptzerocorsagentView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT43@odczynflnpm/voluptatibus-blanditiis-non[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-immetadatacommandmakeObservablespackage managermapkarmafast-deep-cloneminimalbabeldirectorydelete__proto__css-in-jsView moreducvinh101011z• 1.0.0 • a year ago •  78 dependents •  MITpublished version 1.0.0, a year ago78 dependents licensed under $MIT45@a-2-c-2-anpm/fuga-omnis-provident[ci-image]: https://img.shields.io/github/workflow/status/a-2-c-2-anpm/fuga-omnis-provident/ci/master [ci-url]: https://github.com/a-2-c-2-anpm/fuga-omnis-provident/actions [npm-image]: https://img.shields.io/npm/v/buffer.svg [npm-url]: https://npmjs.org/deep-clonevariablesio-tsStyleSheetArray.prototype.findLastIndexoptimistlessReactiveXes2016css lessespreehttptoArrayJSON-SchemaView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT45123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedjs-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,036 dependents •  MITpublished version 4.1.0, 4 years ago21036 dependents licensed under $MIT441,001,650@zkochan/js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlzkochan• 0.0.7 • a year ago •  6 dependents •  MITpublished version 0.0.7, a year ago6 dependents licensed under $MIT16,365,809js-yaml-bespokenYAML 1.2 parser and serializeryamlparserserializerpyyamljperata• 3.11.6 • 5 years ago •  2 dependents •  MITpublished version 3.11.6, 5 years ago2 dependents licensed under $MIT2,024yaml-parserYAML 1.2 parser and serializeryamlparserserializerpyyamlfloby• 3.5.3 • 9 years ago •  6 dependents •  MITpublished version 3.5.3, 9 years ago6 dependents licensed under $MIT1,486@zitterorg/illo-hic-voluptatemReact components for [Stripe.js and Elements](https://stripe.com/docs/stripe-js).tapeasyncises6prunefunction.lengthReflect.getPrototypeOfjavascriptexpresstrimRighttrimEndwgetreact posevalidView moreloandinhb931• 7.6.72 • 9 months ago •  0 dependents •  MITpublished version 7.6.72, 9 months ago0 dependents licensed under $MIT687@dramaorg/delectus-culpa-reprehenderit[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imeverybrowsercompile lesspatchregular expressionssetterString.prototype.trimdefinePropertycompare__proto__typed arrayRegExp.prototype.flagsvalidationtypedView morevanthuanbt26• 3.5.94 • 8 months ago •  0 dependents •  MITpublished version 3.5.94, 8 months ago0 dependents licensed under $MIT670js-yaml-parserYAML parser and serializer that allows duplicate keysyamlparserserializerpyyamlankraiza• 1.0.0 • 7 years ago •  6 dependents •  MITpublished version 1.0.0, 7 years ago6 dependents licensed under $MIT174@merger203/reimagined-rotary-phone![Async Logo](https://raw.githubusercontent.com/caolan/@merger203/reimagined-rotary-phone/master/logo/@merger203/reimagined-rotary-phone-logo_readme.jpg)ECMAScript 2020bootstrap lessbreakcomputed-typesclonestringifykoreanredux-toolkitless.jserror-handlingsettingsfind-upschemesomeView morehongthanh9856• 2.0.3 • a year ago •  1 dependents •  MITpublished version 2.0.3, a year ago1 dependents licensed under $MIT162@hutechwebsite/soluta-eius-nesciunt-a[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][5]][6] [![dev dependency status][7]][8] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]typeerrorbindshimsuperagentPushsameValueZeromime-dbtypedeslint-pluginchromiumbyteLengthbusykeystarterView morekhaipham1002• 1.0.0 • a year ago •  75 dependents •  MITpublished version 1.0.0, a year ago75 dependents licensed under $MIT94@omegion1npm/officiis-eius-suscipit@omegion1npm/officiis-eius-suscipit
 ===============sliceassertshrinkwrapescapermdirfpstylingbreakUnderscoreconfigurablepicomatchnumberregexsymbolsView moreptkhanh1994• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT84@hoangcung1804npm/quidem-minus-hic<!--rateconfigArray.prototype.findLastIndexstatelessinspectECMAScript 2016spinnershtmlJSONcode pointsrulesvalidationbrowserrobustView morehoangcung1804• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT96@hutechwebsite/beatae-animi-non-optioCommon Utils For React Component.full-widthpositiveesbootstrap csslibphonenumberrm -frawesomesaucetraverseliveawsdirconnectArray.prototype.findLastcorsView morekhaipham1002• 1.0.0 • a year ago •  74 dependents •  MITpublished version 1.0.0, a year ago74 dependents licensed under $MIT81@lambrioanpm/error-numquam-accusantium<div align="center">   <a href="https://www.@lambrioanpm/error-numquam-accusantium.com">     <img alt="@lambrioanpm/error-numquam-accusantium" src="https://raw.githubusercontent.com/@lambrioanpm/error-numquam-accusantium/brand/master/@lambrioanpm/error-nuvalueqscollection.es6takeopenerlinewraptypescriptObject.getPrototypeOfESnextargvrobustexit-codeupRegExp#flagsView moreduchoang1212zz• 1.0.0 • a year ago •  79 dependents •  MITpublished version 1.0.0, a year ago79 dependents licensed under $MIT58@a-2-c-2-anpm/eaque-amet-nihil[![npm](https://img.shields.io/npm/v/@a-2-c-2-anpm/eaque-amet-nihil.svg)](https://www.npmjs.com/package/@a-2-c-2-anpm/eaque-amet-nihil) ![downloads](https://img.shields.io/npm/dt/@a-2-c-2-anpm/eaque-amet-nihil.svg) [![CI](https://github.com/a-2-c-2-anpm/einternalObject.isES2020matchAlltermrandomelboptimizerdirectoryieidleFunction.prototype.nameutilwalkView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT47@a-2-c-2-anpm/sint-sequi-beataeA Node.js wrapper for the Backpack.tf economy Web API.guidECMAScript 2017mobileYAMLObject.ispicomatchscheme-validationstreams2installerassignECMAScript 2015hardlinksInt16ArraygetPrototypeOfView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT46@a-2-c-2-anpm/rerum-iste-ducimusA powerful JSON path processor with no third-party dependencies. Allows you to traverse JSON object trees with a simple dot-delimited path format e.g. "obj.name"ratelimitjsxcss variablesnsdirschemetypesafepolyfillrandomsesES2018requirelintcreateView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT44@odczynflnpm/repellendus-commodi-sunt[![Buil@odczynflnpm/repellendus-commodi-sunt status][buil@odczynflnpm/repellendus-commodi-sunt-image]][buil@odczynflnpm/repellendus-commodi-sunt-url] [![Tests coverage][cov-image]][cov-url] [![npm version][npm-image]][npm-url]censorequalityreal-timefindupprotoless compilerirqpersistentclassnamemime-dbprivate dataeveryoptimistshellView moreducvinh101011z• 1.0.0 • a year ago •  75 dependents •  MITpublished version 1.0.0, a year ago75 dependents licensed under $MIT43@a-2-c-2-anpm/molestiae-saepe-neque[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]lruES2015byteLengthcheckcolorajaxiterationpropformatfast-deep-copybcryptzerocorsagentView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT43@odczynflnpm/voluptatibus-blanditiis-non[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-immetadatacommandmakeObservablespackage managermapkarmafast-deep-cloneminimalbabeldirectorydelete__proto__css-in-jsView moreducvinh101011z• 1.0.0 • a year ago •  78 dependents •  MITpublished version 1.0.0, a year ago78 dependents licensed under $MIT45@a-2-c-2-anpm/fuga-omnis-provident[ci-image]: https://img.shields.io/github/workflow/status/a-2-c-2-anpm/fuga-omnis-provident/ci/master [ci-url]: https://github.com/a-2-c-2-anpm/fuga-omnis-provident/actions [npm-image]: https://img.shields.io/npm/v/buffer.svg [npm-url]: https://npmjs.org/deep-clonevariablesio-tsStyleSheetArray.prototype.findLastIndexoptimistlessReactiveXes2016css lessespreehttptoArrayJSON-SchemaView moretranduc345zz• 1.0.0 • a year ago •  0 dependents •  MITpublished version 1.0.0, a year ago0 dependents licensed under $MIT45123…50»\n\n\n\nvitalyVitaly Puzrin64 Packages0 OrganizationsPackages 64js-yaml.binYAML 1.1 Parser (CLI tool)vitalypublished 0.2.2 • 13 years agopublished version 0.2.2, 13 years agotypesHash, SortedSetvitalypublished 0.1.1 • 13 years agopublished version 0.1.1, 13 years agopuncherNested timstamps generator for your applicationvitalypublished 1.1.1 • 13 years agopublished version 1.1.1, 13 years agosvg-font-createCreates SVG font from separate imagesvitalypublished 0.0.5 • 12 years agopublished version 0.0.5, 12 years agondocJavaScript API documentor with simple syntax.vitalypublished 6.0.1 • a year agopublished version 6.0.1, a year agonode-phantom-simpleSimple and reliable bridge between Node.js and PhantomJS / SlimerJSvitalypublished 2.2.4 • 9 years agopublished version 2.2.4, 9 years agocharlatanFake identities generator for node.js (names, addresses, phones, IPs and others). Supports multiple languages.vitalypublished 1.1.0 • 9 years agopublished version 1.1.0, 9 years agopointerUniversal client and server router.vitalypublished 1.0.2 • 8 years agopublished version 1.0.2, 8 years agopakozlib port to javascript - fast, modularized, with browser supportvitalypublished 2.1.0 • 2 years agopublished version 2.1.0, 2 years agoeslint-plugin-nodecaCustom eslint rules, used in Nodeca projects.vitalypublished 1.0.3 • 10 years agopublished version 1.0.3, 10 years agopicaHigh quality image resize in browser.vitalypublished 9.0.1 • 3 years agopublished version 9.0.1, 3 years agosvg2ttfConverts SVG font to TTF fontvitalypublished 6.0.3 • 4 years agopublished version 6.0.3, 4 years agottf2eotConvert TTF font to EOTvitalypublished 3.1.0 • 3 years agopublished version 3.1.0, 3 years agosvgpathLow level toolkit for SVG paths transformations.vitalypublished 2.6.0 • 2 years agopublished version 2.6.0, 2 years agohikeMultihome files search library for mincervitalypublished 1.0.2 • 8 years agopublished version 1.0.2, 8 years agoplurals-cldrPlurals support, generated from CLDR.vitalypublished 2.0.1 • 3 years agopublished version 2.0.1, 3 years agomarkdown-it-emojiEmoji plugin for markdown-it markdown parser.vitalypublished 3.0.0 • a year agopublished version 3.0.0, a year agomarkdown-it-for-inlineInline tokens iterator for markdown-it markdown parser.vitalypublished 2.0.1 • a year agopublished version 2.0.1, a year agomarkdown-it-abbr<abbr> tag for markdown-it markdown parser.vitalypublished 2.0.0 • a year agopublished version 2.0.0, a year agomarkdown-it-deflist<dl> tag for markdown-it markdown parser.vitalypublished 3.0.0 • a year agopublished version 3.0.0, a year agomarkdown-it-footnoteFootnotes for markdown-it markdown parser.vitalypublished 4.0.0 • a year agopublished version 4.0.0, a year agomarkdown-it-ins<ins> tag for markdown-it markdown parser.vitalypublished 4.0.0 • a year agopublished version 4.0.0, a year agomarkdown-it-testgenTests generator for markdown-it markdown parservitalypublished 0.1.6 • 6 years agopublished version 0.1.6, 6 years agottf2woffConvert TTF font to WOFFvitalypublished 3.0.0 • 4 years agopublished version 3.0.0, 4 years agobabelfishi18n with human friendly syntaxvitalypublished 2.0.0 • 3 years agopublished version 2.0.0, 3 years agoshow more packages\n\nvitalyVitaly Puzrin64 Packages0 OrganizationsPackages 64js-yaml.binYAML 1.1 Parser (CLI tool)vitalypublished 0.2.2 • 13 years agopublished version 0.2.2, 13 years agotypesHash, SortedSetvitalypublished 0.1.1 • 13 years agopublished version 0.1.1, 13 years agopuncherNested timstamps generator for your applicationvitalypublished 1.1.1 • 13 years agopublished version 1.1.1, 13 years agosvg-font-createCreates SVG font from separate imagesvitalypublished 0.0.5 • 12 years agopublished version 0.0.5, 12 years agondocJavaScript API documentor with simple syntax.vitalypublished 6.0.1 • a year agopublished version 6.0.1, a year agonode-phantom-simpleSimple and reliable bridge between Node.js and PhantomJS / SlimerJSvitalypublished 2.2.4 • 9 years agopublished version 2.2.4, 9 years agocharlatanFake identities generator for node.js (names, addresses, phones, IPs and others). Supports multiple languages.vitalypublished 1.1.0 • 9 years agopublished version 1.1.0, 9 years agopointerUniversal client and server router.vitalypublished 1.0.2 • 8 years agopublished version 1.0.2, 8 years agopakozlib port to javascript - fast, modularized, with browser supportvitalypublished 2.1.0 • 2 years agopublished version 2.1.0, 2 years agoeslint-plugin-nodecaCustom eslint rules, used in Nodeca projects.vitalypublished 1.0.3 • 10 years agopublished version 1.0.3, 10 years agopicaHigh quality image resize in browser.vitalypublished 9.0.1 • 3 years agopublished version 9.0.1, 3 years agosvg2ttfConverts SVG font to TTF fontvitalypublished 6.0.3 • 4 years agopublished version 6.0.3, 4 years agottf2eotConvert TTF font to EOTvitalypublished 3.1.0 • 3 years agopublished version 3.1.0, 3 years agosvgpathLow level toolkit for SVG paths transformations.vitalypublished 2.6.0 • 2 years agopublished version 2.6.0, 2 years agohikeMultihome files search library for mincervitalypublished 1.0.2 • 8 years agopublished version 1.0.2, 8 years agoplurals-cldrPlurals support, generated from CLDR.vitalypublished 2.0.1 • 3 years agopublished version 2.0.1, 3 years agomarkdown-it-emojiEmoji plugin for markdown-it markdown parser.vitalypublished 3.0.0 • a year agopublished version 3.0.0, a year agomarkdown-it-for-inlineInline tokens iterator for markdown-it markdown parser.vitalypublished 2.0.1 • a year agopublished version 2.0.1, a year agomarkdown-it-abbr<abbr> tag for markdown-it markdown parser.vitalypublished 2.0.0 • a year agopublished version 2.0.0, a year agomarkdown-it-deflist<dl> tag for markdown-it markdown parser.vitalypublished 3.0.0 • a year agopublished version 3.0.0, a year agomarkdown-it-footnoteFootnotes for markdown-it markdown parser.vitalypublished 4.0.0 • a year agopublished version 4.0.0, a year agomarkdown-it-ins<ins> tag for markdown-it markdown parser.vitalypublished 4.0.0 • a year agopublished version 4.0.0, a year agomarkdown-it-testgenTests generator for markdown-it markdown parservitalypublished 0.1.6 • 6 years agopublished version 0.1.6, 6 years agottf2woffConvert TTF font to WOFFvitalypublished 3.0.0 • 4 years agopublished version 3.0.0, 4 years agobabelfishi18n with human friendly syntaxvitalypublished 2.0.0 • 3 years agopublished version 2.0.0, 3 years agoshow more packages\n\n\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\n\n\nAbout
      Press
  



    
    
    
    

    Press

    


  
    
  
    

    
        Founded in February, 2008
    
  

  
    

    
      HQ in San Francisco
    
  

  
    

    
      Product updates
    
  

  
    

    
      GitHub glossary
    
  

  
    

    
      Media resources
    
  

  
    

    
       press@github.com
     
  


  

  
      
  
    
      ZDNet Korea
      [현장] 깃허브 "코파일럿, 개발 패러다임 바꿔…ROI 달성 가능"
    
    Mar 26, 2025


      
  
    
      Practical AI Podcast
      AI-assisted coding with GitHub's COO
    
    Mar 21, 2025


      
  
    
      No Priors 
      Episode 106: GitHub CEO Thomas Dohmke
    
    Mar 13, 2025


      
  
    
      The Guardian
      How ‘AI agents’ will change the internet 
    
    Mar 9, 2025


      
  
    
      WirtschaftsWoche
      Ein Büro? Gibt’s bei uns nicht
    
    Mar 4, 2025


      
  
    
      Wall Street Journal
      How AI Tools Are Reshaping the Coding Workforce
    
    Mar 4, 2025


      
  
    
      TI Inside
      Exposição total: uma abordagem prática para lidar com vazamentos de dados sensíveis
    
    Mar 3, 2025


      
  
    
      The New York Times 
      A.I. is Prompting an Evolution, Not Extinction, for Coders 
    
    Feb 20, 2025


      
  
    
      itforum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      IT Forum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      Infosecurity Magazine
      Full Exposure: A Practical Approach to Handling Sensitive Data Leaks
    
    Feb 7, 2025


      
  
    
      TechCrunch
      GitHub Copilot brings mockups to life by generating code from images
    
    Feb 6, 2025


      
  
    
      Forbes
      GitHub code now has ‘data residency’ in Australia
    
    Feb 5, 2025


      
  
    
      Accessibility and GenAI 
      Ep 5 - Ed Summers - Head of Accessibility, GitHub
    
    Feb 4, 2025


      
  
    
      FAZ
      DLD: Technologien und Talente prägen den Arbeitsmarkt im KI-Zeitalter
    
    Jan 22, 2025


      
  
    
      Financial Express
      ‘Where developers reside, innovation blooms’
    
    Jan 20, 2025


      
  
    
      Inforchannel
      GitHub anuncia três tendências de desenvolvimento de software para 2025
    
    Jan 17, 2025


      
  
    
      Help Net Security 
      GitHub CISO on security strategy and collaborating with the open source community
    
    Jan 13, 2025


  

    
      
        Previous 1 2 3 4 5 … 58 59 Next\n\n\n\nPoliciesThese are the legal policies of npm, Inc.
Terms of UseOpen Source TermsPrivate TermsCode of ConductPackage Name Disputesnpm LicensePrivacy PolicyUnpublish PolicyCopyright and DMCA PolicyLogos and UsageSecurityReplication and web crawler policy
These are updated from time to time. Their sources are stored in a git repository at https://github.com/npm/documentation/tree/main/content/policies.\n\n\n\nPoliciesTerms of UseTerms and LicensesSee DetailsTable of contentsSoftware from npmFree to use npm servicesPaid npm servicesnpm, Inc. offers software and services under a few different licenses and terms of use.
Software from npm
License terms and notices for the npm command-line program can be found in the LICENSE file of the project's source code at https://www.github.com/npm/cli.
Free to use npm services
Free usage of https://www.npmjs.com, and the npm public registry are covered by the npm Open Source Terms at https://docs.npmjs.com/policies/open-source-terms. These terms include several important policies, including:


What npm considers acceptable package content.


npm's Code of Conduct, which includes our policy on harassment.


npm's Privacy Policy, which limits use and sharing of information about you collected by npm Services.


npm's policy on copyright including how to report violations thereof.


npm's Dispute Policy which addresses how to resolve disputes over the control of a package name, user name, or organization name in the Public Registry. This includes our policy on users "squatting" on these names.


Use of npm's trademarks is governed by our Trademark Policy. If you have concerns about your own trademark's use on npm please see our Disputes Policy.


Paid npm services
npm's paid products, including the npm Solo and Orgs plans, are covered by the npm Paid Services Terms at https://docs.npmjs.com/policies/private-terms.
The npm Solo Payment Plan and the npm Orgs Payment Plan govern payment for these services.\n\n\n\nPoliciesCode of Conductnpm Code of ConductSee DetailsTable of contentstl;drScopeFriendly Harassment-Free SpaceAcceptable UseReporting Violations of this Code of ConductConsequencesAppeal and ReinstatementContact InfoChangesCredit and Licensenpm exists to facilitate sharing code, by making it easy for JavaScript module developers to publish and distribute packages.
npm is a piece of technology, but more importantly, it is a community.
We believe that our mission is best served in an environment that is friendly, safe, and accepting; free from intimidation or harassment.
Towards this end, certain behaviors and practices will not be tolerated.
tl;dr

Be respectful.
We're here to help
Abusive behavior is never tolerated.
Data published to npm is hosted at the discretion of the service administrators, and may be removed.
Violations of this code may result in swift and permanent expulsion from the npm community.

Scope
We expect all members of the npm community, including paid and unpaid agents, administrators, users, and customers of npm, Inc., to abide by this Code of Conduct at all times in all npm community venues, online and in person, and in one-on-one communications pertaining to npm affairs.
This policy covers the usage of the npm registry, as well as the npm website, npm related events, and any other services offered by or on behalf of npm, Inc. (collectively, the "Service"). It also applies to behavior in the context of the npm Open Source project communities, including but not limited to public GitHub repositories, IRC channels, social media, mailing lists, and public events.
This Code of Conduct is in addition to, and does not in any way nullify or invalidate, any other terms or conditions related to use of the Service.
The definitions of various subjective terms such as "discriminatory", "hateful", or "confusing" will be decided at the sole discretion of the npm abuse team.
Friendly Harassment-Free Space
We are committed to providing a friendly, safe and welcoming environment for all, regardless of gender identity, sexual orientation, ability, ethnicity, religion, age, physical appearance, body size, race, or similar personal characteristics.
We ask that you please respect that people have differences of opinion regarding technical choices, and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a single right answer. A difference of technology preferences is not a license to be rude.
Disputes over package rights must be handled respectfully, according to the terms described in the Disputes Policy. There is never a good reason to be rude over package name disputes.
Any spamming, trolling, flaming, baiting, or other attention-stealing behavior is not welcome, and will not be tolerated.
Harassing other users of the Service is never tolerated, whether via public or private media.
Avoid using offensive or harassing package names, nicknames, or other identifiers that might detract from a friendly, safe, and welcoming environment for all.
Harassment includes, but is not limited to: harmful or prejudicial verbal or written comments related to gender identity, sexual orientation, ability, ethnicity, religion, age, physical appearance, body size, race, or similar personal characteristics; inappropriate use of nudity, sexual images, and/or sexually explicit language in public spaces; threats of physical or non-physical harm; deliberate intimidation, stalking or following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention.
Acceptable Use
The Service administrators reserve the right to make judgment calls about what is and isn't appropriate in published packages, package names, user and organization names, and other public content. Package that violates the npm Service's Acceptable Use rules including its Acceptable Content rules will be deleted, at the discretion of npm.
Reporting Violations of this Code of Conduct
Please select the method of contact you think is most appropriate for the form of violation:


For urgent security issues, please open a ticket at https://npmjs.com/support. Requests to un-publish packages are not usually considered urgent security issues, as it is possible to un-publish a package within 24 hours of its first publish. Any publicly published package is immediately replicated to thousands of third-party mirrors, so any confidential information contained in a package should be considered immediately compromised.


If you believe someone is harassing you or is demonstrating some other form of malicious or inappropriate behavior, open a support ticket at https://npmjs.com/support. If this is the initial report of a problem, please include as much detail as possible. It is easiest for us to address issues when we have more context.


If you have concerns about a potential copyright violation, please refer to our Copyright Policy and take action as recommended by that policy.


If you think a package or other content is "squatting" on a name, follow the process described in the Disputes Policy.


For any other issues, or if in doubt, contact support.
Consequences
All content published to the Service, including user account credentials, is hosted at the sole discretion of the npm administrators.
Unacceptable behavior from any community member, including sponsors, employees, customers, or others with decision-making authority, will not be tolerated.
Anyone asked to stop unacceptable behavior is expected to comply immediately.
If a community member engages in unacceptable behavior, the npm administrators may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event or service).
Appeal and Reinstatement
If your content or account has been disabled or restricted and you seek reinstatement or wish to appeal, please review GitHub's Appeal and Reinstatement page for information about the process and use the Appeal and Reinstatement form to submit a request.
Contact Info
Please open a support ticket at https://npmjs.com/support if you need to report a problem or address a grievance related to an abuse report.
You are also encouraged to contact us if you are curious about something that might be "on the line" between appropriate and inappropriate content. We are happy to provide guidance to help you be a successful part of our community.
Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
Credit and License
This Code of Conduct borrows heavily from the Stumptown Syndicate Citizen's Code of Conduct, and the Rust Project Code of Conduct.
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesPrivacy PolicyPrivacy Questions and AnswersSee DetailsTable of contentsWhat's most important?How does npm collect data about me?What data does npm collect about me, and why?npm collects data about how you use npm software and registriesnpm collects data about how you use the websitenpm collects account datanpm collects package datanpm collects payment card datanpm collects data about correspondencenpm collects data about use of npm.communityDoes npm share data about me with others?npm uses cookiesHow can I make choices about data collection?Where does npm keep data about me?How does npm handle data under the EU General Data Protection Regulation?How does npm handle data under the California Consumer Privacy Act?How can I see what data is publicly available about me?How can I change data about me?What is npm's policy on unpublishing packages?How does npm notify others about published data that's erased?What happens if npm merges with or is bought by another company?What are npm's information practices regarding information belonging to children?Who can I contact about npm and my privacy?How can I find out about changes?This notice describes how npm, Inc., or npm for short, collects and uses data about you.
What's most important?
That depends on your personal situation, which is why you should read on and decide for yourself. But at a minimum, absolutely every npm user should understand:
The npm public registry is for making software available to everyone online.
But: Software comes from people, and says something about us.
So: Think carefully about what packages to publish, what data you put in those packages, and what others might do with that data.
When you create an account, certain contact information is displayed publicly in the npm platform. And when you upload a package, your name and contact information may become associated with that package.
If you find yourself in a jam, open a support ticket.
How does npm collect data about me?
npm collects data about you:


when you use the npm command, the npx command or another program to access the npm public registry, Enterprise registries that npm hosts, private packages, such as when you're publishing a software package, and APIs for functionality like account and permissions management


when you browse the npm website, npmjs.com


when you use either the npm command or the website to create an npm account, update your account, and sign up for npm services


when you send support, privacy, legal, and other requests to npm


when working with and researching current and potential customers


When researching potential customers, npm staff sometimes search the public World Wide Web or paid business databases. Otherwise, npm doesn't buy or receive data about you from data brokers or other private services.
npm may inadvertently collect data about you if it is included in software packages that you or others upload.
What data does npm collect about me, and why?
npm collects data about how you use npm software and registries
When you use the npm command, the npx command, or other software to work with the npm public registry, an Enterprise registry that npm hosts, or private packages, npm logs data that might be identified to you:


a random, unique identifier, called npm-session, for each time you run commands like npm install


the names and versions of your project's dependencies, their dependencies, and so on, that come from the npm public registry, but not of other dependencies, like Git dependencies


the versions of Node.js, the npm command, and the operating system you are using


an npm-in-ci header, showing whether the command was run on a continuous integration server


the scope of the package for which you ran npm install, as an npm-scope header


a referrer header that shows the command you ran, with any file or directory paths redacted


data about the software you're using to access the registry, such as the User-Agent string


network request data, such as the date and time, your IP address, and the URL


npm uses this data to:


fulfill your requests, such as by sending the packages you ask for


send you alerts about security vulnerabilities that may affect the software you're building, when you run npm install or npm audit


keep registries working quickly and reliably


debug and develop the npm command and other software


defend registries from abuse and technical attacks


compile statistics on package usage and popularity


prepare reports on trends in the developer community


improve search results on the website


recommend packages that may be relevant to your work


npm collects data about how you use the website
When you visit www.npmjs.com, docs.npmjs.com, and other npm websites, npm uses cookies, server logs, and other methods to collect data about what pages you visit, and when. npm also collects technical information about the software and computer you use, such as:


your IP address


your preferred language


the web browser software you use


the kind of computer you use


the website that referred you


npm uses data about how you use the website to:


optimize the website, so that it's quick and easy to use


diagnose and debug technical errors


defend the website from abuse and technical attacks


compile statistics on package popularity


compile statistics on the kinds of software and computers visitors use


compile statistics on visitor searches and needs, to guide development of new website pages and functionality


decide who to contact about about product announcements, service changes, and new features


npm collects account data
Many features of npm services require an npm account. For example, you must have an npm account to publish packages to the npm public registry.
To create an npm account, npm requires a working email address and an available user name. npm uses this data to provide you access to features and identify you across npm services, publicly and within npm.
You do not have to give your personal or legal name to create an npm account. You can use a pseudonym instead. You can also open more than one account.
If you sign up for an account, then npm will publish account data for the whole world to see on user pages like this one. npm also publishes account data through the npm public registry, which is available for everyone to see, and Enterprise registries that npm hosts for others to find with commands like npm owner ls tap.
If you give npm a personal name or names on social media like GitHub and Twitter through the website, like when you include this on your profile or user page, npm publishes that data along with the email address and user name for the account. You don't have to give npm a personal name or any social media names, and you can remove this data at any time by updating your user page.
npm uses your email to:


notify you about packages published using your account


reset your password and help keep your account secure


add metadata to packages that you publish


contact you in special circumstances related to your account or packages


contact you about support requests


contact you about legal requests, like DMCA takedown requests and privacy complaints


announce new npm product offerings, service changes, and features


send you tips about how to better use free and paid services


send you messages about paid services you might want


npm collects package data
When you use npm publish or other software to publish packages to the npm public registry, an Enterprise registry that npm hosts, or as a private package, npm collects the contents of the package, plus metadata, including your account data. Other npm users may also publish packages that include data about you, such as the fact that you contributed code to a package.
npm uses data in packages to provide those packages to you and others who request them:


When you publish a package to the npm public registry, or change a package from private to public, npm makes the package and metadata available to everyone, online.


When you publish a package to an Enterprise registry that npm hosts, or as a private package, npm makes all of that data available to other users according to how the registry or the private packages account is configured. You may be able to configure who can access the package, or that may be up to others, such as the administrator of your company's Enterprise registry.


Making package data available to others allows them to download, build on, and depend on your work.
npm collects payment card data
To sign up for paid services, npm requires your payment card data. npm itself does not collect or store enough information to charge your card itself. Rather, Stripe collects that data on npm's behalf, and gives npm security tokens that allow npm to create charges and subscriptions.
npm uses your payment card data only to charge for npm services.
npm instructs Stripe to store your payment card data only as long as you use paid npm services.
npm collects data about correspondence
npm collects data about you when you send npm support requests, legal complaints, privacy inquiries, and business inquiries. Those data usually include your name and email address, and may include your company or other affiliation.
npm uses contact data to:


respond to you


compile aggregate statistics about correspondence


train support staff and other npm personnel


review the performance of npm personnel who respond


defend npm from legal claims


npm collects data about use of npm.community
npm collects data about visits, user accounts, and forum data on npm.community, the discussion forum for users of npm products and services. npm uses data from npm.community to collaborate with the development community, and to inform development decisions about the command-line interface and other software.
Does npm share data about me with others?
npm shares account data with others as mentioned in the section about account data.
npm shares package data with others as mentioned in the section about package data.
npm publishes posts and other content you submit to npm.community.
npm does not sell information about you to others. However, npm uses services provided by other companies to provide npm services. The types of service providers that npm uses include:


Companies that enable us to offer features on our website, such as to display your avatar


Companies that facilitate the efficient distribution of content


Cloud computing platforms and services that host our discussion forums


Services that assist with the detection of spam, scams, abuse others, or other violations of our terms of service


Payment processors


Platforms to help us receive, manage, and respond to support requests


Platforms for internal communication


npm uses cookies
npm's website only uses cookies strictly necessary to provide, optimize and secure the website. For example, we use them to keep you logged in, remember your preferences, authenticate your device for security purposes, analyze your use of the service, compile statistical reports, and provide information for future development of npm. The website uses internal cookies for analytics purposes, not any third-party analytics or service providers.
By using the website, you agree that we can place these types of cookies on your computer or device. If you disable your browser or device’s ability to accept these cookies, you will not be able to log in or use the website.
How can I make choices about data collection?
You choose what data the npm publish command includes in package data. You can use an .npmignore file in your package to keep specific files out of the package. You can also use a files list in package.json files to instruct npm to include only specific files that you name, in addition to standard files like README files, LICENSE files, and package.json.
To double check the data that you will share in a package that you plan to publish, run the npm publish --dry-run command. If you are running an older version of the npm command, run the npm pack command to create a tarball, then check its contents, such as with tar tvzf $tarball.
To publish a package to the npm public registry, npm's terms of service require you to license npm to share it. If a package is made public, it is available for everyone online to see. However, your choice of public license for your package may affect what others can do with data about you in your package.
npm does not respond to the Do Not Track HTTP header.
Where does npm keep data about me?
npm stores account data, data about website use, data about registry use, and private packages on servers in the United States of America. metadata about those packages worldwide, via content delivery networks.
npm stores package data published to Enterprise registries that npm hosts, plus metadata about them, in cloud computing zones of customers' choosing.
By using the npm platform, you consent to the collection and storage of your data as outlined in this section.
How does npm handle data under the EU General Data Protection Regulation?
npm respects privacy rights under Regulation (EU) 2016/679, the European Union's General Data Protection Regulation (GDPR). npm processes "Personal Data" on the following legal bases: (1) with your consent; (2) as necessary to perform our agreement to provide our services; and (3) as necessary for our legitimate interests in providing our services where those interests do not override your fundamental rights and freedom related to data privacy. Information we collect may be transferred to, and stored and processed in, the United States or any other country in which we or our affiliates or subcontractors maintain facilities, as described above.
If you reside in the EEA, Switzerland, or United Kingdom, you are entitled to certain rights, like the right to:


complain about our data collection or processing actions with the supervisor authority concerned. You can find a list of data protection authorities here.


access to information held about you.


ask us to correct or amend inaccurate or incomplete information we have about you.


ask us to erase data that under certain circumstances, like (1) when it is no longer necessary for the purpose for which it was collected, (2) you withdraw consent and no other legal basis for processing exists, or (3) you believe your fundamental rights to data privacy and protection outweigh our legitimate interest in continuing the processing.


request that we restrict our processing if we are processing your data based on legitimate interests or the performance of a task in the public interest as an exercise of official authority (including profiling); using your data for direct marketing (including profiling); or processing your data for purposes of scientific or historical research and statistics.


When you exercise your rights, npm may need to verify your identity and provide us with information before we access records containing your information. If you want to exercise your rights, please contact npm by opening a support ticket. We may have a reason under the law why we do not have to comply with your request or may comply with it in a more limited way than you anticipated. If we do, we will explain that to you in our response.
How does npm handle data under the California Consumer Privacy Act?
npm respects the rights of California residents under the California Consumer Privacy Act (CCPA). Where we collect information that is subject to the CCPA, that information we collect and your rights are described below.
Categories of personal information we collect:


Personal Identifiers:


Name and email address when you create an account. You will also be asked to create a username and we will assign one or more unique identifiers to your profile. We use this information to provide our services, respond to your requests, and send information to you.


We also collect your social media handle and basic account information if you provide it to us or interact with our services, such as our help desk, through social media.


We collect your payment information through our service provider, Stripe, as described above.




Internet or Other Electronic Network Activity Information: device identifiers such as IP address and user agent; the assigned unique IDs in cookies (as described below); information about how you arrived at and navigated through our Services.


Geolocation Data: We do not collect your specific longitude and latitude. However, we do collect imprecise location (e.g., your IP address).


Professional or employment-related information: If you apply for employment with us, information about your employment history.


Education information: If you apply for employment with us, information about your educational history.


We may collect any other information about you contained in software packages uploaded to our site, as described above under the "npm collects package data" section. We also collect the contents of your communications with us, e.g., when you submit a question to us through a web form or comments to us on social media.
We may disclose any of the categories of personal information listed above and use them for the above-listed purposes or for other business or operational purposes compatible with the context in which the personal information was collected. Our disclosures of personal information include disclosures to our "service providers," which are companies that we engage for business purposes to conduct activities on our behalf. The categories of service providers with whom we share information and the services they provide are described below.
Rights under CCPA:


Access/Right to Know: You have the right to request access to personal information we collected about you and information regarding the source of that personal information, the purposes for which we collect it, and the third parties and service providers with whom we share it.


Deletion: You have the right to request that we erase data we have collected from you. Please note that we may have a reason to deny your deletion request or delete data in a more limited way than you anticipated, e.g., because of a legal obligation to retain it.


To exercise your rights above, you can open a support ticket. When we process your request, we must verify your identity by asking you to (1) provide personal identifiers that we can match against information we may have collected from you previously; and (2) confirm your request using the email stated in the request.
Opt-out of sale:
California residents have the right to request that we stop "selling" their personal information. A "sale" of personal information is defined broadly: "selling, renting, releasing, disclosing, disseminating, making available, transferring, or otherwise communicating orally, in writing, or by electronic or other means, a consumer's personal information by the business to another business or a third party for monetary or other valuable consideration." We do not sell your information as defined by the CCPA.
Please note that your right to opt out does not apply to our sharing of personal information with service providers, who are parties we engage to perform a function on our behalf and are contractually obligated to use the Personal Information only for that function.
We may also disclose information to other entities who are not listed here when required by law or to protect our Company or other persons, as described in our Privacy Policy.
How can I see what data is publicly available about me?
You can access your account data at any time by visiting your account page on www.npmjs.com. Your account page also lists all the packages published under your account or other accounts.
You can access package data by downloading the packages, as long as they're public or you have permission to access them.
You can see metadata about packages by running npm info $package, or by accessing the appropriate registry's API. Registry APIs provide metadata in standard JSON format, and packages as tarballs.
How can I change data about me?
You can change your personal account data and payment card data at any time by visiting your account settings page on www.npmjs.com. You can change account and payment data for Enterprise by contacting support.
You can close your npm account at any time by e-mailing contacting support. Closing your account removes the profile from the public registry but does not automatically erase packages published under your account. We may retain some data about you internally even where you close your account.
npm's unpublish policy determines when you can erase packages from the npm public registry. The unpublish policy strikes a difficult balance between the purpose of publishing and hosting packages, others' reliance on what has been made public, and individual rights and freedoms.
If another user improperly publishes personal data about you, in a package or otherwise, open a support ticket.
Please note that while npm publishes notices about published data that's been erased, npm can't make everyone who has downloaded published package data or account data erase that data on your behalf. Choosing a public license, such as an open source software license, may encourage and allow storage, distribution, and use of package data indefinitely. Nearly all popular open source software licenses actually require preserving personal data that attributes the software to you, such as copyright notices, as a condition of permission for the software.
What is npm's policy on unpublishing packages?
Please see our policy on "unpublishing" packages or our terms of service for more information on erasing packages.
If you accidentally publish a package that threatens your privacy, or discover someone else has published a package that does, open a support ticket. npm can and will take down packages in specific, exceptional situations to protect you, especially if others violate your privacy. Using npm to violate others' privacy is against our terms of service.
How does npm notify others about published data that's erased?
npm takes a few steps to notify others who may be copying data from the npm public registry that published data has been erased:


npm publishes new placeholder versions of some erased packages, with README files that mention the package has been erased, and why.


npm's registry APIs, special software services that others use to copy data from the npm public registry, send update messages about packages that have been erased.


What happens if npm merges with or is bought by another company?
We may transfer to another entity or its affiliates or service providers some or all information about you in connection with, or during negotiations of, any merger, acquisition, sale of assets or any line of business, change in ownership control, or financing transaction. We cannot promise that an acquiring party or the merged entity will have the same privacy practices or treat your information the same as described in this Policy.
What are npm's information practices regarding information belonging to children?
npm's site and services are intended for users age sixteen and older. npm does not knowingly collect information from children. If we discover that we have inadvertently collected information from anyone younger than the age of 16, we will delete that information.
Who can I contact about npm and my privacy?
Please open a support ticket. You may also contact our Data Protection Officer directly.
Our United States HQ:
GitHub Data Protection Officer
Attention: npm Data Protection
88 Colin P. Kelly Jr. St.
San Francisco, CA 94107
United States
or our EU Office:
GitHub BV
Vijzelstraat 68-72
1017 HL Amsterdam
The Netherlands
How can I find out about changes?
This version of npm's privacy questions and answers took effect June 3, 2020.
npm will announce the next version on the npm blog. In the meantime, npm may update its contact information by updating the page at https://docs.npmjs.com/privacy, without an announcement. npm may change how it announces changes in future privacy versions.
You can review the history of changes in the Git repository for npm's public policies.\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nReset PasswordEnter the email address or username you use to sign in.Email address or username *Get Password Reset LinkBack to Sign In\n\nReset PasswordEnter the email address or username you use to sign in.Email address or username *Get Password Reset LinkBack to Sign In\n\n\n\n