🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line
Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –jlevy, Holloway. Thank you!

Meta
Basics
Everyday use
Processing files and data
System debugging
One-liners
Obscure but useful
macOS only
Windows only
More resources
Disclaimer


Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.
This work is the result of many authors and translators.
Some of this
originally
appeared
on Quora,
but it has since moved to GitHub, where people more talented than the original author have made numerous improvements.
Please submit a question if you have a question related to the command line. Please contribute if you see an error or something that could be better!
Meta
Scope:

This guide is for both beginners and experienced users. The goals are breadth (everything important), specificity (give concrete examples of the most common case), and brevity (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.
This is written for Linux, with the exception of the "macOS only" and "Windows only" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).
The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.
It includes both "standard" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.

Notes:

To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use apt, yum, dnf, pacman, pip or brew (as appropriate) to install new programs.
Use Explainshell to get a helpful breakdown of what commands, options, pipes etc. do.

Basics


Learn basic Bash. Actually, type man bash and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning only zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).


Learn at least one text-based editor well. The nano editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (vi), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)


Finding documentation:

Know how to read official documentation with man (for the inquisitive, man man lists the section numbers, e.g. 1 is "regular" commands, 5 is files/conventions, and 8 are for administration). Find man pages with apropos.
Know that some commands are not executables, but Bash builtins, and that you can get help on them with help and help -d. You can find out whether a command is an executable, shell builtin or an alias by using type command.
curl cheat.sh/command will give a brief "cheat sheet" with common examples of how to use a shell command.



Learn about redirection of output and input using > and < and pipes using |. Know > overwrites the output file and >> appends. Learn about stdout and stderr.


Learn about file glob expansion with * (and perhaps ? and [...]) and quoting and the difference between double " and single ' quotes. (See more on variable expansion below.)


Be familiar with Bash job management: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Know ssh, and the basics of passwordless authentication, via ssh-agent, ssh-add, etc.


Basic file management: ls and ls -l (in particular, learn what every column in ls -l means), less, head, tail and tail -f (or even better, less +F), ln and ln -s (learn the differences and advantages of hard versus soft links), chown, chmod, du (for a quick summary of disk usage: du -hs *). For filesystem management, df, mount, fdisk, mkfs, lsblk. Learn what an inode is (ls -i or df -i).


Basic network management: ip or ifconfig, dig, traceroute, route.


Learn and use a version control management system, such as git.


Know regular expressions well, and the various flags to grep/egrep. The -i, -o, -v, -A, -B, and -C options are worth knowing.


Learn to use apt-get, yum, dnf or pacman (depending on distro) to find and install packages. And make sure you have pip to install Python-based command-line tools (a few below are easiest to install via pip).


Everyday use


In Bash, use Tab to complete arguments or list all available commands and ctrl-r to search through command history (after pressing, type to search, press ctrl-r repeatedly to cycle through more matches, press Enter to execute the found command, or hit the right arrow to put the result in the current line to allow editing).


In Bash, use ctrl-w to delete the last word, and ctrl-u to delete the content from current cursor back to the start of the line. Use alt-b and alt-f to move by word, ctrl-a to move cursor to beginning of line,  ctrl-e to move cursor to end of line, ctrl-k to kill to the end of the line, ctrl-l to clear the screen. See man readline for all the default keybindings in Bash. There are a lot. For example alt-. cycles through previous arguments, and alt-* expands a glob.


Alternatively, if you love vi-style key-bindings, use set -o vi (and set -o emacs to put it back).


For editing long commands, after setting your editor (for example export EDITOR=vim), ctrl-x ctrl-e will open the current command in an editor for multi-line editing. Or in vi style, escape-v.


To see recent commands, use history. Follow with !n (where n is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being !$ for last argument and !! for last command (see "HISTORY EXPANSION" in the man page). However, these are often easily replaced with ctrl-r and alt-..


Go to your home directory with cd. Access files relative to your home directory with the ~ prefix (e.g. ~/.bashrc). In sh scripts refer to the home directory as $HOME.


To go back to the previous working directory: cd -.


If you are halfway through typing a command but change your mind, hit alt-# to add a # at the beginning and enter it as a comment (or use ctrl-a, #, enter). You can then return to it later via command history.


Use xargs (or parallel). It's very powerful. Note you can control how many items execute per line (-L) as well as parallelism (-P). If you're not sure if it'll do the right thing, use xargs echo first. Also, -I{} is handy. Examples:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p is a helpful display of the process tree.


Use pgrep and pkill to find or signal processes by name (-f is helpful).


Know the various signals you can send processes. For example, to suspend a process, use kill -STOP [pid]. For the full list, see man 7 signal


Use nohup or disown if you want a background process to keep running forever.


Check what processes are listening via netstat -lntp or ss -plat (for TCP; add -u for UDP) or lsof -iTCP -sTCP:LISTEN -P -n (which also works on macOS).


See also lsof and fuser for open sockets and files.


See uptime or w to know how long the system has been running.


Use alias to create shortcuts for commonly used commands. For example, alias ll='ls -latr' creates a new alias ll.


Save aliases, shell settings, and functions you commonly use in ~/.bashrc, and arrange for login shells to source it. This will make your setup available in all your shell sessions.


Put the settings of environment variables as well as commands that should be executed when you login in ~/.bash_profile. Separate configuration will be needed for shells you launch from graphical environment logins and cron jobs.


Synchronize your configuration files (e.g. .bashrc and .bash_profile) among various computers with Git.


Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. "$FOO". Prefer the -0 or -print0 options to enable null characters to delimit filenames, e.g. locate -0 pattern | xargs -0 ls -al or find / -print0 -type d | xargs -0 ls -al. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using IFS=$'\n'.


In Bash scripts, use set -x (or the variant set -v, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use set -e to abort on errors (nonzero exit code). Use set -u to detect unset variable usages. Consider set -o pipefail too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use trap on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: ${name:?error message}. For example, if a Bash script requires a single argument, just write input_file=${1:?usage: $0 input_file}. Using a default value if a variable is empty: ${name:-default}. If you want to have an additional (optional) parameter added to the previous example, you can use something like output_file=${2:-logfile}. If $2 is omitted and thus empty, output_file will be set to logfile. Arithmetic expansion: i=$(( (i + 1) % 5 )). Sequences: {1..10}. Trimming of strings: ${var%suffix} and ${var#prefix}. For example if var=foo.pdf, then echo ${var%.pdf}.txt prints foo.txt.


Brace expansion using {...} can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like mv foo.{txt,pdf} some-dir (which moves both files), cp somefile{,.bak} (which expands to cp somefile somefile.bak) or mkdir -p test-{a,b,c}/subtest-{1,2,3} (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.


The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like {1..20} cannot be expressed with variables using {$a..$b}. Use seq or a for loop instead, e.g., seq $a $b or for((i=a; i<=b; i++)); do ... ; done.)


The output of a command can be treated like a file via <(some command) (known as process substitution). For example, compare local /etc/hosts with a remote one:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:

{
      # Your code here
}

A "here document" allows redirection of multiple lines of input as if from a file:

cat <<EOF
input
on multiple lines
EOF



In Bash, redirect both standard output and standard error via: some-command >logfile 2>&1 or some-command &>logfile. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add </dev/null.


Use man ascii for a good ASCII table, with hex and decimal values. For general encoding info, man unicode, man utf-8, and man latin1 are helpful.


Use screen or tmux to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. byobu can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is dtach.


In ssh, knowing how to port tunnel with -L or -D (and occasionally -R) is useful, e.g. to access web sites from a remote server.


It can be useful to make a few optimizations to your ssh configuration; for example, this ~/.ssh/config contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: StrictHostKeyChecking=no, ForwardAgent=yes


Consider mosh an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).


To get the permissions on a file in octal form, which is useful for system configuration but not available in ls and easy to bungle, use something like


      stat -c '%A %a %n' /etc/timezone


For interactive selection of values from the output of another command, use percol or fzf.


For interaction with files based on the output of another command (like git), use fpp (PathPicker).


For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:
python -m SimpleHTTPServer 7777 (for port 7777 and Python 2) and python -m http.server 7777 (for port 7777 and Python 3).


For running a command as another user, use sudo. Defaults to running as root; use -u to specify another user. Use -i to login as that user (you will be asked for your password).


For switching the shell to another user, use su username or su - username. The latter with "-" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password of the user you are switching to.


Know about the 128K limit on command lines. This "Argument list too long" error is common when wildcard matching large numbers of files. (When this happens alternatives like find and xargs may help.)


For a basic calculator (and of course access to Python in general), use the python interpreter. For example,


>>> 2+3
5

Processing files and data


To locate a file by name in the current directory, find . -iname '*something*' (or similar). To find a file anywhere by name, use locate something (but bear in mind updatedb may not have indexed recently created files).


For general searching through source or data files, there are several options more advanced or faster than grep -r, including (in rough order from older to newer) ack, ag ("the silver searcher"), and rg (ripgrep).


To convert HTML to text: lynx -dump -stdin


For Markdown, HTML, and all kinds of document conversion, try pandoc. For example, to convert a Markdown document to Word format: pandoc README.md --from markdown --to docx -o temp.docx


If you must handle XML, xmlstarlet is old but good.


For JSON, use jq. For interactive use, also see jid and jiq.


For YAML, use shyaml.


For Excel or CSV files, csvkit provides in2csv, csvcut, csvjoin, csvgrep, etc.


For Amazon S3, s3cmd is convenient and s4cmd is faster. Amazon's aws and the improved saws are essential for other AWS-related tasks.


Know about sort and uniq, including uniq's -u and -d options -- see one-liners below. See also comm.


Know about cut, paste, and join to manipulate text files. Many people use cut but forget about join.


Know about wc to count newlines (-l), characters (-m), words (-w) and bytes (-c).


Know about tee to copy from stdin to a file and also to stdout, as in ls -al | tee file.txt.


For more complex calculations, including grouping, reversing fields, and statistical calculations, consider datamash.


Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set LANG or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run many times slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using export LC_ALL=C.


You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in TZ=Pacific/Fiji date.


Know basic awk and sed for simple data munging. See One-liners for examples.


To replace all occurrences of a string in place, in one or more files:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

To rename multiple files and/or search and replace within files, try repren. (In some cases the rename command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

As the man page says, rsync really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using rsync instead of scp allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


For monitoring progress when processing files, use pv, pycp, pmonitor, progress, rsync --progress, or, for block-level copying, dd status=progress.


Use shuf to shuffle or select random lines from a file.


Know sort's options. For numbers, use -n, or -h for handling human-readable numbers (e.g. from du -h). Know how keys work (-t and -k). In particular, watch out that you need to write -k1,1 to sort by only the first field; -k1 means sort according to the whole line. Stable sort (sort -s) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use sort -k1,1 | sort -s -k2,2.


If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press ctrl-v [Tab] or write $'\t' (the latter is better as you can copy/paste it).


The standard tools for patching source code are diff and patch. See also diffstat for summary statistics of a diff and sdiff for a side-by-side diff. Note diff -r works for entire directories. Use diff -r tree1 tree2 | diffstat for a summary of changes. Use vimdiff to compare and edit files.


For binary files, use hd, hexdump or xxd for simple hex dumps and bvi, hexedit or biew for binary editing.


Also for binary files, strings (plus grep, etc.) lets you find bits of text.


For binary diffs (delta compression), use xdelta3.


To convert text encodings, try iconv. Or uconv for more advanced use; it supports some advanced Unicode things. For example:


      # Displays hex codes or actual names of characters (useful for debugging):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Lowercase and removes all accents (by expanding and dropping them):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;' < input.txt > output.txt


To split files into pieces, see split (to split by size) and csplit (to split by a pattern).


Date and time: To get the current date and time in the helpful ISO 8601 format, use date -u +"%Y-%m-%dT%H:%M:%SZ" (other options are problematic). To manipulate date and time expressions, use dateadd, datediff, strptime etc. from dateutils.


Use zless, zmore, zcat, and zgrep to operate on compressed files.


File attributes are settable via chattr and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  sudo chattr +i /critical/directory/or/file


Use getfacl and setfacl to save and restore file permissions. For example:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

To create empty files quickly, use truncate (creates sparse file), fallocate (ext4, xfs, btrfs and ocfs2 filesystems), xfs_mkfile (almost any filesystems, comes in xfsprogs package), mkfile (for Unix-like systems like Solaris, Mac OS).

System debugging


For web debugging, curl and curl -I are handy, or their wget equivalents, or the more modern httpie.


To know current cpu/disk status, the classic tools are top (or the better htop), iostat, and iotop. Use iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


For network connection details, use netstat and ss.


For a quick overview of what's happening on a system, dstat is especially useful. For broadest overview with details, use glances.


To know memory status, run and understand the output of free and vmstat. In particular, be aware the "cached" value is memory held by the Linux kernel as file cache, so effectively counts toward the "free" value.


Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run kill -3 <pid> and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's jps, jstat, jstack, jmap are useful. SJK tools are more advanced.


Use mtr as a better traceroute, to identify network issues.


For looking at why a disk is full, ncdu saves time over the usual commands like du -sh *.


To find which socket or process is using bandwidth, try iftop or nethogs.


The ab tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try siege.


For more serious network debugging, wireshark, tshark, or ngrep.


Know about strace and ltrace. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (-c), and the ability to attach to a running process (-p). Use trace child option (-f) to avoid missing important calls.


Know about ldd to check shared libraries etc — but never run it on untrusted files.


Know how to connect to a running process with gdb and get its stack traces.


Use /proc. It's amazingly helpful sometimes when debugging live problems. Examples: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (where xxx is the process id or pid).


When debugging why something went wrong in the past, sar can be very helpful. It shows historic statistics on CPU, memory, network, etc.


For deeper systems and performance analyses, look at stap (SystemTap), perf, and sysdig.


Check what OS you're on with uname or uname -a (general Unix/kernel info) or lsb_release -a (Linux distro info).


Use dmesg whenever something's acting really funny (it could be hardware or driver issues).


If you delete a file and it doesn't free up expected disk space as reported by du, check whether the file is in use by a process:
lsof | grep deleted | grep "filename-of-my-big-file"


One-liners
A few examples of piecing together commands:

It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via sort/uniq. Suppose a and b are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the -T option if /tmp is on a small root partition.) See also the note about LC_ALL above and sort's -u option (left out for clarity below).

      sort a b | uniq > c   # c is a union b
      sort a b | uniq -d > c   # c is a intersect b
      sort a b b | uniq -u > c   # c is set difference a - b

Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Use grep . * to quickly examine the contents of all files in a directory (so each line is paired with the filename), or head -100 * (so each file has a heading). This can be useful for directories filled with config settings like those in /sys, /proc, /etc.


Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):


      awk '{ x += $3 } END { print x }' myfile

To see sizes/dates on a tree of files, this is like a recursive ls -l but is easier to read than ls -lR:

      find . -type f -ls

Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an acct_id parameter that is present in the URL. If you want a tally of how many requests for each acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


To continuously monitor changes, use watch, e.g. check changes to files in a directory with watch -d -n 2 'ls -rtlh | tail' or to network settings while troubleshooting your wifi settings with watch -d -n 2 ifconfig.


Run this function to get a random tip from this document (parses Markdown and extracts an item):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscure but useful


expr: perform arithmetic or boolean operations or evaluate regular expressions


m4: simple macro processor


yes: print a string a lot


cal: nice calendar


env: run a command (useful in scripts)


printenv: print out environment variables (useful in debugging and scripts)


look: find English words (or lines in a file) beginning with a string


cut, paste and join: data manipulation


fmt: format text paragraphs


pr: format text into pages/columns


fold: wrap lines of text


column: format text fields into aligned, fixed-width columns or tables


expand and unexpand: convert between tabs and spaces


nl: add line numbers


seq: print numbers


bc: calculator


factor: factor integers


gpg: encrypt and sign files


toe: table of terminfo entries


nc: network debugging and data transfer


socat: socket relay and tcp port forwarder (similar to netcat)


slurm: network traffic visualization


dd: moving data between files or devices


file: identify type of a file


tree: display directories and subdirectories as a nesting tree; like ls but recursive


stat: file info


time: execute and time a command


timeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.


lockfile: create semaphore file that can only be removed by rm -f


logrotate: rotate, compress and mail logs.


watch: run a command repeatedly, showing results and/or highlighting changes


when-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.


tac: print files in reverse


comm: compare sorted files line by line


strings: extract text from binary files


tr: character translation or manipulation


iconv or uconv: conversion for text encodings


split and csplit: splitting files


sponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-file


units: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)


apg: generates random passwords


xz: high-ratio file compression


ldd: dynamic library info


nm: symbols from object files


ab or wrk: benchmarking web servers


strace: system call debugging


mtr: better traceroute for network debugging


cssh: visual concurrent shell


rsync: sync files and folders over SSH or in local file system


wireshark and tshark: packet capture and network debugging


ngrep: grep for the network layer


host and dig: DNS lookups


lsof: process file descriptor and socket info


dstat: useful system stats


glances: high level, multi-subsystem overview


iostat: Disk usage stats


mpstat: CPU usage stats


vmstat: Memory usage stats


htop: improved version of top


last: login history


w: who's logged on


id: user/group identity info


sar: historic system stats


iftop or nethogs: network utilization by socket or process


ss: socket statistics


dmesg: boot and system error messages


sysctl: view and configure Linux kernel parameters at run time


hdparm: SATA/ATA disk manipulation/performance


lsblk: list block devices: a tree view of your disks and disk partitions


lshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.


lsmod and modinfo: List and show details of kernel modules.


fortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations "useful"


macOS only
These are items relevant only on macOS.


Package management with brew (Homebrew) and/or port (MacPorts). These can be used to install on macOS many of the above commands.


Copy output of any command to a desktop app with pbcopy and paste input from one with pbpaste.


To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.), open Preferences -> Profiles -> Keyboard and select "Use Option as Meta key".


To open a file with a desktop app, use open or open -a /Applications/Whatever.app.


Spotlight: Search files with mdfind and list metadata (such as photo EXIF info) with mdls.


Be aware macOS is based on BSD Unix, and many commands (for example ps, ls, tail, awk, sed) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading "BSD General Commands Manual." In some cases GNU versions can be installed, too (such as gawk and gsed for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or perl) or test carefully.


To get macOS release information, use sw_vers.


Windows only
These items are relevant only on Windows.
Ways to obtain Unix tools under Windows


Access the power of the Unix shell under Microsoft Windows by installing Cygwin. Most of the things described in this document will work out of the box.


On Windows 10, you can use Windows Subsystem for Linux (WSL), which provides a familiar Bash environment with Unix command line utilities.


If you mainly want to use GNU developer tools (such as GCC) on Windows, consider MinGW and its MSYS package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.


Another option to get Unix look and feel under Windows is Cash. Note that only very few Unix commands and command-line options are available in this environment.


Useful Windows command-line tools


You can perform and script most Windows system administration tasks from the command line by learning and using wmic.


Native command-line Windows networking tools you may find useful include ping, ipconfig, tracert, and netstat.


You can perform many useful Windows tasks by invoking the Rundll32 command.


Cygwin tips and tricks


Install additional Unix programs with the Cygwin's package manager.


Use mintty as your command-line window.


Access the Windows clipboard through /dev/clipboard.


Run cygstart to open an arbitrary file through its registered application.


Access the Windows registry with regtool.


Note that a C:\ Windows drive path becomes /cygdrive/c under Cygwin, and that Cygwin's / appears under C:\cygwin on Windows. Convert between Cygwin and Windows-style file paths with cygpath. This is most useful in scripts that invoke Windows programs.


More resources

awesome-shell: A curated list of shell tools and resources.
awesome-osx-command-line: A more in-depth guide for the macOS command line.
Strict mode for writing better shell scripts.
shellcheck: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.
Filenames and Pathnames in Shell: The sadly complex minutiae on how to handle filenames correctly in shell scripts.
Data Science at the Command Line: More commands and tools helpful for doing data science, from the book of the same name

Disclaimer
With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you can do something in Bash doesn't necessarily mean you should! ;)
License

This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        
      
      
        Master the command line, in one page
      

    

    
        
          
          156k
          stars
        
          
          14.7k
          forks
        
          
          Branches
        
          
          Tags
        
          
          Activity
    

      
        
            
            
          Star


        
        
                    Notifications
    You must be signed in to change notification settings

        
        
          

        
      
  




          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  jlevy/the-art-of-command-line
  
    

  
        











  
  
      masterBranchesTagsGo to fileCodeFolders and filesNameNameLast commit messageLast commit dateLatest commit History1,218 Commitsadminadmin  .gitignore.gitignore  AUTHORS.mdAUTHORS.md  CONTRIBUTING.mdCONTRIBUTING.md  README-cs.mdREADME-cs.md  README-de.mdREADME-de.md  README-el.mdREADME-el.md  README-es.mdREADME-es.md  README-fr.mdREADME-fr.md  README-id.mdREADME-id.md  README-it.mdREADME-it.md  README-ja.mdREADME-ja.md  README-ko.mdREADME-ko.md  README-pl.mdREADME-pl.md  README-pt.mdREADME-pt.md  README-ro.mdREADME-ro.md  README-ru.mdREADME-ru.md  README-sl.mdREADME-sl.md  README-uk.mdREADME-uk.md  README-zh-Hant.mdREADME-zh-Hant.md  README-zh.mdREADME-zh.md  README.mdREADME.md  cowsay.pngcowsay.png  View all filesRepository files navigationREADME🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line
Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –jlevy, Holloway. Thank you!

Meta
Basics
Everyday use
Processing files and data
System debugging
One-liners
Obscure but useful
macOS only
Windows only
More resources
Disclaimer


Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.
This work is the result of many authors and translators.
Some of this
originally
appeared
on Quora,
but it has since moved to GitHub, where people more talented than the original author have made numerous improvements.
Please submit a question if you have a question related to the command line. Please contribute if you see an error or something that could be better!
Meta
Scope:

This guide is for both beginners and experienced users. The goals are breadth (everything important), specificity (give concrete examples of the most common case), and brevity (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.
This is written for Linux, with the exception of the "macOS only" and "Windows only" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).
The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.
It includes both "standard" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.

Notes:

To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use apt, yum, dnf, pacman, pip or brew (as appropriate) to install new programs.
Use Explainshell to get a helpful breakdown of what commands, options, pipes etc. do.

Basics


Learn basic Bash. Actually, type man bash and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning only zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).


Learn at least one text-based editor well. The nano editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (vi), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)


Finding documentation:

Know how to read official documentation with man (for the inquisitive, man man lists the section numbers, e.g. 1 is "regular" commands, 5 is files/conventions, and 8 are for administration). Find man pages with apropos.
Know that some commands are not executables, but Bash builtins, and that you can get help on them with help and help -d. You can find out whether a command is an executable, shell builtin or an alias by using type command.
curl cheat.sh/command will give a brief "cheat sheet" with common examples of how to use a shell command.



Learn about redirection of output and input using > and < and pipes using |. Know > overwrites the output file and >> appends. Learn about stdout and stderr.


Learn about file glob expansion with * (and perhaps ? and [...]) and quoting and the difference between double " and single ' quotes. (See more on variable expansion below.)


Be familiar with Bash job management: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Know ssh, and the basics of passwordless authentication, via ssh-agent, ssh-add, etc.


Basic file management: ls and ls -l (in particular, learn what every column in ls -l means), less, head, tail and tail -f (or even better, less +F), ln and ln -s (learn the differences and advantages of hard versus soft links), chown, chmod, du (for a quick summary of disk usage: du -hs *). For filesystem management, df, mount, fdisk, mkfs, lsblk. Learn what an inode is (ls -i or df -i).


Basic network management: ip or ifconfig, dig, traceroute, route.


Learn and use a version control management system, such as git.


Know regular expressions well, and the various flags to grep/egrep. The -i, -o, -v, -A, -B, and -C options are worth knowing.


Learn to use apt-get, yum, dnf or pacman (depending on distro) to find and install packages. And make sure you have pip to install Python-based command-line tools (a few below are easiest to install via pip).


Everyday use


In Bash, use Tab to complete arguments or list all available commands and ctrl-r to search through command history (after pressing, type to search, press ctrl-r repeatedly to cycle through more matches, press Enter to execute the found command, or hit the right arrow to put the result in the current line to allow editing).


In Bash, use ctrl-w to delete the last word, and ctrl-u to delete the content from current cursor back to the start of the line. Use alt-b and alt-f to move by word, ctrl-a to move cursor to beginning of line,  ctrl-e to move cursor to end of line, ctrl-k to kill to the end of the line, ctrl-l to clear the screen. See man readline for all the default keybindings in Bash. There are a lot. For example alt-. cycles through previous arguments, and alt-* expands a glob.


Alternatively, if you love vi-style key-bindings, use set -o vi (and set -o emacs to put it back).


For editing long commands, after setting your editor (for example export EDITOR=vim), ctrl-x ctrl-e will open the current command in an editor for multi-line editing. Or in vi style, escape-v.


To see recent commands, use history. Follow with !n (where n is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being !$ for last argument and !! for last command (see "HISTORY EXPANSION" in the man page). However, these are often easily replaced with ctrl-r and alt-..


Go to your home directory with cd. Access files relative to your home directory with the ~ prefix (e.g. ~/.bashrc). In sh scripts refer to the home directory as $HOME.


To go back to the previous working directory: cd -.


If you are halfway through typing a command but change your mind, hit alt-# to add a # at the beginning and enter it as a comment (or use ctrl-a, #, enter). You can then return to it later via command history.


Use xargs (or parallel). It's very powerful. Note you can control how many items execute per line (-L) as well as parallelism (-P). If you're not sure if it'll do the right thing, use xargs echo first. Also, -I{} is handy. Examples:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p is a helpful display of the process tree.


Use pgrep and pkill to find or signal processes by name (-f is helpful).


Know the various signals you can send processes. For example, to suspend a process, use kill -STOP [pid]. For the full list, see man 7 signal


Use nohup or disown if you want a background process to keep running forever.


Check what processes are listening via netstat -lntp or ss -plat (for TCP; add -u for UDP) or lsof -iTCP -sTCP:LISTEN -P -n (which also works on macOS).


See also lsof and fuser for open sockets and files.


See uptime or w to know how long the system has been running.


Use alias to create shortcuts for commonly used commands. For example, alias ll='ls -latr' creates a new alias ll.


Save aliases, shell settings, and functions you commonly use in ~/.bashrc, and arrange for login shells to source it. This will make your setup available in all your shell sessions.


Put the settings of environment variables as well as commands that should be executed when you login in ~/.bash_profile. Separate configuration will be needed for shells you launch from graphical environment logins and cron jobs.


Synchronize your configuration files (e.g. .bashrc and .bash_profile) among various computers with Git.


Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. "$FOO". Prefer the -0 or -print0 options to enable null characters to delimit filenames, e.g. locate -0 pattern | xargs -0 ls -al or find / -print0 -type d | xargs -0 ls -al. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using IFS=$'\n'.


In Bash scripts, use set -x (or the variant set -v, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use set -e to abort on errors (nonzero exit code). Use set -u to detect unset variable usages. Consider set -o pipefail too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use trap on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: ${name:?error message}. For example, if a Bash script requires a single argument, just write input_file=${1:?usage: $0 input_file}. Using a default value if a variable is empty: ${name:-default}. If you want to have an additional (optional) parameter added to the previous example, you can use something like output_file=${2:-logfile}. If $2 is omitted and thus empty, output_file will be set to logfile. Arithmetic expansion: i=$(( (i + 1) % 5 )). Sequences: {1..10}. Trimming of strings: ${var%suffix} and ${var#prefix}. For example if var=foo.pdf, then echo ${var%.pdf}.txt prints foo.txt.


Brace expansion using {...} can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like mv foo.{txt,pdf} some-dir (which moves both files), cp somefile{,.bak} (which expands to cp somefile somefile.bak) or mkdir -p test-{a,b,c}/subtest-{1,2,3} (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.


The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like {1..20} cannot be expressed with variables using {$a..$b}. Use seq or a for loop instead, e.g., seq $a $b or for((i=a; i<=b; i++)); do ... ; done.)


The output of a command can be treated like a file via <(some command) (known as process substitution). For example, compare local /etc/hosts with a remote one:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:

{
      # Your code here
}

A "here document" allows redirection of multiple lines of input as if from a file:

cat <<EOF
input
on multiple lines
EOF



In Bash, redirect both standard output and standard error via: some-command >logfile 2>&1 or some-command &>logfile. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add </dev/null.


Use man ascii for a good ASCII table, with hex and decimal values. For general encoding info, man unicode, man utf-8, and man latin1 are helpful.


Use screen or tmux to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. byobu can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is dtach.


In ssh, knowing how to port tunnel with -L or -D (and occasionally -R) is useful, e.g. to access web sites from a remote server.


It can be useful to make a few optimizations to your ssh configuration; for example, this ~/.ssh/config contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: StrictHostKeyChecking=no, ForwardAgent=yes


Consider mosh an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).


To get the permissions on a file in octal form, which is useful for system configuration but not available in ls and easy to bungle, use something like


      stat -c '%A %a %n' /etc/timezone


For interactive selection of values from the output of another command, use percol or fzf.


For interaction with files based on the output of another command (like git), use fpp (PathPicker).


For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:
python -m SimpleHTTPServer 7777 (for port 7777 and Python 2) and python -m http.server 7777 (for port 7777 and Python 3).


For running a command as another user, use sudo. Defaults to running as root; use -u to specify another user. Use -i to login as that user (you will be asked for your password).


For switching the shell to another user, use su username or su - username. The latter with "-" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password of the user you are switching to.


Know about the 128K limit on command lines. This "Argument list too long" error is common when wildcard matching large numbers of files. (When this happens alternatives like find and xargs may help.)


For a basic calculator (and of course access to Python in general), use the python interpreter. For example,


>>> 2+3
5

Processing files and data


To locate a file by name in the current directory, find . -iname '*something*' (or similar). To find a file anywhere by name, use locate something (but bear in mind updatedb may not have indexed recently created files).


For general searching through source or data files, there are several options more advanced or faster than grep -r, including (in rough order from older to newer) ack, ag ("the silver searcher"), and rg (ripgrep).


To convert HTML to text: lynx -dump -stdin


For Markdown, HTML, and all kinds of document conversion, try pandoc. For example, to convert a Markdown document to Word format: pandoc README.md --from markdown --to docx -o temp.docx


If you must handle XML, xmlstarlet is old but good.


For JSON, use jq. For interactive use, also see jid and jiq.


For YAML, use shyaml.


For Excel or CSV files, csvkit provides in2csv, csvcut, csvjoin, csvgrep, etc.


For Amazon S3, s3cmd is convenient and s4cmd is faster. Amazon's aws and the improved saws are essential for other AWS-related tasks.


Know about sort and uniq, including uniq's -u and -d options -- see one-liners below. See also comm.


Know about cut, paste, and join to manipulate text files. Many people use cut but forget about join.


Know about wc to count newlines (-l), characters (-m), words (-w) and bytes (-c).


Know about tee to copy from stdin to a file and also to stdout, as in ls -al | tee file.txt.


For more complex calculations, including grouping, reversing fields, and statistical calculations, consider datamash.


Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set LANG or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run many times slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using export LC_ALL=C.


You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in TZ=Pacific/Fiji date.


Know basic awk and sed for simple data munging. See One-liners for examples.


To replace all occurrences of a string in place, in one or more files:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

To rename multiple files and/or search and replace within files, try repren. (In some cases the rename command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

As the man page says, rsync really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using rsync instead of scp allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


For monitoring progress when processing files, use pv, pycp, pmonitor, progress, rsync --progress, or, for block-level copying, dd status=progress.


Use shuf to shuffle or select random lines from a file.


Know sort's options. For numbers, use -n, or -h for handling human-readable numbers (e.g. from du -h). Know how keys work (-t and -k). In particular, watch out that you need to write -k1,1 to sort by only the first field; -k1 means sort according to the whole line. Stable sort (sort -s) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use sort -k1,1 | sort -s -k2,2.


If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press ctrl-v [Tab] or write $'\t' (the latter is better as you can copy/paste it).


The standard tools for patching source code are diff and patch. See also diffstat for summary statistics of a diff and sdiff for a side-by-side diff. Note diff -r works for entire directories. Use diff -r tree1 tree2 | diffstat for a summary of changes. Use vimdiff to compare and edit files.


For binary files, use hd, hexdump or xxd for simple hex dumps and bvi, hexedit or biew for binary editing.


Also for binary files, strings (plus grep, etc.) lets you find bits of text.


For binary diffs (delta compression), use xdelta3.


To convert text encodings, try iconv. Or uconv for more advanced use; it supports some advanced Unicode things. For example:


      # Displays hex codes or actual names of characters (useful for debugging):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Lowercase and removes all accents (by expanding and dropping them):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;' < input.txt > output.txt


To split files into pieces, see split (to split by size) and csplit (to split by a pattern).


Date and time: To get the current date and time in the helpful ISO 8601 format, use date -u +"%Y-%m-%dT%H:%M:%SZ" (other options are problematic). To manipulate date and time expressions, use dateadd, datediff, strptime etc. from dateutils.


Use zless, zmore, zcat, and zgrep to operate on compressed files.


File attributes are settable via chattr and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  sudo chattr +i /critical/directory/or/file


Use getfacl and setfacl to save and restore file permissions. For example:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

To create empty files quickly, use truncate (creates sparse file), fallocate (ext4, xfs, btrfs and ocfs2 filesystems), xfs_mkfile (almost any filesystems, comes in xfsprogs package), mkfile (for Unix-like systems like Solaris, Mac OS).

System debugging


For web debugging, curl and curl -I are handy, or their wget equivalents, or the more modern httpie.


To know current cpu/disk status, the classic tools are top (or the better htop), iostat, and iotop. Use iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


For network connection details, use netstat and ss.


For a quick overview of what's happening on a system, dstat is especially useful. For broadest overview with details, use glances.


To know memory status, run and understand the output of free and vmstat. In particular, be aware the "cached" value is memory held by the Linux kernel as file cache, so effectively counts toward the "free" value.


Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run kill -3 <pid> and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's jps, jstat, jstack, jmap are useful. SJK tools are more advanced.


Use mtr as a better traceroute, to identify network issues.


For looking at why a disk is full, ncdu saves time over the usual commands like du -sh *.


To find which socket or process is using bandwidth, try iftop or nethogs.


The ab tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try siege.


For more serious network debugging, wireshark, tshark, or ngrep.


Know about strace and ltrace. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (-c), and the ability to attach to a running process (-p). Use trace child option (-f) to avoid missing important calls.


Know about ldd to check shared libraries etc — but never run it on untrusted files.


Know how to connect to a running process with gdb and get its stack traces.


Use /proc. It's amazingly helpful sometimes when debugging live problems. Examples: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (where xxx is the process id or pid).


When debugging why something went wrong in the past, sar can be very helpful. It shows historic statistics on CPU, memory, network, etc.


For deeper systems and performance analyses, look at stap (SystemTap), perf, and sysdig.


Check what OS you're on with uname or uname -a (general Unix/kernel info) or lsb_release -a (Linux distro info).


Use dmesg whenever something's acting really funny (it could be hardware or driver issues).


If you delete a file and it doesn't free up expected disk space as reported by du, check whether the file is in use by a process:
lsof | grep deleted | grep "filename-of-my-big-file"


One-liners
A few examples of piecing together commands:

It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via sort/uniq. Suppose a and b are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the -T option if /tmp is on a small root partition.) See also the note about LC_ALL above and sort's -u option (left out for clarity below).

      sort a b | uniq > c   # c is a union b
      sort a b | uniq -d > c   # c is a intersect b
      sort a b b | uniq -u > c   # c is set difference a - b

Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Use grep . * to quickly examine the contents of all files in a directory (so each line is paired with the filename), or head -100 * (so each file has a heading). This can be useful for directories filled with config settings like those in /sys, /proc, /etc.


Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):


      awk '{ x += $3 } END { print x }' myfile

To see sizes/dates on a tree of files, this is like a recursive ls -l but is easier to read than ls -lR:

      find . -type f -ls

Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an acct_id parameter that is present in the URL. If you want a tally of how many requests for each acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


To continuously monitor changes, use watch, e.g. check changes to files in a directory with watch -d -n 2 'ls -rtlh | tail' or to network settings while troubleshooting your wifi settings with watch -d -n 2 ifconfig.


Run this function to get a random tip from this document (parses Markdown and extracts an item):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscure but useful


expr: perform arithmetic or boolean operations or evaluate regular expressions


m4: simple macro processor


yes: print a string a lot


cal: nice calendar


env: run a command (useful in scripts)


printenv: print out environment variables (useful in debugging and scripts)


look: find English words (or lines in a file) beginning with a string


cut, paste and join: data manipulation


fmt: format text paragraphs


pr: format text into pages/columns


fold: wrap lines of text


column: format text fields into aligned, fixed-width columns or tables


expand and unexpand: convert between tabs and spaces


nl: add line numbers


seq: print numbers


bc: calculator


factor: factor integers


gpg: encrypt and sign files


toe: table of terminfo entries


nc: network debugging and data transfer


socat: socket relay and tcp port forwarder (similar to netcat)


slurm: network traffic visualization


dd: moving data between files or devices


file: identify type of a file


tree: display directories and subdirectories as a nesting tree; like ls but recursive


stat: file info


time: execute and time a command


timeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.


lockfile: create semaphore file that can only be removed by rm -f


logrotate: rotate, compress and mail logs.


watch: run a command repeatedly, showing results and/or highlighting changes


when-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.


tac: print files in reverse


comm: compare sorted files line by line


strings: extract text from binary files


tr: character translation or manipulation


iconv or uconv: conversion for text encodings


split and csplit: splitting files


sponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-file


units: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)


apg: generates random passwords


xz: high-ratio file compression


ldd: dynamic library info


nm: symbols from object files


ab or wrk: benchmarking web servers


strace: system call debugging


mtr: better traceroute for network debugging


cssh: visual concurrent shell


rsync: sync files and folders over SSH or in local file system


wireshark and tshark: packet capture and network debugging


ngrep: grep for the network layer


host and dig: DNS lookups


lsof: process file descriptor and socket info


dstat: useful system stats


glances: high level, multi-subsystem overview


iostat: Disk usage stats


mpstat: CPU usage stats


vmstat: Memory usage stats


htop: improved version of top


last: login history


w: who's logged on


id: user/group identity info


sar: historic system stats


iftop or nethogs: network utilization by socket or process


ss: socket statistics


dmesg: boot and system error messages


sysctl: view and configure Linux kernel parameters at run time


hdparm: SATA/ATA disk manipulation/performance


lsblk: list block devices: a tree view of your disks and disk partitions


lshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.


lsmod and modinfo: List and show details of kernel modules.


fortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations "useful"


macOS only
These are items relevant only on macOS.


Package management with brew (Homebrew) and/or port (MacPorts). These can be used to install on macOS many of the above commands.


Copy output of any command to a desktop app with pbcopy and paste input from one with pbpaste.


To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.), open Preferences -> Profiles -> Keyboard and select "Use Option as Meta key".


To open a file with a desktop app, use open or open -a /Applications/Whatever.app.


Spotlight: Search files with mdfind and list metadata (such as photo EXIF info) with mdls.


Be aware macOS is based on BSD Unix, and many commands (for example ps, ls, tail, awk, sed) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading "BSD General Commands Manual." In some cases GNU versions can be installed, too (such as gawk and gsed for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or perl) or test carefully.


To get macOS release information, use sw_vers.


Windows only
These items are relevant only on Windows.
Ways to obtain Unix tools under Windows


Access the power of the Unix shell under Microsoft Windows by installing Cygwin. Most of the things described in this document will work out of the box.


On Windows 10, you can use Windows Subsystem for Linux (WSL), which provides a familiar Bash environment with Unix command line utilities.


If you mainly want to use GNU developer tools (such as GCC) on Windows, consider MinGW and its MSYS package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.


Another option to get Unix look and feel under Windows is Cash. Note that only very few Unix commands and command-line options are available in this environment.


Useful Windows command-line tools


You can perform and script most Windows system administration tasks from the command line by learning and using wmic.


Native command-line Windows networking tools you may find useful include ping, ipconfig, tracert, and netstat.


You can perform many useful Windows tasks by invoking the Rundll32 command.


Cygwin tips and tricks


Install additional Unix programs with the Cygwin's package manager.


Use mintty as your command-line window.


Access the Windows clipboard through /dev/clipboard.


Run cygstart to open an arbitrary file through its registered application.


Access the Windows registry with regtool.


Note that a C:\ Windows drive path becomes /cygdrive/c under Cygwin, and that Cygwin's / appears under C:\cygwin on Windows. Convert between Cygwin and Windows-style file paths with cygpath. This is most useful in scripts that invoke Windows programs.


More resources

awesome-shell: A curated list of shell tools and resources.
awesome-osx-command-line: A more in-depth guide for the macOS command line.
Strict mode for writing better shell scripts.
shellcheck: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.
Filenames and Pathnames in Shell: The sadly complex minutiae on how to handle filenames correctly in shell scripts.
Data Science at the Command Line: More commands and tools helpful for doing data science, from the book of the same name

Disclaimer
With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you can do something in Bash doesn't necessarily mean you should! ;)
License

This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.
   


      

        

      
        
          
            
  About

      
        Master the command line, in one page
      

    Topics
    
        
      
  windows

      
  macos

      
  linux

      
  bash

      
  documentation

      
  unix

  

    

    Resources
    
      
        
        Readme
    

  



  

  
    
      Activity  


  Stars
  
    
      156k
      stars  

  Watchers
  
    
      2.8k
      watching  

  Forks
  
    
      14.7k
      forks  


    
      
          Report repository
    


          
        

        
            
              
                
  Releases

    No releases published

              
            

        
        
            
              
                
  
  Packages
      0


      
        No packages published 
      



              
            

        
            
              
                

              
            

        
            
              
                
  Contributors
      165


    
      
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
      


  
    + 151 contributors\n\n\n\n🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line
Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –jlevy, Holloway. Thank you!

Meta
Basics
Everyday use
Processing files and data
System debugging
One-liners
Obscure but useful
macOS only
Windows only
More resources
Disclaimer


Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.
This work is the result of many authors and translators.
Some of this
originally
appeared
on Quora,
but it has since moved to GitHub, where people more talented than the original author have made numerous improvements.
Please submit a question if you have a question related to the command line. Please contribute if you see an error or something that could be better!
Meta
Scope:

This guide is for both beginners and experienced users. The goals are breadth (everything important), specificity (give concrete examples of the most common case), and brevity (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.
This is written for Linux, with the exception of the "macOS only" and "Windows only" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).
The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.
It includes both "standard" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.

Notes:

To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use apt, yum, dnf, pacman, pip or brew (as appropriate) to install new programs.
Use Explainshell to get a helpful breakdown of what commands, options, pipes etc. do.

Basics


Learn basic Bash. Actually, type man bash and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning only zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).


Learn at least one text-based editor well. The nano editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (vi), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)


Finding documentation:

Know how to read official documentation with man (for the inquisitive, man man lists the section numbers, e.g. 1 is "regular" commands, 5 is files/conventions, and 8 are for administration). Find man pages with apropos.
Know that some commands are not executables, but Bash builtins, and that you can get help on them with help and help -d. You can find out whether a command is an executable, shell builtin or an alias by using type command.
curl cheat.sh/command will give a brief "cheat sheet" with common examples of how to use a shell command.



Learn about redirection of output and input using > and < and pipes using |. Know > overwrites the output file and >> appends. Learn about stdout and stderr.


Learn about file glob expansion with * (and perhaps ? and [...]) and quoting and the difference between double " and single ' quotes. (See more on variable expansion below.)


Be familiar with Bash job management: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Know ssh, and the basics of passwordless authentication, via ssh-agent, ssh-add, etc.


Basic file management: ls and ls -l (in particular, learn what every column in ls -l means), less, head, tail and tail -f (or even better, less +F), ln and ln -s (learn the differences and advantages of hard versus soft links), chown, chmod, du (for a quick summary of disk usage: du -hs *). For filesystem management, df, mount, fdisk, mkfs, lsblk. Learn what an inode is (ls -i or df -i).


Basic network management: ip or ifconfig, dig, traceroute, route.


Learn and use a version control management system, such as git.


Know regular expressions well, and the various flags to grep/egrep. The -i, -o, -v, -A, -B, and -C options are worth knowing.


Learn to use apt-get, yum, dnf or pacman (depending on distro) to find and install packages. And make sure you have pip to install Python-based command-line tools (a few below are easiest to install via pip).


Everyday use


In Bash, use Tab to complete arguments or list all available commands and ctrl-r to search through command history (after pressing, type to search, press ctrl-r repeatedly to cycle through more matches, press Enter to execute the found command, or hit the right arrow to put the result in the current line to allow editing).


In Bash, use ctrl-w to delete the last word, and ctrl-u to delete the content from current cursor back to the start of the line. Use alt-b and alt-f to move by word, ctrl-a to move cursor to beginning of line,  ctrl-e to move cursor to end of line, ctrl-k to kill to the end of the line, ctrl-l to clear the screen. See man readline for all the default keybindings in Bash. There are a lot. For example alt-. cycles through previous arguments, and alt-* expands a glob.


Alternatively, if you love vi-style key-bindings, use set -o vi (and set -o emacs to put it back).


For editing long commands, after setting your editor (for example export EDITOR=vim), ctrl-x ctrl-e will open the current command in an editor for multi-line editing. Or in vi style, escape-v.


To see recent commands, use history. Follow with !n (where n is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being !$ for last argument and !! for last command (see "HISTORY EXPANSION" in the man page). However, these are often easily replaced with ctrl-r and alt-..


Go to your home directory with cd. Access files relative to your home directory with the ~ prefix (e.g. ~/.bashrc). In sh scripts refer to the home directory as $HOME.


To go back to the previous working directory: cd -.


If you are halfway through typing a command but change your mind, hit alt-# to add a # at the beginning and enter it as a comment (or use ctrl-a, #, enter). You can then return to it later via command history.


Use xargs (or parallel). It's very powerful. Note you can control how many items execute per line (-L) as well as parallelism (-P). If you're not sure if it'll do the right thing, use xargs echo first. Also, -I{} is handy. Examples:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p is a helpful display of the process tree.


Use pgrep and pkill to find or signal processes by name (-f is helpful).


Know the various signals you can send processes. For example, to suspend a process, use kill -STOP [pid]. For the full list, see man 7 signal


Use nohup or disown if you want a background process to keep running forever.


Check what processes are listening via netstat -lntp or ss -plat (for TCP; add -u for UDP) or lsof -iTCP -sTCP:LISTEN -P -n (which also works on macOS).


See also lsof and fuser for open sockets and files.


See uptime or w to know how long the system has been running.


Use alias to create shortcuts for commonly used commands. For example, alias ll='ls -latr' creates a new alias ll.


Save aliases, shell settings, and functions you commonly use in ~/.bashrc, and arrange for login shells to source it. This will make your setup available in all your shell sessions.


Put the settings of environment variables as well as commands that should be executed when you login in ~/.bash_profile. Separate configuration will be needed for shells you launch from graphical environment logins and cron jobs.


Synchronize your configuration files (e.g. .bashrc and .bash_profile) among various computers with Git.


Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. "$FOO". Prefer the -0 or -print0 options to enable null characters to delimit filenames, e.g. locate -0 pattern | xargs -0 ls -al or find / -print0 -type d | xargs -0 ls -al. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using IFS=$'\n'.


In Bash scripts, use set -x (or the variant set -v, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use set -e to abort on errors (nonzero exit code). Use set -u to detect unset variable usages. Consider set -o pipefail too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use trap on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: ${name:?error message}. For example, if a Bash script requires a single argument, just write input_file=${1:?usage: $0 input_file}. Using a default value if a variable is empty: ${name:-default}. If you want to have an additional (optional) parameter added to the previous example, you can use something like output_file=${2:-logfile}. If $2 is omitted and thus empty, output_file will be set to logfile. Arithmetic expansion: i=$(( (i + 1) % 5 )). Sequences: {1..10}. Trimming of strings: ${var%suffix} and ${var#prefix}. For example if var=foo.pdf, then echo ${var%.pdf}.txt prints foo.txt.


Brace expansion using {...} can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like mv foo.{txt,pdf} some-dir (which moves both files), cp somefile{,.bak} (which expands to cp somefile somefile.bak) or mkdir -p test-{a,b,c}/subtest-{1,2,3} (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.


The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like {1..20} cannot be expressed with variables using {$a..$b}. Use seq or a for loop instead, e.g., seq $a $b or for((i=a; i<=b; i++)); do ... ; done.)


The output of a command can be treated like a file via <(some command) (known as process substitution). For example, compare local /etc/hosts with a remote one:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:

{
      # Your code here
}

A "here document" allows redirection of multiple lines of input as if from a file:

cat <<EOF
input
on multiple lines
EOF



In Bash, redirect both standard output and standard error via: some-command >logfile 2>&1 or some-command &>logfile. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add </dev/null.


Use man ascii for a good ASCII table, with hex and decimal values. For general encoding info, man unicode, man utf-8, and man latin1 are helpful.


Use screen or tmux to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. byobu can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is dtach.


In ssh, knowing how to port tunnel with -L or -D (and occasionally -R) is useful, e.g. to access web sites from a remote server.


It can be useful to make a few optimizations to your ssh configuration; for example, this ~/.ssh/config contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: StrictHostKeyChecking=no, ForwardAgent=yes


Consider mosh an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).


To get the permissions on a file in octal form, which is useful for system configuration but not available in ls and easy to bungle, use something like


      stat -c '%A %a %n' /etc/timezone


For interactive selection of values from the output of another command, use percol or fzf.


For interaction with files based on the output of another command (like git), use fpp (PathPicker).


For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:
python -m SimpleHTTPServer 7777 (for port 7777 and Python 2) and python -m http.server 7777 (for port 7777 and Python 3).


For running a command as another user, use sudo. Defaults to running as root; use -u to specify another user. Use -i to login as that user (you will be asked for your password).


For switching the shell to another user, use su username or su - username. The latter with "-" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password of the user you are switching to.


Know about the 128K limit on command lines. This "Argument list too long" error is common when wildcard matching large numbers of files. (When this happens alternatives like find and xargs may help.)


For a basic calculator (and of course access to Python in general), use the python interpreter. For example,


>>> 2+3
5

Processing files and data


To locate a file by name in the current directory, find . -iname '*something*' (or similar). To find a file anywhere by name, use locate something (but bear in mind updatedb may not have indexed recently created files).


For general searching through source or data files, there are several options more advanced or faster than grep -r, including (in rough order from older to newer) ack, ag ("the silver searcher"), and rg (ripgrep).


To convert HTML to text: lynx -dump -stdin


For Markdown, HTML, and all kinds of document conversion, try pandoc. For example, to convert a Markdown document to Word format: pandoc README.md --from markdown --to docx -o temp.docx


If you must handle XML, xmlstarlet is old but good.


For JSON, use jq. For interactive use, also see jid and jiq.


For YAML, use shyaml.


For Excel or CSV files, csvkit provides in2csv, csvcut, csvjoin, csvgrep, etc.


For Amazon S3, s3cmd is convenient and s4cmd is faster. Amazon's aws and the improved saws are essential for other AWS-related tasks.


Know about sort and uniq, including uniq's -u and -d options -- see one-liners below. See also comm.


Know about cut, paste, and join to manipulate text files. Many people use cut but forget about join.


Know about wc to count newlines (-l), characters (-m), words (-w) and bytes (-c).


Know about tee to copy from stdin to a file and also to stdout, as in ls -al | tee file.txt.


For more complex calculations, including grouping, reversing fields, and statistical calculations, consider datamash.


Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set LANG or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run many times slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using export LC_ALL=C.


You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in TZ=Pacific/Fiji date.


Know basic awk and sed for simple data munging. See One-liners for examples.


To replace all occurrences of a string in place, in one or more files:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

To rename multiple files and/or search and replace within files, try repren. (In some cases the rename command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

As the man page says, rsync really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using rsync instead of scp allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


For monitoring progress when processing files, use pv, pycp, pmonitor, progress, rsync --progress, or, for block-level copying, dd status=progress.


Use shuf to shuffle or select random lines from a file.


Know sort's options. For numbers, use -n, or -h for handling human-readable numbers (e.g. from du -h). Know how keys work (-t and -k). In particular, watch out that you need to write -k1,1 to sort by only the first field; -k1 means sort according to the whole line. Stable sort (sort -s) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use sort -k1,1 | sort -s -k2,2.


If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press ctrl-v [Tab] or write $'\t' (the latter is better as you can copy/paste it).


The standard tools for patching source code are diff and patch. See also diffstat for summary statistics of a diff and sdiff for a side-by-side diff. Note diff -r works for entire directories. Use diff -r tree1 tree2 | diffstat for a summary of changes. Use vimdiff to compare and edit files.


For binary files, use hd, hexdump or xxd for simple hex dumps and bvi, hexedit or biew for binary editing.


Also for binary files, strings (plus grep, etc.) lets you find bits of text.


For binary diffs (delta compression), use xdelta3.


To convert text encodings, try iconv. Or uconv for more advanced use; it supports some advanced Unicode things. For example:


      # Displays hex codes or actual names of characters (useful for debugging):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Lowercase and removes all accents (by expanding and dropping them):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;' < input.txt > output.txt


To split files into pieces, see split (to split by size) and csplit (to split by a pattern).


Date and time: To get the current date and time in the helpful ISO 8601 format, use date -u +"%Y-%m-%dT%H:%M:%SZ" (other options are problematic). To manipulate date and time expressions, use dateadd, datediff, strptime etc. from dateutils.


Use zless, zmore, zcat, and zgrep to operate on compressed files.


File attributes are settable via chattr and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  sudo chattr +i /critical/directory/or/file


Use getfacl and setfacl to save and restore file permissions. For example:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

To create empty files quickly, use truncate (creates sparse file), fallocate (ext4, xfs, btrfs and ocfs2 filesystems), xfs_mkfile (almost any filesystems, comes in xfsprogs package), mkfile (for Unix-like systems like Solaris, Mac OS).

System debugging


For web debugging, curl and curl -I are handy, or their wget equivalents, or the more modern httpie.


To know current cpu/disk status, the classic tools are top (or the better htop), iostat, and iotop. Use iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


For network connection details, use netstat and ss.


For a quick overview of what's happening on a system, dstat is especially useful. For broadest overview with details, use glances.


To know memory status, run and understand the output of free and vmstat. In particular, be aware the "cached" value is memory held by the Linux kernel as file cache, so effectively counts toward the "free" value.


Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run kill -3 <pid> and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's jps, jstat, jstack, jmap are useful. SJK tools are more advanced.


Use mtr as a better traceroute, to identify network issues.


For looking at why a disk is full, ncdu saves time over the usual commands like du -sh *.


To find which socket or process is using bandwidth, try iftop or nethogs.


The ab tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try siege.


For more serious network debugging, wireshark, tshark, or ngrep.


Know about strace and ltrace. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (-c), and the ability to attach to a running process (-p). Use trace child option (-f) to avoid missing important calls.


Know about ldd to check shared libraries etc — but never run it on untrusted files.


Know how to connect to a running process with gdb and get its stack traces.


Use /proc. It's amazingly helpful sometimes when debugging live problems. Examples: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (where xxx is the process id or pid).


When debugging why something went wrong in the past, sar can be very helpful. It shows historic statistics on CPU, memory, network, etc.


For deeper systems and performance analyses, look at stap (SystemTap), perf, and sysdig.


Check what OS you're on with uname or uname -a (general Unix/kernel info) or lsb_release -a (Linux distro info).


Use dmesg whenever something's acting really funny (it could be hardware or driver issues).


If you delete a file and it doesn't free up expected disk space as reported by du, check whether the file is in use by a process:
lsof | grep deleted | grep "filename-of-my-big-file"


One-liners
A few examples of piecing together commands:

It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via sort/uniq. Suppose a and b are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the -T option if /tmp is on a small root partition.) See also the note about LC_ALL above and sort's -u option (left out for clarity below).

      sort a b | uniq > c   # c is a union b
      sort a b | uniq -d > c   # c is a intersect b
      sort a b b | uniq -u > c   # c is set difference a - b

Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Use grep . * to quickly examine the contents of all files in a directory (so each line is paired with the filename), or head -100 * (so each file has a heading). This can be useful for directories filled with config settings like those in /sys, /proc, /etc.


Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):


      awk '{ x += $3 } END { print x }' myfile

To see sizes/dates on a tree of files, this is like a recursive ls -l but is easier to read than ls -lR:

      find . -type f -ls

Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an acct_id parameter that is present in the URL. If you want a tally of how many requests for each acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


To continuously monitor changes, use watch, e.g. check changes to files in a directory with watch -d -n 2 'ls -rtlh | tail' or to network settings while troubleshooting your wifi settings with watch -d -n 2 ifconfig.


Run this function to get a random tip from this document (parses Markdown and extracts an item):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscure but useful


expr: perform arithmetic or boolean operations or evaluate regular expressions


m4: simple macro processor


yes: print a string a lot


cal: nice calendar


env: run a command (useful in scripts)


printenv: print out environment variables (useful in debugging and scripts)


look: find English words (or lines in a file) beginning with a string


cut, paste and join: data manipulation


fmt: format text paragraphs


pr: format text into pages/columns


fold: wrap lines of text


column: format text fields into aligned, fixed-width columns or tables


expand and unexpand: convert between tabs and spaces


nl: add line numbers


seq: print numbers


bc: calculator


factor: factor integers


gpg: encrypt and sign files


toe: table of terminfo entries


nc: network debugging and data transfer


socat: socket relay and tcp port forwarder (similar to netcat)


slurm: network traffic visualization


dd: moving data between files or devices


file: identify type of a file


tree: display directories and subdirectories as a nesting tree; like ls but recursive


stat: file info


time: execute and time a command


timeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.


lockfile: create semaphore file that can only be removed by rm -f


logrotate: rotate, compress and mail logs.


watch: run a command repeatedly, showing results and/or highlighting changes


when-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.


tac: print files in reverse


comm: compare sorted files line by line


strings: extract text from binary files


tr: character translation or manipulation


iconv or uconv: conversion for text encodings


split and csplit: splitting files


sponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-file


units: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)


apg: generates random passwords


xz: high-ratio file compression


ldd: dynamic library info


nm: symbols from object files


ab or wrk: benchmarking web servers


strace: system call debugging


mtr: better traceroute for network debugging


cssh: visual concurrent shell


rsync: sync files and folders over SSH or in local file system


wireshark and tshark: packet capture and network debugging


ngrep: grep for the network layer


host and dig: DNS lookups


lsof: process file descriptor and socket info


dstat: useful system stats


glances: high level, multi-subsystem overview


iostat: Disk usage stats


mpstat: CPU usage stats


vmstat: Memory usage stats


htop: improved version of top


last: login history


w: who's logged on


id: user/group identity info


sar: historic system stats


iftop or nethogs: network utilization by socket or process


ss: socket statistics


dmesg: boot and system error messages


sysctl: view and configure Linux kernel parameters at run time


hdparm: SATA/ATA disk manipulation/performance


lsblk: list block devices: a tree view of your disks and disk partitions


lshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.


lsmod and modinfo: List and show details of kernel modules.


fortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations "useful"


macOS only
These are items relevant only on macOS.


Package management with brew (Homebrew) and/or port (MacPorts). These can be used to install on macOS many of the above commands.


Copy output of any command to a desktop app with pbcopy and paste input from one with pbpaste.


To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.), open Preferences -> Profiles -> Keyboard and select "Use Option as Meta key".


To open a file with a desktop app, use open or open -a /Applications/Whatever.app.


Spotlight: Search files with mdfind and list metadata (such as photo EXIF info) with mdls.


Be aware macOS is based on BSD Unix, and many commands (for example ps, ls, tail, awk, sed) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading "BSD General Commands Manual." In some cases GNU versions can be installed, too (such as gawk and gsed for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or perl) or test carefully.


To get macOS release information, use sw_vers.


Windows only
These items are relevant only on Windows.
Ways to obtain Unix tools under Windows


Access the power of the Unix shell under Microsoft Windows by installing Cygwin. Most of the things described in this document will work out of the box.


On Windows 10, you can use Windows Subsystem for Linux (WSL), which provides a familiar Bash environment with Unix command line utilities.


If you mainly want to use GNU developer tools (such as GCC) on Windows, consider MinGW and its MSYS package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.


Another option to get Unix look and feel under Windows is Cash. Note that only very few Unix commands and command-line options are available in this environment.


Useful Windows command-line tools


You can perform and script most Windows system administration tasks from the command line by learning and using wmic.


Native command-line Windows networking tools you may find useful include ping, ipconfig, tracert, and netstat.


You can perform many useful Windows tasks by invoking the Rundll32 command.


Cygwin tips and tricks


Install additional Unix programs with the Cygwin's package manager.


Use mintty as your command-line window.


Access the Windows clipboard through /dev/clipboard.


Run cygstart to open an arbitrary file through its registered application.


Access the Windows registry with regtool.


Note that a C:\ Windows drive path becomes /cygdrive/c under Cygwin, and that Cygwin's / appears under C:\cygwin on Windows. Convert between Cygwin and Windows-style file paths with cygpath. This is most useful in scripts that invoke Windows programs.


More resources

awesome-shell: A curated list of shell tools and resources.
awesome-osx-command-line: A more in-depth guide for the macOS command line.
Strict mode for writing better shell scripts.
shellcheck: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.
Filenames and Pathnames in Shell: The sadly complex minutiae on how to handle filenames correctly in shell scripts.
Data Science at the Command Line: More commands and tools helpful for doing data science, from the book of the same name

Disclaimer
With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you can do something in Bash doesn't necessarily mean you should! ;)
License

This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        
      
      
        Master the command line, in one page
      

    

    
        
          
          156k
          stars
        
          
          14.7k
          forks
        
          
          Branches
        
          
          Tags
        
          
          Activity
    

      
        
            
            
          Star


        
        
                    Notifications
    You must be signed in to change notification settings

        
        
          

        
      
  




          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  jlevy/the-art-of-command-line
  
    

  
        











  
  
      masterBranchesTagsGo to fileCodeFolders and filesNameNameLast commit messageLast commit dateLatest commit History1,218 Commitsadminadmin  .gitignore.gitignore  AUTHORS.mdAUTHORS.md  CONTRIBUTING.mdCONTRIBUTING.md  README-cs.mdREADME-cs.md  README-de.mdREADME-de.md  README-el.mdREADME-el.md  README-es.mdREADME-es.md  README-fr.mdREADME-fr.md  README-id.mdREADME-id.md  README-it.mdREADME-it.md  README-ja.mdREADME-ja.md  README-ko.mdREADME-ko.md  README-pl.mdREADME-pl.md  README-pt.mdREADME-pt.md  README-ro.mdREADME-ro.md  README-ru.mdREADME-ru.md  README-sl.mdREADME-sl.md  README-uk.mdREADME-uk.md  README-zh-Hant.mdREADME-zh-Hant.md  README-zh.mdREADME-zh.md  README.mdREADME.md  cowsay.pngcowsay.png  View all filesRepository files navigationREADME🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line
Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –jlevy, Holloway. Thank you!

Meta
Basics
Everyday use
Processing files and data
System debugging
One-liners
Obscure but useful
macOS only
Windows only
More resources
Disclaimer


Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.
This work is the result of many authors and translators.
Some of this
originally
appeared
on Quora,
but it has since moved to GitHub, where people more talented than the original author have made numerous improvements.
Please submit a question if you have a question related to the command line. Please contribute if you see an error or something that could be better!
Meta
Scope:

This guide is for both beginners and experienced users. The goals are breadth (everything important), specificity (give concrete examples of the most common case), and brevity (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.
This is written for Linux, with the exception of the "macOS only" and "Windows only" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).
The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.
It includes both "standard" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.

Notes:

To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use apt, yum, dnf, pacman, pip or brew (as appropriate) to install new programs.
Use Explainshell to get a helpful breakdown of what commands, options, pipes etc. do.

Basics


Learn basic Bash. Actually, type man bash and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning only zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).


Learn at least one text-based editor well. The nano editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (vi), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)


Finding documentation:

Know how to read official documentation with man (for the inquisitive, man man lists the section numbers, e.g. 1 is "regular" commands, 5 is files/conventions, and 8 are for administration). Find man pages with apropos.
Know that some commands are not executables, but Bash builtins, and that you can get help on them with help and help -d. You can find out whether a command is an executable, shell builtin or an alias by using type command.
curl cheat.sh/command will give a brief "cheat sheet" with common examples of how to use a shell command.



Learn about redirection of output and input using > and < and pipes using |. Know > overwrites the output file and >> appends. Learn about stdout and stderr.


Learn about file glob expansion with * (and perhaps ? and [...]) and quoting and the difference between double " and single ' quotes. (See more on variable expansion below.)


Be familiar with Bash job management: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Know ssh, and the basics of passwordless authentication, via ssh-agent, ssh-add, etc.


Basic file management: ls and ls -l (in particular, learn what every column in ls -l means), less, head, tail and tail -f (or even better, less +F), ln and ln -s (learn the differences and advantages of hard versus soft links), chown, chmod, du (for a quick summary of disk usage: du -hs *). For filesystem management, df, mount, fdisk, mkfs, lsblk. Learn what an inode is (ls -i or df -i).


Basic network management: ip or ifconfig, dig, traceroute, route.


Learn and use a version control management system, such as git.


Know regular expressions well, and the various flags to grep/egrep. The -i, -o, -v, -A, -B, and -C options are worth knowing.


Learn to use apt-get, yum, dnf or pacman (depending on distro) to find and install packages. And make sure you have pip to install Python-based command-line tools (a few below are easiest to install via pip).


Everyday use


In Bash, use Tab to complete arguments or list all available commands and ctrl-r to search through command history (after pressing, type to search, press ctrl-r repeatedly to cycle through more matches, press Enter to execute the found command, or hit the right arrow to put the result in the current line to allow editing).


In Bash, use ctrl-w to delete the last word, and ctrl-u to delete the content from current cursor back to the start of the line. Use alt-b and alt-f to move by word, ctrl-a to move cursor to beginning of line,  ctrl-e to move cursor to end of line, ctrl-k to kill to the end of the line, ctrl-l to clear the screen. See man readline for all the default keybindings in Bash. There are a lot. For example alt-. cycles through previous arguments, and alt-* expands a glob.


Alternatively, if you love vi-style key-bindings, use set -o vi (and set -o emacs to put it back).


For editing long commands, after setting your editor (for example export EDITOR=vim), ctrl-x ctrl-e will open the current command in an editor for multi-line editing. Or in vi style, escape-v.


To see recent commands, use history. Follow with !n (where n is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being !$ for last argument and !! for last command (see "HISTORY EXPANSION" in the man page). However, these are often easily replaced with ctrl-r and alt-..


Go to your home directory with cd. Access files relative to your home directory with the ~ prefix (e.g. ~/.bashrc). In sh scripts refer to the home directory as $HOME.


To go back to the previous working directory: cd -.


If you are halfway through typing a command but change your mind, hit alt-# to add a # at the beginning and enter it as a comment (or use ctrl-a, #, enter). You can then return to it later via command history.


Use xargs (or parallel). It's very powerful. Note you can control how many items execute per line (-L) as well as parallelism (-P). If you're not sure if it'll do the right thing, use xargs echo first. Also, -I{} is handy. Examples:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p is a helpful display of the process tree.


Use pgrep and pkill to find or signal processes by name (-f is helpful).


Know the various signals you can send processes. For example, to suspend a process, use kill -STOP [pid]. For the full list, see man 7 signal


Use nohup or disown if you want a background process to keep running forever.


Check what processes are listening via netstat -lntp or ss -plat (for TCP; add -u for UDP) or lsof -iTCP -sTCP:LISTEN -P -n (which also works on macOS).


See also lsof and fuser for open sockets and files.


See uptime or w to know how long the system has been running.


Use alias to create shortcuts for commonly used commands. For example, alias ll='ls -latr' creates a new alias ll.


Save aliases, shell settings, and functions you commonly use in ~/.bashrc, and arrange for login shells to source it. This will make your setup available in all your shell sessions.


Put the settings of environment variables as well as commands that should be executed when you login in ~/.bash_profile. Separate configuration will be needed for shells you launch from graphical environment logins and cron jobs.


Synchronize your configuration files (e.g. .bashrc and .bash_profile) among various computers with Git.


Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. "$FOO". Prefer the -0 or -print0 options to enable null characters to delimit filenames, e.g. locate -0 pattern | xargs -0 ls -al or find / -print0 -type d | xargs -0 ls -al. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using IFS=$'\n'.


In Bash scripts, use set -x (or the variant set -v, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use set -e to abort on errors (nonzero exit code). Use set -u to detect unset variable usages. Consider set -o pipefail too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use trap on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: ${name:?error message}. For example, if a Bash script requires a single argument, just write input_file=${1:?usage: $0 input_file}. Using a default value if a variable is empty: ${name:-default}. If you want to have an additional (optional) parameter added to the previous example, you can use something like output_file=${2:-logfile}. If $2 is omitted and thus empty, output_file will be set to logfile. Arithmetic expansion: i=$(( (i + 1) % 5 )). Sequences: {1..10}. Trimming of strings: ${var%suffix} and ${var#prefix}. For example if var=foo.pdf, then echo ${var%.pdf}.txt prints foo.txt.


Brace expansion using {...} can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like mv foo.{txt,pdf} some-dir (which moves both files), cp somefile{,.bak} (which expands to cp somefile somefile.bak) or mkdir -p test-{a,b,c}/subtest-{1,2,3} (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.


The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like {1..20} cannot be expressed with variables using {$a..$b}. Use seq or a for loop instead, e.g., seq $a $b or for((i=a; i<=b; i++)); do ... ; done.)


The output of a command can be treated like a file via <(some command) (known as process substitution). For example, compare local /etc/hosts with a remote one:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:

{
      # Your code here
}

A "here document" allows redirection of multiple lines of input as if from a file:

cat <<EOF
input
on multiple lines
EOF



In Bash, redirect both standard output and standard error via: some-command >logfile 2>&1 or some-command &>logfile. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add </dev/null.


Use man ascii for a good ASCII table, with hex and decimal values. For general encoding info, man unicode, man utf-8, and man latin1 are helpful.


Use screen or tmux to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. byobu can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is dtach.


In ssh, knowing how to port tunnel with -L or -D (and occasionally -R) is useful, e.g. to access web sites from a remote server.


It can be useful to make a few optimizations to your ssh configuration; for example, this ~/.ssh/config contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: StrictHostKeyChecking=no, ForwardAgent=yes


Consider mosh an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).


To get the permissions on a file in octal form, which is useful for system configuration but not available in ls and easy to bungle, use something like


      stat -c '%A %a %n' /etc/timezone


For interactive selection of values from the output of another command, use percol or fzf.


For interaction with files based on the output of another command (like git), use fpp (PathPicker).


For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:
python -m SimpleHTTPServer 7777 (for port 7777 and Python 2) and python -m http.server 7777 (for port 7777 and Python 3).


For running a command as another user, use sudo. Defaults to running as root; use -u to specify another user. Use -i to login as that user (you will be asked for your password).


For switching the shell to another user, use su username or su - username. The latter with "-" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password of the user you are switching to.


Know about the 128K limit on command lines. This "Argument list too long" error is common when wildcard matching large numbers of files. (When this happens alternatives like find and xargs may help.)


For a basic calculator (and of course access to Python in general), use the python interpreter. For example,


>>> 2+3
5

Processing files and data


To locate a file by name in the current directory, find . -iname '*something*' (or similar). To find a file anywhere by name, use locate something (but bear in mind updatedb may not have indexed recently created files).


For general searching through source or data files, there are several options more advanced or faster than grep -r, including (in rough order from older to newer) ack, ag ("the silver searcher"), and rg (ripgrep).


To convert HTML to text: lynx -dump -stdin


For Markdown, HTML, and all kinds of document conversion, try pandoc. For example, to convert a Markdown document to Word format: pandoc README.md --from markdown --to docx -o temp.docx


If you must handle XML, xmlstarlet is old but good.


For JSON, use jq. For interactive use, also see jid and jiq.


For YAML, use shyaml.


For Excel or CSV files, csvkit provides in2csv, csvcut, csvjoin, csvgrep, etc.


For Amazon S3, s3cmd is convenient and s4cmd is faster. Amazon's aws and the improved saws are essential for other AWS-related tasks.


Know about sort and uniq, including uniq's -u and -d options -- see one-liners below. See also comm.


Know about cut, paste, and join to manipulate text files. Many people use cut but forget about join.


Know about wc to count newlines (-l), characters (-m), words (-w) and bytes (-c).


Know about tee to copy from stdin to a file and also to stdout, as in ls -al | tee file.txt.


For more complex calculations, including grouping, reversing fields, and statistical calculations, consider datamash.


Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set LANG or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run many times slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using export LC_ALL=C.


You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in TZ=Pacific/Fiji date.


Know basic awk and sed for simple data munging. See One-liners for examples.


To replace all occurrences of a string in place, in one or more files:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

To rename multiple files and/or search and replace within files, try repren. (In some cases the rename command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

As the man page says, rsync really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using rsync instead of scp allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


For monitoring progress when processing files, use pv, pycp, pmonitor, progress, rsync --progress, or, for block-level copying, dd status=progress.


Use shuf to shuffle or select random lines from a file.


Know sort's options. For numbers, use -n, or -h for handling human-readable numbers (e.g. from du -h). Know how keys work (-t and -k). In particular, watch out that you need to write -k1,1 to sort by only the first field; -k1 means sort according to the whole line. Stable sort (sort -s) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use sort -k1,1 | sort -s -k2,2.


If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press ctrl-v [Tab] or write $'\t' (the latter is better as you can copy/paste it).


The standard tools for patching source code are diff and patch. See also diffstat for summary statistics of a diff and sdiff for a side-by-side diff. Note diff -r works for entire directories. Use diff -r tree1 tree2 | diffstat for a summary of changes. Use vimdiff to compare and edit files.


For binary files, use hd, hexdump or xxd for simple hex dumps and bvi, hexedit or biew for binary editing.


Also for binary files, strings (plus grep, etc.) lets you find bits of text.


For binary diffs (delta compression), use xdelta3.


To convert text encodings, try iconv. Or uconv for more advanced use; it supports some advanced Unicode things. For example:


      # Displays hex codes or actual names of characters (useful for debugging):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Lowercase and removes all accents (by expanding and dropping them):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;' < input.txt > output.txt


To split files into pieces, see split (to split by size) and csplit (to split by a pattern).


Date and time: To get the current date and time in the helpful ISO 8601 format, use date -u +"%Y-%m-%dT%H:%M:%SZ" (other options are problematic). To manipulate date and time expressions, use dateadd, datediff, strptime etc. from dateutils.


Use zless, zmore, zcat, and zgrep to operate on compressed files.


File attributes are settable via chattr and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  sudo chattr +i /critical/directory/or/file


Use getfacl and setfacl to save and restore file permissions. For example:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

To create empty files quickly, use truncate (creates sparse file), fallocate (ext4, xfs, btrfs and ocfs2 filesystems), xfs_mkfile (almost any filesystems, comes in xfsprogs package), mkfile (for Unix-like systems like Solaris, Mac OS).

System debugging


For web debugging, curl and curl -I are handy, or their wget equivalents, or the more modern httpie.


To know current cpu/disk status, the classic tools are top (or the better htop), iostat, and iotop. Use iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


For network connection details, use netstat and ss.


For a quick overview of what's happening on a system, dstat is especially useful. For broadest overview with details, use glances.


To know memory status, run and understand the output of free and vmstat. In particular, be aware the "cached" value is memory held by the Linux kernel as file cache, so effectively counts toward the "free" value.


Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run kill -3 <pid> and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's jps, jstat, jstack, jmap are useful. SJK tools are more advanced.


Use mtr as a better traceroute, to identify network issues.


For looking at why a disk is full, ncdu saves time over the usual commands like du -sh *.


To find which socket or process is using bandwidth, try iftop or nethogs.


The ab tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try siege.


For more serious network debugging, wireshark, tshark, or ngrep.


Know about strace and ltrace. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (-c), and the ability to attach to a running process (-p). Use trace child option (-f) to avoid missing important calls.


Know about ldd to check shared libraries etc — but never run it on untrusted files.


Know how to connect to a running process with gdb and get its stack traces.


Use /proc. It's amazingly helpful sometimes when debugging live problems. Examples: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (where xxx is the process id or pid).


When debugging why something went wrong in the past, sar can be very helpful. It shows historic statistics on CPU, memory, network, etc.


For deeper systems and performance analyses, look at stap (SystemTap), perf, and sysdig.


Check what OS you're on with uname or uname -a (general Unix/kernel info) or lsb_release -a (Linux distro info).


Use dmesg whenever something's acting really funny (it could be hardware or driver issues).


If you delete a file and it doesn't free up expected disk space as reported by du, check whether the file is in use by a process:
lsof | grep deleted | grep "filename-of-my-big-file"


One-liners
A few examples of piecing together commands:

It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via sort/uniq. Suppose a and b are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the -T option if /tmp is on a small root partition.) See also the note about LC_ALL above and sort's -u option (left out for clarity below).

      sort a b | uniq > c   # c is a union b
      sort a b | uniq -d > c   # c is a intersect b
      sort a b b | uniq -u > c   # c is set difference a - b

Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Use grep . * to quickly examine the contents of all files in a directory (so each line is paired with the filename), or head -100 * (so each file has a heading). This can be useful for directories filled with config settings like those in /sys, /proc, /etc.


Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):


      awk '{ x += $3 } END { print x }' myfile

To see sizes/dates on a tree of files, this is like a recursive ls -l but is easier to read than ls -lR:

      find . -type f -ls

Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an acct_id parameter that is present in the URL. If you want a tally of how many requests for each acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


To continuously monitor changes, use watch, e.g. check changes to files in a directory with watch -d -n 2 'ls -rtlh | tail' or to network settings while troubleshooting your wifi settings with watch -d -n 2 ifconfig.


Run this function to get a random tip from this document (parses Markdown and extracts an item):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscure but useful


expr: perform arithmetic or boolean operations or evaluate regular expressions


m4: simple macro processor


yes: print a string a lot


cal: nice calendar


env: run a command (useful in scripts)


printenv: print out environment variables (useful in debugging and scripts)


look: find English words (or lines in a file) beginning with a string


cut, paste and join: data manipulation


fmt: format text paragraphs


pr: format text into pages/columns


fold: wrap lines of text


column: format text fields into aligned, fixed-width columns or tables


expand and unexpand: convert between tabs and spaces


nl: add line numbers


seq: print numbers


bc: calculator


factor: factor integers


gpg: encrypt and sign files


toe: table of terminfo entries


nc: network debugging and data transfer


socat: socket relay and tcp port forwarder (similar to netcat)


slurm: network traffic visualization


dd: moving data between files or devices


file: identify type of a file


tree: display directories and subdirectories as a nesting tree; like ls but recursive


stat: file info


time: execute and time a command


timeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.


lockfile: create semaphore file that can only be removed by rm -f


logrotate: rotate, compress and mail logs.


watch: run a command repeatedly, showing results and/or highlighting changes


when-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.


tac: print files in reverse


comm: compare sorted files line by line


strings: extract text from binary files


tr: character translation or manipulation


iconv or uconv: conversion for text encodings


split and csplit: splitting files


sponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-file


units: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)


apg: generates random passwords


xz: high-ratio file compression


ldd: dynamic library info


nm: symbols from object files


ab or wrk: benchmarking web servers


strace: system call debugging


mtr: better traceroute for network debugging


cssh: visual concurrent shell


rsync: sync files and folders over SSH or in local file system


wireshark and tshark: packet capture and network debugging


ngrep: grep for the network layer


host and dig: DNS lookups


lsof: process file descriptor and socket info


dstat: useful system stats


glances: high level, multi-subsystem overview


iostat: Disk usage stats


mpstat: CPU usage stats


vmstat: Memory usage stats


htop: improved version of top


last: login history


w: who's logged on


id: user/group identity info


sar: historic system stats


iftop or nethogs: network utilization by socket or process


ss: socket statistics


dmesg: boot and system error messages


sysctl: view and configure Linux kernel parameters at run time


hdparm: SATA/ATA disk manipulation/performance


lsblk: list block devices: a tree view of your disks and disk partitions


lshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.


lsmod and modinfo: List and show details of kernel modules.


fortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations "useful"


macOS only
These are items relevant only on macOS.


Package management with brew (Homebrew) and/or port (MacPorts). These can be used to install on macOS many of the above commands.


Copy output of any command to a desktop app with pbcopy and paste input from one with pbpaste.


To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.), open Preferences -> Profiles -> Keyboard and select "Use Option as Meta key".


To open a file with a desktop app, use open or open -a /Applications/Whatever.app.


Spotlight: Search files with mdfind and list metadata (such as photo EXIF info) with mdls.


Be aware macOS is based on BSD Unix, and many commands (for example ps, ls, tail, awk, sed) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading "BSD General Commands Manual." In some cases GNU versions can be installed, too (such as gawk and gsed for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or perl) or test carefully.


To get macOS release information, use sw_vers.


Windows only
These items are relevant only on Windows.
Ways to obtain Unix tools under Windows


Access the power of the Unix shell under Microsoft Windows by installing Cygwin. Most of the things described in this document will work out of the box.


On Windows 10, you can use Windows Subsystem for Linux (WSL), which provides a familiar Bash environment with Unix command line utilities.


If you mainly want to use GNU developer tools (such as GCC) on Windows, consider MinGW and its MSYS package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.


Another option to get Unix look and feel under Windows is Cash. Note that only very few Unix commands and command-line options are available in this environment.


Useful Windows command-line tools


You can perform and script most Windows system administration tasks from the command line by learning and using wmic.


Native command-line Windows networking tools you may find useful include ping, ipconfig, tracert, and netstat.


You can perform many useful Windows tasks by invoking the Rundll32 command.


Cygwin tips and tricks


Install additional Unix programs with the Cygwin's package manager.


Use mintty as your command-line window.


Access the Windows clipboard through /dev/clipboard.


Run cygstart to open an arbitrary file through its registered application.


Access the Windows registry with regtool.


Note that a C:\ Windows drive path becomes /cygdrive/c under Cygwin, and that Cygwin's / appears under C:\cygwin on Windows. Convert between Cygwin and Windows-style file paths with cygpath. This is most useful in scripts that invoke Windows programs.


More resources

awesome-shell: A curated list of shell tools and resources.
awesome-osx-command-line: A more in-depth guide for the macOS command line.
Strict mode for writing better shell scripts.
shellcheck: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.
Filenames and Pathnames in Shell: The sadly complex minutiae on how to handle filenames correctly in shell scripts.
Data Science at the Command Line: More commands and tools helpful for doing data science, from the book of the same name

Disclaimer
With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you can do something in Bash doesn't necessarily mean you should! ;)
License

This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.
   


      

        

      
        
          
            
  About

      
        Master the command line, in one page
      

    Topics
    
        
      
  windows

      
  macos

      
  linux

      
  bash

      
  documentation

      
  unix

  

    

    Resources
    
      
        
        Readme
    

  



  

  
    
      Activity  


  Stars
  
    
      156k
      stars  

  Watchers
  
    
      2.8k
      watching  

  Forks
  
    
      14.7k
      forks  


    
      
          Report repository
    


          
        

        
            
              
                
  Releases

    No releases published

              
            

        
        
            
              
                
  
  Packages
      0


      
        No packages published 
      



              
            

        
            
              
                

              
            

        
            
              
                
  Contributors
      165


    
      
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
          
            
          
      


  
    + 151 contributors\n\n\n\nBuild and ship software on a single, collaborative platformJoin the world’s most widely adopted AI-powered developer platform.Enter your emailSign up for GitHubTry GitHub CopilotGitHub featuresA demonstration animation of a code editor using GitHub Copilot Chat, where the user requests GitHub Copilot to refactor duplicated logic and extract it into a reusable function for a given code snippet.CodePlanCollaborateAutomateSecureCodeBuild code quickly and more securely with GitHub Copilot embedded throughout your workflows.GitHub is used byPauseAccelerate performanceWith GitHub Copilot embedded throughout the platform, you can simplify your toolchain, automate tasks, and improve the developer experience.A Copilot chat window with extensions enabled. The user inputs the @ symbol to reveal a list of five Copilot Extensions. @Sentry is selected from the list, which shifts the window to a chat directly with that extension. There are three sample prompts at the bottom of the chat window, allowing the user to Get incident information, Edit status on incident, or List the latest issues. The last one is activated to send the prompt: @Sentry List the latest issues. The extension then lists several new issues and their metadata.Work 55% faster.Jump to footnote 1 Increase productivity with AI-powered coding assistance, including code completion, chat, and more.Explore GitHub CopilotDuolingo boosts developer speed by 25% with GitHub CopilotRead customer story2024 Gartner® Magic Quadrant™ for AI Code AssistantsRead reportAutomate any workflowOptimize your process with simple and secured CI/CD.A list of workflows displays a heading ‘45,167 workflow runs’ at the top. Below are five rows of completed workflows accompanied by their completion time and their duration formatted in minutes and seconds.Discover GitHub ActionsGet up and running in secondsStart building instantly with a comprehensive dev environment in the cloud.A GitHub Codespaces setup for the landing page of a game called OctoInvaders. On the left is a code editor with some HTML and Javascript files open. On the right is a live render of the page. In front of this split editor window is a screenshot of two active GitHub Codespaces environments with their branch names and a button to ‘Create codespace on main.’Check out GitHub CodespacesBuild on the goManage projects and chat with GitHub Copilot from anywhere.Two smartphone screens side by side. The left screen shows a Notification inbox, listing issues and pull requests from different repositories like TensorFlow and GitHub’s OctoArcade octoinvaders. The right screen shows a new conversation in GitHub Copilot chat.Download GitHub MobileIntegrate the tools you loveSync with 17,000+ integrations and a growing library of Copilot Extensions.A grid of fifty app tiles displays logos for integrations and extensions for companies like Stripe, Slack, and Docker. The tiles extend beyond the bounds of the image to indicate a wide array of apps. Visit GitHub MarketplaceBuilt-in application security  where found means fixedUse AI to find and fix vulnerabilities—freeing your teams to ship more secure software faster.Apply fixes in seconds. Spend less time fixing vulnerabilities and more time building features with Copilot Autofix.Explore GitHub Advanced SecuritySolve security debt. Leverage AI-assisted security campaigns to reduce application vulnerabilities and zero-day attacks.Discover security campaignsDependencies you can depend on. Update vulnerable dependencies with supported fixes for breaking changes.Learn about DependabotYour secrets, your business: protected. Detect, prevent, and remediate leaked secrets across your organization.Read about secret scanning7x fastervulnerability fixes with GitHubJump to footnote 290% coverageof alert types in all supported languages with Copilot AutofixWork together, achieve moreCollaborate with your teams, use management tools that sync with your projects, and code from anywhere—all on a single, integrated platform.Your workflows, your way. Plan effectively with an adaptable spreadsheet that syncs with your work.Jump into GitHub Projects“It helps us onboard new software engineers and get them productive right away. We have all our source code, issues, and pull requests in one place... GitHub is a complete platform that frees us from menial tasks and enables us to do our best work.Fabian FaulhaberApplication manager at Mercedes-BenzKeep track of your tasksCreate issues and manage projects with tools that adapt to your code.Display of task tracking within an issue, showing the status of related sub-issues and their connection to the main issue.Explore GitHub IssuesShare ideas and ask questionsCreate space for open-ended conversations alongside your project.A GitHub Discussions thread where a GitHub user suggests a power-up idea involving Hubot revealing a path and protecting Mona. The post has received 5 upvotes and several reactions. Below, three other users add to the discussion, suggesting Hubot could provide different power-ups depending on levels and appreciating the collaboration idea.Discover GitHub DiscussionsReview code changes togetherCreate review processes that improve code quality and fit neatly into your workflow.Two code review approvals by helios-ackmore and amanda-knox, which are followed by three successful checks for ‘Build,’ ‘Test,’ and ‘Publish.’Learn about code reviewFund open source projectsBecome an open source partner and support the tools and libraries that power your work.A GitHub Sponsors popup displays ‘$15,000 a month’ with a progress bar showing 87% towards a $15,000 goal.Dive into GitHub SponsorsFrom startups to enterprises, GitHub scales  with teams of any size in any industry.By industryBy sizeBy use caseBy industryTechnologyFigma streamlines development and strengthens securityRead customer storyAutomotiveMercedes-Benz standardizes source code and automates onboardingRead customer storyFinancial servicesMercado Libre cuts coding time by 50%Read customer storyExplore customer storiesView all solutionsMillions of developers and businesses call GitHub homeWhether you’re scaling your development process or just learning how to code, GitHub is where you belong. Join the world’s most widely adopted AI-powered developer platform to build the technologies that redefine what’s possible.Enter your emailSign up for GitHubTry GitHub CopilotFootnotesSurvey: The AI wave continues to grow on software development teams, 2024.This 7X times factor is based on data from the industry’s longest running analysis of fix rates Veracode State of Software Security 2023, which cites the average time to fix 50% of flaws as 198 days vs. GitHub’s fix rates of 72% of flaws with in 28 days which is at a minimum of 7X faster when compared.\n\n\n\nSign in to GitHub
    


    



  
    

  
    
      
    
    
      
      {{ message }}

    
  

  



    
      
        
      
    

    
      
  

    
      Username or email address
    
    

  
    
      Password
    
    
    Forgot password?
    













    
  
  
      
  

    


        Password login alternatives
        
            
    
        
    Sign in with a passkey
  

    
  

          
            New to GitHub?
              Create an account\n\n\n\nGitHub CopilotFor businessExtensions TutorialsWhat’s newPlans & pricingNow supercharged with agent modeAI that builds with youGet started for freeSee plans & pricingAlready have  Visual Studio Code? Open nowPauseGitHub Copilot is used byPauseFeaturesAgent mode: Because two brains are better than onePausePauseFrom broken to brilliant, fast. Need to make a sweeping change? Agent mode helps you do it quickly by analyzing code, proposing edits, running tests, and validating results across multiple files.Try agent modePlans the path, handles the work. Agent mode reasons through the problem, coordinates next steps, and applies the changes—while keeping you in the driver’s seat.Don’t sweat the small stuff. From renaming variables to fixing errors, agent mode manages the tedious tasks that might otherwise break your flow.Pick your brainpowerSwap between models like Claude 3.7 Sonnet, OpenAI o1, and Google Gemini 2.0 Flash to crush coding tasks fast or go deep when it counts.Drop an edit. Watch it spreadNext edit suggestions reveal the ripple effects of your changes across your project—helping you keep everything consistent.Try next edit suggestionsYour code’s guardian angelCode review analyzes your work, uncovers hidden bugs, fixes mistakes, and more—before a human ever sees it.Discover code reviewEverything you need, right where you codeThanks to an ecosystem of third-party extensions, Copilot Chat lets you check logs, toggle features, and deploy apps, without ever leaving your editor.Explore extensionsPlansTake flight with GitHub CopilotPricing plansFor individualsFor businessesFreeA fast way to get started with GitHub Copilot.$0USDGet startedOpen in VS CodeWhat's included50 agent mode or chat requests per month2,000 completions per monthAccess to Claude 3.5 Sonnet, GPT-4o, and moreProMost popularUnlimited completions and chats with access to more models.$19$10USDper month or $100 per yearTry for 30 days freeWhat's includedEverything in Free and:Unlimited agent mode and chats with GPT-4oUnlimited code completionsAccess to code review, Claude 3.7 Sonnet, o1, and more6x more premium requests to use latest models than Free, with the option to buy more1Free for verified students, teachers, and maintainers of popular open source projects. Learn morePro+Maximum flexibility and model choice.$39USDper month or $390 per yearGet startedWhat's includedEverything in Pro and:Access to all models, including GPT-4.530x more premium requests to use latest models than Free, with the option to buy more1GitHub Copilot is available on your favorite platforms:GitHub GitHub VS Code VS Code Visual Studio Visual Studio Xcode Xcode JetBrains IDEsJetBrains IDEsNeovim Neovim Azure Data StudioAzure Data StudioEclipse Eclipse Compare all plan featuresGitHub Copilot works where you workCommand the command lineTap into GitHub Copilot in your terminal for instant command-line help.Try Copilot in the CLIStart a chat anywhereUse Copilot Chat on the go with native apps for iOS and Android.Chat in GitHub MobileGet the most out of GitHub CopilotPreview the latest featuresBe the first to explore what’s next for GitHub Copilot.See previewsExplore the GitHub BlogDiscover the latest in software development with insights, best practices, and more.Read BlogVisit the GitHub Copilot Trust CenterGain peace of mind with our security, privacy, and responsible AI policies.Go to Trust CenterFrequently asked questionsGeneralWhat is GitHub Copilot?GitHub Copilot transforms the developer experience. Backed by the leaders in AI, GitHub Copilot provides contextualized assistance throughout the software development lifecycle, from code completions and chat assistance in the IDE to code explanations and answers to docs in GitHub and more. With GitHub Copilot elevating their workflow, developers can focus on: value, innovation, and happiness.GitHub Copilot enables developers to focus more energy on problem solving and collaboration and spend less effort on the mundane and boilerplate. That’s why developers who use GitHub Copilot report up to 75% higher satisfaction with their jobs than those who don’t and are up to 55% more productive at writing code without sacrifice to quality, which all adds up to engaged developers shipping great software faster.GitHub Copilot integrates with leading editors, including Visual Studio Code, Visual Studio, JetBrains IDEs, and Neovim, and, unlike other AI coding assistants, is natively built into GitHub. Growing to millions of individual users and tens of thousands of business customers, GitHub Copilot is the world’s most widely adopted AI developer tool and the competitive advantage developers ask for by name.Who is eligible to access GitHub Copilot for free?GitHub Copilot Free is a new free pricing tier with limited functionality for individual developers. Users assigned a Copilot Business or Copilot Enterprise seat are not eligible for access. Users with access to Copilot Pro through a paid subscription, trial, or through an existing verified OSS, student, faculty, or MVP account may elect to use Free instead. 
What languages, IDEs, and platforms does GitHub Copilot support?GitHub Copilot is trained on all languages that appear in public repositories. For each language, the quality of suggestions you receive may depend on the volume and diversity of training data for that language. For example, JavaScript is well-represented in public repositories and is one of GitHub Copilot’s best supported languages. Languages with less representation in public repositories may produce fewer or less robust suggestions.GitHub Copilot is available as an extension in Visual Studio Code, Visual Studio, Vim, Neovim, the JetBrains suite of IDEs, and Azure Data Studio. Although code completion functionality is available across all these extensions, chat functionality is currently available only in Visual Studio Code, JetBrains, and Visual Studio. GitHub Copilot is also supported in terminals through GitHub CLI and as a chat integration in Windows Terminal Canary. With the GitHub Copilot Enterprise plan, GitHub Copilot is natively integrated into GitHub.com. All plans are supported in GitHub Copilot in GitHub Mobile. GitHub Mobile for Copilot Pro and Copilot Business have access to Bing and public repository code search. Copilot Enterprise in GitHub Mobile gives you additional access to your organization's knowledge.Does GitHub Copilot “copy/paste”?No, GitHub Copilot generates suggestions using probabilistic determination.When thinking about intellectual property and open source issues, it is critical to understand how GitHub Copilot really works. The AI models that create GitHub Copilot’s suggestions may be trained on public code, but do not contain any code. When they generate a suggestion, they are not “copying and pasting” from any codebase.To generate a code suggestion, the GitHub Copilot extension begins by examining the code in your editor—focusing on the lines just before and after your cursor, but also information including other files open in your editor and the URLs of repositories or file paths to identify relevant context. That information is sent to GitHub Copilot’s model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat in the code editor, the GitHub Copilot extension creates a contextual prompt by combining your prompt with additional context including the code file open in your active document, your code selection, and general workspace information, such as frameworks, languages, and dependencies. That information is sent to GitHub Copilot’s model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat on GitHub.com, such as providing an answer to a question from your chat prompt, GitHub Copilot creates a contextual prompt by combining your prompt with additional context including previous prompts, the open pages on GitHub.com as well as retrieved context from your codebase or Bing search. That information is sent to GitHub Copilot’s model, to make a probabilistic determination of what is likely to come next and generate suggestions.  What are the differences between the GitHub Copilot Business, GitHub Copilot Enterprise, and GitHub Copilot Individual plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also  adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with GitHub Copilot throughout the platform. GitHub Copilot Enterprise can index an organization’s codebase for a deeper understanding of the customer’s knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Individual is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security.What if I do not want GitHub Copilot?GitHub Copilot is entirely optional and requires you to opt in before gaining access. You can easily configure its usage directly in the editor, enabling or disabling it at any time. Additionally, you have control over which file types GitHub Copilot is active for.How do I control access to GitHub Copilot in my company?Access to Copilot Business and Enterprise is managed by your GitHub Administrator. They can control access to preview features, models, and set GitHub Copilot policies for your organization. Additionally, you can use your network firewall to explicitly allow access to Copilot Business and/or block access to Copilot Pro or Free. For more details, refer to the documentation.Plans & pricingWhat are the differences between the Free, Pro, Business, and Enterprise plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also  adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with Copilot  throughout the platform. GitHub Copilot Enterprise can index an organization’s codebase for a deeper understanding of the customer’s knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Pro is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.How can I upgrade my GitHub Copilot Free license to Copilot Pro?If you're on the Free plan, you can upgrade to Pro through your Copilot settings page or directly on the Copilot marketing page.What is included in GitHub Copilot Free?GitHub Copilot Free users are limited to 2000 completions and 50 chat requests (including Copilot Edits).Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security and available to all public repositories.PrivacyWhat personal data does GitHub Copilot process?GitHub Copilot processes personal data based on how Copilot is accessed and used: whether via GitHub.com, mobile app, extensions, or one of various IDE extensions, or through features like suggestions for the command line interface (CLI), IDE code completions, or personalized chat on GitHub.com. The types of personal data processed may include:User Engagement Data: This includes pseudonymous identifiers captured on user interactions with Copilot, such as accepted or dismissed completions, error messages, system logs, and product usage metrics. Prompts: These are inputs for chat or code, along with context, sent to Copilot's AI to generate suggestions. Suggestions: These are the AI-generated code lines or chat responses provided to users based on their prompts. Feedback Data: This comprises real-time user feedback, including reactions (e.g., thumbs up/down) and optional comments, along with feedback from support tickets.Does GitHub use Copilot Business or Enterprise data to train GitHub’s model?No. GitHub does not use either Copilot Business or Enterprise data to train its models. How does GitHub use the Copilot data?How GitHub uses Copilot data depends on how the user accesses Copilot and for what purpose. Users can access GitHub Copilot through the web, extensions, mobile apps, computer terminal, and various IDEs (Integrated Development Environments). GitHub generally uses personal data to:Deliver, maintain, and update the services as per the customer's configuration and usage, to ensure personalized experiences and recommendationsTroubleshoot, which involves preventing, detecting, resolving, and mitigating issues, including security incidents and product-related problems, by fixing software bugs and maintaining the online services' functionality and up-to-datenessEnhance user productivity, reliability, effectiveness, quality, privacy, accessibility, and security by keeping the service current and operationalThese practices are outlined in GitHub’s Data Protection Agreement (DPA), which details our data handling commitments to our data controller customers. GitHub also uses certain personal data with customer authorization under the DPA, for the following purposes:Billing and account managementTo comply with and resolve legal obligations For abuse detection, prevention, and protection, virus scanning, and scanning to detect violations of terms of serviceTo generate summary reports for calculating employee commissions and partner incentivesTo produce aggregated reports for internal use and strategic planning, covering areas like forecasting, revenue analysis, capacity planning, and product strategy,For details on GitHub's data processing activities as a controller, particularly for Copilot Pro customers, refer to the GitHub Privacy Statement.How long does GitHub retain Copilot data for Business and Enterprise customers? If and for how long GitHub’s retains Copilot data depends on how a Copilot user accesses Copilot and for what purpose. The default settings for Copilot Business and Enterprise Customers are as follows: Access through IDE for Chat and Code Completions:Prompts and Suggestions: Not retainedUser Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.All other GitHub Copilot access and use:Prompts and Suggestions: Retained for 28 days.User Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.Why do some Copilot features retain prompts and suggestions?Retaining prompts and suggestions is necessary for chat on github.com, mobile, and CLI Copilot because those features’ effectiveness depends on using thread history to improve responses. The Copilot model requires access to previous interactions to deliver accurate and relevant suggestions. Does GitHub Copilot support compliance with the GDPR and other data protection laws?Yes. GitHub and customers can enter a Data Protection Agreement that supports compliance with the GDPR and similar legislation.Does GitHub Copilot ever output personal data?While we've designed GitHub Copilot with privacy in mind, the expansive definition of personal data under legislation like the EU’s General Data Protection Regulation (GDPR) means we can't guarantee it will never output such data. The Large Language Model (LLM) powering GitHub Copilot was trained on public code and there were instances in our tests where the tool made suggestions resembling personal data. These suggestions were typically synthesized and not tied to real individuals. How does Copilot allow users to access, alter or delete personal data?These actions are available to Copilot users as described in the GitHub Privacy Statement.
Responsible AIWhat are the intellectual property considerations when using GitHub Copilot?The primary IP considerations for GitHub Copilot relate to copyright. The model that powers Copilot is trained on a broad collection of publicly accessible code, which may include copyrighted code, and Copilot’s suggestions (in rare instances) may resemble the code its model was trained on. Here’s some basic information you should know about these considerations:Copyright law permits the use of copyrighted works to train AI models:  Countries around the world have provisions in their copyright laws that enable machines to learn, understand, extract patterns, and facts from copyrighted materials, including software code. For example, the European Union, Japan, and Singapore, have express provisions permitting machine learning to develop AI models. Other countries including Canada, India, and the United States also permit such training under their fair use/fair dealing provisions. GitHub Copilot’s AI model was trained with the use of code from GitHub’s public repositories—which are publicly accessible and within the scope of permissible copyright use.What about copyright risk in suggestions? In rare instances (less than 1% based on GitHub’s research), suggestions from GitHub may match examples of code used to train GitHub’s AI model. Again, Copilot does not “look up” or “copy and paste” code, but is instead using context from a user’s workspace to synthesize and generate a suggestion.Our experience shows that matching suggestions are most likely to occur in two situations: (i) when there is little or no context in the code editor for Copilot’s model to synthesize, or (ii) when a matching suggestion represents a common approach or method. If a code suggestion matches existing code, there is risk that using that suggestion could trigger claims of copyright infringement, which would depend on the amount and nature of code used, and the context of how the code is used. In many ways, this is the same risk that arises when using any code that a developer does not originate, such as copying code from an online source, or reusing code from a library. That is why responsible organizations and developers recommend that users employ code scanning policies to identify and evaluate potential matching code.In Copilot, you can opt whether to allow Copilot to suggest code completions that match publicly available code on GitHub.com. For more information, see "Configuring GitHub Copilot settings on GitHub.com". If you have allowed suggestions that match public code, GitHub Copilot can provide you with details about the matching code when you accept such suggestions. Matching code does not necessarily mean copyright infringement, so it is ultimately up to the user to determine whether to use the suggestion, and what and who to attribute (along with other license compliance) in appropriate circumstances.Does GitHub Copilot include a filtering mechanism to mitigate risk?Yes, GitHub Copilot does include an optional code referencing filter to detect and suppress certain suggestions that match public code on GitHub.GitHub has created a duplication detection filter to detect and suppress suggestions that contain code segments over a certain length that match public code on GitHub. This filter can be enabled by the administrator for your enterprise and it can apply for all organizations within your enterprise, or the administrator can defer control to individual organizations. With the filter enabled, Copilot checks code suggestions for matches or near-matches against public code on GitHub of 65 lexemes or more (on average,150 characters). If there is a match, the suggestion will not be shown to the user.In addition to off-topic, harmful, and offensive output filters, GitHub Copilot also scans the outputs for vulnerable code.Does GitHub Copilot include features to make it easier for users to identify potentially relevant open source licenses for matching suggestions?Yes, GitHub Copilot is previewing a code referencing feature as an additional tool to assist users to find and review potentially relevant open source licenses. Code referencing is currently available in Visual Studio Code. This feature searches across public GitHub repositories for code that matches a Copilot suggestion. If there’s a match, users will find its information displayed in the Copilot console log, including where the match occurred, any applicable licenses, and a deep link to learn more. The deep link will take users to a navigable page on GitHub.com to browse examples of the code match and their repository licenses, and see how many repositories—including ones without licenses—that code appears in, as well as links to those repositories. Copilot users can review this information to determine whether the applicable suggestions are suitable for use, and whether additional measures may be necessary to use them.Who owns the suggestions provided by GitHub Copilot?We don’t determine whether a suggestion is capable of being owned, but we are clear that GitHub does not claim ownership of a suggestion. Whether a suggestion generated by an AI model can be owned depends on many factors (e.g. the intellectual property law in the relevant country, the length of the suggestion, the extent that suggestion is considered ‘functional’ instead of expressive, etc).If a suggestion is capable of being owned, our terms are clear: GitHub does not claim ownership.GitHub does not claim ownership of any suggestion. In certain cases, it is possible for Copilot to produce similar suggestions to different users. For example, two unrelated users both starting new files to code the quicksort algorithm in Java will likely get the same suggestion. The possibility of providing similar suggestions to multiple users is a common part of generative AI systems.Can GitHub Copilot introduce insecure code in its suggestions?Public code may contain insecure coding patterns, bugs, or references to outdated APIs or                        idioms. When GitHub Copilot synthesizes code suggestions based on this data, it can also                        synthesize code that contains these undesirable patterns. Copilot has filters in place that                        either block or notify users of insecure code patterns that are detected in Copilot suggestions. These filters target the most common vulnerable coding patterns, including hardcoded credentials, SQL injections, and path injections. Additionally, in recent years we’ve provided tools such as GitHub Advanced Security, GitHub Actions, Dependabot, and CodeQL to open source projects to help improve code quality. Of course, you should always use GitHub Copilot together with good testing and code review practices and security tools, as well as your own judgment.Is GitHub Copilot intended to fully automate code generation and replace developers?No. Copilot is a tool intended to make developers more efficient. It’s not intended to replace developers, who should continue to apply the same sorts of safeguards and diligence they would apply with regard to any third-party code of unknown origin.The product is called “Copilot” not “Autopilot” and it’s not intended to generate code without oversight. You should use exactly the same sorts of safeguards and diligence with Copilot’s suggestions as you would use with any third-party code.Identifying best practices for use of third party code is beyond the scope of this section. That said, whatever practices your organization currently uses – rigorous functionality testing, code scanning, security testing, etc. – you should continue these policies with Copilot’s suggestions. Moreover, you should make sure your code editor or editor does not automatically compile or run generated code before you review it.Can GitHub Copilot users simply use suggestions without concern?Not necessarily. GitHub Copilot users should align their use of Copilot with their respective                        risk tolerances.As noted above, GitHub Copilot is not intended to replace developers, or their individual skill and judgment, and is not intended to fully automate the process of code development. The same risks that apply to the use of any third-party code apply to the use of Copilot’s suggestions.Depending on your particular use case, you should consider implementing the protections discussed above. It is your responsibility to assess what is appropriate for the situation and implement appropriate safeguards.You’re entitled to IP indemnification from GitHub for the unmodified suggestions when Copilot’s filtering is enabled. If you do elect to enable this feature, the copyright responsibility is ours, not our customers. As part of our ongoing commitment to responsible AI, GitHub and Microsoft extends our IP indemnity and protection support to our customers who are empowering their teams with GitHub Copilot. See Microsoft's Copilot Copyright Commitment for more details.Does GitHub Copilot support accessibility features?We are conducting internal testing of GitHub Copilot’s ease of use by developers with                        disabilities and working to ensure that GitHub Copilot is accessible to all developers. Please feel free to share your feedback on GitHub Copilot accessibility in our feedback forum.Does GitHub Copilot produce offensive outputs?GitHub Copilot includes filters to block offensive language in the prompts and to avoid                        synthesizing suggestions in sensitive contexts. We continue to work on improving the filter                        system to more intelligently detect and remove offensive outputs. If you see offensive outputs, please report them directly to copilot-safety@github.com so that we can improve our safeguards. GitHub takes this challenge very seriously and we are committed to addressing it.Will GitHub Copilot work as well using languages other than English?Given public sources are predominantly in English, GitHub Copilot will likely work less well in scenarios where natural language prompts provided by the developer are not in English and/or are grammatically incorrect. Therefore, non-English speakers might experience a lower quality of service.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Data from June 2023. Additional research can be found here.Feature in public beta for Copilot Pro and Business plans. Requires use of repositories, issues, discussions, Actions, and other features of GitHub.Authentication with SAML single sign-on (SSO) available for organizations using GitHub Enterprise Cloud.GeneralPlans & pricingPrivacyResponsible AIGeneralWhat is GitHub Copilot?GitHub Copilot transforms the developer experience. Backed by the leaders in AI, GitHub Copilot provides contextualized assistance throughout the software development lifecycle, from code completions and chat assistance in the IDE to code explanations and answers to docs in GitHub and more. With GitHub Copilot elevating their workflow, developers can focus on: value, innovation, and happiness.GitHub Copilot enables developers to focus more energy on problem solving and collaboration and spend less effort on the mundane and boilerplate. That’s why developers who use GitHub Copilot report up to 75% higher satisfaction with their jobs than those who don’t and are up to 55% more productive at writing code without sacrifice to quality, which all adds up to engaged developers shipping great software faster.GitHub Copilot integrates with leading editors, including Visual Studio Code, Visual Studio, JetBrains IDEs, and Neovim, and, unlike other AI coding assistants, is natively built into GitHub. Growing to millions of individual users and tens of thousands of business customers, GitHub Copilot is the world’s most widely adopted AI developer tool and the competitive advantage developers ask for by name.Who is eligible to access GitHub Copilot for free?GitHub Copilot Free is a new free pricing tier with limited functionality for individual developers. Users assigned a Copilot Business or Copilot Enterprise seat are not eligible for access. Users with access to Copilot Pro through a paid subscription, trial, or through an existing verified OSS, student, faculty, or MVP account may elect to use Free instead. 
What languages, IDEs, and platforms does GitHub Copilot support?GitHub Copilot is trained on all languages that appear in public repositories. For each language, the quality of suggestions you receive may depend on the volume and diversity of training data for that language. For example, JavaScript is well-represented in public repositories and is one of GitHub Copilot’s best supported languages. Languages with less representation in public repositories may produce fewer or less robust suggestions.GitHub Copilot is available as an extension in Visual Studio Code, Visual Studio, Vim, Neovim, the JetBrains suite of IDEs, and Azure Data Studio. Although code completion functionality is available across all these extensions, chat functionality is currently available only in Visual Studio Code, JetBrains, and Visual Studio. GitHub Copilot is also supported in terminals through GitHub CLI and as a chat integration in Windows Terminal Canary. With the GitHub Copilot Enterprise plan, GitHub Copilot is natively integrated into GitHub.com. All plans are supported in GitHub Copilot in GitHub Mobile. GitHub Mobile for Copilot Pro and Copilot Business have access to Bing and public repository code search. Copilot Enterprise in GitHub Mobile gives you additional access to your organization's knowledge.Does GitHub Copilot “copy/paste”?No, GitHub Copilot generates suggestions using probabilistic determination.When thinking about intellectual property and open source issues, it is critical to understand how GitHub Copilot really works. The AI models that create GitHub Copilot’s suggestions may be trained on public code, but do not contain any code. When they generate a suggestion, they are not “copying and pasting” from any codebase.To generate a code suggestion, the GitHub Copilot extension begins by examining the code in your editor—focusing on the lines just before and after your cursor, but also information including other files open in your editor and the URLs of repositories or file paths to identify relevant context. That information is sent to GitHub Copilot’s model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat in the code editor, the GitHub Copilot extension creates a contextual prompt by combining your prompt with additional context including the code file open in your active document, your code selection, and general workspace information, such as frameworks, languages, and dependencies. That information is sent to GitHub Copilot’s model, to make a probabilistic determination of what is likely to come next and generate suggestions.To generate a suggestion for chat on GitHub.com, such as providing an answer to a question from your chat prompt, GitHub Copilot creates a contextual prompt by combining your prompt with additional context including previous prompts, the open pages on GitHub.com as well as retrieved context from your codebase or Bing search. That information is sent to GitHub Copilot’s model, to make a probabilistic determination of what is likely to come next and generate suggestions.  What are the differences between the GitHub Copilot Business, GitHub Copilot Enterprise, and GitHub Copilot Individual plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also  adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with GitHub Copilot throughout the platform. GitHub Copilot Enterprise can index an organization’s codebase for a deeper understanding of the customer’s knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Individual is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security.What if I do not want GitHub Copilot?GitHub Copilot is entirely optional and requires you to opt in before gaining access. You can easily configure its usage directly in the editor, enabling or disabling it at any time. Additionally, you have control over which file types GitHub Copilot is active for.How do I control access to GitHub Copilot in my company?Access to Copilot Business and Enterprise is managed by your GitHub Administrator. They can control access to preview features, models, and set GitHub Copilot policies for your organization. Additionally, you can use your network firewall to explicitly allow access to Copilot Business and/or block access to Copilot Pro or Free. For more details, refer to the documentation.Plans & pricingWhat are the differences between the Free, Pro, Business, and Enterprise plans?GitHub Copilot has multiple offerings for organizations and an offering for individual developers. All the offerings include both code completion and chat assistance. The primary differences between the organization offerings and the individual offering are license management, policy management, and IP indemnity.Organizations can choose between GitHub Copilot Business and GitHub Copilot Enterprise. GitHub Copilot Business primarily features GitHub Copilot in the coding environment - that is the IDE, CLI and GitHub Mobile. GitHub Copilot Enterprise includes everything in GitHub Copilot Business. It also  adds an additional layer of customization for organizations and integrates into GitHub.com as a chat interface to allow developers to converse with Copilot  throughout the platform. GitHub Copilot Enterprise can index an organization’s codebase for a deeper understanding of the customer’s knowledge for more tailored suggestions and will offer customers access to fine-tuned custom, private models for code completion.GitHub Copilot Pro is designed for individual developers, freelancers, students, educators, and open source maintainers. The plan includes all the features of GitHub Copilot Business except organizational license management, policy management, and IP indemnity.How can I upgrade my GitHub Copilot Free license to Copilot Pro?If you're on the Free plan, you can upgrade to Pro through your Copilot settings page or directly on the Copilot marketing page.What is included in GitHub Copilot Free?GitHub Copilot Free users are limited to 2000 completions and 50 chat requests (including Copilot Edits).Which plan includes GitHub Copilot Autofix?GitHub Copilot Autofix provides contextual explanations and code suggestions to help developers fix vulnerabilities in code, and is included in GitHub Advanced Security and available to all public repositories.PrivacyWhat personal data does GitHub Copilot process?GitHub Copilot processes personal data based on how Copilot is accessed and used: whether via GitHub.com, mobile app, extensions, or one of various IDE extensions, or through features like suggestions for the command line interface (CLI), IDE code completions, or personalized chat on GitHub.com. The types of personal data processed may include:User Engagement Data: This includes pseudonymous identifiers captured on user interactions with Copilot, such as accepted or dismissed completions, error messages, system logs, and product usage metrics. Prompts: These are inputs for chat or code, along with context, sent to Copilot's AI to generate suggestions. Suggestions: These are the AI-generated code lines or chat responses provided to users based on their prompts. Feedback Data: This comprises real-time user feedback, including reactions (e.g., thumbs up/down) and optional comments, along with feedback from support tickets.Does GitHub use Copilot Business or Enterprise data to train GitHub’s model?No. GitHub does not use either Copilot Business or Enterprise data to train its models. How does GitHub use the Copilot data?How GitHub uses Copilot data depends on how the user accesses Copilot and for what purpose. Users can access GitHub Copilot through the web, extensions, mobile apps, computer terminal, and various IDEs (Integrated Development Environments). GitHub generally uses personal data to:Deliver, maintain, and update the services as per the customer's configuration and usage, to ensure personalized experiences and recommendationsTroubleshoot, which involves preventing, detecting, resolving, and mitigating issues, including security incidents and product-related problems, by fixing software bugs and maintaining the online services' functionality and up-to-datenessEnhance user productivity, reliability, effectiveness, quality, privacy, accessibility, and security by keeping the service current and operationalThese practices are outlined in GitHub’s Data Protection Agreement (DPA), which details our data handling commitments to our data controller customers. GitHub also uses certain personal data with customer authorization under the DPA, for the following purposes:Billing and account managementTo comply with and resolve legal obligations For abuse detection, prevention, and protection, virus scanning, and scanning to detect violations of terms of serviceTo generate summary reports for calculating employee commissions and partner incentivesTo produce aggregated reports for internal use and strategic planning, covering areas like forecasting, revenue analysis, capacity planning, and product strategy,For details on GitHub's data processing activities as a controller, particularly for Copilot Pro customers, refer to the GitHub Privacy Statement.How long does GitHub retain Copilot data for Business and Enterprise customers? If and for how long GitHub’s retains Copilot data depends on how a Copilot user accesses Copilot and for what purpose. The default settings for Copilot Business and Enterprise Customers are as follows: Access through IDE for Chat and Code Completions:Prompts and Suggestions: Not retainedUser Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.All other GitHub Copilot access and use:Prompts and Suggestions: Retained for 28 days.User Engagement Data: Kept for two years.Feedback Data: Stored for as long as needed for its intended purpose.Why do some Copilot features retain prompts and suggestions?Retaining prompts and suggestions is necessary for chat on github.com, mobile, and CLI Copilot because those features’ effectiveness depends on using thread history to improve responses. The Copilot model requires access to previous interactions to deliver accurate and relevant suggestions. Does GitHub Copilot support compliance with the GDPR and other data protection laws?Yes. GitHub and customers can enter a Data Protection Agreement that supports compliance with the GDPR and similar legislation.Does GitHub Copilot ever output personal data?While we've designed GitHub Copilot with privacy in mind, the expansive definition of personal data under legislation like the EU’s General Data Protection Regulation (GDPR) means we can't guarantee it will never output such data. The Large Language Model (LLM) powering GitHub Copilot was trained on public code and there were instances in our tests where the tool made suggestions resembling personal data. These suggestions were typically synthesized and not tied to real individuals. How does Copilot allow users to access, alter or delete personal data?These actions are available to Copilot users as described in the GitHub Privacy Statement.
Responsible AIWhat are the intellectual property considerations when using GitHub Copilot?The primary IP considerations for GitHub Copilot relate to copyright. The model that powers Copilot is trained on a broad collection of publicly accessible code, which may include copyrighted code, and Copilot’s suggestions (in rare instances) may resemble the code its model was trained on. Here’s some basic information you should know about these considerations:Copyright law permits the use of copyrighted works to train AI models:  Countries around the world have provisions in their copyright laws that enable machines to learn, understand, extract patterns, and facts from copyrighted materials, including software code. For example, the European Union, Japan, and Singapore, have express provisions permitting machine learning to develop AI models. Other countries including Canada, India, and the United States also permit such training under their fair use/fair dealing provisions. GitHub Copilot’s AI model was trained with the use of code from GitHub’s public repositories—which are publicly accessible and within the scope of permissible copyright use.What about copyright risk in suggestions? In rare instances (less than 1% based on GitHub’s research), suggestions from GitHub may match examples of code used to train GitHub’s AI model. Again, Copilot does not “look up” or “copy and paste” code, but is instead using context from a user’s workspace to synthesize and generate a suggestion.Our experience shows that matching suggestions are most likely to occur in two situations: (i) when there is little or no context in the code editor for Copilot’s model to synthesize, or (ii) when a matching suggestion represents a common approach or method. If a code suggestion matches existing code, there is risk that using that suggestion could trigger claims of copyright infringement, which would depend on the amount and nature of code used, and the context of how the code is used. In many ways, this is the same risk that arises when using any code that a developer does not originate, such as copying code from an online source, or reusing code from a library. That is why responsible organizations and developers recommend that users employ code scanning policies to identify and evaluate potential matching code.In Copilot, you can opt whether to allow Copilot to suggest code completions that match publicly available code on GitHub.com. For more information, see "Configuring GitHub Copilot settings on GitHub.com". If you have allowed suggestions that match public code, GitHub Copilot can provide you with details about the matching code when you accept such suggestions. Matching code does not necessarily mean copyright infringement, so it is ultimately up to the user to determine whether to use the suggestion, and what and who to attribute (along with other license compliance) in appropriate circumstances.Does GitHub Copilot include a filtering mechanism to mitigate risk?Yes, GitHub Copilot does include an optional code referencing filter to detect and suppress certain suggestions that match public code on GitHub.GitHub has created a duplication detection filter to detect and suppress suggestions that contain code segments over a certain length that match public code on GitHub. This filter can be enabled by the administrator for your enterprise and it can apply for all organizations within your enterprise, or the administrator can defer control to individual organizations. With the filter enabled, Copilot checks code suggestions for matches or near-matches against public code on GitHub of 65 lexemes or more (on average,150 characters). If there is a match, the suggestion will not be shown to the user.In addition to off-topic, harmful, and offensive output filters, GitHub Copilot also scans the outputs for vulnerable code.Does GitHub Copilot include features to make it easier for users to identify potentially relevant open source licenses for matching suggestions?Yes, GitHub Copilot is previewing a code referencing feature as an additional tool to assist users to find and review potentially relevant open source licenses. Code referencing is currently available in Visual Studio Code. This feature searches across public GitHub repositories for code that matches a Copilot suggestion. If there’s a match, users will find its information displayed in the Copilot console log, including where the match occurred, any applicable licenses, and a deep link to learn more. The deep link will take users to a navigable page on GitHub.com to browse examples of the code match and their repository licenses, and see how many repositories—including ones without licenses—that code appears in, as well as links to those repositories. Copilot users can review this information to determine whether the applicable suggestions are suitable for use, and whether additional measures may be necessary to use them.Who owns the suggestions provided by GitHub Copilot?We don’t determine whether a suggestion is capable of being owned, but we are clear that GitHub does not claim ownership of a suggestion. Whether a suggestion generated by an AI model can be owned depends on many factors (e.g. the intellectual property law in the relevant country, the length of the suggestion, the extent that suggestion is considered ‘functional’ instead of expressive, etc).If a suggestion is capable of being owned, our terms are clear: GitHub does not claim ownership.GitHub does not claim ownership of any suggestion. In certain cases, it is possible for Copilot to produce similar suggestions to different users. For example, two unrelated users both starting new files to code the quicksort algorithm in Java will likely get the same suggestion. The possibility of providing similar suggestions to multiple users is a common part of generative AI systems.Can GitHub Copilot introduce insecure code in its suggestions?Public code may contain insecure coding patterns, bugs, or references to outdated APIs or                        idioms. When GitHub Copilot synthesizes code suggestions based on this data, it can also                        synthesize code that contains these undesirable patterns. Copilot has filters in place that                        either block or notify users of insecure code patterns that are detected in Copilot suggestions. These filters target the most common vulnerable coding patterns, including hardcoded credentials, SQL injections, and path injections. Additionally, in recent years we’ve provided tools such as GitHub Advanced Security, GitHub Actions, Dependabot, and CodeQL to open source projects to help improve code quality. Of course, you should always use GitHub Copilot together with good testing and code review practices and security tools, as well as your own judgment.Is GitHub Copilot intended to fully automate code generation and replace developers?No. Copilot is a tool intended to make developers more efficient. It’s not intended to replace developers, who should continue to apply the same sorts of safeguards and diligence they would apply with regard to any third-party code of unknown origin.The product is called “Copilot” not “Autopilot” and it’s not intended to generate code without oversight. You should use exactly the same sorts of safeguards and diligence with Copilot’s suggestions as you would use with any third-party code.Identifying best practices for use of third party code is beyond the scope of this section. That said, whatever practices your organization currently uses – rigorous functionality testing, code scanning, security testing, etc. – you should continue these policies with Copilot’s suggestions. Moreover, you should make sure your code editor or editor does not automatically compile or run generated code before you review it.Can GitHub Copilot users simply use suggestions without concern?Not necessarily. GitHub Copilot users should align their use of Copilot with their respective                        risk tolerances.As noted above, GitHub Copilot is not intended to replace developers, or their individual skill and judgment, and is not intended to fully automate the process of code development. The same risks that apply to the use of any third-party code apply to the use of Copilot’s suggestions.Depending on your particular use case, you should consider implementing the protections discussed above. It is your responsibility to assess what is appropriate for the situation and implement appropriate safeguards.You’re entitled to IP indemnification from GitHub for the unmodified suggestions when Copilot’s filtering is enabled. If you do elect to enable this feature, the copyright responsibility is ours, not our customers. As part of our ongoing commitment to responsible AI, GitHub and Microsoft extends our IP indemnity and protection support to our customers who are empowering their teams with GitHub Copilot. See Microsoft's Copilot Copyright Commitment for more details.Does GitHub Copilot support accessibility features?We are conducting internal testing of GitHub Copilot’s ease of use by developers with                        disabilities and working to ensure that GitHub Copilot is accessible to all developers. Please feel free to share your feedback on GitHub Copilot accessibility in our feedback forum.Does GitHub Copilot produce offensive outputs?GitHub Copilot includes filters to block offensive language in the prompts and to avoid                        synthesizing suggestions in sensitive contexts. We continue to work on improving the filter                        system to more intelligently detect and remove offensive outputs. If you see offensive outputs, please report them directly to copilot-safety@github.com so that we can improve our safeguards. GitHub takes this challenge very seriously and we are committed to addressing it.Will GitHub Copilot work as well using languages other than English?Given public sources are predominantly in English, GitHub Copilot will likely work less well in scenarios where natural language prompts provided by the developer are not in English and/or are grammatically incorrect. Therefore, non-English speakers might experience a lower quality of service.What data has GitHub Copilot been trained on?GitHub Copilot is powered by generative AI models developed by GitHub, OpenAI, and Microsoft. It has been trained on natural language text and source code from publicly available sources, including code in public repositories on GitHub.Data from June 2023. Additional research can be found here.Feature in public beta for Copilot Pro and Business plans. Requires use of repositories, issues, discussions, Actions, and other features of GitHub.Authentication with SAML single sign-on (SSO) available for organizations using GitHub Enterprise Cloud.FootnotesOption to purchase additional premium requests not available to users that subscribe or have subscribed to Pro or Pro+ through GitHub Mobile on iOS or Android.\n\n\n\nGitHub SecurityAdvanced SecuritySecret ProtectionCode SecuritySupply Chain SecurityPlans & pricingGitHub Advanced SecuritySecurity that moves at the  speed of developmentRequest a demoSee plans & pricingStop leaks before  they startExplore Secret ProtectionFix vulnerabilities  in your codeExplore Code SecurityGitHub is used byPauseBecome a risk reduction warriorStay ahead of threats with built-in security, secret protection, and dependency monitoring.Strengthen your development with AIWrite secure code at scale with AI-driven insights and automated fixes from GitHub Copilot Autofix.Empower your team with native AppSecFind and fix vulnerabilities in real time by integrating application security right into GitHub.“GitHub Advanced Security has solved the risk of leaked credentials. Now, developers are alerted to the problem before they push the code live. They have a direct feedback loop.Florian KochLead developer at Deutsche VermögensberatungTwo layers of powerful protectionCombine Secret Protection and Code Security to safeguard your code from every angle.See plans & pricingAdd-onSecret ProtectionFor teams and organizations serious about stopping secret leaks.$19USDper active committer/monthRequest a demoContact salesTeam or Enterprise plan requiredAdd-onCode SecurityFor teams and organizations committed to fixing vulnerabilities before production.$30USDper active committer/monthRequest a demoContact salesTeam or Enterprise plan requiredGet the most out of GitHub Advanced SecurityMaximize your defenses with industry-leading AppSecDiscover how our security solution can benefit your organization.Request a demoSee how improved security drives business successExplore the benefits of improving software security standards in organizations.Read the Forrester ReportHow top teams secure code while moving fastLearn how industry experts protect their code without sacrificing productivity.Explore videosFrequently asked questionsWhat is GitHub Advanced Security?GitHub Advanced Security (GHAS) encompasses GitHub’s application security products comprising GitHub Secret Protection and GitHub Code Security. GHAS adds cutting-edge tools for static analysis, software composition analysis, and secret scanning to the GitHub platform that developers already know and love. Unlike traditional application security packages that burden the software development toolchain with complex workflows that inhibit adoption, GHAS makes it easy for developers to find and fix vulnerabilities earlier in the software development life cycle. Why choose GitHub Advanced Security instead of a third-party AppSec product?Unlike third-party security add-ons, GitHub Advanced Security operates entirely in the native GitHub workflows that developers already know and love. By making it easier for developers to remediate vulnerabilities as they go, GitHub Advanced Security frees time for security teams to focus on critical strategies that protect businesses, customers, and communities from application-based vulnerabilities.What is DevSecOps?DevSecOps refers to a combination of the development, security, and operations tools necessary to develop software applications.What is AppSec?Application security (AppSec) is the process of finding, fixing, and preventing security vulnerabilities in applications. GitHub Advanced Security provides AppSec tools for static application security testing (SAST), which identifies vulnerabilities in the code itself. Can I use GitHub Advanced Security with Microsoft Azure DevOps?Yes. GitHub Advanced Security is available as an add-on for Azure DevOps.Where can I find case studies and reference customers?Read our customer stories to learn how customers like Telus, Mercado Libre, and KPMG use GitHub Advanced Security to secure applications and accelerate the software development lifecycle.Can I review documentation before purchase?Yes. As with all GitHub products, documentation for GitHub Advanced Security is publicly available.Does GitHub offer consulting, training, and other deployment services?Yes! Please visit Expert Services to learn more.\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub ActionsAutomate your workflow from idea to productionGitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.
Get started with actionsContact salesKick off workflows on any GitHub event to automate tasksHosted runnersLinux, macOS, Windows, ARM, GPU, and containers make it easy to build and test all your projects. Run directly on a VM or inside a container. Use your own VMs, in the cloud or on-prem, with self-hosted runners.Matrix buildsSave time with matrix workflows that simultaneously test across multiple operating systems and versions of your runtime.
Any languageGitHub Actions supports Node.js, Python, Java, Ruby, PHP, Go, Rust, .NET, and more. Build, test, and deploy applications in your language of choice.
Live logsSee your workflow run in realtime with color and emoji. It’s one click to copy a link that highlights a specific line number to share a CI/CD failure.Built in secret storeAutomate your software development practices with workflow files embracing the Git flow by codifying it in your repository.Multi-container testingTest your web service and its DB in your workflow by simply adding some docker-compose to your workflow file.Run a workflow  on any eventWhether you want to build a container, deploy a web service, or automate welcoming new users to your open source projects—there's an action for that. Pair GitHub Packages with Actions to simplify package management, including version updates, fast distribution with our global CDN, and dependency resolution, using your existing GITHUB_TOKEN.Actions marketplaceGitHub Actions connects all of your tools to automate every step of your development workflow. Explore the actions marketplaceEasily deploy to any cloud, create tickets in Jira, or publish a package to npm.Want to venture off the beaten path? Use the millions of open source libraries available on GitHub to create your own actions. Write them in JavaScript or create a container action—both can interact with the full GitHub API and any other public API.Secure package registry for code and workflowsSecurely store and manage your code and packages with GitHub credentials, integrated into your workflows via APIs and webhooks. Enjoy fast, reliable downloads through a global CDN for optimized performance.Read the docs“Actions is an exciting development and unlocks so much potential beyond CI/CD. It promises to streamline our workflows for a variety of tasks, from deploying our websites to querying the GitHub API for custom status reports to standard CI builds.Ralf GommersSciPy maintainerGitHub Actions is free for public repositoriesWe take pride in our Open Source legacy, and are happy to provide free CI/CD for public repositories. Check out the doc to see which runners are included.View docsHost your own runners or use GitHub-hosted runnersCheck out plan details to see how many minutes are included and the pricing table below to see which runners you can use your free minutes on.View pricingThe future of workflow automation is now
Get started with actions\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub CodespacesSecure development  made simpleGitHub Codespaces gets you up and coding faster with fully configured, secure cloud development environments native to GitHub.Get started for freeContact SalesSecure by designCreated with security in mind, Codespaces provides a secure development environment through its built-in capabilities and native integration with GitHub.Collaborate  where you codeCodespaces provides a shared development environment and removes the need for complex, time consuming setups.Your space, your way. Codespaces is a home away from home for your code that feels just like your usual machine.Your space, your way. Codespaces is a home away from home for your code that feels just like your usual machine.
Start coding instantly from anywhere in the world. Switching projects? Grab a new machine from the cloud that’s preconfigured for that project. Your settings travel with you.Tabs or spaces? Monokai or Solarized? Prettier or Beautify? It’s up to you. Control every nerdy detail only you care about with your own dotfiles repository.Browser preview  and port forwardingPreview your changes and get feedback from teammates by sharing ports within the scope allowed by policy.Onboard fasterQuickly spin up a codespace with only an IDE or browser and a GitHub account. With a few configuration files, you can give your developers an instant, fully configured, and secure development environment so they can start coding immediately.What you can do with CodespacesCode from any device. Want to code on an iPad? Go for it. Spin up Codespaces from any device with internet access. Don’t worry if your device is powerful enough—Codespaces lives in the cloud.Onboard at the speed of thought. No more building your dev environment while you onboard. Codespaces launches instantly from any repository on GitHub with pre-configured, secure environments.Fix bugs right from a pull request. Got a pull request detailing a bug or security issue? Open Codespaces right from the pull request without waiting for your dev environment to load.Learn how GitHub’s Engineering Team builds with CodespacesRead more“What used to be a 15-step process is just one step: open Codespaces and you’re off and running.Clint ChesterDeveloper Lead, Synergy“Codespaces lets developers skip the tedious, error-prone stuff that normally stands between them and getting started on real work.Keith AnnetteCloud Capability Lead, KPMG, UKStart coding in seconds with CodespacesGet started for freeFrequently asked questionsHow does Codespaces work?A codespace is a development environment that's hosted in the cloud. Customize your project for GitHub Codespaces by configuring dev container files to your repository (often known as configuration-as-code), which creates a repeatable codespace configuration for all users of your project.GitHub Codespaces run on a various VM-based compute options hosted by GitHub.com, which you can configure from 2 core machines up to 32 core machines. Connect to your codespaces from the browser or locally using an IDE like Visual Studio Code or IntelliJ.How do I use Codespaces?There are a number of entry points to spin up a Codespaces environment, including:A template.Your repository for new feature workAn open pull request to explore work-in-progressA commit in the repository's history to investigate a bug at a specific point in timeVisual Studio CodeIn beta, can you also use your JetBrains IDE or JupyterLabLearn more about how to use Codespaces in our documentation.Is Codespaces available for individual developers?Codespaces is available for developers in every organization, and under the control of the organization who pays for the user's codespace. All personal (individual) GitHub.com accounts include a quota of free usage each month, which organizations can enable (see the next question) for their private and internal repositories. GitHub will provide users in the free plan 120 core hours or 60 hours of run time on a 2 core codespace, plus 15 GB of storage each month. See how it's balanced on the billing page.Is Codespaces available for teams and companies?Codespaces is available for teams and companies, but needs to be enabled first in an organization’s settings. Teams and companies can select which repositories and users have access to Codespaces for added security and permissioning control. Learn how to enable Codespaces in an organization in our docs.How much does Codespaces cost?Codespaces is free for individual use up to 60 hours a month and comes with simple, pay-as-you-go pricing after that. It’s also available for organizations with pay-as-you-go pricing and has pricing controls so any company or team can determine how much they want to spend a month. Learn more about Codespaces pricing for organizations here.Can I self-host Codespaces?Codespaces cannot be self-hosted.How do I access Codespaces with LinkedIn Learning?You can use Codespaces directly through LinkedIn Learning. LinkedIn Learning offers 50+ courses across six of the most popular coding languages, as well as data science and machine learning. These courses are integrated with Codespaces, so you can get hands-on practice anytime, from any machine via LinkedIn. These courses will be unlocked on LinkedIn Learning for free through Feb. 2023. Learn more about LinkedIn Learning and GitHub Codespaces here.How do I enable Codespaces on GitHub?Codespaces is on by default for developers with a GitHub free account. If you belong to an organization, there may be a policy that prevents cloning—but if you can clone a repository, you will be able to start using Codespaces. Organizations will also need to pay for, enable, and manage their Codespaces instances.Is Codespaces available for students?Codespaces is available for free to students as part of the GitHub Student Developer Pack. Learn more about how to sign up and start using Codespaces and other GitHub products here.Is Codespaces available for open source maintainers?Codespaces provides both maintainers and contributors with generous free monthly usage.\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub IssuesProject planning for developersCreate issues, break them into sub-issues, track progress, add custom fields, and have conversations. Visualize large projects as tables, boards, or roadmaps, and automate everything with code.Start using projectsContact salesLogos for Shopify, Vercel, Stripe, Ford, and NASABreak issues into sub-issuesTackle complex issues with sub-issues and track their status with progress indicators. Navigate the full scope of work all in one view.Streamline conversationsExpress ideas with GitHub Flavored Markdown, mention contributors, react with emoji, clarify with attachments, and see references from commits, pull requests, releases, and deploys. Coordinate by assigning contributors and teams, or by adding them to milestones and projects. All in a single timeline.Upload and attach videos to commentsDive into work faster with issue forms and templatesFeaturesBored of boards? Switch to tables and roadmaps. Create views for how you work. Save views for sprints, backlogs, teams, or releases. Rank, group, sort, slice and filter to suit the occasion. Create swimlanes, share templates and set work in progress limits.No mouse? No problem. Every action you can take with the mouse has a keyboard shortcut or command. Filter, sort, group, and assign issues. Your hands never leave the keyboard.Custom fieldsTrack metadata like iterations, priority, story points, dates, notes, and links. Add custom fields to projects and edit from the issue sidebar.
Track progress with project insightsTrack the health of your current iteration cycle, milestone, or any other custom field you create with new project insights. Identify bottlenecks and issues blocking the team from making progress with the new burn up chart.Share best practices with project templatesCreate templates to share and reuse when getting started with a new project. Share inspiration across teams and get started with a single click.Manage work automaticallyAccelerate your project planning with workflows. Automatically triage issues, set values for custom fields, or archive issues.
Manage work automatically Issues, where you need themIssues can be viewed, created, and managed in your browser, your favorite terminal, or on your phone or tablet.GitHub CLIView, update, and create issues without ever leaving your terminal.Learn moreGitHub MobileCreate and manage issues on the go with our native iOS and Android mobile apps.Learn moreWhat developers are saying
“The new planning and tracking functionality keeps my project management close to my code. I no longer find myself needing to reach for spreadsheets or 3P tools which go stale instantly.Dan GodfreyDevelopment ManagerFlexible project planning for developers Start using projectsContact salesFrequently asked questionsWhat is GitHub Issues?We all need a way to plan our work, track issues, and discuss the things we build. Our answer to this universal question is GitHub Issues, and it’s built-in to every repository. GitHub’s issue tracking is unique because of our focus on simplicity, references, and elegant formatting.With GitHub Issues, you can express ideas with GitHub Flavored Markdown, assign and mention contributors, react with emojis, clarify with attachments and videos, plus reference code like commits, pull requests, and deploys. With task lists, you can break big issues into tasks, further organize your work with milestones and labels, and track relationships and dependencies.We built GitHub Issues for developers. It is simple, adaptable, and powerful.What are Projects?As teams and projects grow, how we work evolves. Tools that hard-code a methodology are too specific and rigid to adapt to any moment. Often, we find ourselves creating a spreadsheet or pulling out a notepad to have the space to think. Then our planning is disconnected from where the work happens.The new Projects connect your planning directly to the work your teams are doing and flexibly adapt to whatever your team needs at any point. Built like a spreadsheet, project tables give you a live canvas to filter, sort, and group issues and pull requests. You can use it, or the accompanying project board, along with custom fields, to track a sprint, plan a feature, or manage a large-scale release.What plans have access to Projects?All users have access to the free tier of GitHub Issues and Projects. For more information about paid tiers, see our pricing page.Will the new Projects experience be available in GitHub Enterprise Server?Yes! GitHub Enterprise Server (GHES) support follows our regular cadence of one to two quarters before enabling the on-premises functionality.\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchCode ReviewWrite better codeOn GitHub, lightweight code review tools are built into every pull request. Your team can create review processes that improve the quality of your code and fit neatly into your workflow.Get startedContact salesEvery change starts with a pull request.Every change starts with a pull request.Learn pull request fundamentalsStart a new feature or propose a change to existing code with a pull request—a base for your team to coordinate details and refine your changes.Pull requests are fundamental to how teams review and improve code on GitHub. Evolve projects, propose new features, and discuss implementation details before changing your source code.See every update and act on it, in-situDiffsPreview changes in context with your code to see what is being proposed. Side-by-side Diffs highlight added, edited, and deleted code right next to the original file, so you can easily spot changes.Learn moreHistoryBrowse commits, comments, and references related to your pull request in a timeline-style interface. Your pull request will also highlight what’s changed since you last checked.Learn moreBlameSee what a file looked like before a particular change. With blame view, you can see how any portion of your file has evolved over time without viewing the file’s full history.Learn moreDiscuss code within your codeCommentsOn GitHub, conversations happen alongside your code. Leave detailed comments on code syntax and ask questions about structure inline.Review requestsIf you’re on the other side of the code, requesting peer reviews is easy. Add users to your pull request, and they’ll receive a notification letting them know you need their feedback.ReviewsSave your teammates a few notifications. Bundle your comments into one cohesive review, then specify whether comments are required changes or just suggestions.You can’t always avoid conflict. Merge pull requests faster by resolving simple merge conflicts on GitHub—no command line necessary.Learn moreMerge the highest quality codeReviews can improve your code, but mistakes happen. Limit human error and ensure only high quality code gets merged with detailed permissions and status checks.Fast, relevant resultsGive collaborators as much access as they need through your repository settings. You can extend access to a few teams and select which ones can read or write to your files. The options you have for permissions depend on your plan.See plan optionsProtected branchesProtected Branches help you maintain the integrity of your code. Limit who can push to a branch, and disable force pushes to specific branches. Then scale your policies with the Protected Branches API.
Learn moreRequired status checks
Create required status checks to add an extra layer of error prevention on branches. Use the Status API to enforce checks and disable the merge button until they pass. To err is human; to automate, divine!Status API docEvery change starts with a pull request. Get started\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchGitHub DiscussionsThe home for  developer communitiesAsk questions, share ideas, and build connections with each other—all right next to your code. GitHub Discussions enables healthy and productive software collaboration.Try nowContact salesDedicated space for conversationsDecrease the burden of managing active work in issues and pull requests by providing a separate space to host ongoing discussions, questions, and ideas.Highlight quality responses and make the best answer more discoverable. Keep context in-tact and conversations on track with threaded comments. Ask your community directly with custom polls. Leverage GraphQL API and webhooks to meet your teams wherever they are. Give your open ended conversations the room they need outside of issues. CustomizePersonalize for your community and team with any ways to make your space unique for you and your collaborators.Custom categories. Create discussion categories that fit your community's needs. Label and organize. Make announcements and the most important discussions more visible for contributors. Pin discussions. Make announcements and the most important discussions more visible for contributors. Monitor insightsTrack the health and growth of your community with a dashboard full of actionable data.Contribution activityCount of total contribution activity to Discussions, Issues, and PRs.Discussion page viewTotal page views to Discussions segmented by logged in vs anonymous users.Discussions daily contributorsCount of unique users who have reacted, upvoted, marked an answer, commented, or posted in the selected period.Start the conversation with your community Try now\n\n\n\nFeaturesGitHub CopilotSecurityActionsCodespacesIssuesCode reviewDiscussionsCode searchCode SearchExactly what you’re looking forYour code—and the world’s—is at your fingertips.Try it nowContact salesSearch, navigate, and understand your team’s code—and billions of lines of public code.Fast, relevant resultsCode search understands your code—and brings you relevant results with incredible speed.A power user's dreamSearch using regular expressions, boolean operations, keyboard shortcuts, and more.More than just searchDig deeper with the all-new code view—tightly integrating browsing and code navigation.Way more than grep.GitHub code search can search across multiple repositories and is always up to date. It understands your code, and puts the most relevant results first.Use the new search input to find symbols and files—and jump right to them. Know exactly what you’re looking for? Express it with our powerful search operators. Meet the all-new code view.Dig deeper into complex codebases with tightly integrated search, code navigation and browsing.Instantly jump to definitions in over 10 languages. No setup required with Code navigation. Keep all your code in context and instantly switch files with the new file tree pane. What developers are saying
“Code search makes it effortless to quickly find what I'm looking for in my code, or across all of GitHubKeith SmileySoftware Engineer“Code search turns what would've been a ~10 minute grep search into a 2 second UI search Marco MontagnaPlatform EngineerFind more, search lessTry it now\n\n\n\nWhy GitHubMost of the world's code lives on GitHub. Why not yours?GitHub empowers developers and enterprises to collaborate, innovate, and build securely. With AI-powered tools, built-in security testing, and seamless integration, it supports teams from first commit to enterprise development.
Start free for 30 daysContact salesWhat is GitHub?Over 90% of Fortune 100 companies and more than 150 million developers rely on GitHub to deliver scalable, reliable, and secure solutions for teams of all sizes.Developer-first: Designed for developers, GitHub offers seamless collaboration tools that make teamwork smarter, faster, and more secure.
Enterprise-grade: GitHub Enterprise scales with your organization, delivering the performance and security needed for teams of any size.
AI-powered: Leverage GitHub Copilot to automate tasks and enhance productivity with smart, context-aware code suggestions.
Logos for Fidelity Shopify Mercedes Benz American Airlines Adobe Ford Vodafone Spotify Home DepotThe developer platform that grows with you
Whether you're a small startup or a global enterprise, GitHub is designed to grow with you. The platform adapts to your needs, helping ensure that you don’t have to compromise on performance, security, or collaboration as your organization scales.Explore GitHub EnterpriseCustomizable workflowsTailor your workflows with GitHub Actions and integrate seamlessly with your existing tools.Learn more about GitHub ActionsSecurity at scaleGitHub's centralized access management and compliance tools help ensure your code and data remain safe.Explore GitHub securityYour code, your controlWith GitHub Enterprise Cloud, you decide where your code lives while enabling security, compliance, and scalability with SaaS agility and enterprise-grade governance.
Read about data residency55%faster coding enabled by GitHub Copilot80%time saved in developer onboarding$3.2Min savings by reducing developer onboarding training time through automation75%improvement in time spent managing tools and code infrastructureSecurity throughout the SDLC
Fix vulnerabilities before they hit production and reduce the risk of a costly breach with application security that is built in, not bolted on.Explore GitHub Advanced SecurityCode securityReview potential vulnerabilities and get suggested fixes with Copilot Autofix to accelerate remediation and strengthen security posture.Learn more about Copilot AutofixSecret protectionHelp ensure your secrets stay secure by preventing accidental exposure in your repositories.Check out GitHub Secret ProtectionSupply chain securityVisualize, protect, and remediate your code's upstream dependencies.Explore GitHub supply chain security3xfaster remediation on average with Copilot Autofix28 minfrom vulnerability detection to successful remediation4.4Msecrets prevented from being leaked on GitHub in 2024The comprehensive platformfor high-performance teams
GitHub is where the world builds software—faster, smarter, and more securely. Unlock the full potential of your team with an AI-native platform, seamless automation, and CI/CD workflows that help you build, scale, and innovate like never before.Explore CI/CD solutionSpeed up your workflows and eliminate bottlenecksHarness GitHub Copilot to automate tasks, enhance code quality, and boost productivity. With intelligent, adaptive recommendations, you’ll write cleaner code quicker and accomplish more in less time.See GitHub CopilotGet your team in sync, effortlesslyWith GitHub’s integrated tools—from pull requests to project boards—collaboration is streamlined, and automation handles the heavy lifting. Keep your team aligned, reduce manual tasks, and stay focused on building great software.Learn more about GitHub IssuesWork smarter, build faster, innovate with intentionGitHub introduces new ways to work smarter and faster. With AI-powered tools and agentic automation, you can reduce repetitive tasks and stay in a flow state—shaping the future of software with speed and intention.Explore GitHub Copilot agent mode“Between Copilot, Codespaces, Issues, Actions, and Dependabot, GitHub is at the center of our development universe. It has enabled us to increase the velocity of our development and has shortened our time-to-market.
Luigi UngaroGlobal Engine developer lead, AmplifonThe platform developers know and loveEmpower your team to collaborate, innovate, and build software—faster, smarter, and more securely—with the platform they know and love.
Start free for 30 daysContact sales\n\n\n\nThe tools you need to build what you wantExperience AI with Copilot ChatLearn moreThe latest GitHub previewsLearn moreCollaborative codingAutomation & CI/CDApplication securityClient appsProject managementGovernance & administrationCommunityCollaborative codingInnovate faster with seamless collaboration.See the changes you care about.Build community around your code.GitHub CodespacesSpin up fully configured dev environments in the cloud with the full power of your favorite editor.Learn moreGitHub CopilotGet suggestions for whole lines of code or entire functions right inside your editor.Learn morePull requestsReceive notifications of contributor changes to a repository, with specified access limits, and seamlessly merge accepted updates.Learn moreDiscussionsDedicated space for your community to come together, ask and answer questions, and have open-ended conversations.Learn moreCode search & code viewRapidly search, navigate, and understand code right from GitHub.com with our powerful new tools.Learn moreCode reviewReview new code, visualize changes, and merge confidently with automated status checks.Learn moreDraft pull requestsCollaborate and discuss changes without a formal review or the risk of unwanted merges.Learn moreProtected branchesEnforce branch merge restrictions by requiring reviews or limiting access to specific contributors.Learn moreAutomation and CI/CDAutomate everything: CI/CD, testing, planning, project management, issue labeling, approvals, onboarding, and more.Standardize and scale best practices, security, and compliance across your organization.Get started quickly with thousands of actions from partners and the community.GitHub ActionsAutomate your software workflows by writing tasks and combining them to build, test, and deploy faster from GitHub.Learn moreGitHub PackagesHost your own software packages or use them as dependencies in other projects, with both private and public hosting available.Learn moreAPIsCreate calls to get all the data and events you need within GitHub, and automatically kick off and advance your software workflows.Learn moreGitHub MarketplaceLeverage thousands of actions and applications from our community to help build, improve, and accelerate your workflows.Learn moreWebhooksDozens of events and a webhooks API help you integrate with and automate work for your repository, organization, or application.Learn moreGitHub-hosted runnersMove automation to the cloud with on-demand Linux, macOS, Windows, ARM, and GPU environments for your workflow runs, all hosted by GitHub.Learn moreSelf-hosted runnersGain more environments and fuller control with labels, groups, and policies to manage runs on your own machines, plus an open source runner application.Learn moreWorkflow visualizationMap workflows, track their progression in real time, understand complex workflows, and communicate status with the rest of the team.Learn moreWorkflow templatesStandardize and scale best practices and processes with preconfigured workflow templates shared across your organization.Learn moreApplication securityApplication security where found means fixed. Powered by GitHub Copilot Autofix.Explore GitHub Advanced SecurityPrevent, find, and fix application vulnerabilities and leaked secrets.Target historical alerts to reduce security debt at scale.Built into the GitHub platform that developers know and love.Code scanningFind vulnerabilities in your code with CodeQL, GitHub’s industry-leading semantic code analysis. Prevent new vulnerabilities from being introduced by scanning every pull request.Learn moreGitHub Copilot AutofixPowered by GitHub Copilot, generate automatic fixes for 90% of alert types in JavaScript, TypeScript, Java, and Python. Quickly remediate with contextual vulnerability intelligence and advice.Learn moreSecurity campaignsSolve your backlog of application security debt with security campaigns that target and generate autofixes for up to 1,000 alerts at a time, rapidly reducing the risk of vulnerabilities and zero-day attacks.Learn moreSecret scanningDetect exposed secrets in your public and private repositories, and revoke them to secure access to your services.Learn moreGitHub Copilot secret scanningAdditional AI capabilities to detect elusive secrets like passwords.Learn moreDependency graphView the packages your project relies on, the repositories that depend on them, and any vulnerabilities detected in their dependencies.Learn moreDependabot alertsReceive alerts when new vulnerabilities affect your repositories, with GitHub detecting and notifying you of vulnerable dependencies in both public and private repositories.Learn moreDependabot security and version updatesKeep your code secure by automatically opening pull requests that update vulnerable or out-of-date dependencies.Learn moreDependency reviewAssess the security impact of new dependencies in pull requests before merging.Learn moreGitHub security advisoriesPrivately report, discuss, fix, and publish information about security vulnerabilities found in open source repositories.Learn morePrivate vulnerability reportingEnable your public repository to privately receive vulnerability reports from the community and collaborate on solutions.Learn moreGitHub Advisory DatabaseBrowse or search GitHub's database of known vulnerabilities, featuring curated CVEs and security advisories linked to the GitHub dependency graph.Learn moreClient appsAccess GitHub anywhere: On Desktop, Mobile, and Command Line.Accessible anywhere. Use GitHub on macOS, Windows, mobile, or tablet with native apps.Efficient management. Handle pull requests, issues, and tasks swiftly with GitHub CLI or mobile.Streamlined development. Visualize and commit changes easily with GitHub Desktop.GitHub MobileTake your projects, ideas, and code to go with fully native mobile and tablet experiences.Learn moreGitHub CLIManage issues and pull requests from the terminal, where you're already working with Git and your code.Learn moreGitHub DesktopSimplify your development workflow with a GUI to visualize, commit, and push changes—no command line needed.Learn moreProject managementKeep feature requests, bugs, and more organized.Coordinate initiatives big and small with project tables, boards, and task lists.Engineered for software teams.Track what you deliver down to the commit.GitHub ProjectsCreate a customized view of your issues and pull requests to plan and track your work.Learn moreGitHub IssuesTrack bugs, enhancements, and other requests, prioritize work, and communicate with stakeholders as changes are proposed and merged.Learn moreMilestonesTrack progress on groups of issues or pull requests in a repository, and map groups to overall project goals.Learn moreCharts and insightsLeverage insights to visualize your projects by creating and sharing charts built from your project's data.Learn moreOrg dependency insightsView vulnerabilities, licenses, and other important information for the open source projects your organization depends on.Learn moreRepository insightsUse data about activity, trends, and contributions within your repositories, to make data-driven improvements to your development cycle.Learn moreWikisHost project documentation in a wiki within your repository, allowing contributors to easily edit it on the web or locally.Learn moreGovernance & administrationSimplify access and permissions management across your projects and teams.Update permissions, add new users as you grow, and assign everyone the exact permissions they need.Sync with Okta and Entra ID.OrganizationsCreate groups of user accounts that own repositories and manage access on a team-by-team or individual user basis.Learn moreTeamsOrganize your members to mirror your company's structure, with cascading access to permissions and mentions.Learn moreTeam syncEnable team synchronization between your identity provider and your organization on GitHub, including Entra ID and Okta.Learn moreCustom rolesDefine users' access level to your code, data, and settings based on their role in your organization.Learn moreCustom repository rolesEnsure members have only the permissions they need by creating custom roles with fine-grained permission settings.Learn moreDomain verificationVerify your organization's identity on GitHub and display that verification through a profile badge.Learn moreCompliance reportsTake care of your security assessment and certification needs by accessing GitHub’s cloud compliance reports, such as our SOC reports and Cloud Security Alliance CAIQ self-assessments (CSA CAIQ).Learn moreAudit logQuickly review the actions performed by members of your organization. Monitor access, permission changes, user changes, and other events.Learn moreRepository rulesEnhance your organization's security with scalable source code protections, and use rule insights to easily review how and why code changes occurred in your repositories.Learn moreRequires GitHub EnterpriseEnterprise accountsEnable collaboration between your organization and GitHub environments with a single point of visibility and management via an enterprise account.Learn moreRequires GitHub EnterpriseGitHub ConnectShare features and workflows between your GitHub Enterprise Server instance and GitHub Enterprise Cloud.Learn moreRequires GitHub EnterpriseSAMLSecurely control access to organization resources like repositories, issues, and pull requests with SAML, while allowing users to authenticate with their GitHub usernames.Learn moreRequires GitHub EnterpriseLDAPCentralize repository management. LDAP is one of the most common protocols used to integrate third-party software with large company user directories.Learn moreRequires GitHub EnterpriseEnterprise Managed UsersManage the lifecycle and authentication of users on GitHub Enterprise Cloud from your identity provider (IdP).Learn moreRequires GitHub EnterpriseBring your own identity provider for Enterprise Managed UsersUse the SSO and SCIM providers of your choice for Enterprise Managed Users, separate from one another, for a more flexible approach to user lifecycle management.Learn moreCommunityGitHub SponsorsFinancially support the open source projects your code depends on. Sponsor a contributor, maintainer, or project with one time or recurring contributions.Learn moreGitHub SkillsLearn new skills by completing tasks and projects directly within GitHub, guided by our friendly bot.Learn moreElectronWrite cross-platform desktop applications using JavaScript, HTML, and CSS with the Electron framework, based on Node.js and Chromium.Learn moreEducationGitHub Education is a commitment to bringing tech and open source collaboration to students and educators across the globe.Learn moreReady to get started?Explore all the plans to find the solution that fits your needs.View pricing plans\n\n\n\nEnterpriseAdvanced SecurityPremium SupportThe AI-powereddeveloper platformTo build, scale, and deliver secure software.Start free for 30 daysContact salesFeatured sponsorsPauseAnchor navigation menu. Currently selected: ScaleAISecurityReliabilityStart a free trialScaleThe enterprise-ready platform that developers know and loveConsolidate DevSecOps processes and enable unparalleled collaboration.Learn more about the ROI of GitHubLeverage the industry’s most flexible secure development platform.17,000+Third-party tools support your favorite languages and frameworksUnlocking innovation at scale with AI-driven software development.“We’ve used GitHub from the inception of Datadog. It’s a high-quality product, and a lot of our engineers contribute to open source so there’s a sense of community there. GitHub is ingrained in the DNA of our engineering, it’s become part of the culture.”Emilio EscobarChief Information Security Officer @ DatadogAIBuild, secure, and ship software fasterPush what's possible with GitHub Copilot, the world's most trusted and widely adopted AI developer tool.Learn more about Copilot for business88%of developers experience increased productivity.1Mercado Libre frees developers' minds to focus on their mission with GitHub.Read customer story~50%reduced time by writing code with GitHub Copilot100,000pull requests merged per dayProblemMercado Libre developer platform team needed secure DevOps tooling that would allow its developers to be more efficient and allow them to focus more on providing value to users.SolutionMercado Libre uses GitHub to automate deployment, security tests, and repetitive tasks so developers have more free time to spend on high-value, rewarding work.ProductsGitHub EnterpriseGitHub Copilot for businessGitHub Advanced SecuritySecurityEfficiency and security at every stepDeliver secure software fast, with enterprise-ready CI/CD, using GitHub Actions.Learn more about CI/CDFound means fixedKeep vulnerabilities out of code and solve security debtExplore GitHub Advanced SecurityGitHub Enterprise CloudEnhanced control with data residency2Learn moreSee how DVAG puts customers first by optimizing developer efficiency and security.Read customer storyReliability90% of the Fortune 100 choose GitHubMigrate, scale, and use cloud-based compute to accelerate digital transformation.Explore GitHub Enterprise ImporterReliability when it matters most with GitHub’s distributed architecture.75%Reduced time spent managing tools.3See how Telus saved $16.9 million in costs by replacing their DevOps tools with GitHub.Read customer storyStart your journey with GitHubStart a free trialContact salesPlanning your migration to GitHubLearn moreStay ahead with GitHub’s latest innovationsSee what's newCompare GitHub vs. GitLab and other DevOps toolsLearn moreFrequently asked questionsAbout GitHub EnterpriseWhat is GitHub Enterprise?GitHub Enterprise is an enterprise-grade software development platform designed for the complex workflows of modern development.As an extensible platform solution, GitHub Enterprise enables organizations to seamlessly integrate additional tools and functionalities, tailoring their development environment to meet specific needs and enhancing overall productivity.Why should organizations use GitHub EnterpriseThere are several reasons why organizations should consider using GitHub Enterprise:Accelerate development at scale with AI-powered development: GitHub is the world’s most widely adopted Copilot-powered developer platform helping organizations build, secure, and deliver innovative software at scale. Application security made simpler: Native security tools embedded into the developer workflow, such as GitHub Advanced Security, help developers easily fix security issues, while providing more visibility and controls.Centralize governance and compliance: Customers can access a range of administration features to help manage governance at scale and enforce business rules and policies to meet their specific needs. Boost productivity and collaboration: Increase productivity with automated CI/CD workflows using GitHub Actions, collaborate effectively with GitHub Projects and GitHub Issues, manage hosted packages with GitHub Packages, and utilize prebuilt and configured development environments with GitHub Codespaces.Greater flexibility and control over data: Whether self-hosting with GitHub Enterprise Server or using GitHub Enterprise Cloud, GitHub provides customers with flexibility and control over their data. And now with GitHub Enterprise Cloud with data residency, customers have enhanced control where certain data, like their code, resides. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.Who uses GitHub Enterprise?GitHub Enterprise is used by organizations of all sizes that require greater productivity, collaboration, and security capabilities for their software development process. GitHub Enterprise can scale with teams, all the way from a small startup to a large corporation.What is GitHub Enterprise Cloud?GitHub Enterprise Cloud is the cloud-based solution of GitHub Enterprise, hosted on GitHub’s servers. This eliminates the need for organizations to maintain their own servers, infrastructure, and updates, allowing them to focus on development.In addition to the core productivity and collaboration features it provides, GitHub Enterprise Cloud provides access to additional features and add-ons for security, support, managed users, and many more. Customers can easily add or remove users as needed, and they can also increase storage capacity or processing power as their needs change.And for customers desiring more control over their data, GitHub Enterprise Cloud with data residency provides improved enterprise-grade features and more control over where code is stored. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.What is GitHub Enterprise Server?GitHub Enterprise Server is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud and provides organizations with a secure and customizable source code management and collaboration platform.One of the key advantages of GitHub Enterprise Server is that it provides organizations with complete control over their source code and data. Organizations can choose where to store their repositories and can control who has access to them. Administrators can also customize the platform to meet specific needs, such as integrating other tools or implementing custom workflows.GitHub Enterprise Server also offers enhanced security and compliance features. Organizations can configure their instance to meet their specific security requirements, such as using LDAP or SAML for authentication, setting up two-factor authentication, or implementing network security measures. Compliance features are also included, such as audit logs, access controls, and vulnerability scanning.How secure is GitHub Enterprise?GitHub Enterprise is designed with security in mind and includes a range of features to help organizations protect their code and data. Here are some of the key security features that GitHub Enterprise offers:Authentication and access controls: GitHub Enterprise includes two-factor authentication, LDAP and Active Directory integration, and OAuth authentication. This helps organizations ensure that only authorized users can access their repositories and data.Encryption: All data in transit between the user's computer and GitHub Enterprise server is encrypted using HTTPS. All data at rest uses AES-256 encryption.Vulnerability scanning: GitHub Enterprise includes built-in security scanning features that can detect known vulnerabilities and alert users.Audit logs: The platform provides detailed audit logs that record all user actions, including repository access, changes, and deletions. This helps organizations track and monitor user activity and identify potential security issues.Customizable policies: GitHub Enterprise allows organizations to create custom policies for repository access. This can help enforce compliance requirements and prevent unauthorized access to sensitive data.Regular security updates: There is also a dedicated security team that provides regular updates, monitors for potential security threats, and responds quickly to any issues that arise.Is GitHub Enterprise free?No, GitHub Enterprise is not free. It is a paid product that can be paid for either as a metered service on a monthly basis or as a subscription, with the cost determined by the number of users and the level of support required. For organizations interested in trying out the platform before making a commitment, GitHub Enterprise offers a free trial. Furthermore, organizations can contact the GitHub Sales team for the option to request a custom quote to meet their specific needs.Using GitHub EnterpriseHow can developers collaborate with GitHub Enterprise?Developers can collaborate with GitHub Enterprise using a variety of tools that are built into the platform, including:Pull requests: Allows developers to propose changes to a repository and submit them for review. Other team members can review the changes, leave comments, and suggest further improvements.GitHub Projects: Enables developers to track issues, assign tasks, and prioritize work. This helps teams stay on track, identify and resolve issues quickly, and ensure that everyone is working towards the same goals.GitHub Discussions: Empowers developers to have conversations about specific topics. This can be particularly useful for triaging complex issues or making decisions about the direction of a project.Choosing your planHow can organizations get started with GitHub Enterprise?To get started with GitHub Enterprise, try a free trial today or contact our sales team.What GitHub Enterprise plans are available?GitHub Enterprise offers several plans that vary in price and features. They are designed to accommodate different types of organizations and teams, from small startups to large enterprises. These plans include:GitHub Enterprise Server: This is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud, and offers all the features of the cloud-based version of GitHub, including pull requests, code reviews, and project management tools. Pricing depends on the number of users and support requirements.GitHub Enterprise Cloud: This is the cloud-based version of GitHub Enterprise. It is hosted on GitHub's servers, and it offers all the features of GitHub Enterprise Server. The price depends on the number of users and storage requirements.How much does GitHub Enterprise cost?For more information on cost, please see our pricing page.Getting started with enterprise software development platformsWhat is a DevOps platform?A DevOps platform is a set of tools, technologies, and practices that enable software development and IT operations teams to collaborate and automate the software delivery process. It typically includes version control, continuous integration and continuous delivery (CI/CD), automated testing, deployment automation, and monitoring.The main goal of a DevOps platform is to provide a single environment for software development and IT operations teams. By automating the software delivery process, a DevOps platform helps organizations reduce the time and cost of delivering software, while also improving the reliability, security, and scalability of their applications.What is developer experience?Developer experience (DevEx) refers to the overall experience that software developers have when using development tools, frameworks, and platforms to create software applications. It encompasses all aspects of a developer's interaction with the tools, including onboarding, maintaining, ease of use, and productivity.The goal of optimizing DevEx is to make it as easy as possible for developers to create high-quality software quickly. This can involve designing tools with intuitive interfaces, providing clear and concise documentation, seamlessly integrating tools into workflows, and offering comprehensive support to help developers overcome challenges and obstacles.By prioritizing DevEx, organizations can improve the speed and quality of their software development processes, increase developer satisfaction and retention, and ultimately deliver better products.What is a software development platform?A software development platform is a set of tools, technologies, and resources that enable software developers to create, test, deploy, and maintain software applications. This typically includes a programming language or framework, an integrated development environment (IDE), libraries, code repositories, debugging and testing tools, and deployment and hosting options.The goal of a software development platform is to provide developers with a comprehensive set of tools and resources that make it easier to develop high-quality software. By providing an integrated environment for software development, a software development platform can help developers streamline their workflows, reduce errors, and improve the speed and quality of their work. Additionally, many software development platforms also provide access to a community of developers who can offer support, advice, and resources for improving software development practices.What is an application development platform?An application development platform is a set of tools that enables developers to build, deploy, and manage custom software applications.This kind of platform typically includes a programming language, software development kits (SDKs), application programming interfaces (APIs), libraries, and testing and debugging tools.These tools are designed to make it easier for developers to create and deploy custom applications for a specific platform, such as a mobile device or web browser.The goal of an application development platform is to provide developers with a comprehensive set of tools that makes it easier to create high-quality applications that meet the specific requirements of a particular platform or device.What is software development collaboration?Software development collaboration is the process of working together as a team to create, test, and deploy software applications. It can involve a range of activities, such as brainstorming, planning, code reviews, testing, and deployment. Collaboration is an essential component of the software development process, as it allows multiple developers and stakeholders to work together.Effective collaboration requires open communication, clear goals and objectives, shared resources, and a commitment to working together as a team. Collaboration tools such as version control systems, collaborative coding environments, and project management software, can also provide a centralized location for team members to share information, coordinate tasks, and track progress.Ultimately, software development collaboration is essential to creating high-quality software that’s reliable, scalable, and meets the needs of end-users and stakeholders.About GitHub EnterpriseUsing GitHub EnterpriseChoosing your planGetting started with enterprise software development platformsAbout GitHub EnterpriseWhat is GitHub Enterprise?GitHub Enterprise is an enterprise-grade software development platform designed for the complex workflows of modern development.As an extensible platform solution, GitHub Enterprise enables organizations to seamlessly integrate additional tools and functionalities, tailoring their development environment to meet specific needs and enhancing overall productivity.Why should organizations use GitHub EnterpriseThere are several reasons why organizations should consider using GitHub Enterprise:Accelerate development at scale with AI-powered development: GitHub is the world’s most widely adopted Copilot-powered developer platform helping organizations build, secure, and deliver innovative software at scale. Application security made simpler: Native security tools embedded into the developer workflow, such as GitHub Advanced Security, help developers easily fix security issues, while providing more visibility and controls.Centralize governance and compliance: Customers can access a range of administration features to help manage governance at scale and enforce business rules and policies to meet their specific needs. Boost productivity and collaboration: Increase productivity with automated CI/CD workflows using GitHub Actions, collaborate effectively with GitHub Projects and GitHub Issues, manage hosted packages with GitHub Packages, and utilize prebuilt and configured development environments with GitHub Codespaces.Greater flexibility and control over data: Whether self-hosting with GitHub Enterprise Server or using GitHub Enterprise Cloud, GitHub provides customers with flexibility and control over their data. And now with GitHub Enterprise Cloud with data residency, customers have enhanced control where certain data, like their code, resides. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.Who uses GitHub Enterprise?GitHub Enterprise is used by organizations of all sizes that require greater productivity, collaboration, and security capabilities for their software development process. GitHub Enterprise can scale with teams, all the way from a small startup to a large corporation.What is GitHub Enterprise Cloud?GitHub Enterprise Cloud is the cloud-based solution of GitHub Enterprise, hosted on GitHub’s servers. This eliminates the need for organizations to maintain their own servers, infrastructure, and updates, allowing them to focus on development.In addition to the core productivity and collaboration features it provides, GitHub Enterprise Cloud provides access to additional features and add-ons for security, support, managed users, and many more. Customers can easily add or remove users as needed, and they can also increase storage capacity or processing power as their needs change.And for customers desiring more control over their data, GitHub Enterprise Cloud with data residency provides improved enterprise-grade features and more control over where code is stored. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.What is GitHub Enterprise Server?GitHub Enterprise Server is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud and provides organizations with a secure and customizable source code management and collaboration platform.One of the key advantages of GitHub Enterprise Server is that it provides organizations with complete control over their source code and data. Organizations can choose where to store their repositories and can control who has access to them. Administrators can also customize the platform to meet specific needs, such as integrating other tools or implementing custom workflows.GitHub Enterprise Server also offers enhanced security and compliance features. Organizations can configure their instance to meet their specific security requirements, such as using LDAP or SAML for authentication, setting up two-factor authentication, or implementing network security measures. Compliance features are also included, such as audit logs, access controls, and vulnerability scanning.How secure is GitHub Enterprise?GitHub Enterprise is designed with security in mind and includes a range of features to help organizations protect their code and data. Here are some of the key security features that GitHub Enterprise offers:Authentication and access controls: GitHub Enterprise includes two-factor authentication, LDAP and Active Directory integration, and OAuth authentication. This helps organizations ensure that only authorized users can access their repositories and data.Encryption: All data in transit between the user's computer and GitHub Enterprise server is encrypted using HTTPS. All data at rest uses AES-256 encryption.Vulnerability scanning: GitHub Enterprise includes built-in security scanning features that can detect known vulnerabilities and alert users.Audit logs: The platform provides detailed audit logs that record all user actions, including repository access, changes, and deletions. This helps organizations track and monitor user activity and identify potential security issues.Customizable policies: GitHub Enterprise allows organizations to create custom policies for repository access. This can help enforce compliance requirements and prevent unauthorized access to sensitive data.Regular security updates: There is also a dedicated security team that provides regular updates, monitors for potential security threats, and responds quickly to any issues that arise.Is GitHub Enterprise free?No, GitHub Enterprise is not free. It is a paid product that can be paid for either as a metered service on a monthly basis or as a subscription, with the cost determined by the number of users and the level of support required. For organizations interested in trying out the platform before making a commitment, GitHub Enterprise offers a free trial. Furthermore, organizations can contact the GitHub Sales team for the option to request a custom quote to meet their specific needs.Using GitHub EnterpriseHow can developers collaborate with GitHub Enterprise?Developers can collaborate with GitHub Enterprise using a variety of tools that are built into the platform, including:Pull requests: Allows developers to propose changes to a repository and submit them for review. Other team members can review the changes, leave comments, and suggest further improvements.GitHub Projects: Enables developers to track issues, assign tasks, and prioritize work. This helps teams stay on track, identify and resolve issues quickly, and ensure that everyone is working towards the same goals.GitHub Discussions: Empowers developers to have conversations about specific topics. This can be particularly useful for triaging complex issues or making decisions about the direction of a project.Choosing your planHow can organizations get started with GitHub Enterprise?To get started with GitHub Enterprise, try a free trial today or contact our sales team.What GitHub Enterprise plans are available?GitHub Enterprise offers several plans that vary in price and features. They are designed to accommodate different types of organizations and teams, from small startups to large enterprises. These plans include:GitHub Enterprise Server: This is the self-hosted version of GitHub Enterprise. It is installed on-premises or on a private cloud, and offers all the features of the cloud-based version of GitHub, including pull requests, code reviews, and project management tools. Pricing depends on the number of users and support requirements.GitHub Enterprise Cloud: This is the cloud-based version of GitHub Enterprise. It is hosted on GitHub's servers, and it offers all the features of GitHub Enterprise Server. The price depends on the number of users and storage requirements.How much does GitHub Enterprise cost?For more information on cost, please see our pricing page.Getting started with enterprise software development platformsWhat is a DevOps platform?A DevOps platform is a set of tools, technologies, and practices that enable software development and IT operations teams to collaborate and automate the software delivery process. It typically includes version control, continuous integration and continuous delivery (CI/CD), automated testing, deployment automation, and monitoring.The main goal of a DevOps platform is to provide a single environment for software development and IT operations teams. By automating the software delivery process, a DevOps platform helps organizations reduce the time and cost of delivering software, while also improving the reliability, security, and scalability of their applications.What is developer experience?Developer experience (DevEx) refers to the overall experience that software developers have when using development tools, frameworks, and platforms to create software applications. It encompasses all aspects of a developer's interaction with the tools, including onboarding, maintaining, ease of use, and productivity.The goal of optimizing DevEx is to make it as easy as possible for developers to create high-quality software quickly. This can involve designing tools with intuitive interfaces, providing clear and concise documentation, seamlessly integrating tools into workflows, and offering comprehensive support to help developers overcome challenges and obstacles.By prioritizing DevEx, organizations can improve the speed and quality of their software development processes, increase developer satisfaction and retention, and ultimately deliver better products.What is a software development platform?A software development platform is a set of tools, technologies, and resources that enable software developers to create, test, deploy, and maintain software applications. This typically includes a programming language or framework, an integrated development environment (IDE), libraries, code repositories, debugging and testing tools, and deployment and hosting options.The goal of a software development platform is to provide developers with a comprehensive set of tools and resources that make it easier to develop high-quality software. By providing an integrated environment for software development, a software development platform can help developers streamline their workflows, reduce errors, and improve the speed and quality of their work. Additionally, many software development platforms also provide access to a community of developers who can offer support, advice, and resources for improving software development practices.What is an application development platform?An application development platform is a set of tools that enables developers to build, deploy, and manage custom software applications.This kind of platform typically includes a programming language, software development kits (SDKs), application programming interfaces (APIs), libraries, and testing and debugging tools.These tools are designed to make it easier for developers to create and deploy custom applications for a specific platform, such as a mobile device or web browser.The goal of an application development platform is to provide developers with a comprehensive set of tools that makes it easier to create high-quality applications that meet the specific requirements of a particular platform or device.What is software development collaboration?Software development collaboration is the process of working together as a team to create, test, and deploy software applications. It can involve a range of activities, such as brainstorming, planning, code reviews, testing, and deployment. Collaboration is an essential component of the software development process, as it allows multiple developers and stakeholders to work together.Effective collaboration requires open communication, clear goals and objectives, shared resources, and a commitment to working together as a team. Collaboration tools such as version control systems, collaborative coding environments, and project management software, can also provide a centralized location for team members to share information, coordinate tasks, and track progress.Ultimately, software development collaboration is essential to creating high-quality software that’s reliable, scalable, and meets the needs of end-users and stakeholders.FootnotesGitHub, “Research: quantifying GitHub Copilot’s impact on developer productivity and happiness”, 2022This is currently available in the EU with additional regions coming soon. Contact our sales team to learn moreThe Total Economic Impact™ Of GitHub Enterprise Cloud and Advanced Security, a commissioned study conducted by Forrester Consulting, 2022. Results are for a composite organization based on interviewed customers.\n\n\n\nGitHub for Teams
        Build like the best teams on the planet
        With CI/CD, Dependabot, and the world’s largest developer community, GitHub gives your team everything they need to ship better software faster.
        
    
  Get started with Team
  
  


    
      
  Sign up for free
  
  

    


      
    
  

  
    

      
          
            
            
          
          
            
            
          
          
            
            
          
          
            
            
          
          
            
            
          
          
            
            
          
      
      
        
          

        
        
          

        
        
          

        
        
          

        
        
          

        
        
          

        
        
          

        
      
      
        
          
          
        
        
          
          
        
        
          
          
        
      
  




  
    
    
  



  
    Compare Plans
    Ready to get your team started?

    
      
        
          
            
              
                GitHub Free
                Basics for teams and developers
                
                  
                    
                    Unlimited public/private repositories
                  

                  
                    
                    2,000 Actions minutes/month
                  

                  
                    
                    500MB of GitHub Packages storage
                  

                  
                    
                    Dependabot
                  

                  
                    
                    Community Support
                  
                
              
            
            
                
  Get started for free
  
  

            
          
          
            Need SAML, self-hosting, or priority support?
              
    Learn more about GitHub Enterprise 


          
        

        
          
            
              
                GitHub Team
                Advanced collaboration and deploymentfeatures for teams
                
                  Everything included in Free, plus ...
                  3,000 Actions minutes/month
                  2GB of GitHub Packages storage
                  GitHub Codespaces
                  Protected branches
                  Multiple reviewers in pull requests
                  Code owners
                  Draft pull requests
                  Required reviewers
                  Pages and Wikis
                  Web-based support
                

                
                  Featured add-ons
                

                

                    
  
    
      
        
          
        

        
          
            GitHub Secret Protection
          

          
        
      
    

    
      
        Prevent secret leaks before they leak. Remediate those that exist.
      


                    
  
    
      
        
          
        

        
          
            GitHub Code Security
          

          
        
      
    

    
      
        Fix vulnerabilities in your code before they reach production.
      


                
              
              
                  Continue with Team

              
            
          
          
            Need something else?
              
    Compare all plans 


          
        
      
    
  




  
  
    
      
        

        

        

        

        

        

      
    
  



  
  
    
      Collaboration
      Manage everything in one place
    

    

      
        
          
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
            
              
                
                  
                  
                
              
            
          
        
        
          
        
        
          
            Connect your favorite tools
            Build the way that works best for you with support for all your go-to integrations, including Slack, Jira, and more.
          
        
      

      
        
          
            
            
          
        
        
          
        
        
          
            Add your team in a click
            Seamlessly update permissions and add new users as you build, whether you’re on a team of two or two thousand.
          
        
      

      
        
          
  
  
  

        
        
          
        
        
          
            Speed up code review
            Step up your code quality with code review tools that fit right into your workflow.
          
        
      

      
        
          
  
  
  

        
        
          
        
        
          
            Plan together
            Make it easy for project managers and developers to coordinate, track, and update their work in one place—so projects stay on schedule.
          
        
      

    

    
      
        
  
  
  

        

        
          “As a team, we’re way more confident that we’re in tune. We can all see our work, feedback, and roadmap going through GitHub.”
          
            
  
  
  

            Lee Adkins, Head of Engineering
            Peak Money
          
        
      
    

  



  
  
    
      
        Automation
        Build CI/CD workflows that work for you
      
      
        
          
          
        

        
          
            
              
                
                
                  Checkout
                  Check out a Git repository at a particular version.
                
              
              
                name: Checkoutuses: actions/checkout@v2.1.0
              
            
          

          
            
              
                
                
                  Set up Node.js environment
                  Set up a Node.js environment and add it to the PATH, providing additional proxy support.
                
              
              
                name: Set up Node.js for use with actionsuses: actions/setup-node@v1.1.0
              
            
          

          
            
              
                
                
                  NPM Publish
                  Automatically publish packages to NPM.
                
              
              
                name: NPM Publishuses: JS DevTools/npm-publish@v1
              
            
          
        
      

      

        
          
            
              
                
              
            
            
              Streamline your CI/CD
              Build, test, and deploy projects on any OS, language, or cloud.
            
          
        

        
          
            
              
                
              
            
            
              Choose from thousands of actions
              Find community-built GitHub Actions workflows on GitHub Marketplace, or build your own.
            
          
        

        
          
            
              
                
              
            
            
              Respond to GitHub events
              Trigger workflows based on GitHub events, including push, issue creation, new releases, and more.
            
          
        

        
          
            
              
                
              
            
            
              Collaborate on workflows
              Build, share, improve, and reuse actions just like code.
            
          
        
      

      
          
    Explore GitHub Actions 


      

      
        
          
  
  
  

          

          
            “With GitHub Actions, deployments happen 75 percent faster—taking about 10 minutes compared to the 40 minutes required when they were done manually.”
            
              
  
  
  

              Pierre Laurac, Technical Lead
              Front App
            
          
        
      

    
  



  
  
    
      
        Security
        Stay focused on development
      
      
        
        
          
          
        
      

      

        
          
            
              
                
              
            
            
              Grant the right access to your team
              Easily grant, limit, or revoke access for collaborators inside and outside your company.
            
          
        

        
          
            
              
                
              
            
            
              Keep secrets safe
              Get alerts when secrets are committed to your repositories—and notify over 30 cloud service providers automatically.
            
          
        

        
          
            
              
                
              
            
            
              Find vulnerable dependencies
              Scan your dependencies automatically. When a vulnerability is found, we’ll open a pull request with suggested fixes.
            
          
        
      

      
          
    See how GitHub helps secure your applications 


      

      
        
          
  
  
  

          

          
            “GitHub’s Dependabot security updates are smarter than any other vulnerability tracking tools we’ve used.”
            
              
  
  
  

              Alberto Giorgi, Director of Engineering
              Tray.io
            
          
        
      

    

    
      

    
  



  

    
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
    

    
      
        Users
        Home to the world’s software teams
        Meet your developers where they already are. GitHub is home to over 40 million developers and the world’s largest open source community.

        
          
            
              150M+ million
              developers
            
          
          
            
              1B+ billion
              contributions
            
          
          
            
              4M+ million
              organizations
            
          
        
      
    

    
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
        
          
          
        
    
  



  
    Customer Stories
    You’re in good company
    

      
        
          
            
              Front App
              Customer Story
              


              Read story 

            
          
          
            
            
          
        
      

      
        
          
            
              Tray.io
              Customer Story
              


              Read story 

            
          
          
            
            
          
        
      
    

    
        
    Read more customer stories 


    

  




  
    
      Build like the best
      Get the complete developer platform

      
        
  
    
  Get started with Team
  
  


    
      
  Sign up for free
  
  

    



      
    
  


  
    
      Related resources

      

              
    
        
            
              
            

          
        

      GitHub Actions cheat sheet

      
        Everything you need to know about getting started with GitHub Actions.
      

      
        Learn more 

      

              
    
        
            
              
            

          
        

      Collaboration is the key to DevOps success

      
        In a recent TechTarget study, 70 percent of organizations reported they had adopted DevOps.
      

      
        Learn more 

      

              
    
        
            
              
            

          
        

      How healthy teams build better software

      
        Your culture is key to recruiting and retaining the talent you need to ship exceptional customer experiences.
      

      
        Learn more\n\n\n\nGitHub for Startups

    
    

    Scale your startupon GitHub
      Apply today to receive startup-friendly pricing on GitHub Enterprise, Advanced Security, and the support you need to build, scale, and deliver secure software.

      
        
            
    
  Apply now
  
  




      
    

  
    
      
        
          
              Ready-to-scale developer platform
              
                Our AI-powered developer platform is equipped with the tools and integrations to build, scale, and deliver secure software.
              
              
                Get up to 20 seats of GitHub Enterprise free for one year.
              
          
        
      
      
        
          
              Build securely from the start
              
                Scale confidently with AI-powered application security tools embedded in your development workflow.
              
                
                  Get up to 20 seats of GitHub Advanced Security 50% off for one year.
                
          
        
      
      
        
          
              Community to help you grow
              
                Join our global startup network of over 30k startups across 145+ countries.
              
              
                Gain access to exclusive events and resources designed to help you scale and succeed.
              
          
        
      
    
  

  


  
    
    
    
      
        
        
        
        
        
        Collaboration that goes beyond code
        Build your business fast with access to the world’s largest open source registry. Host it in the cloud with unlimited free public and private repositories. Start conversations, propose changes, and get feedback with a pull request.
          
    Learn more 


              
        
          

        
        
        It’s like night and day. It’s the collaboration, it’s the sharing, it’s the community. It’s all because of GitHub.
        
        Shanna Senior Director of Build Platform // Autodesk
      

      
    

      
        
          
      
        
          
            
            
          
        
      

        
      

    
    
      
        
        
        
        
        
        Full project management
        Turn ideas into products with project boards and tables that integrate directly into your workflow—and link directly to your Issues. Plan your sprints, break out individual tasks, track progress, and ship software fast.
          
    Learn more 


              
        
          

        
        
        GitHub is our primary tool for R&D project management.
        
        Director of Ecosystem Engineering // Shopify
      

      
    

      
        
          
      
      
        
          
          
            
            
          
        
      

        
      

    
    
      
        
        
        
        
        
        Powerful automation and CI/CD
        Get a complete DevOps toolkit with extensive automation and CI/CD that lives right next to your code. Automate any webhook and script your entire workflow from code merges to deployments.
          
    Learn more 


              
        
          

        
        
          One of the big benefits of using GitHub for CI/CD and security automation is that we don’t have to build, deploy, or maintain additional tools because they’re built-in to GitHub. That means developers can spend less time managing tools and more time writing code, which is how they’d prefer to spend their time.
        
        Software Engineer // Mercari
      

      
    

      
        
          
      
        
          
        
        
          
        
      

        
      

    
    
      
        
        
        
        
        
        Security trusted by the Fortune 100
        GitHub offers the most trusted platform that helps with compliance and keeps your code secure. Stay ahead of security issues, get advanced monitoring, and build your business with confidence.
          
    Learn more 


              
        
          

        
        
          Six months ago we had around 60 outstanding security CVEs. Today, we have zero.
        
        Senior Engineering Manager // Wealthsimple
      

      
    

      
        
          
              
  
  
  

              
  
  
  

        
      

    
    
      
        
        
        
        
        
        Build on the shoulders of giants
        With the world’s largest software registry, GitHub makes it simple to find the best open source projects to accelerate your workflows and scale your business fast.
          
    Learn more 


              
        
          

        
        
        There is a huge open source community of code and developers to work with and draw inspiration from on GitHub. To build better developer tools, we need a direct line to it. GitHub accelerates production, progress, and connections, bringing us closer to our users.
        
        Developer Advocate // Stripe
      

      
    

      
        
          
        
          
            
          
        

        
          
            
              
            
          
          
            
              
            
          
          
            
              
            
          
          
            
              
            
          
        

        
      

    
    
      
        
        
        
        
        
        Build like the best
        From Spotify to Slack and Shopify to Netflix, the world’s most innovative companies are built on GitHub. That’s because GitHub offers the most complete—and most trusted—developer platform.
        
        
      
    

      
        
          

    
      
        

      
      
        

      
      
        

      
      
        

      
      
        

      
      
        

      
    

        
      

  



  
    Get started today
      
        Apply now to receive startup friendly pricing on GitHub Enterprise, Advanced Security, and the support you need to build, scale, and deliver secure software.
      

      

  
    
  
    
      
        GitHub for Startups Sign-up Form
      
        
    
    
      
    
  
  

      
            
      
          
          
          

          
            GitHub for Startups Sign-up Form
          
          
            Eligibility
          
          
              
                Funding Stage: Must have received outside funding (up to Series B or earlier).
                New to GitHub Plans & Credits: Must be new to GitHub Enterprise or Advanced Security, or have not been on an Enterprise plan within the past 6 months, including not having received credits for either plan.
              
          

          
            Want to add an extra year of savings on Enterprise and Advanced Security? Refer your investor, accelerator, or incubator to become an approved GitHub for Startups partner and apply with their unique application link!
          

          
            If you’re accepted, you’ll receive an email with further instructions within 2-4 business days. If you have any questions, please reach out to our team.
          

          
              * - required field
          

          
            
              
                Company Name
              
              
                
              
            

            
              
                
                  First Name
                
                
                  
                
              

              
                
                  Last Name
                
                
                  
                
              
            

            
              
                
                  Email Address
                
                
                  
                  
                    Please use an email with your company domain. Personal emails or emails that do not match the GitHub Account owner will be rejected. GitHub sends all important communications to the primary email of the admin - if you need to update your primary email address, please follow these instructions before submitting your application.
                  
                
              

              
                
                  Role in Company
                
                
                  Please select
Cofounder CEO
Cofounder/CTO
Technical Lead
Cofounder (other)
                
              
            

            
              
                Company Website
              
              
                
                Applications with invalid websites and/or websites with inappropriate content will be rejected.
              
            

            
              
                Company overview
              
              
                
                In a few sentences, please share a bit more about your company.
              
            

            
              
                
                  Industry
                
                
                  Please select
Agriculture & Mining
Business Services
Computers & Electronics
Consumer Services
Education
Energy & Utilities
Financial Services
Food & Beverage
Government
Healthcare
Manufacturing
Media & Entertainment
Not for Profit
Real Estate & Construction
Retail
Software & Internet
Telecommunications
Transportation & Storage
Travel, Recreation, and Leisure
Whole & Distribution
Other
                
              

              
                
                  Latest Funding Round
                
                
                  Please select
Bootstrap
Pre-Seed
Seed
Series A
Series B
Series C or later
                
              
            

            
              
                
                  Total Funding Raised
                
                
                  Please select
<$1M USD
$1M-$2M USD
$2M-$5M USD
$5M-$10M USD
$10M-$25M USD
$25M+ USD
                
              
            

            
              
                Proof of Funding
              
              
                
                  Provide links from credible sources such as third-party news, startup investment platforms (e.g. Crunchbase), or investor portfolio pages or blog posts. Self-published content will not be accepted. If you are a stealth startup, please apply through your approved GitHub for Startups partner page.
              
            

            

            
              Account Information
              You will not be billed at this time. This information will be used for any paid add-ons or upgrades you choose to add (beyond the 20 seat offer) during or after the program.
            

            
              
  
    Country
  
  
    Please selectAfghanistan
Åland
Albania
Algeria
American Samoa
Andorra
Angola
Anguilla
Antarctica
Antigua and Barbuda
Argentina
Armenia
Aruba
Australia
Austria
Azerbaijan
Bahamas
Bahrain
Bangladesh
Barbados
Belarus
Belgium
Belize
Benin
Bermuda
Bhutan
Bolivia
Bonaire, Sint Eustatius and Saba
Bosnia and Herzegovina
Botswana
Bouvet Island
Brazil
British Indian Ocean Territory
Brunei Darussalam
Bulgaria
Burkina Faso
Burundi
Cambodia
Cameroon
Canada
Cape Verde
Cayman Islands
Central African Republic
Chad
Chile
China
Christmas Island
Cocos (Keeling) Islands
Colombia
Comoros
Congo (Brazzaville)
Congo (Kinshasa)
Cook Islands
Costa Rica
Côte d'Ivoire
Croatia
Curaçao
Cyprus
Czech Republic
Denmark
Djibouti
Dominica
Dominican Republic
Ecuador
Egypt
El Salvador
Equatorial Guinea
Eritrea
Estonia
Ethiopia
Falkland Islands
Faroe Islands
Fiji
Finland
France
French Guiana
French Polynesia
French Southern Lands
Gabon
Gambia
Georgia
Germany
Ghana
Gibraltar
Greece
Greenland
Grenada
Guadeloupe
Guam
Guatemala
Guernsey
Guinea
Guinea-Bissau
Guyana
Haiti
Heard and McDonald Islands
Honduras
Hong Kong
Hungary
Iceland
India
Indonesia
Iran
Iraq
Ireland
Isle of Man
Israel
Italy
Jamaica
Japan
Jersey
Jordan
Kazakhstan
Kenya
Kiribati
Korea, South
Kuwait
Kyrgyzstan
Laos
Latvia
Lebanon
Lesotho
Liberia
Libya
Liechtenstein
Lithuania
Luxembourg
Macau
Macedonia
Madagascar
Malawi
Malaysia
Maldives
Mali
Malta
Marshall Islands
Martinique
Mauritania
Mauritius
Mayotte
Mexico
Micronesia
Moldova
Monaco
Mongolia
Montenegro
Montserrat
Morocco
Mozambique
Myanmar
Namibia
Nauru
Nepal
Netherlands
New Caledonia
New Zealand
Nicaragua
Niger
Nigeria
Niue
Norfolk Island
Northern Mariana Islands
Norway
Oman
Pakistan
Palau
Palestine
Panama
Papua New Guinea
Paraguay
Peru
Philippines
Pitcairn
Poland
Portugal
Puerto Rico
Qatar
Reunion
Romania
Rwanda
Saint Barthélemy
Saint Helena
Saint Kitts and Nevis
Saint Lucia
Saint Martin (French part)
Saint Pierre and Miquelon
Saint Vincent and the Grenadines
Samoa
San Marino
Sao Tome and Principe
Saudi Arabia
Senegal
Serbia
Seychelles
Sierra Leone
Singapore
Sint Maarten (Dutch part)
Slovakia
Slovenia
Solomon Islands
Somalia
South Africa
South Georgia and South Sandwich Islands
South Sudan
Spain
Sri Lanka
Sudan
Suriname
Svalbard and Jan Mayen Islands
Swaziland
Sweden
Switzerland
Taiwan
Tajikistan
Tanzania
Thailand
Timor-Leste
Togo
Tokelau
Tonga
Trinidad and Tobago
Tunisia
Türkiye
Turkmenistan
Turks and Caicos Islands
Tuvalu
Uganda
Ukraine
United Arab Emirates
United Kingdom
United States Minor Outlying Islands
United States of America
Uruguay
Uzbekistan
Vanuatu
Vatican City
Venezuela
Vietnam
Virgin Islands, British
Virgin Islands, U.S.
Wallis and Futuna Islands
Yemen
Zambia
Zimbabwe
  



            

            

            
              
                
                  GitHub for Startups Partner
                
                
                  
                  Please provide the name of the accelerator/incubator/VC fund through which you are applying for GitHub for Startups benefits. If you were referred by a GitHub employee, please list their email here.
                
              
            

            
              
                GitHub Enterprise Slug
              
              
                
                Please provide your startup’s GitHub Enterprise account in the format github.com/enterprises/SLUG. You can sign up for an Enterprise trial. Ensure you sign up for the trial using personal accounts. Applications with invalid, organization, or managed user accounts will be rejected. See details on account types to learn more.
              
            

            

            
              
                
                    I hereby accept the GitHub Customer Agreement on behalf of my organization and confirm that I have the authority to do so. For more information about GitHub's privacy practices, see the GitHub Privacy Statement.
              
            

            
              
                
                    I agree to the GitHub for Startups Terms and Conditions.
              
            

            
            
            
            
            
            
            

            Sign up for GitHub for Startups
          
    

      
      



  Apply now
  
  




    

    
  
      
          
    
    
    Early-stage startup
    You must be an early-stage startup that has received outside equity funding (Series B or earlier).
    
  

      

      
          
    
    
    New to GitHub Enterprise and/or Advanced Security
    You must be new to Enterprise or Advanced Security, or have not been on either plan in the past 6 months, and you should not have received credits for either plan.
    
  

      


  

    
    
      
        
        
        
        
        
        Our partners help us create the unicorns of tomorrow
        We know the value of community. That’s why GitHub for Startups partners with leading investors, accelerators, and startup support organizations to help early-stage startups go from seed funding to unicorn status. Startups affiliated with a GitHub for Startups partner are eligible for additional discounts and benefits while in the program.
        
              

  
    
  
    
      
        GitHub for Startups Partner Application
      
        
    
    
      
    
  
  

      
            
      
          
          
          

          
            GitHub for Startups Partner Application
          

          
            
              
                
                  Contact First Name
                
                
                  
                
              

              
                
                  Contact Last Name
                
                
                  
                
              
            

            
              
                Contact Email Address
              
              
                
              
            

            
              
                Company Name
              
              
                
              
            

            
              
                Role
              
              
                
              
            

            
              
                Website
              
              
                
              
            

            
  
    HQ Country
  
  
    Please selectAfghanistan
Åland
Albania
Algeria
American Samoa
Andorra
Angola
Anguilla
Antarctica
Antigua and Barbuda
Argentina
Armenia
Aruba
Australia
Austria
Azerbaijan
Bahamas
Bahrain
Bangladesh
Barbados
Belarus
Belgium
Belize
Benin
Bermuda
Bhutan
Bolivia
Bonaire, Sint Eustatius and Saba
Bosnia and Herzegovina
Botswana
Bouvet Island
Brazil
British Indian Ocean Territory
Brunei Darussalam
Bulgaria
Burkina Faso
Burundi
Cambodia
Cameroon
Canada
Cape Verde
Cayman Islands
Central African Republic
Chad
Chile
China
Christmas Island
Cocos (Keeling) Islands
Colombia
Comoros
Congo (Brazzaville)
Congo (Kinshasa)
Cook Islands
Costa Rica
Côte d'Ivoire
Croatia
Curaçao
Cyprus
Czech Republic
Denmark
Djibouti
Dominica
Dominican Republic
Ecuador
Egypt
El Salvador
Equatorial Guinea
Eritrea
Estonia
Ethiopia
Falkland Islands
Faroe Islands
Fiji
Finland
France
French Guiana
French Polynesia
French Southern Lands
Gabon
Gambia
Georgia
Germany
Ghana
Gibraltar
Greece
Greenland
Grenada
Guadeloupe
Guam
Guatemala
Guernsey
Guinea
Guinea-Bissau
Guyana
Haiti
Heard and McDonald Islands
Honduras
Hong Kong
Hungary
Iceland
India
Indonesia
Iran
Iraq
Ireland
Isle of Man
Israel
Italy
Jamaica
Japan
Jersey
Jordan
Kazakhstan
Kenya
Kiribati
Korea, South
Kuwait
Kyrgyzstan
Laos
Latvia
Lebanon
Lesotho
Liberia
Libya
Liechtenstein
Lithuania
Luxembourg
Macau
Macedonia
Madagascar
Malawi
Malaysia
Maldives
Mali
Malta
Marshall Islands
Martinique
Mauritania
Mauritius
Mayotte
Mexico
Micronesia
Moldova
Monaco
Mongolia
Montenegro
Montserrat
Morocco
Mozambique
Myanmar
Namibia
Nauru
Nepal
Netherlands
New Caledonia
New Zealand
Nicaragua
Niger
Nigeria
Niue
Norfolk Island
Northern Mariana Islands
Norway
Oman
Pakistan
Palau
Palestine
Panama
Papua New Guinea
Paraguay
Peru
Philippines
Pitcairn
Poland
Portugal
Puerto Rico
Qatar
Reunion
Romania
Rwanda
Saint Barthélemy
Saint Helena
Saint Kitts and Nevis
Saint Lucia
Saint Martin (French part)
Saint Pierre and Miquelon
Saint Vincent and the Grenadines
Samoa
San Marino
Sao Tome and Principe
Saudi Arabia
Senegal
Serbia
Seychelles
Sierra Leone
Singapore
Sint Maarten (Dutch part)
Slovakia
Slovenia
Solomon Islands
Somalia
South Africa
South Georgia and South Sandwich Islands
South Sudan
Spain
Sri Lanka
Sudan
Suriname
Svalbard and Jan Mayen Islands
Swaziland
Sweden
Switzerland
Taiwan
Tajikistan
Tanzania
Thailand
Timor-Leste
Togo
Tokelau
Tonga
Trinidad and Tobago
Tunisia
Türkiye
Turkmenistan
Turks and Caicos Islands
Tuvalu
Uganda
Ukraine
United Arab Emirates
United Kingdom
United States Minor Outlying Islands
United States of America
Uruguay
Uzbekistan
Vanuatu
Vatican City
Venezuela
Vietnam
Virgin Islands, British
Virgin Islands, U.S.
Wallis and Futuna Islands
Yemen
Zambia
Zimbabwe
  




            
              
                Organization Type
              
              
                Please select
Incubator/Accelerator
VC
TechHub
Startup Ecosystem Partner
              
            

            
              
                
                  Portfolio Size
                
                
                  
                
              

              
                
                  Number of Investments Annually
                
                
                  
                
              
            

            

            
              
                
                    GitHub for Startups provides certain resources to approved startup partners and startups in their portfolio, which are subject to change. I hereby accept the GitHub Logo Policy and GitHub Privacy Statement policy agreements on behalf of my organization.
              
            

            
            
            
            
            
            

            Apply to become a GitHub for Startups Partner
          
    

      
      



  Apply to become a partner
  
  




      
    

      
        
          
    
      
        

      
      
        

      
      
        

      
      
        

      
      
        

      
    

        
      

  
  
    Frequently asked questions

        
  
    
      
      
        What’s included in the GitHub for Startups offer?
      
    
    
      All GitHub for Startups companies receive up to 20 seats of GitHub Enterprise for free for 12 months*. Additionally, those interested can also redeem 20 seats of Advanced Security for 12 months at 50% off.  Learn more about the features and capabilities of GitHub Enterprise and Advanced Security.
*Startups affiliated with a GitHub for Startups VC or accelerator partner may be eligible for additional discounts and benefits. See list of partners. Don’t see your partner? Share this link to refer your partner to the GitHub for Startups partner program.
      
    
  


        
  
    
      
      
        Who is eligible to apply?
      
    
    
      Startups that meet the following criteria are eligible to apply for the GitHub for Startups program:

Received outside equity funding (up to Series B)
New to GitHub Enterprise or Advanced Security, or have not been on either plan within the past 6 months, including not having received credits for either plan.
Must not have previously received credits for GitHub Enterprise or Advanced Security.

      
    
  


        
  
    
      
      
        What if my startup is not eligible for GitHub for Startups? Are there other resources for me?
      
    
    
      If you’re not currently eligible for GitHub for Startups, please feel to sign up for a trial.
      
    
  


        
  
    
      
      
        How can my organization become a GitHub for Startups partner?
      
    
    
      Any investor, accelerator, or startup support organization is eligible to apply for the GitHub for Startups program. Apply here.
      
    
  


        
  
    
      
      
        Startup Program Terms & Conditions
      
    
    
      
Subscription Model: We do not support the pay-as-you-go billing model. By applying, you agree to switch to a subscription-based pricing model for the duration of your participation in the GitHub for Startups program.
Metered Add-ons: Metered product add-ons (like Copilot, larger runners, Codespaces, etc.) are not included in the program, and will be charged at standard rates.
Managed Users: Enterprise Accounts with managed users are not supported.
Payment Method: You must have a valid payment method on file\n\n\n\nSolutionsBy industryGitHub for NonprofitsDrive social impact one commit at a timeGitHub for Nonprofits enables organizations to leverage technology to drive forward their missions and accelerate human progress. Verified nonprofits get exclusive access to a free GitHub Team plan or 25% off the GitHub Enterprise cloud plan.Join GitHub for NonprofitsExclusive discounts for verified nonprofitsFree access to a GitHub Team planReceive access to advanced collaboration tools for individuals and organizations.25% off GitHub Enterprise CloudGet access to additional security, administrative, and customization options.Which plan is for you?GitHub Team offers collaboration for growing teams while GitHub Enterprise Cloud adds additional Actions and security features.Let GitHub power your missionInvesting in GitHub is not just about adopting a tool—it's about empowering nonprofits to drive positive change and advance the Sustainable Development Goals. Join us at GitHub, where technology meets purpose, and together, let's create a more sustainable and equitable future for all.Increase visibility and widen impactBy hosting projects on GitHub, nonprofits can increase their visibility and reach a broader audience. Whether it's sharing code libraries, publishing research, or showcasing success stories, GitHub provides nonprofits with a platform to amplify their impact and attract support from donors, funders, volunteers, and partners.Tap into the open source communityGitHub is home to the largest open source community on the planet - over 100 million developers. Whether you’re scaling your organization or just learning how to code, GitHub is your home.  Join the world’s largest developer platform to build the innovations that empower humanity.“GitHub provides us with a platform to amplify the critical needs of forcibly displaced persons and attract support from donors, volunteers, and partners, while also tapping into skills and resources of an incredible developer community.
Seema IyerUSA for UNCHRGet started todayBuild your nonprofit on the world's most advanced developer platform. Verified nonprofits get exclusive access to a free GitHub Team plan or 25% off the GitHub Enterprise cloud plan.Join GitHub for NonprofitsContact usFrequently Asked QuestionsWho qualifies for GitHub for Nonprofits?Nonprofit organizations that are 501(c)(3) or equivalent and are non-governmental, non-academic, non-commercial, non-political in nature, and have no religious affiliation are eligible for a free GitHub Team Plan with unlimited private repositories and unlimited users or 25% off of GitHub Enterprise Cloud.What if our organization does not qualify for nonprofit status but works in the social sector?At this time, we only support registered 501(c)(3) or equivalent organizations. In the future, we hope to provide additional programmatic support to social sector organizations.What are the different GitHub pricing plans?GitHub offers free and paid plans for storing and collaborating on code. Some plans are available only to personal accounts, while other plans are available only to organization and enterprise accounts. For more information about accounts, see "Types of GitHub accounts."I have another question, how do I reach the team?If you would like to learn more about our programming, partner with us, or get in touch, contact our team today.\n\n\n\nSolutionsBy use caseGitHub DevSecOpsThe AI-powered DevSecOps platformWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place. 

Request a demoSee plans & pricingIntegrate AI-powered security features directly into your development workflow, eliminating the need for third-party tools.Code scanningFind and fix security issues before production with static application security testing (SAST).
Secret scanningHunt, revoke, and prevent leaked secrets with automatic push protection.
Supply chain securityKeep vulnerable dependencies out of your applications with software composition analysis (SCA).
Logos for EY Mercado Libre 3M KPMG TELUSGive AI the heavy liftingOrganizations struggle to fix their backlog of vulnerabilities, despite the risks. Coming next, security managers can burn down years of security debt in one simple sprint.Discover GitHub CopilotFound means fixedDon’t just find vulnerable code, fix it. GitHub Advanced Security flags problems and suggests AI-powered solutions, freeing teams to ship more secure software faster.Explore AI-powered securityPump your team’s security prowessDevelopers aren’t security professionals. With GitHub Advanced Security, you can offload the technical complexity and give them the freedom to build and ship great software.
Discover code scanning autofixYour workflows, your wayWith support for more than 17,000 app integrations, GitHub Advanced Security accommodates your team’s tooling preferences.Explore GitHub Marketplace7xfaster vulnerabilities fixes 2.4fewer false positives than the industry standard20Mrepositories that have enabled secret scanning“We prefer to have security that leverages what developers are already using rather than trying to force them to use some other tool.
Emilio EscobarChief Information Security Officer @ DatadogApplication security made simplerEliminate toolchain cost and complexity with native security tools for GitHub Enterprise and Azure DevOps customers.
Request a demoSee plans & pricingAdditional resourcesDevSecOps explainedExplore how DevSecOps builds on the ideas of DevOps by applying security practices throughout the SDLC.
Learn moreMeet the companies who build with unified DevSecOpsLeading organizations choose GitHub to plan, build, secure, and ship software.
Read customer storiesDiscover how AI is changing the security landscapeFrom prevention to remediation, see how AI can help fix issues instantly.Watch webinar\n\n\n\nSolutionsBy use caseGitHub DevOpsThe unified platform for your DevOps lifecycle Build, scale, and deliver more secure software with GitHub's unified AI-powered developer platform.Start a free trialContact salesKeep developers in the flow with automation, AI, collaboration tools, and more.Increase collaborationGet the tools you need to facilitate collaboration among teams.
Eliminate barriersHarness the power of AI-powered coding to empower developer creativity and innovation.
Reduce context switchingBoost productivity with a single, integrated developer platform with powerful native tools to keep developers in the flow.
Logos for Ford, Shopify, NASA, Vercel, and SpotifyDrive innovation with AI-powered developer toolsAI-driven code suggestions enhances job satisfaction and focus for 60-75% of developers, reducing frustration and enabling more rewarding work.Explore GitHub CopilotBuilt-in securityManage the SDLC with automated security tools. Find and fix vulnerabilities quickly and efficiently with security checks integrated into every step of the developer's workflow.Explore GitHub Advanced SecurityStreamline team collaborationHelp developers and operations teams more regularly communicate and provide feedback about timelines and goals so everyone is responsible for the project’s success.Explore collaboration tools88%of developers experience increased productivity75%reduced time spent managing tools1minset-up time for largest repo with GitHub CodespacesBuild and innovate with a leader in the Gartner® Magic Quadrant™ for DevOps PlatformsRead the report“The availability of out-of-the-box integrations with our existing tooling is a big part of GitHub’s appeal. GitHub really helps bring DevOps to life.Danilo SuntalManufacturing Data Flow Product and Platform, P&GDevOps strategies, amplified by GitHub toolsTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools you know and love—or discover new ones.
Start a free trialContact salesAdditional resourcesFind the right DevOps platformNarrow your search with the 2024 Gartner® Magic Quadrant™ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsBy use caseGitHub CI/CDThe complete CI/CD solutionBuild, test, and deploy software with simple and secure enterprise CI/CD, all on the complete development platform.
Start a free trialContact salesStreamline, secure, and deploy with confidence: automate your software delivery pipelineTurn code into softwareAutomatically trigger builds on every commit with workflow builder.
Secure and improveEnd-to-end testing for security, code quality, performance, and functionality.
Ship with confidenceAutomate deployments from start to finish to one or multiple cloud providers.
Build fast, stay secureEasy-to-set-up and simple-to-maintain CI/CD that helps your developers build more secure code from the start without sacrificing speed.Explore GitHub Advanced SecurityContinuous testing made simpleTrack everything from code quality to your security profile with end-to-end testing built to keep you secure and in compliance at every stage.Deploy software with confidenceSeamless CI/CD deployment automation makes it simple to deliver secure software with all cloud providers so you can scale confidently.Explore GitHub Actions90%+Fortune 100 choose GitHub100M+Developers call GitHub home420M+Repositories on GitHubPowerful CI/CD with GitHub EnterpriseThe complete developer platform to build, scale, and deliver secure software.Start a free trialContact salesAdditional resourcesDevOps tips for Engineering leaders6 DevOps tips to help engineering leaders deliver software at scale
Get the report Ship secure software fastHow developer-first supply chain security helps you secure faster
Get the report CI/CD Solution Demo How to automate CI/CD and security with GitHub Enterprise
Get the report\n\n\n\nSolutionsUse CasesGitHub solutionsSolve your business challenges with proven combinations of GitHub solutions, empowering your team to ship secure software quickly and accelerate innovation.  Start a free trialContact salesDevSecOpsWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place.
Learn moreDevOpsScale and deliver more secure software with GitHub's unified AI-powered developer platform.Learn moreCI/CDTest and deploy software with simple and secure enterprise CI/CD.Learn moreRelated solutionsHealthcareBy incorporating security checks into developer workflows, you can build secure communication channels between patients and providers.Learn moreFinancial ServicesWith an AI-powered developer platform, you can build innovative financial solutions that drive economic growth.Learn moreManufacturingWith robust CI/CD that can handle the complex needs of manufacturing, you can securely transform operations at scale.Learn more2.4xmore precise leaked secrets found with fewer false positives~25%increase in developer speed with GitHub Copilot1minset-up time for largest repo with GitHub Codespaces+88%more productivity with GitHub Enterprise Get startedTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love—or discover new ones.
Start a free trialContact sales\n\n\n\nSolutionsBy industryHealthcare solutionsEmpower healthcare development with a secure, AI-powered platformBy incorporating AI into developer workflows, you can build secure patient care solutions at scale. Start a free trialContact salesA single, integrated, enterprise-ready platformEnhance patient careFacilitate rapid innovation so you can implement the latest technologies more reliably.Unlock engineering potentialEmpower developer collaboration, productivity, and creativity at scale.Streamline healthcare developmentFocus on delivering impactful patient outcomes by priming your engineering staff for growth.Lorem IpsumDrive healthcare innovation with AIBy enabling your developers to code up to 55% faster, you can stay ahead of advancements and innovate services while remaining secure and compliant. 
Explore GitHub CopilotProtect patient dataCreate more secure healthcare applications by detecting vulnerabilities in your codebase and preventing credentials from being exposed.
Explore GitHub Advanced SecurityAutomate manual tasksMake life easier for developers. Reduce time-to-market and improve responsiveness to patients and stakeholders by using enterprise-ready, scalable CI/CD.
Explore GitHub Actions+88%more productivity with GitHub Enterprise 1minset-up time for largest repo with GitHub Codespaces~25%increase in developer speed with GitHub CopilotRead how Doctolib fostered a culture of reusability and simplified the CI/CD process with GitHub.Read the customer story3M transforms its software toolchain to bring cutting-edge science to customers, faster.Read storyPhilips builds and deploys digital health technology faster with innersource on GitHub.Read storyGitHub brings DevOps to life and enables streamlined developer experiences at Procter & Gamble.Read story“Healthcare organizations want a service that provides a world-class experience for patients and improves people’s lives. GitHub helps us meet and exceed those expectations.David TerolProgram director at the Philips Software Center of ExcellenceDevOps strategies for healthcare innovation, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love—or discover new ones.
Start a free trialContact salesAdditional resourcesFind the right DevOps platformNarrow your search with the 2024 Gartner® Magic Quadrant™ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsBy industryFinancial servicesTransform financial services with a secure, AI-powered solution By embedding AI into developer workflows, you can accelerate secure financial innovation at scale. 
Start a free trialContact salesBuild secure financial services by having an all-in-one platform that eliminates the need for third-party tools and keeps developers in the flow.Reduce riskAvoid data breaches and fraud by incorporating security practices throughout the development process.
Increase speed and efficiencyEnable faster development and deployment of new features and services by leaving the manual, repetitive tasks to AI.
Streamline operationsImprove efficiency and enhance developer creativity by working on a single, secure, AI-powered platform.
Logos for Itaú Mercari Mercado Libre Stripe and PlaidGet ahead with AI-powered innovationStay at the forefront of technological advancements by using AI-powered tools to innovate services while remaining secure and compliant.Explore GitHub CopilotEnhance regulatory compliance and securityMeet regulatory standards and secure your supply chain by leveraging  AI-powered compliance features and natively-embedded application security testing.Explore GitHub Advanced SecurityAccelerate software developmentAutomation is everything. Reduce time-to-market and improve responsiveness to customers by using enterprise-ready, scalable CI/CD.Explore GitHub ActionsRead how Societe Generale tripled their releases and cut development time by more than half.Read the customer story“We used to have other tools as well, but GitHub offers us with an all-in-one solution that provides developers a single source of truth for security notifications and code management.David HeitzingerHead of Agile Engineering Support // Raiffeisen BankDevOps strategies for financial innovation, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love—or discover new ones.Start a free trialContact salesFind the right DevOps platformNarrow your search with the 2024 Gartner® Magic Quadrant™ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsBy industryManufacturing solutionsAdvance manufacturing with a complete, AI-powered platformBy integrating AI into developer workflows, you can securely transform manufacturing operations at scale.Start a free trialContact salesSupport manufacturing's complex needs with an all-in-one platform that eliminates third-party tools, keeping developers in flow.Enhance industrial efficiencyEnsure the reliable implementation of cutting-edge technologies by incorporating security practices throughout the development process. 
Move fast, safelyBuild at the speed of innovation and enable faster deployment by embedding AI into developer workflows.
Reduce context switchingBoost efficiency and increase creativity by enabling developers to plan, track, and build in a single, integrated, AI-powered platform.
Logos for 3M P&G Decathlon Ford and BoltDrive industrial innovationBoost developer productivity and innovation with AI-powered tools, while remaining secure and compliant.Explore GitHub CopilotSecure your supply chainMinimize the risk of disruptions and data breaches by using robust security features and best practices, embedded directly into the developer workflow.Explore GitHub Advanced SecuritySupport developers with automation Transform continuous integration processes by using enterprise-ready, scalable CI/CD—now with Arm-hosted runners.Explore Arm64 on GitHub ActionsRead how Procter & Gamble streamlined the developer experience and improved developer satisfaction and security. Read the customer story“You don’t have to go out to a separate project management tool. You don’t have to go to a spreadsheet, or a Microsoft project, or into Jira. It’s all on GitHub. It’s made us more productive.Tina Beamer3M IT manager of operations and qualityDevOps strategies for manufacturing innovation, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love—or discover new ones.Start a free trialContact sales\n\n\n\nSolutionsBy industryGovernment solutionsEmpowering government agencies with secure, collaborative software developmentWith seamless collaboration and robust compliance, GitHub helps government agencies build and innovate securely on a single, AI-powered platform.Start a free trialContact salesTransforming government software development with security, collaboration, and flexibilitySecure and compliant development With FedRAMP authorization and industry-leading security features, GitHub meets the highest standards of compliance and protection. 
Efficient collaboration across teams GitHub’s collaborative platform enables seamless code sharing, review, and feedback within your agency or with external partners.
Flexible deployment options No matter where you need to host, GitHub Enterprise offers flexible deployment options to meet your agency’s unique operational requirements.Protect sensitive data Help keep your agency’s code secure with built-in vulnerability scanning, secret detection, and compliance monitoring, all seamlessly integrated into your development workflow..
Explore GitHub Advanced SecurityAccelerate development with AI-powered assistanceWhether drafting complex algorithms or automating tasks, GitHub Copilot empowers your agency to deliver mission-critical software with speed and precision.Explore GitHub CopilotAutomated, secure CI/CDWith customizable workflows and integrations, your agency can streamline operations and ensure consistent, high-quality code delivery.Explore GitHub ActionsLearn how the VA modernizes its approach to make healthcare more accessible to millions of veterans.
Read the customer story“We reduced our deployment time significantly. To deliver quickly, using GitHub and Azure DevOps for our DevSecOps process, CI/CD, infrastructure, code, and automation was the key.Shamal SiwanLead DevOps Engineer/Solutions Architect  //  California Department of TechnologyDevOps strategies for government agencies, amplified by GitHubTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter with the tools they know from day one—or discover new ones.
Contact salesStart a free enterprise trialAdditional resourcesFind the right DevOps platformNarrow your search with the 2024 Gartner® Magic Quadrant™ for DevOps Platforms report.Get the Gartner reportWhat is DevOps?By bringing people, processes, and products together, DevOps enables development teams to continuously deliver value.Learn more about DevOpsDiscover innersourceThis practice empowers developers to save time and energy by bringing methodologies from open source into their internal development.
Read more on Innersouce\n\n\n\nSolutionsIndustriesIndustry solutionsDiscover how GitHub’s industry solutions can help you improve efficiency, reduce costs, and capture new market opportunities.Start a free trialContact salesHealthcareBy incorporating security checks into developer workflows, you can build secure communication channels between patients and providers.Learn moreFinancial ServicesWith an AI-powered developer platform, you can build innovative financial solutions that drive economic growth.Learn moreManufacturingWith robust CI/CD that can handle the complex needs of manufacturing, you can securely transform operations at scale.Learn moreGovernmentWith seamless collaboration and robust compliance, GitHub helps government agencies build and innovate securely on a single, AI-powered platform.Learn moreRelated solutionsDevSecOpsWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place.
Learn moreDevOpsScale and deliver more secure software with GitHub's unified AI-powered developer platform.Learn moreCI/CDTest and deploy software with simple and secure enterprise CI/CD.Learn moreExecutive InsightsGet expert perspectives. Stay ahead with insights from industry leaders.Learn moreNarrow your DevOps platform search with this Gartner reportRead the report2.4xmore precise leaked secrets found with fewer false positives~25%increase in developer speed with GitHub Copilot1minset-up time for largest repo with GitHub Codespaces+88%more productivity with GitHub Enterprise Get startedTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love—or discover new ones.Start a free trialContact sales\n\n\n\nAI-powered platform solutions to solve your company’s challengesGitHub empowers your team to deliver software faster and more efficiently, while maintaining robust security and compliance. Start a free trialContact salesGitHub scales with teams of any size.EnterprisesBuild, scale, and deliver secure software faster with GitHub’s AI-powered developer platform.Learn moreTeamsWith CI/CD, Dependabot, and the world's largest developer community, GitHub provides everything your team needs to ship secure software faster.Learn moreStartupsGo from idea to IPO in one place, complete with personalized onboarding, office hours, and tailored product guidance.Learn moreThe enterprise-grade platform that developers know and love.Learn more about GitHub EnterpriseSolving industry-specific challenges
View allHealthcareBy incorporating security checks into developer workflows, you can build secure communication channels between patients and providers.Learn moreFinancial ServicesWith an AI-powered developer platform, you can build innovative financial solutions that drive economic growth.Learn moreManufacturingWith robust CI/CD that can handle the complex needs of manufacturing, you can securely transform operations at scale.Learn moreThe solutions you need to build what you wantView allDevSecOpsWith comprehensive security tools built into the developer workflow, you can build, secure, and ship all in one place.
Learn moreDevOpsScale and deliver more secure software with GitHub's unified AI-powered developer platform.Learn moreCI/CDTest and deploy software with simple and secure enterprise CI/CD.Learn moreAdopted by the world's leading organizations3M transforms its software toolchain to bring cutting-edge science to customers, faster.Read storyPhilips builds and deploys digital health technology faster with innersource on GitHub.Read storyGitHub brings DevOps to life and enables streamlined developer experiences at Procter & Gamble.Read storyGet startedTrusted by 90% of the Fortune 100, GitHub helps millions of developers and companies collaborate, build, and deliver secure software faster. And with thousands of DevOps integrations, developers can build smarter from day one with the tools they know and love—or discover new ones.
Start a free trialContact sales\n\n\n\nAITopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentMachine Learning (ML) in Software DevelopmentDiscover how machine learning (ML) is used in software development to optimize workflows and improve user experiences. Gain insights from real-world examples, learn how developers are integrating ML models into existing pipelines, and explore the future potential of ML in software development.Learn moreAI Code ReviewsDiscover how AI code reviews can boost developer productivity and speed up workflows by automating error detection and providing real-time feedback.Learn moreWhat is Natural language processing (NLP)?Learn why natural language processing (NLP) is becoming an indispensable tool for developers. Learn moreWhat are AI models?Learn how AI models help organizations identify data patterns, automate workflows, solve complex problems, forecast outcomes, and enhance decision making.Learn moreEnhancing software development with retrieval-augmented generationLearn how Retrieval Augmented Generation (RAG) improves coding, debugging, and code reviews.Learn moreWhat are AI agents?Discover how AI agents transform software development by automating workflows and enhancing security. Explore the different types of AI agents, learn how they integrate into development environments, and see real-world examples of their impact. Learn best practices for using AI agents and get a glimpse into the future of AI in development and security.Learn moreWhat is AI code generation?AI code generation uses machine learning models to provide context-based code suggestions.Learn moreAI coding tools for beginner and expert codersHow beginner and expert coders use AI coding tools to code faster and ship great software.Learn more\n\n\n\nDevOpsTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentWhat is CI/CD?Continuous Integration and Continuous Delivery/Deployment or (CI/CD) automates builds, testing, and deployment so you can ship code changes faster and reliablyLearn moreWhat is a DevOps engineer and what does a DevOps engineer do?A DevOps engineer enables collaboration and innovation within an organization.Learn moreWhat is Continuous Deployment?Continuous deployment (CD) is a process that uses automated testing to validate if changes to a codebase are secure, correct, and stable for deployment to a production environment.Learn moreWhat is the DevOps Model? Exploring foundational practices in DevOpsGitHub provides the tools required to be a mature DevOps organization. Discover the DevOps model that separates successful DevOps teams from those that fail.Learn moreWhat is DevSecOps?DevSecOps combines development, security, and operations to automate security integration across all phases of the software development lifecycle (SDLC).Learn moreWhat is containerization?Containers enable DevOps developers and system administrators to build, test, deploy, and maintain applications quickly, securely, and efficiently.Learn moreWhat is DevOps automation?DevOps automation is a modern approach to software development that uses tools and processes to automate tasks and streamline workflows.Learn moreWhat is agile methodology?Learn what agile is, its benefits, why it’s so popular, and how you can apply it in software development and other kinds of work.Learn moreWhat is a DevOps pipeline? A complete guideLearn how to transform your organization and deliver software faster by combining processes, tooling, and automation in a DevOps Pipeline.Learn moreWhat is DevOps?DevOps is a set of practices, methodologies, and tools that optimize software application delivery by integrating software development and IT operations processes. Learn moreDevOps monitoring tools: Automating your DevOps monitoring processesUse GitHub as your approach to developing, testing, and deploying applications through comprehensive and real-time monitoring systems. Workflows are the foundation of automation and DevOps, and monitoring is the bedrock.Learn moreThe fundamentals of continuous integration in DevOpsContinuous Integration (CI) is a practice allowing developers to integrate code into a shared repository regularly. Get to know the fundamentals of what makes this process successful.Learn morePrevious12Next\n\n\n\nSecurityTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentWhat is a Data Breach?Discover how data breaches occur, their impact on businesses, and the industries most at risk. Learn about common attack methods and tools and best practices for securing sensitive data.Learn moreWhat is risk-based vulnerability management (RBVM)? Discover how risk-based vulnerability management (RBVM) helps organizations focus on the most critical security risks to optimize protection and allocate resources effectively. Learn moreWhat is Code Scanning?Code scanning is essential because it helps developers and security teams find security vulnerabilities and errors. Keep reading for an overview of what code scanning is, how it works, and the benefits it provides. Plus, take a closer look at some code scanning tools and explore ways to enhance software security.Learn moreWhat is a security risk assessment?Learn what a security risk assessment is, how to perform one effectively, and the key benefits of identifying and mitigating potential risks.Learn moreWhat is Cross-Site Scripting (XSS)Discover how cross-site scripting (XSS) compromises web security and impacts users and organizations. Gain insights from real-world examples and learn about best practices to safeguard your applications.Learn moreWhat is secret scanning?In today's digital landscape, protecting sensitive information is crucial for maintaining the integrity and security of an organization’s software systems.Learn moreDynamic application security testing (DAST)DAST is an AppSec method that simulates attacks to test web apps for security issues.Learn moreWhat Is Incident Response?In today’s evolving threat landscape, a robust incident response plan is essential to minimize damage, protect sensitive data, and ensure business continuity.Learn moreWhat is software supply chain security?Learn how software supply chain security helps organizations protect the safety, reliability, and integrity of their software supply chains from cybersecurity threats.Learn moreWhat is shift left?Explore the benefits of shift left in software development, like early testing and efficient scanning strategies within the software development lifecycle.Learn moreWhat is software composition analysis (SCA)?Software composition analysis (SCA) helps developers identify and manage security vulnerabilities in open source software, leading to more compliant, better quality code. Learn moreWhat is security testing?Learn about security testing with our guide to security testing types, tools, and scanning methods, and best practices and trends for greater software security.Learn morePrevious12Next\n\n\n\nSoftware DevelopmentTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentWhat are code repositories?Ever wonder where all that code you write actually lives? Welcome to the world of code repositories.Learn moreWhat is the SDLC?Learn about the software development lifecycle (SDLC) and gain valuable insights into its essential phases, methodologies, and best practices. Enhance your understanding of this crucial process to drive successful software development projects.Learn moreWhat is cloud native?Cloud native is an approach to building and running scalable applications in dynamic environments like public, private, or hybrid clouds, using containers, microservices, and DevOps practices.Learn moreWhat is Platform engineering?Learn what platform engineering is and how it empowers developers by creating internal developer platforms, improving workflows, and reducing operational bottlenecks. Explore the benefits for developers and IT managers alike.Learn moreHow to accelerate innovation with innersourceOrganizations around the world are accelerating their development cycles and tapping into new wells of innovation within their companies through "innersource" projects that share code and resources internally, enabling cross-team collaboration and contributions.Learn moreWhat is Open Source Software (OSS)?Get an overview of open source software (OSS) with this guide—and explore tips for getting started.Learn moreAn introduction to innersourceOrganizations worldwide are incorporating open source methodologies into the way they build and ship their own software.Learn moreWhat is software development?Explore software development basics including tools, security, steps, and impact on industries.Learn moreWhat is Version Control?Learn how version control systems and software help track changes, support collaboration, and ensure code integrity throughout the development process.Learn moreTools and techniques for effective code documentationLearn about code documentation and why it’s essential for delivering quality software.Learn moreWhat is software architecture?Learn how software architecture helps developers build scalable, efficient systems using best practices, key components, and common styles and patterns.Learn moreWhat is a programming language?A programming language is a set of instructions that enables humans to communicate commands to a computer in software development.Learn morePrevious12Next\n\n\n\nAll TopicsTopicsAll TopicsAIDevOpsSecuritySoftware DevelopmentMachine Learning (ML) in Software DevelopmentDiscover how machine learning (ML) is used in software development to optimize workflows and improve user experiences. Gain insights from real-world examples, learn how developers are integrating ML models into existing pipelines, and explore the future potential of ML in software development.Learn moreWhat is a Data Breach?Discover how data breaches occur, their impact on businesses, and the industries most at risk. Learn about common attack methods and tools and best practices for securing sensitive data.Learn moreAI Code ReviewsDiscover how AI code reviews can boost developer productivity and speed up workflows by automating error detection and providing real-time feedback.Learn moreWhat is risk-based vulnerability management (RBVM)? Discover how risk-based vulnerability management (RBVM) helps organizations focus on the most critical security risks to optimize protection and allocate resources effectively. Learn moreWhat is Code Scanning?Code scanning is essential because it helps developers and security teams find security vulnerabilities and errors. Keep reading for an overview of what code scanning is, how it works, and the benefits it provides. Plus, take a closer look at some code scanning tools and explore ways to enhance software security.Learn moreWhat is Natural language processing (NLP)?Learn why natural language processing (NLP) is becoming an indispensable tool for developers. Learn moreWhat are AI models?Learn how AI models help organizations identify data patterns, automate workflows, solve complex problems, forecast outcomes, and enhance decision making.Learn moreWhat is a security risk assessment?Learn what a security risk assessment is, how to perform one effectively, and the key benefits of identifying and mitigating potential risks.Learn moreWhat is Cross-Site Scripting (XSS)Discover how cross-site scripting (XSS) compromises web security and impacts users and organizations. Gain insights from real-world examples and learn about best practices to safeguard your applications.Learn moreWhat is secret scanning?In today's digital landscape, protecting sensitive information is crucial for maintaining the integrity and security of an organization’s software systems.Learn moreDynamic application security testing (DAST)DAST is an AppSec method that simulates attacks to test web apps for security issues.Learn moreWhat is CI/CD?Continuous Integration and Continuous Delivery/Deployment or (CI/CD) automates builds, testing, and deployment so you can ship code changes faster and reliablyLearn morePrevious123456Next\n\n\n\nEbooks & WhitepapersBrowse our collection of Ebooks and Whitepapers for valuable industry knowledge, trends, and strategies to help you stay ahead and make informed decisions.Filters Open FiltersContent TypeContent TypeWhitepapersEbooksCategoryCategoryAICloudDevOpsGitHub ActionsGitHub Advanced SecurityGitHub EnterpriseInnersourceOpen SourceSecuritySoftware DevelopmentClear allApplyTraining and onboarding developers on GitHub CopilotWhitepaperDevelopers work alongside Copilot to write code, generate tests, fix bugs, create documentation, and much more. To fully realize Copilot’s potential, entire teams, not just individual developers, must adopt new skills. While Copilot may be a tool like any other, generative AI presents unique adoption challenges that require specific solutions.Learn more6 common pitfalls for DevOps teams and how to avoid themEbookDevOps is a transformative practice—and not only because it helps to build better software. It also aligns teams, from IT to engineering to security, removing siloed workstreams and promoting collaboration. As great as this sounds, pulling together your DevOps processes and tools requires some practice to make your strategy perfect.
Learn moreThe engineering leader’s guide to AIEbookAI coding is here. Developers have embraced it and already use various tools for AI code generation to augment their coding capabilities and offload some of their more mundane tasks.Learn moreDetecting and Preventing Secret Leaks in CodeEbookIn today’s interconnected digital landscape, safeguarding access to systems and sensitive data is more critical—and more challenging—than ever. With the increasing footprint of code and rapid software development cycles, malicious actors have an expanding array of opportunities to exploit vulnerabilities.
Learn moreGitHub case study: Enhancing customer support with AIEbookGitHub Copilot empowers engineers to help their organizations achieve better business outcomes for their customers. But AI doesn't simply help engineers do the same work more quickly; it can help them get to places they haven't been able to get to before! We're excited to share how our GitHub customer success team has been using AI to better serve our customers.Learn moreWhat AI Means for the Future of DevOpsEbookHarnessing AI's full potential isn't just about boosting productivity in isolated phases—it's about driving real organizational value across the entire software development lifecycle.Learn moreGo beyond code scanning with AI-powered AppSecWhitepaperUnder pressure to ship and meet business demands, development teams often introduce more security vulnerabilities to code than they fix. In other words, they're racking up security and technical debt. It's a difficult cycle to break.
Learn moreTaking GitHub Copilot to the stars, not just the skiesEbookEmbarking on a successful GitHub Copilot launch requires meticulous planning and execution.
Learn moreAt the forefront of DevOps innovation and excellenceWhitepaperBuild and innovate with a Leader in the Gartner® Magic Quadrant™ for DevOps PlatformsLearn moreAI Will Not Replace Software Engineers (and May, in Fact, Require More)WhitepaperExplore the current and future impact of AI on developers and see why humans will always be essential to delivering innovative software in this report.
Learn more5 DevOps tips to help teams deliver software at scaleEbookThere are real-world challenges for organizations seeking success in DevOps. In this info sheet, explore 5 DevOps tips to help teams deliver software at scale.
Learn moreModernizing COBOL with GitHub CopilotEbookExplore how GitHub Copilot can transform your legacy systems. Discover the best practices we've developed to help leading organizations achieve smoother migrations and revitalize their COBOL codebase.Learn morePrevious1234Next\n\n\n\nCustomer Stories

      
        
        
      

      
          Enterprise
          Team
          All stories
      

        
            
  Start a free trial
  
  


        
    



      
        



  
  
  



  
  
  



  
  
  








        
  
    

          
    
    
    

    Meet the companies who build with GitHub

    


        
            
    See all stories 


        

        
            
      
        
      

    
  
  
  
  

  

  

  With 12,000 developers using GitHub Copilot, Accenture doubles down on GitHub’s platform.

  
    Read the story 

  
            
      
        
      

    
  
  
  
  

  

  

  Philips builds and deploys digital health technology faster with innersource on GitHub. 

  
    Read the story 

  
            
      
        
      

    
  
  
  
  

  

  

  Carlsberg unifies development on GitHub Enterprise and accelerates innovation with Copilot.

  
    Read the story 

  
        

        
          The world's largest developer platform
          Leading organizations choose GitHub to plan, build, secure and ship software.
        

        
            
              100M+
              Developers
            
            
              90%
              Fortune 100
            
            
              4M+
              Organizations
            
        

          Businesses that utilize GitHub Enterprise:
          
              
                
              
              
                
              
              
                
              
              
                
              
              
                
              
          

  
    
  

  
  
    
    
  GitHub Enterprise provides an end-to-end developer platform to accelerate businesses.

  
    
        
  
      
    Industry
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Advertising & Marketing
      

  

        
    
    
    
      
        
          Automotive
      

  

        
    
    
    
      
        
          Education
      

  

        
    
    
    
      
        
          Energy & Utilities
      

  

        
    
    
    
      
        
          Financial services
      

  

        
    
    
    
      
        
          Food & Beverage
      

  

        
    
    
    
      
        
          Government
      

  

        
    
    
    
      
        
          Healthcare & Life Sciences
      

  

        
    
    
    
      
        
          Manufacturing
      

  

        
    
    
    
      
        
          Media & Entertainment
      

  

        
    
    
    
      
        
          Nonprofit
      

  

        
    
    
    
      
        
          Professional services
      

  

        
    
    
    
      
        
          Real Estate
      

  

        
    
    
    
      
        
          Retail & ecommerce
      

  

        
    
    
    
      
        
          Social & Messaging
      

  

        
    
    
    
      
        
          Software, Hardware & Technology
      

  

        
    
    
    
      
        
          Telecommunications
      

  

        
    
    
    
      
        
          Transportation & Logistics
      

  

        
    
    
    
      
        
          Travel & Hospitality
      

  

    




      
  

        
  
      
    Feature
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          GitHub Actions
      

  

        
    
    
    
      
        
          GitHub Advanced Security
      

  

        
    
    
    
      
        
          GitHub Codespaces
      

  

        
    
    
    
      
        
          GitHub Copilot
      

  

        
    
    
    
      
        
          GitHub Discussions
      

  

        
    
    
    
      
        
          GitHub Enterprise
      

  

        
    
    
    
      
        
          GitHub Expert Services
      

  

        
    
    
    
      
        
          GitHub Issues
      

  

        
    
    
    
      
        
          GitHub Packages
      

  

        
    
    
    
      
        
          GitHub Team
      

  

    




      
  

        
  
      
    Region
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Americas
      

  

        
    
    
    
      
        
          Asia Pacific
      

  

        
    
    
    
      
        
          Europe
      

  

        
    
    
    
      
        
          Middle East & Africa
      

  

    




      
  

        
  
      
    Size
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          Startup
      

  

        
    
    
    
      
        
          Growth
      

  

        
    
    
    
      
        
          Enterprise
      

  

    




      
  

    

    
        
    Learn more about Enterprise 


        
    View Enterprise stories 


    
  
  
    
  
    Read more about Jibo, Inc.'s customer story
    
      
        
  
  
  
  

      
    
     Jibo, Inc.
    Jibo, the social robot, is brought to life by developers all over the world. See how these builders connect with the core team on GitHub.
    
      Read story 

    
  


    
  
    Read more about ADEO's customer story
    
      
        
  
  
  
  

      
    
     ADEO
    ADEO works more efficiently across teams and time zones with a global innersource program.
    
      Read story 

    
  


    
  
    Read more about LambdaTest's customer story
    
      
        
  
  
  
  

      
    
     LambdaTest
    LambdaTest streamlines CI/CD with GitHub Actions.
    
      Read story 

    
  


    
  
    Read more about Arduino's customer story
    
      
        
  
  
  
  

      
    
     Arduino
    Millions of makers leverage Arduino and GitHub’s open source community to create interactive, innovative projects.
    
      Read story 

    
  


    
  
    Read more about Philips's customer story
    
      
        
  
  
  
  

      
    
     Philips
    Philips builds and deploys digital health technology faster with innersource on GitHub. 
    
      Read story 

    
  


    
  
    Read more about ZibaSec's customer story
    
      
        
  
  
  
  

      
    
     ZibaSec
    ZibaSec achieves great feats with a small team to protect federal organizations from phishing attacks.
    
      Read story 

    
  






      
  



  
    
      
          

        GitHub Enterprise
      

      Duolingo empowers its engineers to be force multipliers for expertise with GitHub Copilot.

      
        Read more about Duolingo and GitHub's story
        Read story 


        
            
              25%
              increase in developer speed with GitHub Copilot
            
            
              1m
              set-up time for largest repo with Codespaces
            
            
              67%
              decrease in median code review turnaround time
            
            
              70%
              increase in pull requests
            
        
    
  

    
      


  
  
  
  



  


      
        
          
        

        Problem
      
      
        Inconsistent standards and workflows limited developer mobility and efficiency, limiting Duolingo’s ability to expand its content and deliver on its core mission. 
      


      
        
          
        

        Solution
      
      
        GitHub Copilot, Codespaces, and custom API integrations enforce code consistency, accelerate developer speed, and remove the barriers to using engineering as a force multiplier for expertise.
      


    
      
        
      
      Products
    
    
      

      
          
            GitHub Enterprise
            
          

          
            GitHub Codespaces
            
          
          
            GitHub Copilot
            
          
      
    
  


    



  



    
  Discover how high-growth companies innovate faster with GitHub Team.

  
    
        
  
      
    Industry
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Advertising & Marketing
      

  

        
    
    
    
      
        
          Automotive
      

  

        
    
    
    
      
        
          Education
      

  

        
    
    
    
      
        
          Energy & Utilities
      

  

        
    
    
    
      
        
          Financial services
      

  

        
    
    
    
      
        
          Food & Beverage
      

  

        
    
    
    
      
        
          Government
      

  

        
    
    
    
      
        
          Healthcare & Life Sciences
      

  

        
    
    
    
      
        
          Manufacturing
      

  

        
    
    
    
      
        
          Media & Entertainment
      

  

        
    
    
    
      
        
          Nonprofit
      

  

        
    
    
    
      
        
          Professional services
      

  

        
    
    
    
      
        
          Real Estate
      

  

        
    
    
    
      
        
          Retail & ecommerce
      

  

        
    
    
    
      
        
          Social & Messaging
      

  

        
    
    
    
      
        
          Software, Hardware & Technology
      

  

        
    
    
    
      
        
          Telecommunications
      

  

        
    
    
    
      
        
          Transportation & Logistics
      

  

        
    
    
    
      
        
          Travel & Hospitality
      

  

    




      
  

        
  
      
    Feature
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          GitHub Actions
      

  

        
    
    
    
      
        
          GitHub Advanced Security
      

  

        
    
    
    
      
        
          GitHub Codespaces
      

  

        
    
    
    
      
        
          GitHub Copilot
      

  

        
    
    
    
      
        
          GitHub Discussions
      

  

        
    
    
    
      
        
          GitHub Enterprise
      

  

        
    
    
    
      
        
          GitHub Expert Services
      

  

        
    
    
    
      
        
          GitHub Issues
      

  

        
    
    
    
      
        
          GitHub Packages
      

  

        
    
    
    
      
        
          GitHub Team
      

  

    




      
  

        
  
      
    Region
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          All
      

  

        
    
    
    
      
        
          Americas
      

  

        
    
    
    
      
        
          Asia Pacific
      

  

        
    
    
    
      
        
          Europe
      

  

        
    
    
    
      
        
          Middle East & Africa
      

  

    




      
  

        
  
      
    Size
  
    
      
    




  
    
                
  
    
        
    
    
    
      
        
          Startup
      

  

        
    
    
    
      
        
          Growth
      

  

        
    
    
    
      
        
          Enterprise
      

  

    




      
  

    

    
        
    Learn more about Team 


        
    View Team stories 


    
  
  
    
  
    Read more about Buffer's customer story
    
      
        
  
  
  
  

      
    
     Buffer
    Buffer goes from siloed to synced for better production releases.
    
      Read story 

    
  


    
  
    Read more about Cesium's customer story
    
      
        
  
  
  
  

      
    
     Cesium
    Cesium leverages an open source community to support the development of 3D geospatial applications.
    
      Read story 

    
  


    
  
    Read more about Front's customer story
    
      
        
  
  
  
  

      
    
     Front
    Front takes the work out of their workflows with GitHub Team.
    
      Read story 

    
  


    
  
    Read more about Knock's customer story
    
      
        
  
  
  
  

      
    
     Knock
    Knock pivots to new products, with the help of GitHub’s fast, flexible developer workflows.
    
      Read story 

    
  


    
  
    Read more about Modsy's customer story
    
      
        
  
  
  
  

      
    
     Modsy
    Modsy leverages GitHub Team to make interior design easy and accessible for all.
    
      Read story 

    
  


    
  
    Read more about Netdata's customer story
    
      
        
  
  
  
  

      
    
     Netdata
    Netdata accelerates their developer workflow with built-in security and open source.
    
      Read story 

    
  






  

    
      

  
  
    
    
      
        
          Here's what software leaders have to say about GitHub
          Testimonials from our developers.
        

        
          1 / 4
          1 of 4
        
      

      
        
                

          
            
              
  
    
      
  
  
  
  

    

    
      “
      
        At Uber, we continuously strive to improve our developer experience. We migrated code hosting and review to GitHub and are adopting GitHub Copilot to boost overall developer productivity. 
      
    

    
      
        
          Ali-Reza Adl-Tabatabai 
        
      
      
        Senior Director of Engineering
          @ Uber
      
    
  


              
  
    
      
  
  
  
  

    

    
      “
      
        GitHub's endless plug-ins, beautiful UI, and optimized workflows make devs happy. Happy and empowered engineers write the best code, make better decisions, and have more time to innovate. 
      
    

    
      
        
          Jen Peck
        
      
      
        Senior Director of Engineering
          @ Redfin
      
    
  


              
  
    
      
  
  
  
  

    

    
      “
      
        GitHub Copilot will bring huge benefits to our engineering teams by reducing the amount of time spent on boilerplate code, keeping the teams in their flow state, allowing them to ship high-quality products to market faster.
      
    

    
      
        
          Santosh Lolyeker
        
      
      
        VP, Engineering Fellow
          @ Veritas
      
    
  


              
  
    
      
  
  
  
  

    

    
      “
      
        With GitHub Enterprise, we have alleviated engineering overhead at Costco, enabling our engineers to focus on innovating.
      
    

    
      
        
          Avdesh Rai
        
      
      
        Enterprise Solutions Engineer
          @ Costco
      
    
  


            
          

                
        
      
    

  


    

  
  
    

  
  
  



  What will your story be?
  Start collaborating with your team on GitHub
  
    
      
        Free
        The basics for individuals and organizations
        $0 USD per month

        
  Create a free organization
  
  


      
    

    
      
        Team
        Advanced collaboration for individuals and organizations
        $4 USD per month

        
  Continue with Team
  
  


      
    

    
      
        Enterprise
        Security, compliance, and flexible deployment
        $21 USD per month

        
  Enterprise
  
  


      
    
  
  
    Want to use GitHub on your own?
    
    Check out our plans for individuals\n\n\n\nSolutionsEnterprise ContentExecutive insights, curated just for youGitHub for Leaders: How CXOs limit risk without losing speedIn this episode of GitHub for Leaders, host Anjuan Simmons sits down with cybersecurity researcher Daniel Cuthbert to discuss the evolving challenges of enterprise security facing leaders right now – and why credential leaks remain one of the most costly, yet preventable, threats.Learn more Understanding your organization's exposure to secret leaksCredential leaks are expensive, damaging, and on the rise. This article helps you understand your organization’s specific risk—and how to reduce exposure before it turns into impact.Learn moreEvolving GitHub Advanced Security: Greater flexibility, easier to accessStarting April 1, 2025, GitHub Advanced Security (GHAS) will be unbundled and available as two standalone security products: GitHub Secret Protection and GitHub Code Security.Learn moreApril ‘25 enterprise roundupTo help you stay ahead, our Enterprise Advocacy team has curated this monthly roundup—bringing you a concise, enterprise-focused summary of the most important updates you might have missed.Learn moreEssential GitHub Copilot resources for enterprise teamsFrom initial setup to advanced features, this guide will walk you through the essential resources to make your Copilot implementation successful.Learn moreCreating space for developer creativity in high-scale organizationsHow do we ensure our developers can maintain the ability to innovate and experiment while operating within the constraints of a larger organization?Learn moreHow Thomson Reuters successfully adopted AIThomson Reuters began their AI journey in 2022. Engineering leaders realized that what started as industry buzz was an opportunity to foster engineering excellence within the company–and GitHub Copilot could be just the thing to accelerate their operations.Learn moreThe art of engineering team focus: less is moreGuiding engineering teams to prioritize fewer tasks, limit parallel work, and leave space for unforeseen needs not only boosts productivity, but also fosters more consistent, high-quality work.Learn moreWhy developer satisfaction is your best productivity metricLearn how prioritizing developer satisfaction can drive better code quality, foster innovation, and improve team retention, ultimately boosting engineering productivity.Learn moreRelated solutionsCarlsberg accelerates innovation with CopilotCarlsberg unified its development process and bolstered its security using GitHub Advanced Security, while the integration of Copilot enabled efficient coding practices and minimized the need for context-switching.
Learn moreAccenture cuts technical debt with GitHub Advanced Security and CopilotAccenture leverages GitHub Copilot and Advanced Security to reduce technical debt, driving faster project delivery and improved code quality.
Learn moreEY Scales Developer Efficiency with GitHub Copilot and CodespacesEY built integrations between GitHub and Microsoft Azure DevOps, so it could tap into the power of GitHub's cohesive developer platform for security, automation, and AI.Learn more90%of Fortune 100 choose GitHub433%ROI with GitHub Enterprise77,000organizations use GitHub Copilot75%reduced time spent managing toolsMaximize your investment in AIOur recent study with Accenture shows that AI-driven tools like GitHub Copilot, when integrated into daily workflows, can significantly boost productivity, job satisfaction, and overall code quality without adding complexity.
Discover how to seamlessly integrate AI into your development processes with GitHub Copilot and see measurable impact across your organization.
Learn moreContact sales\n\n\n\nSponsorsSee your top dependenciesGet sponsoredGitHub SponsorsSupport the developers who power open sourceSee your top dependenciesGet sponsoredGitHub Sponsors allows the developer community to financially support the open source projects they depend on, directly on GitHub
$40M+Given back to our maintainers103Regions supported globally4.2K+Organizations sponsoringFor maintainersLaunch a page in minutes and showcase Sponsors buttons on your GitHub profile and repositories! You will automatically appear in worldwide recommendations to partners who are eager to invest in their open source dependencies.Get sponsoredFor sponsorsFind and fund your dependencies in a single transaction. The discovery and bulk sponsorship tools are easy to use. Flexible payment enables you to choose when and how you pay. Corporations like Microsoft like it because all their payments go out as a single invoice.Learn about invoiced billingHelp open source thriveEveryone should be able to contribute to open source. Making open source a viable, financially rewarding career path helps contribute to our digital infrastructure. More funding, more projects, more software to power our world.See your top dependencies“Shopify uses GitHub Sponsors to efficiently manage and fund projects within the open source community, tailored to the needs of recipients.Azmat YuhannaSenior Engineering Operations Manager, ShopifyInvest in open source. It powers your world. See your top dependenciesGet sponsoredThe internet depends on open source, everywhereComprehensive website security and health monitoring with performance analysisweb-checkWeb-Check provides real-time monitoring for uptime, speed, and user experience, trusted by businesses like Amazon, Shopify, and Airbnb.Sponsor web-checkIntuitive, open-source interface for native GenAI applicationsOpenWebUIOpenWebUI simplifies the development of interactive GenAI apps using LLMs, used by developers at companies like Microsoft, IBM, and GitHub.Sponsor OpenWebUIA command line tool and library for transferring data with URL syntaxcURLcURL is included in almost every modern device–smartphones, cars, TVs, laptops, servers, consoles, printers, and beyond.Sponsor cURLFrequently asked questionsHow do I sponsor a project?Sign in and start by navigating to your dependencies, your explore tab, trending repositories, or collections. When a repository has the Sponsor graphic, you can sponsor them directly.How do I get paid for my contributions?You can become a sponsored developer by joining GitHub Sponsors, completing your sponsored developer profile, creating sponsorship tiers, submitting your bank and tax information, and enabling two-factor authentication for your account on GitHub.com. Learn more about getting paid for contributions
Do I need to fill out a tax form to receive sponsorships?Yes. Your tax information must be on file in order for GitHub to make payments to your bank account. The required tax documents may vary based on your location.Note that we do our best to help you with the Sponsors program, but we’re unable to provide tax guidance.Learn more about tax information for GitHub Sponsors\n\n\n\nThe ReadME Project

        

  
  
    
  


  
    
      
    
  


  



    
      
        

          
  
  
  
  


        
      

      
        Featured stories
        
  

  Featured Article



  
    Coding accessibility: Software by the blind, for the blind


  
    The NVDA screen reader has helped empower a new generation of blind and low-vision developers
  

      
    

    
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Featured Article
            

            
              
                 Coding accessibility: Disability as catalyst for creativity
              
            

            
              Faced with accessibility barriers, developer Paul Chiou turns obstacles into innovative solutions.
            
          
        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Annalu  Waller
            

            
              
                Champion accessibility to unleash untapped potential
              
            

            
              Dr. Annalu Waller on the intricate, interdependent network of support that shapes our lives.
            
          
        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Featured Article
            

            
              
                Coding accessibility: How Della found her voice with open source AAC
              
            

            
              When proprietary apps failed, Della’s brother built an app that incorporated her needs and feedback into the design.
            
          
        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
            
              
              Featured Article
            

            
              
                Coding accessibility: Building autonomy with AI
              
            

            
              After bringing Braille to the digital world and creating the first screen reader for the web, Dr. Asakawa is now working on an AI-enabled suitcase to help blind people navigate the world independently.
            
          
        
    



        
          

  
    
The ReadME Project

          
        
      
  


          
  
  
    
      
        
          

        

              
            

          
      

      
        
          
            Browse by story type
          

          
              
                
                  Featured Articles
              
              
                
                  Developer Stories
              
              
                
                  Guides
              
              
                
                  The ReadMe Podcast
              
          
        

        
          
            Explore Topics

            
              See all topics 

            
          

          
              
                
                  AI
              
              
                
                  Application Security
              
              
                
                  Career Development
              
              
                
                  DevOps & Automation
              
              
                
                  Maintainer
              
              
                
                  Programming
              
          
        
      

      
        
          
            Nominate a developer//
          

            
              Support the community
            
        
      
    
  



          
  Stories by topic
  
    
      
        The ReadME Project amplifies the voices of the developer community by telling stories about:
      

      
          
            
              AI
            ,
          
          
            
              Application Security
            ,
          
          
            
              Career Development
            ,
          
          
            
              DevOps & Automation
            ,
          

        and more topics.
      
    
  


          

  Community stories
  
  
      
        
          
  
    
    
  
  
  
  

    
  

    Maintainer

    
	



        

        
  

  THE README PODCAST // EPISODE 31



  
    Bridging code and community


  
    Navigating open source in a regulated environment, the crucial role of non-code contributions to open source success, and lessons from scaling projects like Kubernetes.
  

      
      
        
          
  
    
    
  
  
  
  

    
  

    AI

    
	



        

        
  

  THE README PODCAST // EPISODE 33



  
    Powering public goods


  
    Exploring developer happiness through the vibrant Laravel community and the impact of digital public goods on open source, AI models, Wikipedia, and more.
  

      
  

  
  
      
        
          
  
    
    
  
  
  
  

    
  




        

        
  

  Anton Mirhorodchenko



  
    Harness the power of generative AI for software development


  
    Tools like GitHub Copilot and ChatGPT can change the way you build software.
  

      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
  

  Aaron Francis // PlanetScale



  
    Finish your projects


  
    Don’t let fear, or that last 10%, hold you back.
  

      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
  

  Cassidy Williams // Contenda



  
    Get your first software developer job


  
    Tips, tricks, and general advice for how to get in the door in tech.
  

      
  



            

  
    
      
        We all have the potential to become who we're meant to be, even when societal and socioeconomic challenges get in our way.
      
    

    
      
        
  
    
    
  
  
  
  

    
  

    Accessibility



      

      
        
          
            Champion accessibility to unleash untapped potential
          
        

        
          Annalu  Waller
        
      
    
  




            
  
  
    
      The ReadMe Podcast
    

    
      See all The ReadMe Podcast 

       stories from The ReadMe Podcast
  



  
      
        
          
            
              
  
  
  
  

            
          

          
	

        

        
          
  

  THE README PODCAST // EPISODE 32



  
    (De)coding conventions


  
    The evolution of TypeScript and the future of coding conventions, AI’s role in improving accessibility, and practical advice on encouraging non-code contributions. 
  

        
      
      
        
          
            
              
  
  
  
  

            
          

          
	

        

        
          
  

  THE README PODCAST // EPISODE 30



  
    Kelsey Hightower—Present


  
    Kelsey shares his origin story, insights on the future of Kubernetes, and advice on making complicated technology easier to understand.
  

        
      
  




            
  
  
    
      Featured Articles
    

    
      See all Featured Articles 

       stories from Featured Articles
  



  
    
      
        
  
    
    
  
  
  
  

    
  

    Programming



      

      
        
          
            
              Is Laravel the happiest developer community on the planet?
            
          

          How the PHP framework maintains a perpetual honeymoon period.
        
      
    
  




            
  
  
    
      Developer Stories
    

    
      See all Developer Stories 

       stories from Developer Stories
  



  
    
      
        
  
    
    
  
  
  
  

    
  




      

      
        
  

  Anton Mirhorodchenko



  
    Realizing potential with AI


  
    Anton uses AI to write code and tackle more projects.
  

      
    

      
        
          
  
    
    
  
  
  
  

    
  




        

        
          
  

  Kyler Middleton



  
    From fixing computers on farms to democratizing DevOps


  
    Kyler discusses her path from rural tech repair jobs to revolutionizing tech education.
  

        
      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
          
  

  Aaron Gustafson



  
    Advancing inclusion with progressive enhancement


  
    Aaron’s journey towards progressive enhancement and inclusive design.
  

        
      
      
        
          
  
    
    
  
  
  
  

    
  




        

        
          
  

  Ruth Ikegah



  
    Putting the African open source community on the map


  
    Ruth’s dream is to show people that Africans aren’t just consumers of open source: They’re creators as well.
  

        
      
  




            
  
  
    
      Guides
    

    
      See all Guides 

       stories from Guides
  



  
    
      
        
  
    
    
  
  
  
  

    
  

    Application Security



      

      
        
  

  Denys Lashchevskyi // Betsson



  
    A beginner’s guide to running and managing custom CodeQL queries


  
    Transform your code into a structured database that you can use to surface security vulnerabilities and discover new insights.
  

      
    

    
        
          
            
  
    
    
  
  
  
  

    
  

    Career Development



          

          
  

  Nick Penston // Fidelity Investments



  
    Scaling standards and community in your organization


  
    Learn how to implement open source community ideas to spread best practices.
  

        
        
          
            
  
    
    
  
  
  
  

    
  




          

          
  

  Niek Palm // Philips



  
    Provisioning self-hosted GitHub Actions runners on demand


  
    How Philips optimized their CI/CD process using GitHub Actions and self-hosted runners.
  

        
        
          
            
  
    
    
  
  
  
  

    
  

    Open Source



          

          
  

  Mike Gifford // CivicActions



  
    Treat accessibility issues as bugs, not feature requests


  
    Follow Drupal’s lead: Prioritize and systematically squash accessibility bugs.
  

        
    
  


        
      

    
      
  
      
        
          
            About The ReadME Project
            Coding is usually seen as a solitary activity, but it’s actually the world’s largest community effort led by open source maintainers, contributors, and teams. These unsung heroes put in long hours to build software, fix issues, field questions, and manage communities.
            The ReadME Project is part of GitHub’s ongoing effort to amplify the voices of the developer community. It’s an evolving space to engage with the community and explore the stories, challenges, technology, and culture that surround the world of open source.

            
              Follow us:

              
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
                    
                      
                        

                      
                    
              
            
          
        

        

          
            Nominate a developer

            
          
          Nominate inspiring developers and projects you think we should feature in The ReadME Project.

          
            Support the community

            
          
          Recognize developers working behind the scenes and help open source projects get the resources they need.

          
  
    Sign Up For Newsletter
  

  
    Every month we’ll share new articles from The ReadME Project, episodes of The ReadME Podcast, and other great developer content from around the community.
  

  Email Address *
  
    


    

    

    
      Subscribe
    
  


  Thank you! for subscribing\n\n\n\nExplore

      Topics

        Trending

        Collections

        Events

        GitHub Sponsors
    
  




  
    Topics
    Browse popular topics on GitHub.
  


  
    
        
  
    



    
        
      
        Express
      
      Express is a minimal Node.js framework for web and mobile applications.
    
  


        
  
    



    
        
      
        Azure
      
      Azure is a cloud computing service created by Microsoft.
    
  


        
  
    



    
        
      
        npm
      
      npm is a package manager for JavaScript included with Node.js.
    
  


    
  


  
    All featured topics
    
    
      
          
            #
          
      
      
        3D
        
          3D refers to the use of three-dimensional graphics, modeling, and animation in various industries.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Ajax
        
          Ajax is a technique for creating interactive web applications.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Algorithm
        
          Algorithms are self-contained sequences that carry out a variety of tasks.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Amp
        
          Amp is a non-blocking concurrency library for PHP.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Android
        
          Android is an operating system built by Google designed for mobile devices.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Angular
        
          Angular is an open source web application platform.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Ansible
        
          Ansible is a simple and powerful automation engine.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        API
        
          An API (Application Programming Interface) is a collection of protocols and subroutines for building software.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Arduino
        
          Arduino is an open source platform for building electronic devices.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        ASP.NET
        
          ASP.NET is a web framework for building modern web apps and services.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Awesome Lists
        
          An awesome list is a list of awesome things curated by the community.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Amazon Web Services
        
          Amazon Web Services provides on-demand cloud computing platforms on a subscription basis.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Azure
        
          Azure is a cloud computing service created by Microsoft.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Babel
        
          Babel is a compiler for writing next generation JavaScript, today.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bash
        
          Bash is a shell and command language interpreter for the GNU operating system.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bitcoin
        
          Bitcoin is a cryptocurrency developed by Satoshi Nakamoto.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bootstrap
        
          Bootstrap is an HTML, CSS, and JavaScript framework.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Bot
        
          A bot is an application that runs automated tasks over the Internet.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        C
        
          C is a general purpose programming language that first appeared in 1972.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Chrome
        
          Chrome is a web browser from the tech company Google.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Chrome extension
        
          Chrome extensions enable users to customize the Chrome browsing experience.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Command-line interface
        
          A CLI, or command-line interface, is a console that helps users issue commands to a program.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Clojure
        
          Clojure is a dynamic, general-purpose programming language.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Code quality
        
          Automate your code review with style, quality, security, and test‑coverage checks when you need them.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Code review
        
          Ensure your code meets quality standards and ship with confidence.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Compiler
        
          Compilers are software that translate higher-level programming languages to lower-level languages (e.g. machine code).
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Continuous integration
        
          Automatically build and test your code as you push it upstream, preventing bugs from being deployed to production.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        C++
        
          C++ is a general purpose and object-oriented programming language.
        
      
      
          
            
          Star


      
    
    
      
          
            #
          
      
      
        Cryptocurrency
        
          A cryptocurrency is a digital currency that uses cryptography.
        
      
      
          
            
          Star


      
    
    
      
          
      
      
        Crystal
        
          Crystal is a self-hosted, general purpose programming language.
        
      
      
          
            
          Star


      
    

  
    
    
      Load more…
    

  

  
      Popular topics
      
          
            
  javascript

          
          
            
  mysql

          
          
            
  config

          
          
            
  python

          
          
            
  java

          
          
            
  ai

          
          
            
  spring

          
          
            
  springboot

          
          
            
  ssm

          
          
            
  github-config\n\n\n\nStar


  

  
    

      
        microsoft /

      markitdown  

    
      Python tool for converting files and office documents to Markdown.
    

  
      
  
  Python



      
        52,468
      
        2,589
      
        Built by

          
          
          
          
          

      
        
        980 stars today
  

  

      
            
        
          Star


  

  
    

      
        microsoft /

      BitNet  

    
      Official inference framework for 1-bit LLMs
    

  
      
  
  C++



      
        16,313
      
        1,174
      
        Built by

          
          
          
          
          

      
        
        730 stars today
  

  

      
            
        
          Star


  

  
    

      
        Byaidu /

      PDFMathTranslate  

    
      PDF scientific paper translation with preserved formats - 基于 AI 完整保留排版的 PDF 文档全文双语翻译，支持 Google/DeepL/Ollama/OpenAI 等服务，提供 CLI/GUI/MCP/Docker/Zotero
    

  
      
  
  Python



      
        21,506
      
        1,819
      
        Built by

          
          
          
          
          

      
        
        272 stars today
  

  

      
            
        
          Star


  

  
    

      
        pocketbase /

      pocketbase  

    
      Open Source realtime backend in 1 file
    

  
      
  
  Go



      
        45,833
      
        2,252
      
        Built by

          
          
          
          
          

      
        
        92 stars today
  

  

      
            
        
          Star


  

  
    

      
        drawdb-io /

      drawdb  

    
      Free, simple, and intuitive online database diagram editor and SQL generator.
    

  
      
  
  JavaScript



      
        27,621
      
        1,949
      
        Built by

          
          
          
          
          

      
        
        256 stars today
  

  

      
            
        
          Star


  

  
    

      
        microsoft /

      generative-ai-for-beginners  

    
      21 Lessons, Get Started Building with Generative AI 🔗 https://microsoft.github.io/generative-ai-for-beginners/
    

  
      
  
  Jupyter Notebook



      
        79,003
      
        40,999
      
        Built by

          
          
          
          
          

      
        
        139 stars today
  

  

      
            
        
          Star


  

  
    

      
        CoatiSoftware /

      Sourcetrail  

    
      Sourcetrail - free and open-source interactive source explorer
    

  
      
  
  C++



      
        15,871
      
        1,526
      
        Built by

          
          
          
          
          

      
        
        55 stars today
  

  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        kamranahmedse /

      developer-roadmap  

    
      Interactive roadmaps, guides and other educational content to help developers grow in their careers.
    

  
      
  
  TypeScript



      
        315,127
      
        40,943
      
        Built by

          
          
          
          

      
        
        337 stars today
  

  

      
            
        
          Star


  

  
    

      
        yt-dlp /

      yt-dlp  

    
      A feature-rich command-line audio/video downloader
    

  
      
  
  Python



      
        108,981
      
        8,563
      
        Built by

          
          
          
          
          

      
        
        297 stars today
  

  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        WerWolv /

      ImHex  

    
      🔍 A Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM.
    

  
      
  
  C++



      
        48,500
      
        2,099
      
        Built by

          
          
          
          
          

      
        
        97 stars today
  

  

      
            
        
          Star


  

  
    

      
        cloudcommunity /

      Free-Certifications  

    
      A curated list of free courses with certifications. Also available at https://free-certifications.com/
    

  

      
        29,604
      
        2,178
      
        Built by

          
          
          
          
          

      
        
        66 stars today
  

  

      
            
        
          Star


  

  
    

      
        RVC-Boss /

      GPT-SoVITS  

    
      1 min voice data can also be used to train a good TTS model! (few shot voice cloning)
    

  
      
  
  Python



      
        44,751
      
        4,978
      
        Built by

          
          
          
          
          

      
        
        116 stars today\n\nExplore

      Topics

        Trending

        Collections

        Events

        GitHub Sponsors
    
  




  
    Trending

    
      See what the GitHub community is most excited about today.
    
  



  
    
      
  Repositories
  Developers



      
        
          
        Spoken Language:

    
        Any


  
    
      
        Select a spoken language

      

    

    
      
        
      
    

    

      
          
              Abkhazian
          
              Afar
          
              Afrikaans
          
              Akan
          
              Albanian
          
              Amharic
          
              Arabic
          
              Aragonese
          
              Armenian
          
              Assamese
          
              Avaric
          
              Avestan
          
              Aymara
          
              Azerbaijani
          
              Bambara
          
              Bashkir
          
              Basque
          
              Belarusian
          
              Bengali
          
              Bihari languages
          
              Bislama
          
              Bosnian
          
              Breton
          
              Bulgarian
          
              Burmese
          
              Catalan, Valencian
          
              Chamorro
          
              Chechen
          
              Chichewa, Chewa, Nyanja
          
              Chinese
          
              Chuvash
          
              Cornish
          
              Corsican
          
              Cree
          
              Croatian
          
              Czech
          
              Danish
          
              Divehi, Dhivehi, Maldivian
          
              Dutch, Flemish
          
              Dzongkha
          
              English
          
              Esperanto
          
              Estonian
          
              Ewe
          
              Faroese
          
              Fijian
          
              Finnish
          
              French
          
              Fulah
          
              Galician
          
              Georgian
          
              German
          
              Greek, Modern
          
              Guarani
          
              Gujarati
          
              Haitian, Haitian Creole
          
              Hausa
          
              Hebrew
          
              Herero
          
              Hindi
          
              Hiri Motu
          
              Hungarian
          
              Interlingua (International Auxil...
          
              Indonesian
          
              Interlingue, Occidental
          
              Irish
          
              Igbo
          
              Inupiaq
          
              Ido
          
              Icelandic
          
              Italian
          
              Inuktitut
          
              Japanese
          
              Javanese
          
              Kalaallisut, Greenlandic
          
              Kannada
          
              Kanuri
          
              Kashmiri
          
              Kazakh
          
              Central Khmer
          
              Kikuyu, Gikuyu
          
              Kinyarwanda
          
              Kirghiz, Kyrgyz
          
              Komi
          
              Kongo
          
              Korean
          
              Kurdish
          
              Kuanyama, Kwanyama
          
              Latin
          
              Luxembourgish, Letzeburgesch
          
              Ganda
          
              Limburgan, Limburger, Limburgish
          
              Lingala
          
              Lao
          
              Lithuanian
          
              Luba-Katanga
          
              Latvian
          
              Manx
          
              Macedonian
          
              Malagasy
          
              Malay
          
              Malayalam
          
              Maltese
          
              Maori
          
              Marathi
          
              Marshallese
          
              Mongolian
          
              Nauru
          
              Navajo, Navaho
          
              North Ndebele
          
              Nepali
          
              Ndonga
          
              Norwegian Bokmål
          
              Norwegian Nynorsk
          
              Norwegian
          
              Sichuan Yi, Nuosu
          
              South Ndebele
          
              Occitan
          
              Ojibwa
          
              Church Slavic, Old Slavonic, Chu...
          
              Oromo
          
              Oriya
          
              Ossetian, Ossetic
          
              Punjabi, Panjabi
          
              Pali
          
              Persian
          
              Polish
          
              Pashto, Pushto
          
              Portuguese
          
              Quechua
          
              Romansh
          
              Rundi
          
              Romanian, Moldavian, Moldovan
          
              Russian
          
              Sanskrit
          
              Sardinian
          
              Sindhi
          
              Northern Sami
          
              Samoan
          
              Sango
          
              Serbian
          
              Gaelic, Scottish Gaelic
          
              Shona
          
              Sinhala, Sinhalese
          
              Slovak
          
              Slovenian
          
              Somali
          
              Southern Sotho
          
              Spanish, Castilian
          
              Sundanese
          
              Swahili
          
              Swati
          
              Swedish
          
              Tamil
          
              Telugu
          
              Tajik
          
              Thai
          
              Tigrinya
          
              Tibetan
          
              Turkmen
          
              Tagalog
          
              Tswana
          
              Tonga (Tonga Islands)
          
              Turkish
          
              Tsonga
          
              Tatar
          
              Twi
          
              Tahitian
          
              Uighur, Uyghur
          
              Ukrainian
          
              Urdu
          
              Uzbek
          
              Venda
          
              Vietnamese
          
              Volapük
          
              Walloon
          
              Welsh
          
              Wolof
          
              Western Frisian
          
              Xhosa
          
              Yiddish
          
              Yoruba
          
              Zhuang, Chuang
          
              Zulu
      
    

    
      
      Loading

    
  



        

        
          
        Language:

    
        Any


  
    
      
        Select a language

      
    

    
      
        
      
    

    

      
          
              Unknown languages
          
              1C Enterprise
          
              2-Dimensional Array
          
              4D
          
              ABAP
          
              ABAP CDS
          
              ABNF
          
              ActionScript
          
              Ada
          
              Adblock Filter List
          
              Adobe Font Metrics
          
              Agda
          
              AGS Script
          
              AIDL
          
              AL
          
              Alloy
          
              Alpine Abuild
          
              Altium Designer
          
              AMPL
          
              AngelScript
          
              Answer Set Programming
          
              Ant Build System
          
              Antlers
          
              ANTLR
          
              ApacheConf
          
              Apex
          
              API Blueprint
          
              APL
          
              Apollo Guidance Computer
          
              AppleScript
          
              Arc
          
              AsciiDoc
          
              ASL
          
              ASN.1
          
              Classic ASP
          
              ASP.NET
          
              AspectJ
          
              Assembly
          
              Astro
          
              Asymptote
          
              ATS
          
              Augeas
          
              AutoHotkey
          
              AutoIt
          
              Avro IDL
          
              Awk
          
              B4X
          
              Ballerina
          
              BASIC
          
              Batchfile
          
              Beef
          
              Befunge
          
              Berry
          
              BibTeX
          
              BibTeX Style
          
              Bicep
          
              Bikeshed
          
              Bison
          
              BitBake
          
              Blade
          
              BlitzBasic
          
              BlitzMax
          
              Bluespec
          
              Bluespec BH
          
              Boo
          
              Boogie
          
              BQN
          
              Brainfuck
          
              BrighterScript
          
              Brightscript
          
              Zeek
          
              Browserslist
          
              C
          
              C#
          
              C++
          
              C-ObjDump
          
              C2hs Haskell
          
              Cabal Config
          
              Caddyfile
          
              Cadence
          
              Cairo
          
              Cairo Zero
          
              CameLIGO
          
              CAP CDS
          
              Cap'n Proto
          
              Carbon
          
              CartoCSS
          
              Ceylon
          
              Chapel
          
              Charity
          
              Checksums
          
              ChucK
          
              CIL
          
              Circom
          
              Cirru
          
              Clarion
          
              Clarity
          
              Classic ASP
          
              Clean
          
              Click
          
              CLIPS
          
              Clojure
          
              Closure Templates
          
              Cloud Firestore Security Rules
          
              CMake
          
              COBOL
          
              CODEOWNERS
          
              CodeQL
          
              CoffeeScript
          
              ColdFusion
          
              ColdFusion CFC
          
              COLLADA
          
              Common Lisp
          
              Common Workflow Language
          
              Component Pascal
          
              CoNLL-U
          
              Cool
          
              Coq
          
              Cpp-ObjDump
          
              Creole
          
              crontab
          
              Crystal
          
              CSON
          
              Csound
          
              Csound Document
          
              Csound Score
          
              CSS
          
              CSV
          
              Cuda
          
              CUE
          
              Cue Sheet
          
              cURL Config
          
              Curry
          
              CWeb
          
              Cycript
          
              Cylc
          
              Cypher
          
              Cython
          
              D
          
              D-ObjDump
          
              D2
          
              Dafny
          
              Darcs Patch
          
              Dart
          
              DataWeave
          
              Debian Package Control File
          
              DenizenScript
          
              desktop
          
              Dhall
          
              Diff
          
              DIGITAL Command Language
          
              dircolors
          
              DirectX 3D File
          
              DM
          
              DNS Zone
          
              Dockerfile
          
              Dogescript
          
              Dotenv
          
              DTrace
          
              Dune
          
              Dylan
          
              E
          
              E-mail
          
              Eagle
          
              Earthly
          
              Easybuild
          
              EBNF
          
              eC
          
              Ecere Projects
          
              ECL
          
              ECLiPSe
          
              Ecmarkup
          
              Edge
          
              EdgeQL
          
              EditorConfig
          
              Edje Data Collection
          
              edn
          
              Eiffel
          
              EJS
          
              Elixir
          
              Elm
          
              Elvish
          
              Elvish Transcript
          
              Emacs Lisp
          
              EmberScript
          
              E-mail
          
              EQ
          
              Erlang
          
              Euphoria
          
              F#
          
              F*
          
              Factor
          
              Fancy
          
              Fantom
          
              Faust
          
              Fennel
          
              FIGlet Font
          
              Filebench WML
          
              Filterscript
          
              FIRRTL
          
              fish
          
              Fluent
          
              FLUX
          
              Formatted
          
              Forth
          
              Fortran
          
              Fortran Free Form
          
              FreeBASIC
          
              FreeMarker
          
              Frege
          
              Futhark
          
              G-code
          
              Game Maker Language
          
              GAML
          
              GAMS
          
              GAP
          
              GCC Machine Description
          
              GDB
          
              GDScript
          
              GEDCOM
          
              Gemfile.lock
          
              Gemini
          
              Genero 4gl
          
              Genero per
          
              Genie
          
              Genshi
          
              Gentoo Ebuild
          
              Gentoo Eclass
          
              Gerber Image
          
              Gettext Catalog
          
              Gherkin
          
              Git Attributes
          
              Git Config
          
              Git Revision List
          
              Gleam
          
              Glimmer JS
          
              Glimmer TS
          
              GLSL
          
              Glyph
          
              Glyph Bitmap Distribution Format
          
              GN
          
              Gnuplot
          
              Go
          
              Go Checksums
          
              Go Module
          
              Go Workspace
          
              Godot Resource
          
              Golo
          
              Gosu
          
              Grace
          
              Gradle
          
              Gradle Kotlin DSL
          
              Grammatical Framework
          
              Graph Modeling Language
          
              GraphQL
          
              Graphviz (DOT)
          
              Groovy
          
              Groovy Server Pages
          
              GSC
          
              Hack
          
              Haml
          
              Handlebars
          
              HAProxy
          
              Harbour
          
              Hare
          
              Haskell
          
              Haxe
          
              HCL
          
              HiveQL
          
              HLSL
          
              HOCON
          
              HolyC
          
              hoon
          
              Hosts File
          
              HTML
          
              Jinja
          
              HTML+ECR
          
              HTML+EEX
          
              HTML+ERB
          
              HTML+PHP
          
              HTML+Razor
          
              HTTP
          
              HXML
          
              Hy
          
              HyPhy
          
              iCalendar
          
              IDL
          
              Idris
          
              Ignore List
          
              IGOR Pro
          
              ImageJ Macro
          
              Imba
          
              Inform 7
          
              INI
          
              Ink
          
              Inno Setup
          
              Io
          
              Ioke
          
              IRC log
          
              Isabelle
          
              Isabelle ROOT
          
              ISPC
          
              J
          
              Jai
          
              Janet
          
              JAR Manifest
          
              Jasmin
          
              Java
          
              Java Properties
          
              Java Server Pages
          
              Java Template Engine
          
              JavaScript
          
              JavaScript+ERB
          
              JCL
          
              Jest Snapshot
          
              JetBrains MPS
          
              JFlex
          
              Jinja
          
              Jison
          
              Jison Lex
          
              Jolie
          
              jq
          
              JSON
          
              JSON with Comments
          
              JSON5
          
              JSONiq
          
              JSONLD
          
              Jsonnet
          
              Julia
          
              Julia REPL
          
              Jupyter Notebook
          
              Just
          
              Kaitai Struct
          
              KakouneScript
          
              KDL
          
              KerboScript
          
              KiCad Layout
          
              KiCad Legacy Layout
          
              KiCad Schematic
          
              Kickstart
          
              Kit
          
              Kotlin
          
              KRL
          
              Kusto
          
              kvlang
          
              LabVIEW
          
              Lark
          
              Lasso
          
              Latte
          
              Lean
          
              Lean 4
          
              Less
          
              Lex
          
              LFE
          
              LigoLANG
          
              LilyPond
          
              Limbo
          
              Linear Programming
          
              Linker Script
          
              Linux Kernel Module
          
              Liquid
          
              Literate Agda
          
              Literate CoffeeScript
          
              Literate Haskell
          
              LiveCode Script
          
              LiveScript
          
              LLVM
          
              Logos
          
              Logtalk
          
              LOLCODE
          
              LookML
          
              LoomScript
          
              LSL
          
              LTspice Symbol
          
              Lua
          
              Luau
          
              M
          
              M4
          
              M4Sugar
          
              Macaulay2
          
              Makefile
          
              Mako
          
              Markdown
          
              Marko
          
              Mask
          
              Mathematica
          
              MATLAB
          
              Maven POM
          
              Max
          
              MAXScript
          
              mcfunction
          
              mdsvex
          
              MDX
          
              Wikitext
          
              Mercury
          
              Mermaid
          
              Meson
          
              Metal
          
              Microsoft Developer Studio Project
          
              Microsoft Visual Studio Solution
          
              MiniD
          
              MiniYAML
          
              MiniZinc
          
              MiniZinc Data
          
              Mint
          
              Mirah
          
              mIRC Script
          
              MLIR
          
              Modelica
          
              Modula-2
          
              Modula-3
          
              Module Management System
          
              Mojo
          
              Monkey
          
              Monkey C
          
              Moocode
          
              MoonBit
          
              MoonScript
          
              Motoko
          
              Motorola 68K Assembly
          
              Move
          
              MQL4
          
              MQL5
          
              MTML
          
              MUF
          
              mupad
          
              Muse
          
              Mustache
          
              Myghty
          
              nanorc
          
              Nasal
          
              NASL
          
              NCL
          
              Nearley
          
              Nemerle
          
              NEON
          
              nesC
          
              NetLinx
          
              NetLinx+ERB
          
              NetLogo
          
              NewLisp
          
              Nextflow
          
              Nginx
          
              Nim
          
              Ninja
          
              Nit
          
              Nix
          
              NL
          
              NMODL
          
              Noir
          
              NPM Config
          
              NSIS
          
              Nu
          
              NumPy
          
              Nunjucks
          
              Nushell
          
              NWScript
          
              OASv2-json
          
              OASv2-yaml
          
              OASv3-json
          
              OASv3-yaml
          
              Oberon
          
              ObjDump
          
              Object Data Instance Notation
          
              Objective-C
          
              Objective-C++
          
              Objective-J
          
              ObjectScript
          
              OCaml
          
              Odin
          
              Omgrofl
          
              OMNeT++ MSG
          
              OMNeT++ NED
          
              OMNeT++ MSG
          
              OMNeT++ NED
          
              ooc
          
              Opa
          
              Opal
          
              Open Policy Agent
          
              OpenAPI Specification v2
          
              OpenAPI Specification v3
          
              OpenCL
          
              OpenEdge ABL
          
              OpenQASM
          
              OpenRC runscript
          
              OpenSCAD
          
              OpenStep Property List
          
              OpenType Feature File
          
              Option List
          
              Org
          
              OverpassQL
          
              Ox
          
              Oxygene
          
              Oz
          
              P4
          
              Pact
          
              Pan
          
              Papyrus
          
              Parrot
          
              Parrot Assembly
          
              Parrot Internal Representation
          
              Pascal
          
              Pawn
          
              PDDL
          
              PEG.js
          
              Pep8
          
              Perl
          
              PHP
          
              Pic
          
              Pickle
          
              PicoLisp
          
              PigLatin
          
              Pike
          
              Pip Requirements
          
              Pkl
          
              PlantUML
          
              PLpgSQL
          
              PLSQL
          
              Pod
          
              Pod 6
          
              PogoScript
          
              Polar
          
              Pony
          
              Portugol
          
              PostCSS
          
              PostScript
          
              POV-Ray SDL
          
              PowerBuilder
          
              PowerShell
          
              Praat
          
              Prisma
          
              Processing
          
              Procfile
          
              Proguard
          
              Prolog
          
              Promela
          
              Propeller Spin
          
              Protocol Buffer
          
              Protocol Buffer Text Format
          
              Public Key
          
              Pug
          
              Puppet
          
              Pure Data
          
              PureBasic
          
              PureScript
          
              Pyret
          
              Python
          
              Python console
          
              Python traceback
          
              q
          
              Q#
          
              QMake
          
              QML
          
              Qt Script
          
              Quake
          
              QuickBASIC
          
              R
          
              Racket
          
              Ragel
          
              Raku
          
              RAML
          
              Rascal
          
              Raw token data
          
              RBS
          
              RDoc
          
              Readline Config
          
              REALbasic
          
              Reason
          
              ReasonLIGO
          
              Rebol
          
              Record Jar
          
              Red
          
              Redcode
          
              Redirect Rules
          
              Regular Expression
          
              Ren'Py
          
              RenderScript
          
              ReScript
          
              reStructuredText
          
              REXX
          
              Rez
          
              Rich Text Format
          
              Ring
          
              Riot
          
              RMarkdown
          
              RobotFramework
          
              robots.txt
          
              Roc
          
              Roff
          
              Roff Manpage
          
              RON
          
              Rouge
          
              RouterOS Script
          
              RPC
          
              RPGLE
          
              RPM Spec
          
              Ruby
          
              RUNOFF
          
              Rust
          
              Sage
          
              SaltStack
          
              SAS
          
              Sass
          
              Scala
          
              Scaml
          
              Scenic
          
              Scheme
          
              Scilab
          
              SCSS
          
              sed
          
              Self
          
              SELinux Policy
          
              ShaderLab
          
              Shell
          
              ShellCheck Config
          
              ShellSession
          
              Shen
          
              Sieve
          
              Simple File Verification
          
              Singularity
          
              Slang
          
              Slash
          
              Slice
          
              Slim
          
              Slint
          
              Smali
          
              Smalltalk
          
              Smarty
          
              Smithy
          
              SmPL
          
              SMT
          
              Snakemake
          
              Solidity
          
              Soong
          
              SourcePawn
          
              SPARQL
          
              Spline Font Database
          
              SQF
          
              SQL
          
              SQLPL
          
              Squirrel
          
              SRecode Template
          
              SSH Config
          
              Stan
          
              Standard ML
          
              STAR
          
              Starlark
          
              Stata
          
              STL
          
              STON
          
              StringTemplate
          
              Stylus
          
              SubRip Text
          
              SugarSS
          
              SuperCollider
          
              Svelte
          
              SVG
          
              Sway
          
              Sweave
          
              Swift
          
              SWIG
          
              SystemVerilog
          
              Tact
          
              Talon
          
              Tcl
          
              Tcsh
          
              Tea
          
              templ
          
              Terra
          
              Terraform Template
          
              TeX
          
              Texinfo
          
              Text
          
              TextGrid
          
              Textile
          
              TextMate Properties
          
              Thrift
          
              TI Program
          
              TL-Verilog
          
              TLA
          
              Toit
          
              TOML
          
              Tree-sitter Query
          
              TSPLIB data
          
              TSQL
          
              TSV
          
              TSX
          
              Turing
          
              Turtle
          
              Twig
          
              TXL
          
              Type Language
          
              TypeScript
          
              TypeSpec
          
              Typst
          
              Unified Parallel C
          
              Unity3D Asset
          
              Unix Assembly
          
              Uno
          
              UnrealScript
          
              UrWeb
          
              V
          
              Vala
          
              Valve Data Format
          
              VBA
          
              VBScript
          
              vCard
          
              VCL
          
              Velocity Template Language
          
              Verilog
          
              VHDL
          
              Vim Help File
          
              Vim Script
          
              Vim Snippet
          
              Visual Basic .NET
          
              Visual Basic .NET
          
              Visual Basic 6.0
          
              Volt
          
              Vue
          
              Vyper
          
              Wavefront Material
          
              Wavefront Object
          
              WDL
          
              Web Ontology Language
          
              WebAssembly
          
              WebAssembly Interface Type
          
              WebIDL
          
              WebVTT
          
              Wget Config
          
              WGSL
          
              Whiley
          
              Wikitext
          
              Win32 Message File
          
              Windows Registry Entries
          
              wisp
          
              Witcher Script
          
              Wollok
          
              World of Warcraft Addon Data
          
              Wren
          
              X BitMap
          
              X Font Directory Index
          
              X PixMap
          
              X10
          
              xBase
          
              XC
          
              XCompose
          
              Xmake
          
              XML
          
              XML Property List
          
              Xojo
          
              Xonsh
          
              XPages
          
              XProc
          
              XQuery
          
              XS
          
              XSLT
          
              Xtend
          
              Yacc
          
              YAML
          
              YANG
          
              YARA
          
              YASnippet
          
              Yul
          
              ZAP
          
              Zeek
          
              ZenScript
          
              Zephir
          
              Zig
          
              ZIL
          
              Zimpl
      
    
    
      
      Loading

    
  


        

        
          
        Date range:

    
      Today


  
    
      
        Adjust time span

      
    

    
        

          
            Today
        

          
            This week
        

          
            This month
    
  


        
      
    

    
          
  

      
            
        
          Star


  

  
    

      
        microsoft /

      markitdown  

    
      Python tool for converting files and office documents to Markdown.
    

  
      
  
  Python



      
        52,468
      
        2,589
      
        Built by

          
          
          
          
          

      
        
        980 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        microsoft /

      BitNet  

    
      Official inference framework for 1-bit LLMs
    

  
      
  
  C++



      
        16,313
      
        1,174
      
        Built by

          
          
          
          
          

      
        
        730 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        Byaidu /

      PDFMathTranslate  

    
      PDF scientific paper translation with preserved formats - 基于 AI 完整保留排版的 PDF 文档全文双语翻译，支持 Google/DeepL/Ollama/OpenAI 等服务，提供 CLI/GUI/MCP/Docker/Zotero
    

  
      
  
  Python



      
        21,506
      
        1,819
      
        Built by

          
          
          
          
          

      
        
        272 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        pocketbase /

      pocketbase  

    
      Open Source realtime backend in 1 file
    

  
      
  
  Go



      
        45,833
      
        2,252
      
        Built by

          
          
          
          
          

      
        
        92 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        drawdb-io /

      drawdb  

    
      Free, simple, and intuitive online database diagram editor and SQL generator.
    

  
      
  
  JavaScript



      
        27,621
      
        1,949
      
        Built by

          
          
          
          
          

      
        
        256 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        microsoft /

      generative-ai-for-beginners  

    
      21 Lessons, Get Started Building with Generative AI 🔗 https://microsoft.github.io/generative-ai-for-beginners/
    

  
      
  
  Jupyter Notebook



      
        79,003
      
        40,999
      
        Built by

          
          
          
          
          

      
        
        139 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        CoatiSoftware /

      Sourcetrail  

    
      Sourcetrail - free and open-source interactive source explorer
    

  
      
  
  C++



      
        15,871
      
        1,526
      
        Built by

          
          
          
          
          

      
        
        55 stars today
  


          
  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        kamranahmedse /

      developer-roadmap  

    
      Interactive roadmaps, guides and other educational content to help developers grow in their careers.
    

  
      
  
  TypeScript



      
        315,127
      
        40,943
      
        Built by

          
          
          
          

      
        
        337 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        yt-dlp /

      yt-dlp  

    
      A feature-rich command-line audio/video downloader
    

  
      
  
  Python



      
        108,981
      
        8,563
      
        Built by

          
          
          
          
          

      
        
        297 stars today
  


          
  
        
    
    
      Sponsor
    
  



      
            
        
          Star


  

  
    

      
        WerWolv /

      ImHex  

    
      🔍 A Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM.
    

  
      
  
  C++



      
        48,500
      
        2,099
      
        Built by

          
          
          
          
          

      
        
        97 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        cloudcommunity /

      Free-Certifications  

    
      A curated list of free courses with certifications. Also available at https://free-certifications.com/
    

  

      
        29,604
      
        2,178
      
        Built by

          
          
          
          
          

      
        
        66 stars today
  


          
  

      
            
        
          Star


  

  
    

      
        RVC-Boss /

      GPT-SoVITS  

    
      1 min voice data can also be used to train a good TTS model! (few shot voice cloning)
    

  
      
  
  Python



      
        44,751
      
        4,978
      
        Built by

          
          
          
          
          

      
        
        116 stars today\n\n\n\n#
    

    
      How to choose (and contribute to) your first open source project
      New to open source? Here’s how to find projects that need help and start making impactful contributions.
    
  
    
        #
    

    
      Clean code linters
      Make sure your code matches your style guide with these essential code linters.
    
  
    
        #
    

    
      Open journalism
      See how publications and data-driven journalists use open source to power their newsroom and ensure information is reported fairly and accurately.
    
  
    
        #
    

    
      Design essentials
      This collection of design libraries are the best on the web, and will complete your toolset for designing stunning products.
    
  
    
        #
    

    
      Music
      Drop the code bass with these musically themed repositories.
    
  
    
        
    

    
      Government apps
      Sites, apps, and tools built by governments across the world to make government work better, together. Read more at https://government.github.com
    
  
    
        #
    

    
      DevOps tools
      These tools help you manage servers and deploy happier and more often with more confidence.
    
  
    
        #
    

    
      Front-end JavaScript frameworks
      While the number of ways to organize JavaScript is almost infinite, here are some tools that help you build single-page applications.
    
  
    
        #
    

    
      GitHub Browser Extensions
      Some useful and fun browser extensions to personalize your GitHub browser experience.
    
  
    
        
    

    
      GitHub Pages examples
      Fine examples of projects using GitHub Pages (https://pages.github.com).
    
  
    
        
    

    
      Hacking Minecraft
      Minecraft is a game about building blocks, but it doesn’t end there. Take Minecraft further with some of the projects below, or dive into the code mines and hammer your own!
    
  
    
        #
    

    
      JavaScript Game Engines
      Learn or level up your 1337 gamedev skills and build amazing games together for web, desktop, or mobile using these HTML5 / JavaScript game engines.
    
  
    
        
    

    
      Learn to Code
      Resources to help people learn to code
    
  
    
        #
    

    
      Getting started with machine learning
      Today, machine learning—the study of algorithms that make data-based predictions—has found a new audience and a new set of possibilities.
    
  
    
        
    

    
      Made in Africa
      Developers in Africa use open source technology to solve some of the world's most intractable problems and grow their business ecosystems. Here's a snapshot of local projects across the continent.
    
  
    
        
    

    
      Net neutrality
      Software, research, and organizations protecting the free and open internet.
    
  
    
        #
    

    
      Open data
      Examples of using GitHub to store, publish, and collaborate on open, machine-readable datasets
    
  
    
        
    

    
      Open source organizations
      A showcase of organizations showcasing their open source projects.
    
  
    
        #
    

    
      Policies
      From federal governments to corporations to student clubs, groups of all sizes are using GitHub to share, discuss, and improve laws. *Ask not what the repository can do for you...*
    
  
    
        #
    

    
      Software productivity tools
      Build software faster with fewer headaches, using these tools and tricks.\n\nExplore

      Topics

        Trending

        Collections

        Events

        GitHub Sponsors
    
  




  
    Collections
    Curated lists and insight into burgeoning industries, topics, and communities.
  

  
    
        
  
      
    Learn to Code
    Resources to help people learn to code
  


        
  
      
    Made in Brazil
    Open source projects built in or receiving significant contributions from Brazil :brazil:
  


        
  
      #
    Game Engines
    Frameworks for building games across multiple platforms.
  


    
  

    
    
        #
    

    
      How to choose (and contribute to) your first open source project
      New to open source? Here’s how to find projects that need help and start making impactful contributions.
    
  
  
    
        #
    

    
      Clean code linters
      Make sure your code matches your style guide with these essential code linters.
    
  
  
    
        #
    

    
      Open journalism
      See how publications and data-driven journalists use open source to power their newsroom and ensure information is reported fairly and accurately.
    
  
  
    
        #
    

    
      Design essentials
      This collection of design libraries are the best on the web, and will complete your toolset for designing stunning products.
    
  
  
    
        #
    

    
      Music
      Drop the code bass with these musically themed repositories.
    
  
  
    
        
    

    
      Government apps
      Sites, apps, and tools built by governments across the world to make government work better, together. Read more at https://government.github.com
    
  
  
    
        #
    

    
      DevOps tools
      These tools help you manage servers and deploy happier and more often with more confidence.
    
  
  
    
        #
    

    
      Front-end JavaScript frameworks
      While the number of ways to organize JavaScript is almost infinite, here are some tools that help you build single-page applications.
    
  
  
    
        #
    

    
      GitHub Browser Extensions
      Some useful and fun browser extensions to personalize your GitHub browser experience.
    
  
  
    
        
    

    
      GitHub Pages examples
      Fine examples of projects using GitHub Pages (https://pages.github.com).
    
  
  
    
        
    

    
      Hacking Minecraft
      Minecraft is a game about building blocks, but it doesn’t end there. Take Minecraft further with some of the projects below, or dive into the code mines and hammer your own!
    
  
  
    
        #
    

    
      JavaScript Game Engines
      Learn or level up your 1337 gamedev skills and build amazing games together for web, desktop, or mobile using these HTML5 / JavaScript game engines.
    
  
  
    
        
    

    
      Learn to Code
      Resources to help people learn to code
    
  
  
    
        #
    

    
      Getting started with machine learning
      Today, machine learning—the study of algorithms that make data-based predictions—has found a new audience and a new set of possibilities.
    
  
  
    
        
    

    
      Made in Africa
      Developers in Africa use open source technology to solve some of the world's most intractable problems and grow their business ecosystems. Here's a snapshot of local projects across the continent.
    
  
  
    
        
    

    
      Net neutrality
      Software, research, and organizations protecting the free and open internet.
    
  
  
    
        #
    

    
      Open data
      Examples of using GitHub to store, publish, and collaborate on open, machine-readable datasets
    
  
  
    
        
    

    
      Open source organizations
      A showcase of organizations showcasing their open source projects.
    
  
  
    
        #
    

    
      Policies
      From federal governments to corporations to student clubs, groups of all sizes are using GitHub to share, discuss, and improve laws. *Ask not what the repository can do for you...*
    
  
  
    
        #
    

    
      Software productivity tools
      Build software faster with fewer headaches, using these tools and tricks.
    
  
  
    
    Load more…\n\n\n\nGitHub CopilotFor businessExtensions TutorialsWhat’s newPlans & pricingCopilot for BusinessBuild what’s next with GitHub  CopilotView plans & pricingContact salesAccelerating Commerce: Mercado Libre + GitHubGitHub Copilot equips you to build the future, whether you're charged with scaling operations or boosting developer productivity. AI that grows with you. Use your code as context while setting boundaries for what to exclude and governance on use.Velocity with quality. Developers want tools without toil, and GitHub Copilot provides AI assistance from the IDE to GitHub to the CLI and more, with agents to review and suggest.Choose your AI adventure. From choice of model to third-party integrations, GitHub Copilot meets your challenges your way.
/features/copilot/copilot-business logoThe competitive advantage developers ask for by nameQuantifying GitHub Copilot's impactSince bringing GitHub Copilot to market, we’ve conducted several lab studies to discover its impact on developer efficiency, developer satisfaction, and overall code quality.Learn moreLeader in the Gartner Magic Quadrant for AI Code AssistantsIn 2024, Gartner published a first-of-its-kind report analyzing the state of play in the AI Code Assistants market–and named GitHub a Leader.View Gartner reportCommitted to your privacy, security, and trustGitHub is committed to building secure defaults for developers and organizations.Visit the trust centerHow Thomson Reuters successfully adopted AI —and how your organization can, tooRead more55%faster coding39%improvement in code quality68%had a positive experienceResources and insightsStay ahead with GitHub’s latest innovationsSee how our recent and upcoming releases can help your organization drive efficiency, security, and innovation.
See what's newMeasuring the impact of GitHub CopilotMany enterprises quite reasonably ask, “How do I know Copilot is conferring these benefits for my team?” To answer that question, this guide will walk you through a framework for evaluating impact across four stages. Learn moreHow developers spend the  time they save thanks to AI coding toolsDevelopers tell us how GitHub Copilot and other AI coding tools are transforming their work and changing how they spend their days.Learn moreGet approved onceHands-on consulting, guided workshops, and trainingInsights, best practices, and knowledge to help you adopt GitHub quickly and efficiently.Explore GitHub Expert ServicesMeet the companies who build with GitHubLeading organizations choose GitHub to plan, build, secure and ship software.Read customer storiesExecutive insights, curated just for youThought leadership from subject matter experts that extends beyond tooling into business impact.Explore Executive Insights“With the time savings Copilot unlocks, our developers are empowered to spend more time on the tasks they enjoy most — creative-problem solving, innovative projects and experimentation.”Jasmine RamosIT Principal Product Manager, Mercedes-Benz Build what’s nextWhether you're charged with scaling enterprise operations or boosting developer productivity, GitHub Copilot equips you to build what’s next.View plans & pricingContact salesFAQsCan I use code hosting platforms other than GitHub for my repositories and still use GitHub Copilot?Yes. GitHub Copilot functionality works in code editors regardless of code hosting platform. Some features are enhanced with the use of GitHub because Copilot can directly draw context and knowledge from repositories, pull requests, issues, and other data structures in the GitHub platform.
Does GitHub use Copilot Business or Enterprise data to train GitHub’s model?No. GitHub does not use either Copilot Business or Enterprise data to train its models. 
Does GitHub Copilot include a filtering mechanism to mitigate risk?Yes, GitHub Copilot does include an optional code referencing filter to detect and suppress certain suggestions that match public code on GitHub.GitHub has created a duplication detection filter to detect and suppress suggestions that contain code segments over a certain length that match public code on GitHub. This filter can be enabled by the administrator for your enterprise and it can apply for all organizations within your enterprise, or the administrator can defer control to individual organizations. With the filter enabled, Copilot checks code suggestions for matches or near-matches against public code on GitHub of 65 lexemes or more (on average,150 characters). If there is a match, the suggestion will not be shown to the user.In addition to off-topic, harmful, and offensive output filters, GitHub Copilot also scans the outputs for vulnerable code.Does GitHub Copilot support compliance with the GDPR and other data protection laws?Yes. GitHub and customers can enter a Data Protection Agreement that supports compliance with the GDPR and similar legislation.\n\n\n\nEnterprise

      
        
        
      

      
          Advanced Security
          Premium Support
      

    


  


  Get 24/7 support for your business with GitHub Premium Support

  
    
      
        
          
            
          
          Protect your business and manage IT health with a comprehensive support plan.
        

        
          
            
          
          Drive operational efficiency and boost uptime with dedicated GitHub experts.
        

        
          
            
          
          Empower your team and meet your goals with the resources to maximize your investment.
        

        
          
            
          
          
  Get a quote
  
  


          
            Looking for general support questions? Contact GitHub Support.
          
        
      
    

    
      
        
        
        
          
          
        
        
  
  
  

      
    
  

  
      
      
      
      
      
      
      
  


  
  Already an existing customer?

  
    
      
        
        Upgrade to GitHub Premium Support to drive impact quickly.
        
            
              
              Experience faster responses 24/7 to maximize your uptime
            
            
              
              Receive expert support in one central location
            
            
              
              Get a dedicated engineer who knows your account
            
        
        
          
  Discover all features
  
  

        
      
    

    
      
        
        Get GitHub Premium Support with your Microsoft Unified Support plan.
        
            
              
              Provide your team with convenient, self-service tools
            
            
              
              Ensure the reliability of your environment
            
            
              
              Accelerate your goals with best-in-class support
            
        
        
          
  Check your benefits
  
  

        
      
    

    
      
        
          
            
              Not a GitHub Enterprise customer yet?
              Learn more about GitHub Premium Support and GitHub Premium Plus Support to discover the plan that’s right for you.
              
                
  Get a quote
  
  


              
            
          
          
            
              
  
  
  

            
          
        
        
      
    
  


  

  Why choose GitHub Premium Support?
  
    
      
      
        “
          
            At TSIA, we're seeing technology leaders take an active role in helping their customers adopt new technologies. GitHub is demonstrating a thoughtful, deliberate approach to creating compelling service offerings.
            
            
              With three tiers of service options, GitHub Premium Support provides customers with smart services at the right time to drive business goals, while simplifying customer choice and allowing for service expansion as needed.
            
          
        
          Hal Stanley // VP Service Offer Management Research & Advisory, TSIA
          
            
          
        
      
    
  


  
  
    
      Discover the plan that’s right for you
      Use the dropdown filters to reflect your organization’s properties.
    
    
        
    
            Product

          

            GHES

            GHEC/GHES dual use + GHAS

            GHEC




        
    
            License seats

          

            < 1000

            < 2000

            >= 2000

            < 6000

            >= 6000




        
    
            Complexity

          

            Standard

            High




    

    
        
          
            
            Enterprise

            
                    
                      24/5
                      Support
                    
                    
                      < 8 hours
                      Initial response for urgent requests
                    
                    
                      < 8 hours
                      Initial response for high requests
                    
                    
                      —
                       
                    
                    
                      —
                       
                    
                    
                      —
                       
                    
            

              
                  
                    Already included with your Enterprise license:
                  
                  
                      Support via online ticket submission
                      Expert guidance from a shared support team
                  
              

        
        
          
            
            Premium

            
                    
                      24/7
                      Support
                    
                    
                      30 min
                      Initial response for urgent requests
                    
                    
                      4 hours
                      Initial response for high requests
                    
                    
                      20
                      Support entitlements
                    
                    
                      —
                       
                    
                    
                      —
                       
                    
            

              
                  
                    Get everything in the Enterprise support plan, along with:
                  
                  
                      Phone support in English via callback request
                      Screenshare support for critical issues
                      Guaranteed service level agreements (SLAs)
                      20 support entitlement licenses
                      Priority ticket handling
                      Escalation management
                      Unlimited automated health check reports
                      Access to premium training content
                  
              

              
                
  Get a quote
  
  


              
        
        
          
            
            Premium Plus

            
                    
                      24/7
                      Support
                    
                    
                      30 min
                      Initial response for urgent requests
                    
                    
                      4 hours
                      Initial response for high requests
                    
                    
                      40
                      Support entitlements
                    
                    
                      Named CRE
                      Per account
                    
                    
                      1 training
                      Per year
                    
            

              
                  
                    Get everything in Premium support plan, along with:
                  
                  
                      Additional 20 support entitlement licenses
                      Designated Customer Reliability Engineer (CRE)
                      Incident management
                      Quarterly enhanced health checks with findings, interpretations, and recommendations from a CRE (by request)
                      Crisis prevention: Guided incident simulations that help you prepare for — and experience — an incident without risk (available for GitHub Enterprise Server)
                      1 virtual training class per year
                      12 hours of technical advisory hours per quarter
                      Application upgrade assistance (by request)
                      Cloud planning (by request)
                  
              

              
                
  Get a quote
  
  


              
        
    
  
  
  
    
    Compare all features
  

  
    
      
        
          Features on Premium
        
        Switch plans
      
    
    
      
        
          Select a plan to review its features
        
        
          Enterprise
          Premium
          Premium Plus
        
      
    
  

  
    
      
        
          Features
        
          
            Enterprise
          
          
            Premium
          
          
            Premium Plus
          
      
      
        
          How to get started?
        
            
              Already included with your Enterprise license
            
            
              
                  
  Get a quote
  
  


              
            
            
              
                  
  Get a quote
  
  


              
            
      
    

    
          
      
          
            
  
    
      
        Plan coverage
      
    
  
  
    
        Included with Enterprise Cloud and Enterprise Server
    
    
        Available for Enterprise Cloud and Enterprise Server
    
    
        Available for Enterprise Cloud and Enterprise Server
    
  


          
      

      
        
            Included with Enterprise Cloud and Enterprise Server
        
      

      
        
            Available for Enterprise Cloud and Enterprise Server
        
      

      
        
            Available for Enterprise Cloud and Enterprise Server
        
      
    
    
      
          
            
  
    
      
        Support hours
      
    
  
  
    
        24/5
    
    
        24/7
    
    
        24/7
    
  


          
      

      
        
            24/5
        
      

      
        
            24/7
        
      

      
        
            24/7
        
      
    
    
      
          
            
  
    
      
        Initial response time
      
    
  
  
    
        < 8 hours
    
    
        30 minutes for Urgent (including initial troubleshooting)
4 hours for High
    
    
        30 minutes for Urgent (including initial troubleshooting)
4 hours for High
    
  


          
      

      
        
            < 8 hours
        
      

      
        
            30 minutes for Urgent (including initial troubleshooting)
4 hours for High
        
      

      
        
            30 minutes for Urgent (including initial troubleshooting)
4 hours for High
        
      
    
    
      
          
            
              
              
  
    
      
        Training
      
    
  
  
    
        n/a
    
    
        Access to premium content
    
    
        Access to premium content
1 virtual training class per year
    
  


            
            
              One virtual training class is offered per year, with topics such as “GitHub for developers” and “GitHub for admins”.
          
      

      
        
            n/a
        
      

      
        
            Access to premium content
        
      

      
        
            Access to premium content
1 virtual training class per year
        
      
    
    
      
          
            
              
              
  
    
      
        Members with support entitlements
      
    
  
  
    
        n/a
    
    
        20
    
    
        40
    
  


            
            
              These members determine if incoming inquiries can be addressed via their company’s admin or only by GitHub.
          
      

      
        
            n/a
        
      

      
        
            20
        
      

      
        
            40
        
      
    
    
      
          
            
  
    
      
        Dedicated resources
      
    
  
  
    
        n/a
    
    
        Priority ticket handling
    
    
        Priority ticket handling + named Customer Reliability Engineer
    
  


          
      

      
        
            n/a
        
      

      
        
            Priority ticket handling
        
      

      
        
            Priority ticket handling + named Customer Reliability Engineer
        
      
    
    
      
          
            
  
    
      
        Escalation management
      
    
  
  
    
        n/a
    
    
        For High and Urgent priority tickets
    
    
        For High and Urgent priority tickets
    
  


          
      

      
        
            n/a
        
      

      
        
            For High and Urgent priority tickets
        
      

      
        
            For High and Urgent priority tickets
        
      
    
    
      
          
            
              
              
  
    
      
        Incident management
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        For Urgent priority tickets, as needed
    
  


            
            
              Ensures you have the technical resources needed for case resolution, and is available 24/7.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            For Urgent priority tickets, as needed
        
      
    
    
      
          
            
  
    
      
        Health Checks
      
    
  
  
    
        n/a
    
    
        Unlimited automated Health Check reports (see “Generating a Health Check for your enterprise”)
    
    
        Unlimited automated Health Check reports (see “Generating a Health Check for your enterprise”)
Quarterly enhanced health checks with findings, interpretations, and recommendations from a CRE (by request)
    
  


          
      

      
        
            n/a
        
      

      
        
            Unlimited automated Health Check reports (see “Generating a Health Check for your enterprise”)
        
      

      
        
            Unlimited automated Health Check reports (see “Generating a Health Check for your enterprise”)
Quarterly enhanced health checks with findings, interpretations, and recommendations from a CRE (by request)
        
      
    
    
      
          
            
  
    
      
        Crisis Prevention
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        Up to four sessions about reliability best practices, preparing for a potential incident, and efficiently interacting with GitHub Support.
    
  


          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            Up to four sessions about reliability best practices, preparing for a potential incident, and efficiently interacting with GitHub Support.
        
      
    
    
      
          
            
              
              
  
    
      
        Technical advisory hours
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        12 hours per quarter
    
  


            
            
              Hours can be scheduled at your discretion. You can use them for technical tasks, such as prepping for a GitHub Enterprise Server upgrade.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            12 hours per quarter
        
      
    
    
      
          
            
              
              
  
    
      
        Application upgrade assistance
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        By request
    
  


            
            
              Delivered upon request via our Customer Reliability Engineers.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            By request
        
      
    
    
      
          
            
              
              
  
    
      
        Cloud planning
      
    
  
  
    
        n/a
    
    
        n/a
    
    
        By request
    
  


            
            
              Delivered upon request via our Customer Reliability Engineers.
          
      

      
        
            n/a
        
      

      
        
            n/a
        
      

      
        
            By request
        
      
    

    
  




  
  See what customers are saying about GitHub Premium Support

  
    
    
        
          “
          Our support engineer was very helpful in pointing me to the exact resource I needed in minutes.
          
            
          
        
        
          “
          The support agent took care of the request with a great sense of urgency and addressed the issue well.
          
            
          
        
        
          “
          I'd like to applaud our engineer for how he exceptionally responded to our query. This ticket was not a simple, one-answer investigation and I was very happy with how he explored multiple angles to investigate.
          
            
          
        
        
          “
          Our engineer was super helpful and spot on with figuring out the problem. The steps he suggested helped me figure out the problem quickly. Kudos!
          
            
          
        
    
  


  
  Meet your dedicated GitHub Premium Support team

  
      
        
  
  
  

        Premium Support Engineers
        Premium Support Engineers, available only for GitHub Premium Support customers, are dedicated resources who manage and coordinate your entire GitHub Premium Support experience.
      
      
        
  
  
  

        Support Incident Coordinators
        Support Incident Coordinators are responsible for any major incident management, from initiation until resolution, and are available to you 24/7.
      
      
        
  
  
  

        Customer Reliability Engineers (CREs)
        Customer Reliability Engineers (CREs), available only for GitHub Premium Plus Support customers, know your customer account in detail and can provide answers faster than Premium Support Engineers.
      
  



  
    
  
  
    Frequently asked questions


          About GitHub Premium Support


    
  
    
      
      
        What is GitHub Premium Support for?
      
    
    
      GitHub Premium Support helps customers implement GitHub Enterprise quickly and effectively across the organization with 24/7 support.
      
    
  


    
  
    
      
      
        How much does GitHub Premium Support cost?
      
    
    
      For pricing information, please get in touch with the GitHub Premium Support Sales sales team.
      
    
  


    
  
    
      
      
        What are the levels of support in GitHub Premium Support?
      
    
    
      There are three levels of support:

The basic plan included with your GitHub Enterprise license
GitHub Premium Support
GitHub Premium Plus Support

Please refer to our plan comparison table for more details.
      
    
  


    
  
    
      
      
        How do I contact GitHub Premium Support?
      
    
    
      If you are an existing GitHub Premium Support customer, please sign in to our support portal. If you don’t already have GitHub Premium Support, please contact sales.
      
    
  



          Choosing your plan


    
  
    
      
      
        What is escalation and incident management?
      
    
    
      Escalation and incident management is the ability to escalate ticket progression in the GitHub support portal. After someone escalates a ticket, Support Incident Coordinators orchestrate all necessary parties to resolve the ticket. Additionally, Senior Escalation Engineers (SEEs) facilitate GitHub-internal technical communications and liaise with the rest of GitHub to improve the support team’s capability in similar future circumstances.
      
    
  


    
  
    
      
      
        What is incident response management?
      
    
    
      Incident response management helps manage the technical resources needed for case resolution. Support Incident Coordinators are available for incident response management 24/7.
      
    
  


    
  
    
      
      
        What are my SLAs for initial response?
      
    
    
      GitHub Premium Support and GitHub Premium Plus Support customers have SLAs. For urgent priority tickets, your SLA guarantees a 30-minute initial response time, which includes troubleshooting. For high priority tickets, your SLA provides a four-hour initial response time.
      
    
  


    
  
    
      
      
        What’s included in initial troubleshooting?
      
    
    
      For initial troubleshooting, the assigned Premium Support Engineer/Customer Reliability Engineer will review and acknowledge your ticket. To better understand the issue and start troubleshooting, the engineer may ask for additional information such as screenshots, error messages, log files, diagnostics files, support bundles, or the output of specific console commands. They may also collaborate with others in support, engineering, or in the regional incident commander.
If a callback was requested, the engineer will determine if screen sharing is the most effective way to drive ticket resolution. If so, they will invite you to join a screen-sharing session.
      
    
  


    
  
    
      
      
        How do I get health check reports?
      
    
    
      GitHub Premium Support and GitHub Premium Plus Support customers are entitled to unlimited automated health check reports. Additionally, GitHub Premium Plus Support customers can request quarterly enhanced health checks with findings, interpretations, and recommendations from a Customer Reliability Engineer (CRE).
      
    
  


    
  
    
      
      
        What is crisis prevention?
      
    
    
      Crisis prevention allows GitHub Enterprise Server customers to prepare for — and experience — an incident without risk. Your Customer Reliability Engineer (CRE) guides your team through an incident simulation in a safe and controlled environment.
Crisis Prevention consists of up to four sessions about reliability best practices, preparing for a potential incident, and efficiently interacting with GitHub Support. After the incident simulation, your CRE will run a detailed retrospective, uncovering lessons learned and improvement suggestions for the future.
      
    
  


    
  
    
      
      
        How long does GitHub Premium Support take?
      
    
    
      GitHub Premium Support and GitHub Premium Plus Support Plus customers have service-level agreements (SLAs) for initial response. For urgent priority tickets, the initial response SLA guarantees a 30-minute initial response time, which includes troubleshooting. For high-priority tickets, the initial response SLA provides a four-hour time.
We currently do not provide estimates for time to resolution, as the complexity of tickets varies. However, we review these metrics on a regular basis and reduce times whenever possible.
      
    
  


    
  
    
      
      
        How do I resolve a problem in GitHub Enterprise?
      
    
    
      You can get support via online ticket submission if you’re using the basic plan included with your GitHub Enterprise license. If you have GitHub Premium Support or GitHub Premium Plus Support, you can submit a ticket online. For urgent tickets, GitHub Premium Support and GitHub Premium Plus Support customers can request a callback and have a screen-sharing session with one of our Premium Support Engineers or Customer Reliability Engineers (CREs). Please refer to our plan comparison table for more details.
      
    
  



          Rules and policies


    
  
    
      
      
        If I do not use all the technical advisory hours in a given quarter, can they be carried over?
      
    
    
      Premium Plus customers may use up to 12 technical advisory hours per quarter. Unused technical advisory hours may not be carried over into the next quarter.
      
    
  


    
  
    
      
      
        How can the technical advisory support hours be used? 
      
    
    
      There are multiple ways you can use technical advisory hours, including but not limited to:

Consultations regarding GitHub best practices and general recommendations
GitHub Enterprise Server upgrade preparation and assistance

      
    
  


    
  
    
      
      
        Does GitHub Premium Support provide service on weekends?
      
    
    
      Yes! GitHub Premium Support and GitHub Premium Plus Support customers receive 24/7 support.
      
    
  



          Upgrading your plan


    
  
    
      
      
        What virtual trainings are available with GitHub Premium Plus Support and who can participate?
      
    
    
      Customers get access to one virtual training class per year. Topics include:

GitHub for developers
GitHub for admins (Server)
GitHub for admins (Cloud)
GitHub for non-developers
GH API Training
GH Actions Fundamentals
GH Actions Intermediate
GH Copilot Fundamentals
GH Copilot Intermediate
GH Copilot Administration & Security
GitHub Enterprise Implementation (Cloud)

We recommend limiting training sessions to a maximum of 16 participants to ensure an optimal provider-to-participant ratio and a high-quality delivery experience. However, in specific cases where it makes sense, we can accommodate up to 20–25 participants while maintaining our commitment to delivering a valuable training experience for your team.
      
    
  


    
  
    
      
      
        What value will I get by upgrading to GitHub Premium Plus Support?
      
    
    
      GitHub Premium Plus Support customers get an assigned Customer Reliability Engineer (CRE), quarterly enhanced health checks, access to crisis prevention, technical advisory hours, and many additional benefits, which you can review in our plan comparison table.
      
    
  


    
  
    
      
      
        What’s the benefit of having a Customer Reliability Engineer (CRE) over a Premium Support Engineer?
      
    
    
      A CRE knows your customer account in detail and can help you expedite case resolution faster than a Premium Support Engineer.
      
    
  


    
  
    
      
      
        Since I get GitHub Enterprise Support for free, why should I upgrade to GitHub Premium Support?
      
    
    
      Most customers upgrade to GitHub Premium Support because they need initial response SLAs for urgent and high priority requests, phone support, screen share support for critical issues, and health checks. To see a full list of features for GitHub Premium Support packages, please refer to our plan comparison table.
      
    
  




  


  



    
  
    
      Ready to maximize your investment?
      Get in touch with a GitHub Premium Support specialist today.
      Click below to fill out the form, and our management team will contact you within 48 hours.
      
  Get a quote\n\n\n\nTry the Copilot-powered platform

  
  
    We get it, there's a lot you can do with GitHub.
    That’s why we've packed all of it into a single risk-free trial that includes GitHub Enterprise, Copilot,
    and Advanced Security.
  

    Start free for 30 days
  




  
    




  

  
    
      
        Free
        The basics for individuals and organizations
          
    
      
        
            $
            0
            USD
        
        
          per month
        
      
    
  

  
    
      
        
          
              $
              0
              USD
          
        
        
          
            per month
          
          
              forever
          
        
      
    
  






        
            
  Join for free
  
  

        
      

        
  
    
          
  
    
      
        
          
        

        
          
            Unlimited public/private repositories
          

          
        
      
    

    
      
        Host open source projects in public GitHub repositories, accessible via web or command line. Public repositories are accessible to anyone at GitHub.com.
      


    
  
    
      
        
          
        

        
          
            Dependabot security and version updates
          

          
        
      
    

    
      
        Keep projects secure by automatically opening pull requests to update vulnerable dependencies and keep them up to date.
      


    
  
    
      
        
          
        

        
          
            2,000 CI/CD minutes/month
          

          Free for public repositories
        
      
    

    
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub.
      


    
  
    
      
        
          
        

        
          
            500MB of Packages storage
          

          Free for public repositories
        
      
    

    
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available.
      


    
  
    
      
        
          
        

        
          
            Issues & Projects
          

          
        
      
    

    
      
        Give your developers flexible features for project management that adapts to any team, project, and workflow — all alongside your code.
      


    
  
    
      
        
          
        

        
          
            Community support
          

          
        
      
    

    
      
        Get help with most of your GitHub questions and issues in our Community Forum.
      



    

    
      Featured add-ons
    

    
          
  
    
      
        
          
        

        
          
            GitHub Copilot Access
          

          
        
      
    

    
      
        With GitHub Copilot, get suggestions for whole lines or entire functions—right inside your editor.
      


    
  
    
      
        
          
        

        
          
            GitHub Codespaces Access
          

          
        
      
    

    
      
        With GitHub Codespaces, get an instant dev environment in the cloud, so you can code anywhere on any device.
      



    
  
  Show features


    
  



    


  
    Most popular
    
      
        Team
        Advanced collaboration for individuals and organizations
          
    
      
        
            $
            4
            USD
        
        
          per user/month
        
      
    
  

  
    
      
        
          
              $
              4
              USD
          
        
        
          
            per user/month
          
          
              for the first 12 months*
          
        
      
    
  






        
            
  Continue with Team
  
  

        
      

        
  
    
      
        
          
        
        Everything included in Free, plus...
      

          
  
    
      
        
          
        

        
          
            Access to GitHub Codespaces
          

          
        
      
    

    
      
        Blazing fast cloud developer environments with flexible compute and pre-configured containers, developers can code, collaborate, and debug from any browser. Pay only for what you use with compute fees starting at $0.18/hr and storage fees at $0.07/GB per month.
      


    
  
    
      
        
          
        

        
          
            Protected branches
          

          
        
      
    

    
      
        Enforce restrictions on how code branches are merged, including requiring reviews by selected collaborators, or allowing only specific contributors to work on a particular branch.
      


    
  
    
      
        
          
        

        
          
            Multiple reviewers in pull requests
          

          
        
      
    

    
      
        Assign multiple users or a team to review a pull request.
      


    
  
    
      
        
          
        

        
          
            Draft pull requests
          

          
        
      
    

    
      
        Easily discuss and collaborate on pull requests before submitting to formal review.
      


    
  
    
      
        
          
        

        
          
            Code owners
          

          
        
      
    

    
      
        Automatically request reviews—or require approval—by selected contributors when changes are made to sections of code that they own.
      


    
  
    
      
        
          
        

        
          
            Required reviewers
          

          
        
      
    

    
      
        Ensure that pull requests have a specific number of approving reviews before collaborators can make changes to a protected branch.
      


    
  
    
      
        
          
        

        
          
            Pages and Wikis
          

          
        
      
    

    
      
        Host documentation and simple websites for your project in a wiki format that contributors can easily edit either on the web or command line.
      


    
  
    
      
        
          
        

        
          
            Environment deployment branches and secrets
          

          
        
      
    

    
      
        A job cannot access secrets that are defined in an environment unless it is running on the specified branch.
      


    
  
    
      
        
          
        

        
          
            3,000 CI/CD minutes/month
          

          Free for public repositories
        
      
    

    
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub.
      


    
  
    
      
        
          
        

        
          
            2GB of Packages storage
          

          Free for public repositories
        
      
    

    
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available.
      


    
  
    
      
        
          
        

        
          
            Web-based support
          

          
        
      
    

    
      
        GitHub Support can help you troubleshoot issues you run into while using GitHub.
      



    

    
      Featured add-ons
    

    
          
  
    
      
        
          
        

        
          
            GitHub Secret Protection
          

          
        
      
    

    
      
        Ensure your secrets stay secure. Mitigate risk associated with exposed secrets in your repositories, while preventing new leaks before they happen with push protection.
      


    
  
    
      
        
          
        

        
          
            GitHub Code Security
          

          
        
      
    

    
      
        Find and fix vulnerabilities in your code before they reach production. Prioritize your Dependabot alerts with automated triage rules.
      



    
  
  Show features


    
  



      

  
    Recommended
    
      
        Enterprise
        Security, compliance, and flexible deployment
        Starting at
          
    
      
        
            $
            21
            USD
        
        
          per user/month
        
      
    
  

  
    
      
        
          
              $
              21
              USD
          
        
        
          
            per user/month
          
          
              for the first 12 months*
          
        
      
    
  






        
          
                
                  
                        Start a free trial

                  
                  
                    
                      Contact Sales
                    
                  
                
          
        
      

        
  
    
      
        
          
        
        Everything included in Team, plus...
      


          
  
    
      
        
          
        

        
          
            Data residency
          

          
        
      
    

    
      
        GitHub Enterprise Cloud offers a multi-tenant enterprise SaaS solution on Microsoft Azure, allowing you to choose a regional cloud deployment for data residency, so your in-scope data is stored at rest in a designated location. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.
      


    
  
    
      
        
          
        

        
          
            Enterprise Managed Users
          

          
        
      
    

    
      
        Own and control the user accounts of your enterprise members through your identity provider (IdP).
      


    
  
    
      
        
          
        

        
          
            User provisioning through SCIM
          

          
        
      
    

    
      
        Automatically invite members to join your organization when you grant access on your IdP. If you remove a member's access to your GitHub organization on your SAML IdP, the member will be automatically removed from the GitHub organization.
      


    
  
    
      
        
          
        

        
          
            Enterprise Account to centrally manage multiple organizations
          

          
        
      
    

    
      
        GitHub Enterprise Cloud includes the option to create an enterprise account, which enables collaboration between multiple organizations, gives administrators a single point of visibility and management and brings license cost savings for identical users in multiple organizations.
      


    
  
    
      
        
          
        

        
          
            Environment protection rules
          

          
        
      
    

    
      
        When a workflow job references an environment, the job won't start until all of the environment's protection rules pass.
      


    
  
    
      
        
          
        

        
          
            Repository rules
          

          
        
      
    

    
      
        Enforce branch and tag restrictions across your organization, ensuring branch and tag protection across your repositories. Evaluate rules to asses impact before enforcement.
      


    
  
    
      
        
          
        

        
          
            Audit Log API
          

          
        
      
    

    
      
        As a GitHub Enterprise Cloud organization administrator, you can now access log events using our GraphQL API and monitor the activity in your organization.
      


    
  
    
      
        
          
        

        
          
            SOC1, SOC2, type 2 reports annually
          

          
        
      
    

    
      
        GitHub offers AICPA System and Organization Controls (SOC) 1 Type 2 and SOC 2 Type 2 reports with IAASB International Standards on Assurance Engagements, ISAE 3000, and ISAE 3402.
      


    
  
    
      
        
          
        

        
          
            FedRAMP Tailored Authority to Operate (ATO)
          

          
        
      
    

    
      
        Government users can host projects on GitHub Enterprise Cloud with the confidence that our platform meets the low impact software-as-a-service (SaaS) baseline of security standards set by our U.S. federal government partners.
      


    
  
    
      
        
          
        

        
          
            SAML single sign-on
          

          
        
      
    

    
      
        Use an identity provider to manage the identities of GitHub users and applications.
      


    
  
    
      
        
          
        

        
          
            Advanced auditing
          

          
        
      
    

    
      
        Quickly review the actions performed by members of your organization. Keep copies of audit log data to ensure secure IP and maintain compliance for your organization.
      


    
  
    
      
        
          
        

        
          
            GitHub Connect
          

          
        
      
    

    
      
        Share features and workflows between your GitHub Enterprise Server instance and GitHub Enterprise Cloud.
      


    
  
    
      
        
          
        

        
          
            50,000 CI/CD minutes/month
          

          Free for public repositories
        
      
    

    
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub.
      


    
  
    
      
        
          
        

        
          
            50GB of Packages storage
          

          Free for public repositories
        
      
    

    
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available.
      



    

    
      Exclusive add-on
    
    
          
  
    
      
        
          
        

        
          
            Premium support
          

          
        
      
    

    
      
        With Premium, get a 30-minute SLA on Urgent tickets and 24/7 web and phone support via callback request. With Premium Plus, get everything in Premium, assigned Customer Reliability Engineer and more. Learn more about Premium Support
      
    



    
  
  Show features


    
  





    
  
    Additional add-ons
  

  
  
        
    
        
            
              
            

          
        

      GitHub Copilot

      
        Get started for free with up to 2,000 completions and 50 chat requests per month.
      

      
        Compare plans 

      

        
    
        
            
              
            

          
        

      GitHub Codespaces

      
        Starting at $0.18 per hour of compute and $0.07 per GB of storage.
      

      
        Learn more 

      

        
    
        
            
              
            

          
        

      Git Large File Storage

      
        $5 per month for 50 GB bandwidth and 50 GB of storage.
      

      
        Learn more 

      

        
    
        
            
              
            

          
        

      GitHub Advanced Security

      
        Secret Protection $19 per committer/ per month. Code Security $30 per committer/ per month
      

      
        Learn more 

      






    
      
        Compare all features
        
      
    
  




  
      
        
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
            
              
                
              
            
        

        
          
            
                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

                
  
  
  

            
          

          
              
                
                  “GitHub is the world’s mono repository, so sharing our open source there is natural.”
                
                — Martin Andersen, VP of Engineering, Trustpilot
                  
    Read the case study 


              
              
                
                  “GitHub Advanced Security is there for every pull request and excels compared to other static analysis tools we have used.”
                
                — Dimosthenis Kaponis, CTO, Netdata
                  
    Read the case study 


              
              
                
                  “GitHub keeps us up to speed with the industry’s best tools. We want new hires to know GitHub is in our toolchain—it makes them excited to join us.”
                
                — Spencer Kaiser, Principal Architect of Emerging Tech, American Airlines
                  
    Read the case study 


              
              
                
                  “This collaborative way of building software is unstoppable. It isn’t going away—and GitHub has its place in that. We can make the whole company rethink how they build software.”
                
                — Ingo Sauerzapf, SAP Cloud Development Tools Manager
                  
    Read the case study 


              
              
                
                  “People know what a pull request is because it’s how they contribute to open source projects. We have many developers who are well-versed with GitHub, either for personal development or previous roles. With GitHub Enterprise, no one has to relearn the wheel.”
                
                — Laurent Ploix, Product Manager, Spotify
                  
    Read the case study 


              
              
                
                  “I have seen some truly revolutionary actions happen in communities on GitHub. People are collaborating on code but they’re also having foundational conversations on best practices and how software, as a whole, is built. More and more, GitHub is an internet archive. It’s a deeply social and critical piece of our infrastructure.”
                
                — Michael Glukhovsky, Developer, Stripe
                  
    Read the case study 


              
              
                
                  “When we started talking about code reuse, we felt like we already had the perfect platform in place: GitHub.”
                
                — Timothy Carmean, Software Processes and Tools Supervisor, Ford
                  
    Read the case study 


              
              
                
                  “Using GitHub Enterprise Cloud removes the burden of managing infrastructure, and we don’t need to worry about the availability of our versioning code, source code and versioning tools. It lets us focus on what’s important for our business, and that’s our customers.”
                
                — Victor Gomes, Infosec Tech Manager, Nubank
                  
    Read the case study 


              
          
        
      
  



  
    Compare features
  







  
    
      
        
          Features on team
        
        Switch plans
      
    
    
      
        
          Select a plan to review its features
        
        
          Free
            Team
              Enterprise
        
      
    
  

  
    
      
        
          
            
              Features
            
          

          
            
              Free
            
          


            
              
                Team
              
            

              
                
                  Enterprise
                
              
        
      

      
        
          
            
              Pricing
            
          

          
            
              
                
  
    
      
        $0
        USD
      
      
        per month
      
    

    
      
        $0
        USD
      
      
        per month
          forever
      
    
  



              
            
          


            
              
                
                  
  
    
      
        $4
        USD
      
      
        per user/month
      
    

    
      
        $4
        USD
      
      
        per user/month
          for the first 12 months*
      
    
  



                
              
            

              
                
                  
                    
  
    
      
        $21
        USD
      
      
        per user/month
      
    

    
      
        $21
        USD
      
      
        per user/month
          for the first 12 months*
      
    
  



                  
                
              
        
      

      
        
          
            
              How to get started
            
          

          
            
                  Join for free

            
          


            
              
                    Continue with Team

              
            

              
                
                        Start a free trial

                        
      Contact Sales
    

                
              
        
      
    

    
      

  
    Code management
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Public repositories
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Host open source projects in public GitHub repositories, accessible via web or command line. Public repositories are accessible to anyone at GitHub.com.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Private repositories
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Host code in private GitHub repositories, accessible via appliance, web, and command line. Private repositories are only accessible to you and people you share them with.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      



    

    
      

  
    Code workflow
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                GitHub Codespaces
              
            
          
          
            
              $0 spend limitWith policies and controls
              
            
              
                Ability to increase spend limit
                
              
                
                  Ability to increase spend limit
                  
                
          
        
      
      
        Spin up fully configured dev environments in the cloud with the power of your favorite editor. A "core hour" denotes compute usage. On a 2-core machine, you would get 60 hours free. On a 4-core machine, you would get 30 hours free, etc. Free hours are assigned to personal accounts, rather than free organizations.
  

  
    
      $0 spend limitWith policies and controls
      
    
  

    
      
        Ability to increase spend limit
        
      
    

      
        
          Ability to increase spend limit
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Actions
              
            
          
          
            
              2,000 minutes/month
              Free for public repositories
            
              
                3,000 minutes/month
                Free for public repositories
              
                
                  50,000 minutes/month
                  Free for public repositories
                
          
        
      
      
        Use execution minutes with GitHub Actions to automate your software development workflows. Write tasks and combine them to build, test, and deploy any code project on GitHub. Minutes are free for public repositories.Learn more about billing
  

  
    
      2,000 minutes/month
      Free for public repositories
    
  

    
      
        3,000 minutes/month
        Free for public repositories
      
    

      
        
          50,000 minutes/month
          Free for public repositories
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Packages
              
            
          
          
            
              500 MB
              Free for public repositories
            
              
                2GB
                Free for public repositories
              
                
                  50GB
                  Free for public repositories
                
          
        
      
      
        Host your own software packages or use them as dependencies in other projects. Both private and public hosting available. Packages are free for public repositories.
  

  
    
      500 MB
      Free for public repositories
    
  

    
      
        2GB
        Free for public repositories
      
    

      
        
          50GB
          Free for public repositories
        
      


    
  
    
      
        
          
            
              
            
            
              
                Code reviews
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Review new code, see visual code changes, and confidently merge code changes with automated status checks.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Pull requests
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Allow contributors to easily notify you of changes they've pushed to a repository – with access limited to the contributors you specify. Easily merge changes you accept.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Protected branches
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Enforce restrictions on how code branches are merged, including requiring reviews by selected collaborators, or allowing only specific contributors to work on a particular branch.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Code owners
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automatically request reviews – or require approval – by selected contributors when changes are made to sections of code that they own.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Draft pull requests
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Easily discuss and collaborate on pull requests before submitting to formal review.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Multiple pull request assignees
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Assign more than one person to a pull request.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Repository insights
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        See data about activity and contributions within your repositories, including trends. You can use this data to improve collaboration and make development faster and more effective.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Scheduled reminders
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Send scheduled messages to you or your team listing open pull requests.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Automatic code review assignment
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automatically assign code reviews to members of your team based on one of two algorithms.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Environment protection rules
              
            
          
          
            
              Public repositories
              
            
              
                Public repositories
                
              
                
                  
                  
                
          
        
      
      
        When a workflow job references an environment, the job won't start until all of the environment's protection rules pass.
  

  
    
      Public repositories
      
    
  

    
      
        Public repositories
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Environment deployment branches and secrets
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        A job cannot access secrets that are defined in an environment unless it is running on the specified branch.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



    

    
      

  
    Collaboration
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Collaborators for public repositories
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Invite any GitHub member, or all GitHub members, to work with you on code in a public repository you control – including making changes and opening issues.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Collaborators for private repositories
              
            
          
          
            
              Unlimited
              
            
              
                


  
    
      
        $4
      
      
        per user/month
      
    
  

                
              
                
                  


  
    
      
        $21
      
      
        per user/month
      
    
  

                  
                
          
        
      
      
        Invite any GitHub member, or all GitHub members, to work with you on code in a private repository you control – including making changes and opening issues.
  

  
    
      Unlimited
      
    
  

    
      
        


  
    
      
        $4
      
      
        per user/month
      
    
  

        
      
    

      
        
          


  
    
      
        $21
      
      
        per user/month
      
    
  

          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Issues
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Track bugs, enhancements, and other requests, prioritize work, and communicate with stakeholders as changes are proposed and merged.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Projects
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Visualize and manage issues and pull requests across tables, boards, and roadmaps with custom fields and views that you can arrange to suit your workflow.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Milestones
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Track progress on groups of issues or pull requests in a repository, and map groups to overall project goals.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Team discussions
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Discuss any topic, unattached to a specific project or issue. Control who has access, notify discussion participants with updates, and link from anywhere.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Organization and team management
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Manage access to projects on a team-by-team, or individual user, basis.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Pages and wikis
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Host documentation and simple websites for your project in a wiki format that contributors can easily edit either on the web or command line.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Multiple issue assignees
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Assign more than one person to an issue.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      




    

    
      

  
    GitHub Secret Protection
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Push protection
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Prevent secret exposures by proactively blocking secrets before they reach your code.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Secret scanning
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Detect and manage exposed secrets across git history, pull requests, issues, and wikis.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Provider patterns
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        GitHub collaborates with AWS, Azure, and Google Cloud to detect secrets with high accuracy. This minimizes false positives, letting you focus on what matters.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Provider notification
              
            
          
          
            
              Public repositories
              
            
              
                Public repositories
                
              
                
                  Public repositories
                  
                
          
        
      
      
        Providers get real-time alerts when their tokens appear in public code, enabling them to notify, quarantine, or revoke secrets.
  

  
    
      Public repositories
      
    
  

    
      
        Public repositories
        
      
    

      
        
          Public repositories
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Validity checks
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Prioritize active secrets with validity checks for provider patterns.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Copilot secret scanning
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Use AI to detect unstructured like passwords—without the noise.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Generic patterns
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Detect tokens from unknown providers, including HTTP authentication headers, connection strings, and private keys.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Custom patterns
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Create your own patterns and find organization-specific secrets.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Push protection bypass controls
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Manage who can bypass push protection and when.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Insights in security overview
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Understand how risk is distributed across your organization with security metrics and insight dashboards.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Scan history API 
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Review how and when GitHub scans your repositories for secrets.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



    

    
      

  
    Code Security
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Copilot Autofix
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Powered by GitHub Copilot, generate automatic fixes for 90% of alert types in JavaScript, Typescript, Java, and Python.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Third party extensibility for code scanning alerts
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Centralize your findings across all your scanning tools via SARIF upload to GitHub.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Contextual vulnerability intelligence and advice
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Quickly remediate with context provided by Copilot Autofix.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                CodeQL
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Uncover vulnerabilities in your code with our industry-leading semantic code analysis.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Security campaigns
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Reduce security debt and burn down your security backlog with security campaigns.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependency graph
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Get a clear view of your project’s dependencies with a summary of manifest, lock files, and submitted dependencies via the API.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependency review action
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Catch insecure dependencies before adding them and get insights on licenses, dependents, and age.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependabot custom auto-triage rules
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Define alert-centric policies to control how Dependabot handles alerts and pull requests.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependabot security updates with grouped updates
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automated pull requests that batch dependency updates for known vulnerabilities.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Dependabot version updates
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Automated pull requests that keep your dependencies up to date.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Insights in security overview
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Get a clear view of risk distribution with security metrics and dashboards.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



    

    
      

  
    Platform security and compliance
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Repository rulesets
              
            
          
          
            
              Public repositories
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Enforce consistent code standards, security, and compliance across branches and tags.
  

  
    
      Public repositories
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                SBOMs
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Export a software bill of materials (SBOM) for your repository.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Artifact attestations
              
            
          
          
            
              Public repositories
              
            
              
                Public repositories
                
              
                
                  
                  
                
          
        
      
      
        Ensure unfalsifiable provenance and integrity for your software.
  

  
    
      Public repositories
      
    
  

    
      
        Public repositories
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Security Advisories
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Role-based access control
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Define users' level of access to your code, data and settings.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Required 2FA
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Use an extra layer of security with two factor authentication (2FA) when logging into GitHub.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Audit log
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Quickly review the actions performed by members of your organization.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      




            
  
    
      
        
          
            
              
            
            
              
                Audit log API
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Keep copies of audit log data to ensure secure IP and maintain compliance for your organization.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                GitHub Connect
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Share features and workflows between your GitHub Enterprise Server instance and GitHub Enterprise Cloud.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                SAML single sign-on (SSO)
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Use an identity provider to manage the identities of GitHub users and applications.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                LDAP
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Access GitHub Enterprise Server using your existing accounts and centrally manage repository access.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                IP allow list
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Cloud
                  
                
          
        
      
      
        Limit access to known allowed IP addresses.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Cloud
          
        
      



    

    
      

  
    Marketplace and integrations
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                GitHub Apps
              
            
          
          
            
              Unlimited
              
            
              
                Unlimited
                
              
                
                  Unlimited
                  
                
          
        
      
      
        Install apps that integrate directly with GitHub's API to improve development workflows – or build your own for private use or publication in the GitHub Marketplace.
  

  
    
      Unlimited
      
    
  

    
      
        Unlimited
        
      
    

      
        
          Unlimited
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Status checks
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Define tests that GitHub automatically runs against code being committed to your repository, and get details about failures and what is causing them.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



        
  
    
      
        
          
            
              
            
            
              
                Pre-receive hooks
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Server
                  
                
          
        
      
      
        Create requirements for automatically accepting or rejecting a push based on the contents of the push.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Server
          
        
      


    

    
      

  
    Support and deployment
  

  
    
  

  
    
  

    
      
    


          
  
    
      
        
          
            
              
            
            
              
                Community Support
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Get help with most of your GitHub questions and issues in our Community Forum.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Standard Support
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        GitHub Support can help you troubleshoot issues you run into while using GitHub. Get support via the web.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      



            
  
    
      
        
          
            
              
            
            
              
                Premium and Premium Plus Support
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Available
                  
                
          
        
      
      
        With Premium, get a 30-minute SLA on Urgent tickets and 24/7 web and phone support via callback request. With Premium Plus, get everything in Premium, assigned Customer Reliability Engineer and more. Learn more about Premium Support
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Available
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Invoice billing
              
            
          
          
            
              
              
            
              
                
                
              
                
                  
                  
                
          
        
      
      
        Pay bills via invoice, rather than using your credit card.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Self-hosted deployment
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Server
                  
                
          
        
      
      
        Self-hosted GitHub for on-prem appliances or self-managed cloud tenants.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Server
          
        
      


    
  
    
      
        
          
            
              
            
            
              
                Data residency
              
            
          
          
            
              
              
            
              
                
                
              
                
                  Enterprise Cloud
                  
                
          
        
      
      
        Multi-tenant enterprise SaaS solution on Microsoft Azure, allowing you to choose a regional cloud deployment for data residency, so your in-scope data is stored at rest in a designated location. This is available in the EU and Australia with additional regions coming soon. Contact our sales team to learn more.
  

  
    
      
      
    
  

    
      
        
        
      
    

      
        
          Enterprise Cloud
          
        
      



    

    
      
        
        
          
        
        
          
        
          
            
          
      
    
  





  
    
      
      
        We love people who are changing the world
      
    

    
  
        
    
        
            
              
            

          
        

      Open source teams

      
        If you manage multiple contributors, there’s a free option. We also run GitHub Sponsors, where we help fund your work.
      

      
        Learn more 

      


        
    
        
            
              
            

          
        

      Students and teachers

      
        We’ve partnered with industry leaders to give students and teachers free access to the best developer tools—for the school year and beyond.
      

      
        Learn more 

      


        
    
        
            
              
            

          
        

      Nonprofits

      
        Work for a government-recognized nonprofit, association, or 501(c)(3)? Get a discounted Organization on us.
      

      
        Learn more\n\n\n\nCreate your free account
            Explore GitHub's core features for individuals and organizations.

              
              
                See what's included
                
                  
                
              
              
                
  
      
        
          
        
        
          Access to GitHub Copilot
          Increase your productivity and accelerate software development.
      
      
        
          
        
        
          Unlimited repositories
          Collaborate securely on public and private projects.
      
      
        
          
        
        
          Integrated code reviews
          Boost code quality with built-in review tools.
      
      
        
          
        
        
          Automated workflows
          Save time with CI/CD integrations and GitHub Actions.
      
      
        
          
        
        
          Community support
          Connect with developers worldwide for instant feedback and insights.
      
  

              
            
          
          
            
            
          
        
        
          
          
            
  
  


  
    
  
  
    
      
        
        
        

        
          Sign up to GitHub
        

        

        
          
            
              Email*
            
            
              
                
                
              
            
          

          
            
              Password*
            
            
              
                
                    
                    
                    
                  
                
              
              
                Password should be at least 15 characters OR at least 8 characters including a number and a lowercase letter.
              
            
          

          
            
              
                Username*
              
            
            
              
                
                  
                  
                
              
              
                Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen.
              
            
          
          
  
    
      
        Your Country/Region*, required
      
    
    
      
  
      
    Select Country/Region
  
    
      
    


    
      
  
    
      
        Select Country/Region
      
        
    
    
      
    
  
              
              
  
      
        
      
    
      
                  Sorry, something went wrong.

            
            
                
      
        Filter
    
  
      
        
          
      Loading

      
    
      

      
  
  
  

    


      
        
          
          
            
                
  
      
        
      
    
        
    
    
    
        
          
        
      
        
          Afghanistan
      

  

        
    
    
    
        
          
        
      
        
          Åland
      

  

        
    
    
    
        
          
        
      
        
          Albania
      

  

        
    
    
    
        
          
        
      
        
          Algeria
      

  

        
    
    
    
        
          
        
      
        
          American Samoa
      

  

        
    
    
    
        
          
        
      
        
          Andorra
      

  

        
    
    
    
        
          
        
      
        
          Angola
      

  

        
    
    
    
        
          
        
      
        
          Anguilla
      

  

        
    
    
    
        
          
        
      
        
          Antarctica
      

  

        
    
    
    
        
          
        
      
        
          Antigua and Barbuda
      

  

        
    
    
    
        
          
        
      
        
          Argentina
      

  

        
    
    
    
        
          
        
      
        
          Armenia
      

  

        
    
    
    
        
          
        
      
        
          Aruba
      

  

        
    
    
    
        
          
        
      
        
          Australia
      

  

        
    
    
    
        
          
        
      
        
          Austria
      

  

        
    
    
    
        
          
        
      
        
          Azerbaijan
      

  

        
    
    
    
        
          
        
      
        
          Bahamas
      

  

        
    
    
    
        
          
        
      
        
          Bahrain
      

  

        
    
    
    
        
          
        
      
        
          Bangladesh
      

  

        
    
    
    
        
          
        
      
        
          Barbados
      

  

        
    
    
    
        
          
        
      
        
          Belarus
      

  

        
    
    
    
        
          
        
      
        
          Belgium
      

  

        
    
    
    
        
          
        
      
        
          Belize
      

  

        
    
    
    
        
          
        
      
        
          Benin
      

  

        
    
    
    
        
          
        
      
        
          Bermuda
      

  

        
    
    
    
        
          
        
      
        
          Bhutan
      

  

        
    
    
    
        
          
        
      
        
          Bolivia
      

  

        
    
    
    
        
          
        
      
        
          Bonaire, Sint Eustatius and Saba
      

  

        
    
    
    
        
          
        
      
        
          Bosnia and Herzegovina
      

  

        
    
    
    
        
          
        
      
        
          Botswana
      

  

        
    
    
    
        
          
        
      
        
          Bouvet Island
      

  

        
    
    
    
        
          
        
      
        
          Brazil
      

  

        
    
    
    
        
          
        
      
        
          British Indian Ocean Territory
      

  

        
    
    
    
        
          
        
      
        
          Brunei Darussalam
      

  

        
    
    
    
        
          
        
      
        
          Bulgaria
      

  

        
    
    
    
        
          
        
      
        
          Burkina Faso
      

  

        
    
    
    
        
          
        
      
        
          Burundi
      

  

        
    
    
    
        
          
        
      
        
          Cambodia
      

  

        
    
    
    
        
          
        
      
        
          Cameroon
      

  

        
    
    
    
        
          
        
      
        
          Canada
      

  

        
    
    
    
        
          
        
      
        
          Cape Verde
      

  

        
    
    
    
        
          
        
      
        
          Cayman Islands
      

  

        
    
    
    
        
          
        
      
        
          Central African Republic
      

  

        
    
    
    
        
          
        
      
        
          Chad
      

  

        
    
    
    
        
          
        
      
        
          Chile
      

  

        
    
    
    
        
          
        
      
        
          China
      

  

        
    
    
    
        
          
        
      
        
          Christmas Island
      

  

        
    
    
    
        
          
        
      
        
          Cocos (Keeling) Islands
      

  

        
    
    
    
        
          
        
      
        
          Colombia
      

  

        
    
    
    
        
          
        
      
        
          Comoros
      

  

        
    
    
    
        
          
        
      
        
          Congo (Brazzaville)
      

  

        
    
    
    
        
          
        
      
        
          Congo (Kinshasa)
      

  

        
    
    
    
        
          
        
      
        
          Cook Islands
      

  

        
    
    
    
        
          
        
      
        
          Costa Rica
      

  

        
    
    
    
        
          
        
      
        
          Côte d'Ivoire
      

  

        
    
    
    
        
          
        
      
        
          Croatia
      

  

        
    
    
    
        
          
        
      
        
          Curaçao
      

  

        
    
    
    
        
          
        
      
        
          Cyprus
      

  

        
    
    
    
        
          
        
      
        
          Czech Republic
      

  

        
    
    
    
        
          
        
      
        
          Denmark
      

  

        
    
    
    
        
          
        
      
        
          Djibouti
      

  

        
    
    
    
        
          
        
      
        
          Dominica
      

  

        
    
    
    
        
          
        
      
        
          Dominican Republic
      

  

        
    
    
    
        
          
        
      
        
          Ecuador
      

  

        
    
    
    
        
          
        
      
        
          Egypt
      

  

        
    
    
    
        
          
        
      
        
          El Salvador
      

  

        
    
    
    
        
          
        
      
        
          Equatorial Guinea
      

  

        
    
    
    
        
          
        
      
        
          Eritrea
      

  

        
    
    
    
        
          
        
      
        
          Estonia
      

  

        
    
    
    
        
          
        
      
        
          Ethiopia
      

  

        
    
    
    
        
          
        
      
        
          Falkland Islands
      

  

        
    
    
    
        
          
        
      
        
          Faroe Islands
      

  

        
    
    
    
        
          
        
      
        
          Fiji
      

  

        
    
    
    
        
          
        
      
        
          Finland
      

  

        
    
    
    
        
          
        
      
        
          France
      

  

        
    
    
    
        
          
        
      
        
          French Guiana
      

  

        
    
    
    
        
          
        
      
        
          French Polynesia
      

  

        
    
    
    
        
          
        
      
        
          French Southern Lands
      

  

        
    
    
    
        
          
        
      
        
          Gabon
      

  

        
    
    
    
        
          
        
      
        
          Gambia
      

  

        
    
    
    
        
          
        
      
        
          Georgia
      

  

        
    
    
    
        
          
        
      
        
          Germany
      

  

        
    
    
    
        
          
        
      
        
          Ghana
      

  

        
    
    
    
        
          
        
      
        
          Gibraltar
      

  

        
    
    
    
        
          
        
      
        
          Greece
      

  

        
    
    
    
        
          
        
      
        
          Greenland
      

  

        
    
    
    
        
          
        
      
        
          Grenada
      

  

        
    
    
    
        
          
        
      
        
          Guadeloupe
      

  

        
    
    
    
        
          
        
      
        
          Guam
      

  

        
    
    
    
        
          
        
      
        
          Guatemala
      

  

        
    
    
    
        
          
        
      
        
          Guernsey
      

  

        
    
    
    
        
          
        
      
        
          Guinea
      

  

        
    
    
    
        
          
        
      
        
          Guinea-Bissau
      

  

        
    
    
    
        
          
        
      
        
          Guyana
      

  

        
    
    
    
        
          
        
      
        
          Haiti
      

  

        
    
    
    
        
          
        
      
        
          Heard and McDonald Islands
      

  

        
    
    
    
        
          
        
      
        
          Honduras
      

  

        
    
    
    
        
          
        
      
        
          Hong Kong
      

  

        
    
    
    
        
          
        
      
        
          Hungary
      

  

        
    
    
    
        
          
        
      
        
          Iceland
      

  

        
    
    
    
        
          
        
      
        
          India
      

  

        
    
    
    
        
          
        
      
        
          Indonesia
      

  

        
    
    
    
        
          
        
      
        
          Iran
      

  

        
    
    
    
        
          
        
      
        
          Iraq
      

  

        
    
    
    
        
          
        
      
        
          Ireland
      

  

        
    
    
    
        
          
        
      
        
          Isle of Man
      

  

        
    
    
    
        
          
        
      
        
          Israel
      

  

        
    
    
    
        
          
        
      
        
          Italy
      

  

        
    
    
    
        
          
        
      
        
          Jamaica
      

  

        
    
    
    
        
          
        
      
        
          Japan
      

  

        
    
    
    
        
          
        
      
        
          Jersey
      

  

        
    
    
    
        
          
        
      
        
          Jordan
      

  

        
    
    
    
        
          
        
      
        
          Kazakhstan
      

  

        
    
    
    
        
          
        
      
        
          Kenya
      

  

        
    
    
    
        
          
        
      
        
          Kiribati
      

  

        
    
    
    
        
          
        
      
        
          Korea, South
      

  

        
    
    
    
        
          
        
      
        
          Kuwait
      

  

        
    
    
    
        
          
        
      
        
          Kyrgyzstan
      

  

        
    
    
    
        
          
        
      
        
          Laos
      

  

        
    
    
    
        
          
        
      
        
          Latvia
      

  

        
    
    
    
        
          
        
      
        
          Lebanon
      

  

        
    
    
    
        
          
        
      
        
          Lesotho
      

  

        
    
    
    
        
          
        
      
        
          Liberia
      

  

        
    
    
    
        
          
        
      
        
          Libya
      

  

        
    
    
    
        
          
        
      
        
          Liechtenstein
      

  

        
    
    
    
        
          
        
      
        
          Lithuania
      

  

        
    
    
    
        
          
        
      
        
          Luxembourg
      

  

        
    
    
    
        
          
        
      
        
          Macau
      

  

        
    
    
    
        
          
        
      
        
          Macedonia
      

  

        
    
    
    
        
          
        
      
        
          Madagascar
      

  

        
    
    
    
        
          
        
      
        
          Malawi
      

  

        
    
    
    
        
          
        
      
        
          Malaysia
      

  

        
    
    
    
        
          
        
      
        
          Maldives
      

  

        
    
    
    
        
          
        
      
        
          Mali
      

  

        
    
    
    
        
          
        
      
        
          Malta
      

  

        
    
    
    
        
          
        
      
        
          Marshall Islands
      

  

        
    
    
    
        
          
        
      
        
          Martinique
      

  

        
    
    
    
        
          
        
      
        
          Mauritania
      

  

        
    
    
    
        
          
        
      
        
          Mauritius
      

  

        
    
    
    
        
          
        
      
        
          Mayotte
      

  

        
    
    
    
        
          
        
      
        
          Mexico
      

  

        
    
    
    
        
          
        
      
        
          Micronesia
      

  

        
    
    
    
        
          
        
      
        
          Moldova
      

  

        
    
    
    
        
          
        
      
        
          Monaco
      

  

        
    
    
    
        
          
        
      
        
          Mongolia
      

  

        
    
    
    
        
          
        
      
        
          Montenegro
      

  

        
    
    
    
        
          
        
      
        
          Montserrat
      

  

        
    
    
    
        
          
        
      
        
          Morocco
      

  

        
    
    
    
        
          
        
      
        
          Mozambique
      

  

        
    
    
    
        
          
        
      
        
          Myanmar
      

  

        
    
    
    
        
          
        
      
        
          Namibia
      

  

        
    
    
    
        
          
        
      
        
          Nauru
      

  

        
    
    
    
        
          
        
      
        
          Nepal
      

  

        
    
    
    
        
          
        
      
        
          Netherlands
      

  

        
    
    
    
        
          
        
      
        
          New Caledonia
      

  

        
    
    
    
        
          
        
      
        
          New Zealand
      

  

        
    
    
    
        
          
        
      
        
          Nicaragua
      

  

        
    
    
    
        
          
        
      
        
          Niger
      

  

        
    
    
    
        
          
        
      
        
          Nigeria
      

  

        
    
    
    
        
          
        
      
        
          Niue
      

  

        
    
    
    
        
          
        
      
        
          Norfolk Island
      

  

        
    
    
    
        
          
        
      
        
          Northern Mariana Islands
      

  

        
    
    
    
        
          
        
      
        
          Norway
      

  

        
    
    
    
        
          
        
      
        
          Oman
      

  

        
    
    
    
        
          
        
      
        
          Pakistan
      

  

        
    
    
    
        
          
        
      
        
          Palau
      

  

        
    
    
    
        
          
        
      
        
          Palestine
      

  

        
    
    
    
        
          
        
      
        
          Panama
      

  

        
    
    
    
        
          
        
      
        
          Papua New Guinea
      

  

        
    
    
    
        
          
        
      
        
          Paraguay
      

  

        
    
    
    
        
          
        
      
        
          Peru
      

  

        
    
    
    
        
          
        
      
        
          Philippines
      

  

        
    
    
    
        
          
        
      
        
          Pitcairn
      

  

        
    
    
    
        
          
        
      
        
          Poland
      

  

        
    
    
    
        
          
        
      
        
          Portugal
      

  

        
    
    
    
        
          
        
      
        
          Puerto Rico
      

  

        
    
    
    
        
          
        
      
        
          Qatar
      

  

        
    
    
    
        
          
        
      
        
          Reunion
      

  

        
    
    
    
        
          
        
      
        
          Romania
      

  

        
    
    
    
        
          
        
      
        
          Rwanda
      

  

        
    
    
    
        
          
        
      
        
          Saint Barthélemy
      

  

        
    
    
    
        
          
        
      
        
          Saint Helena
      

  

        
    
    
    
        
          
        
      
        
          Saint Kitts and Nevis
      

  

        
    
    
    
        
          
        
      
        
          Saint Lucia
      

  

        
    
    
    
        
          
        
      
        
          Saint Martin (French part)
      

  

        
    
    
    
        
          
        
      
        
          Saint Pierre and Miquelon
      

  

        
    
    
    
        
          
        
      
        
          Saint Vincent and the Grenadines
      

  

        
    
    
    
        
          
        
      
        
          Samoa
      

  

        
    
    
    
        
          
        
      
        
          San Marino
      

  

        
    
    
    
        
          
        
      
        
          Sao Tome and Principe
      

  

        
    
    
    
        
          
        
      
        
          Saudi Arabia
      

  

        
    
    
    
        
          
        
      
        
          Senegal
      

  

        
    
    
    
        
          
        
      
        
          Serbia
      

  

        
    
    
    
        
          
        
      
        
          Seychelles
      

  

        
    
    
    
        
          
        
      
        
          Sierra Leone
      

  

        
    
    
    
        
          
        
      
        
          Singapore
      

  

        
    
    
    
        
          
        
      
        
          Sint Maarten (Dutch part)
      

  

        
    
    
    
        
          
        
      
        
          Slovakia
      

  

        
    
    
    
        
          
        
      
        
          Slovenia
      

  

        
    
    
    
        
          
        
      
        
          Solomon Islands
      

  

        
    
    
    
        
          
        
      
        
          Somalia
      

  

        
    
    
    
        
          
        
      
        
          South Africa
      

  

        
    
    
    
        
          
        
      
        
          South Georgia and South Sandwich Islands
      

  

        
    
    
    
        
          
        
      
        
          South Sudan
      

  

        
    
    
    
        
          
        
      
        
          Spain
      

  

        
    
    
    
        
          
        
      
        
          Sri Lanka
      

  

        
    
    
    
        
          
        
      
        
          Sudan
      

  

        
    
    
    
        
          
        
      
        
          Suriname
      

  

        
    
    
    
        
          
        
      
        
          Svalbard and Jan Mayen Islands
      

  

        
    
    
    
        
          
        
      
        
          Swaziland
      

  

        
    
    
    
        
          
        
      
        
          Sweden
      

  

        
    
    
    
        
          
        
      
        
          Switzerland
      

  

        
    
    
    
        
          
        
      
        
          Taiwan
      

  

        
    
    
    
        
          
        
      
        
          Tajikistan
      

  

        
    
    
    
        
          
        
      
        
          Tanzania
      

  

        
    
    
    
        
          
        
      
        
          Thailand
      

  

        
    
    
    
        
          
        
      
        
          Timor-Leste
      

  

        
    
    
    
        
          
        
      
        
          Togo
      

  

        
    
    
    
        
          
        
      
        
          Tokelau
      

  

        
    
    
    
        
          
        
      
        
          Tonga
      

  

        
    
    
    
        
          
        
      
        
          Trinidad and Tobago
      

  

        
    
    
    
        
          
        
      
        
          Tunisia
      

  

        
    
    
    
        
          
        
      
        
          Türkiye
      

  

        
    
    
    
        
          
        
      
        
          Turkmenistan
      

  

        
    
    
    
        
          
        
      
        
          Turks and Caicos Islands
      

  

        
    
    
    
        
          
        
      
        
          Tuvalu
      

  

        
    
    
    
        
          
        
      
        
          Uganda
      

  

        
    
    
    
        
          
        
      
        
          Ukraine
      

  

        
    
    
    
        
          
        
      
        
          United Arab Emirates
      

  

        
    
    
    
        
          
        
      
        
          United Kingdom
      

  

        
    
    
    
        
          
        
      
        
          United States Minor Outlying Islands
      

  

        
    
    
    
        
          
        
      
        
          United States of America
      

  

        
    
    
    
        
          
        
      
        
          Uruguay
      

  

        
    
    
    
        
          
        
      
        
          Uzbekistan
      

  

        
    
    
    
        
          
        
      
        
          Vanuatu
      

  

        
    
    
    
        
          
        
      
        
          Vatican City
      

  

        
    
    
    
        
          
        
      
        
          Venezuela
      

  

        
    
    
    
        
          
        
      
        
          Vietnam
      

  

        
    
    
    
        
          
        
      
        
          Virgin Islands, British
      

  

        
    
    
    
        
          
        
      
        
          Virgin Islands, U.S.
      

  

        
    
    
    
        
          
        
      
        
          Wallis and Futuna Islands
      

  

        
    
    
    
        
          
        
      
        
          Yemen
      

  

        
    
    
    
        
          
        
      
        
          Zambia
      

  

        
    
    
    
        
          
        
      
        
          Zimbabwe
      

  

    


            
            
              No results found
            
        
      
  
      
      
        For compliance reasons, we're required to collect country information to send you occasional updates and announcements.
      
    
  
  
    
       Email preferences 
      
        
  
  
    
      Receive occasional product updates and announcements
      
  

      
    
  


        

          
              
    Continue
              
  

          

        
            Verify your account
            
              


  
    
  

  
    
  

  
      
  

  


            

          



        

        
            
    Create account
              
  

        

        
          
  By creating an account, you agree to the
  Terms of Service.
  For more information about GitHub's privacy practices, see the
  GitHub Privacy Statement.
  We'll occasionally send you account-related emails.\n\n\n\nHi! In case you want to get to know me, this is your cheat sheet. Generally, my interests lie at the intersection of AI, writing, engineering, design, and knowledge tools:


Recent work:  ✨new!✨  Lately I'm working on some new ideas related to an AI-native command line, and some open source Python tooling for LLM use (see below). Talk to me if you're interested in this!


Publishing: I started and built most of Holloway, a small startup that has rebuilt the digital book publishing process with dozens of in-depth, web-based guides in entrepreneurship, creativity, and personal growth. We also publish print books.


Startups and entrepreneurship: I've been a founding engineer a few times and a founder. I like working with founders and sometimes consult for or advise selected startups and investors. I wrote the most widely read guide to equity compensation in startups.


Writing: I've written and edited few popular guides (2M+ readers), including the equity compensation guide, The Art of Command Line and AWS. I’ve also edited (and published) about a dozen books by other authors.


Tech: I’ve worked on conversational AI systems since early days with the original Siri team at SRI. I’ve built search engines with prominent ex-Google engineers. I have a broad interest in the theory, the practice, and the human elements of software engineering, and the history of software and AI.


Engineering: I've loved programming since I was a kid. I have been a founding engineer and engineering leader at several startups in AI, SaaS, and web search, some failed, some successful (backend/distributed sysems, full stack web/JS/Node/TypeScript/React, Python, Java, C/C++, and older esoteric things like Lisp and Prolog). Also devops—AWS has given me the honor of being an "AWS Hero."


Inspiration: I believe the purpose of technology is to improve our collective knowledge and intelligence and to solve human problems. The technologist I most admire is Doug Engelbart. His work is as relevant today as it was 50 years ago. By sharing a vision of what was possible, he shaped how we use software for decades. I feel privileged to have met him a few times.


Personal: I aspire to know a few things about many topics and many things about a few topics. My interests include good books of all kinds, philosophy, psychology, politics and media, startups and entrepreneurship, AI (history and future), product design, typography, software engineering, logic and foundations of mathematics, mental and physical health (and their interactions), fitness and nutrition, running or hiking the mountains and deserts of California, fingerstyle guitar, 15th-18th century lute music, early American blues, Brazilian Portuguese, truth, kindness, and some other arcana. I majored in physics, math, and computer science and my graduate degree is from Berkeley.


Selected open source code and writings:
Python tools:  ✨new!✨

simple-modern-uv: A minimal, modern Python project template, good if you're starting a new project, with uv/ruff/Pyright/GitHub actions/PyPI publishing (used by uvinit)
uvx uvinit: Start a new Python project with one command!
py-app-standalone: Standalone, relocatable Python app builds using uv
flowmark: Better line wrapping and auto-formatting for plaintext and Markdown
chopdiff: Parsing, diffing, diff filtering, chunking, and windowed transforms of text to support LLM applications
strif: Tiny, useful Python lib for strings and files
frontmatter-format: A micro-format for YAML metadata on any file
funlog: Minimalist decorators for logging, timing, and tallying function calls
prettyfmt: A tiny library for more beautiful Python outputs
repren: Rename anything

Other projects:

on-books: Readings and notes on the past, present, and future of books
the-art-of-command-line: Master the command line, in one page (155K+ stars, available in ~20 languages and one of the top 40 most starred GitHub repos of all time, but in need of an update, which I hope to do soon!)
og-aws: A practical guide to Amazon Web Services (35K+ stars, for a while one of the most popular docs ever for AWS)
og-equity-compensation: Original open source version of a guide to equity compensation for startup employees and founders (9K+ stars)

Find me:

@ojoshe on Twitter/X (best for DMs)
LinkedIn
see email on my profile

Please reach out if you think you should! I'd be glad to hear from you if we share interests. :)\n\njlevy
                  
  
    
      Follow
    
  

                
              
            

              
              
  
    
    Overview

  
    
    Repositories
    54

  
    
    Projects
    0

    
      
      Packages
      0

  
    
    Stars
    2k

    
      
      Sponsoring
      1




  
    
            
        
        More
      

            
        
          
            Overview
          
          
            Repositories
          
          
            Projects
          
            
              Packages
            
          
            Stars
          
            
              Sponsoring
            
        
      




            

    
  


  
  
        
          
            
              
                
              
              
                
                  jlevy
              
              
                
  
    
      Follow
    
  

              
            
          

          
  
    
        
      

    

    
      
        
          Joshua Levy
        
        
          jlevy

        
      
    
  

  

  
    
        
              
                
                
  
    
      Follow
    
  

              
        


    

    

  


    
      
        
          
          4.3k
          followers
        · 
          306
          following
      
    

  

      
        San Francisco



    

      

        @ojoshe

  


  

      

    
      
        Sponsoring
      

      
          
    


      
    


    Achievementsx4x3x4Achievementsx4x3x4
    Highlights
    

  Pro



    
      
    Block or Report
  



  
    
  
    
      
        Block or report jlevy
      
        
    
    
      
    
  
  

      
            
      
          
        

        Block user
        
            Prevent this user from interacting with your repositories and sending you notifications.
          Learn more about blocking users.
        





            
              You must be logged in to block users.
            

          
              
      
        Add an optional note:
    
  
    
      

      
  
  
  

      Please don't include any personal information such as legal names or email addresses. Maximum 100 characters, markdown supported. This note will be visible to only you.



          

        
          Block user
        
    
    
      Report abuse
      
        Contact GitHub support about this user’s behavior.
        Learn more about reporting abuse.
      
      Report abuse
    

      
      




      

          
          
  
    
    Overview

  
    
    Repositories
    54

  
    
    Projects
    0

    
      
      Packages
      0

  
    
    Stars
    2k

    
      
      Sponsoring
      1




  
    
            
        
        More
      

            
        
          
            Overview
          
          
            Repositories
          
          
            Projects
          
            
              Packages
            
          
            Stars
          
            
              Sponsoring
            
        
      




        
      

        
          
    




  
  
    
      
        jlevy/README.md
      

    
    Hi! In case you want to get to know me, this is your cheat sheet. Generally, my interests lie at the intersection of AI, writing, engineering, design, and knowledge tools:


Recent work:  ✨new!✨  Lately I'm working on some new ideas related to an AI-native command line, and some open source Python tooling for LLM use (see below). Talk to me if you're interested in this!


Publishing: I started and built most of Holloway, a small startup that has rebuilt the digital book publishing process with dozens of in-depth, web-based guides in entrepreneurship, creativity, and personal growth. We also publish print books.


Startups and entrepreneurship: I've been a founding engineer a few times and a founder. I like working with founders and sometimes consult for or advise selected startups and investors. I wrote the most widely read guide to equity compensation in startups.


Writing: I've written and edited few popular guides (2M+ readers), including the equity compensation guide, The Art of Command Line and AWS. I’ve also edited (and published) about a dozen books by other authors.


Tech: I’ve worked on conversational AI systems since early days with the original Siri team at SRI. I’ve built search engines with prominent ex-Google engineers. I have a broad interest in the theory, the practice, and the human elements of software engineering, and the history of software and AI.


Engineering: I've loved programming since I was a kid. I have been a founding engineer and engineering leader at several startups in AI, SaaS, and web search, some failed, some successful (backend/distributed sysems, full stack web/JS/Node/TypeScript/React, Python, Java, C/C++, and older esoteric things like Lisp and Prolog). Also devops—AWS has given me the honor of being an "AWS Hero."


Inspiration: I believe the purpose of technology is to improve our collective knowledge and intelligence and to solve human problems. The technologist I most admire is Doug Engelbart. His work is as relevant today as it was 50 years ago. By sharing a vision of what was possible, he shaped how we use software for decades. I feel privileged to have met him a few times.


Personal: I aspire to know a few things about many topics and many things about a few topics. My interests include good books of all kinds, philosophy, psychology, politics and media, startups and entrepreneurship, AI (history and future), product design, typography, software engineering, logic and foundations of mathematics, mental and physical health (and their interactions), fitness and nutrition, running or hiking the mountains and deserts of California, fingerstyle guitar, 15th-18th century lute music, early American blues, Brazilian Portuguese, truth, kindness, and some other arcana. I majored in physics, math, and computer science and my graduate degree is from Berkeley.


Selected open source code and writings:
Python tools:  ✨new!✨

simple-modern-uv: A minimal, modern Python project template, good if you're starting a new project, with uv/ruff/Pyright/GitHub actions/PyPI publishing (used by uvinit)
uvx uvinit: Start a new Python project with one command!
py-app-standalone: Standalone, relocatable Python app builds using uv
flowmark: Better line wrapping and auto-formatting for plaintext and Markdown
chopdiff: Parsing, diffing, diff filtering, chunking, and windowed transforms of text to support LLM applications
strif: Tiny, useful Python lib for strings and files
frontmatter-format: A micro-format for YAML metadata on any file
funlog: Minimalist decorators for logging, timing, and tallying function calls
prettyfmt: A tiny library for more beautiful Python outputs
repren: Rename anything

Other projects:

on-books: Readings and notes on the past, present, and future of books
the-art-of-command-line: Master the command line, in one page (155K+ stars, available in ~20 languages and one of the top 40 most starred GitHub repos of all time, but in need of an update, which I hope to do soon!)
og-aws: A practical guide to Amazon Web Services (35K+ stars, for a while one of the most popular docs ever for AWS)
og-equity-compensation: Original open source version of a guide to equity compensation for startup employees and founders (9K+ stars)

Find me:

@ojoshe on Twitter/X (best for DMs)
LinkedIn
see email on my profile

Please reach out if you think you should! I'd be glad to hear from you if we share interests. :)

  




  
  
      Pinned
    
      Loading

    
  

      
      
  
    
      
        
            
          the-art-of-command-line  the-art-of-command-line          Public
        
      


      
        Master the command line, in one page
      

      
          
            
            156k
          
          
            
            14.7k
          
      
    
  


      
  
    
      
        
            
          frontmatter-format  frontmatter-format          Public
        
      


      
        A micro-format for YAML metadata on any file
      

      
          
  
  Python


          
            
            17
          
      
    
  


      
  
    
      
        
            
          uvinit  uvinit          Public
        
      


      
        A time-saving CLI to start new, modern Python projects
      

      
          
  
  Python


          
            
            36
          
      
    
  


      
  
    
      
        
            
          simple-modern-uv  simple-modern-uv          Public
        
      


      
        A minimal, modern Python project template using uv. Get started with uvinit:
      

      
          
  
  Jinja


          
            
            93
          
          
            
            2
          
      
    
  


      
  
    
      
        
            
          strif  strif          Public
        
      


      
        Tiny, useful Python lib for strings and files
      

      
          
  
  Python


          
            
            42
          
          
            
            9
          
      
    
  


      
  
    
      
        
            
          flowmark  flowmark          Public
        
      


      
        Better auto-formatting for Markdown and plaintext
      

      
          
  
  Python


          
            
            10
          
          
            
            2
          
      
    
  









      
        
          
  
        
        
          Something went wrong, please refresh the page to try again.
          If the problem persists, check the GitHub status page
          or contact support.\n\n\n\nSign in to GitHub
    


    



  
    

  
    
      
    
    
      
      {{ message }}

    
  

  



    
      
        
      
    

    
      
  

    
      Username or email address
    
    

  
    
      Password
    
    
    Forgot password?
    













    
  
  
      
  

    


        Password login alternatives
        
            
    
        
    Sign in with a passkey
  

    
  

          
            New to GitHub?
              Create an account\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  
    
          Stargazers

  
  
    
  
      
      All 5,000+
      
      You know
  


      
          
  
    
      
        
      

      
        
          
    wcbing
        
        

  
  Is from China
  
    China
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    sunnyhigher
        
        
 Joined on Jan 13, 2015

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    ibyeokha
        
        
 Joined on Jul 17, 2018

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    srx3
        
        
 Joined on Dec 25, 2018

        
          

        
      
    
  

          
  
    
      
        
      

      
        
          
    yaltes
        
        

  
  Is from Germany
  
    Germany
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    wguilherme
        
        

  Works for TOTVS
  
  
    TOTVS
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    plantaclaus
        
        
 Joined on Apr 10, 2020

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    shimeoki
        
        
 Joined on Mar 1, 2021

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    Chenglongyi
        
        

  
  Is from Shanghai
  
    Shanghai
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    WilsonLucifer
        
        
 Joined on Mar 15, 2025

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    eruditus-ginkgo
        
        
 Joined on Oct 12, 2022

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    tellzee
        
        
 Joined on Feb 23, 2025

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    taybm7n
        
        

  Works for @Vincit
  
  
    @Vincit
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    LouisCaiKM7
        
        
 Joined on Oct 21, 2023

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    jdhakert
        
        

  
  Is from Los Angeles, CA
  
    Los Angeles, CA
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    salmanshaikk
        
        
 Joined on Mar 15, 2024

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    LambShaun
        
        
 Joined on Nov 8, 2023

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    kulukrok
        
        

  
  Is from turkey
  
    turkey
  
  

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    y2rm83
        
        

  Works for @superfeedr
  
  
    @superfeedr
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    jammyworld
        
        
 Joined on Oct 1, 2019

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    khan678911
        
        

  Works for Rehan traders
  
  
    Rehan traders
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    FangYang0826
        
        
 Joined on Oct 27, 2024

        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    DragonCloudBurst
        
        

  Works for ECU Joyner Library
  
  
    ECU Joyner Library
  


        
          
  
    
      Follow
    
  


        
      
    
  

          
  
    
      
        
      

      
        
          
    tupikoff
        
        
 Joined on Apr 16, 2013

        
          
  
    
      Follow
    
  


        
      
    
  

      
      
        PreviousNext\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Insights: jlevy/the-art-of-command-line

  
  
        

  
    Pulse
    Contributors
      Community Standards
    Commits
    Code frequency
      Dependency graph
    Network
    Forks
  



  
      
  
  Switch to tree view

  
    Forks
      
      
        
      Period:
    2 years


  
    
      
  
        Filter by period


    


      


          
  

    

    
        
  1 month

        
  6 months

        
  1 year

        
  2 years

        
  5 years


      Nothing to show
    


          Any repository that has not been created or
    updated during this period will be excluded.



        
      Repository type:
    
        Active



  
    
      
  
        Filter by repository type


    


      


          
  

    

    
        
            
            Active
            Repositories with push activity


        
            
            Inactive
            Repositories with no push activity


        
            
            Network
            Forks of other forks


        
            
            Archived
            Archived repositories


        
            
            Starred
            Repositories with at least 1 star



      Nothing to show
    


      


        
      Sort:
    Most starred


  
    
      
  
        Sort by


    


      


          
  

    

    
        
          Most starred

        
          Recently updated

        
          Open issues

        
          Open pull requests


      Nothing to show
    


      





  
  
  
  
    
        
  
    
      
      
        hunghg255
    
      /
    the-art-of-command-line  
      
    
      8

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    May 12, 2020 16:25


      
  
    Updated
    April 1, 2024 20:41


  

        
  
    
      
      
        mihaimaruseac
    
      /
    the-art-of-command-line  
      
    
      4

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    October 9, 2018 03:23


      
  
    Updated
    September 10, 2023 16:24


  

        
  
    
      
      
        fazlearefin
    
      /
    the-art-of-command-line  
      
    
      4

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    October 9, 2016 10:10


      
  
    Updated
    September 24, 2023 12:50


  

        
  
    
      
      
        kkipngenokoech
    
      /
    the-artofcommandline  
      
    
      2

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    July 11, 2022 17:39


      
  
    Updated
    June 1, 2023 11:46


  

        
  
    
      
      
        sanjayguwaju
    
      /
    the-art-of-command-line  
      
    
      2

      
    
      0

      
    
      0

      
    
      1

      
  
    Created
    March 26, 2022 03:10


      
  
    Updated
    June 18, 2023 01:28


  

        
  
    
      
      
        Fabienjulio
    
      /
    l-art-de-la-ligne-de-commande  
      
    
      2

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 22, 2022 07:05


      
  
    Updated
    May 30, 2024 10:17


  

        
  
    
      
      
        vigo
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    July 13, 2015 14:08


      
  
    Updated
    August 5, 2024 11:59


  

        
  
    
      
      
        Uncodedtech
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 7, 2021 16:53


      
  
    Updated
    July 13, 2023 08:07


  

        
  
    
      
      
        arushdesp
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    January 9, 2023 12:15


      
  
    Updated
    September 26, 2024 13:23


  

        
  
    
      
      
        mkwardakov
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    February 16, 2016 15:03


      
  
    Updated
    May 2, 2024 18:44


  

        
  
    
      
      
        MmdDebian
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    March 31, 2023 14:58


      
  
    Updated
    February 15, 2024 22:21


  

        
  
    
      
      
        tigefa4u
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    May 5, 2018 18:33


      
  
    Updated
    July 13, 2023 01:03


  

        
  
    
      
      
        testcomputer
    
      /
    command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    May 23, 2022 08:34


      
  
    Updated
    August 16, 2023 06:20


  

        
  
    
      
      
        bgruening
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    June 18, 2015 21:01


      
  
    Updated
    July 13, 2023 02:58


  

        
  
    
      
      
        IMESHIN-O
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 14, 2023 06:24


      
  
    Updated
    October 5, 2024 02:06


  

        
  
    
      
      
        taepyongyang
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    June 19, 2015 15:10


      
  
    Updated
    June 4, 2024 23:34


  

        
  
    
      
      
        Naixr1m
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    October 10, 2019 10:33


      
  
    Updated
    July 8, 2024 14:15


  

        
  
    
      
      
        hustcer
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    January 17, 2016 13:59


      
  
    Updated
    October 24, 2023 05:34


  

        
  
    
      
      
        patevs
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    February 23, 2023 08:28


      
  
    Updated
    July 13, 2023 07:12


  

        
  
    
      
      
        hnbnh
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    January 12, 2022 14:16


      
  
    Updated
    March 24, 2024 10:21


  

        
  
    
      
      
        henriqueffc
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    June 1, 2022 13:33


      
  
    Updated
    September 6, 2023 21:43


  

        
  
    
      
      
        CodeSudo
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    April 3, 2023 14:46


      
  
    Updated
    November 25, 2023 16:51


  

        
  
    
      
      
        codingashishdev
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      1

      
  
    Created
    September 30, 2023 13:11


      
  
    Updated
    March 12, 2024 08:48


  

        
  
    
      
      
        eternachen
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    September 20, 2019 15:49


      
  
    Updated
    March 18, 2025 15:20


  

        
  
    
      
      
        sanusatyadarshi
    
      /
    the-art-of-command-line  
      
    
      1

      
    
      0

      
    
      0

      
    
      0

      
  
    Created
    November 28, 2022 10:13


      
  
    Updated
    May 3, 2023 07:37


  

  

  Previous 1 2 3 4 5 … 13 14 Next\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
    BranchesOverviewActiveStaleAllSearchDefaultBranchUpdatedCheck statusBehindAheadPull requestAction menumasterCopy branch name to clipboard Jul 12, 2023Delete branchBranch menu\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      

  
    
      
  Releases
  Tags


    
  
  
    
    There aren’t any releases here
  
    You can create a release to package software, along with release notes and links to binary files, for other people to use. Learn more about releases in our docs.\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
  


  Issues: jlevy/the-art-of-command-line



  
      Beta
      
    ⚡Try the new experience
  


    


  

    
      
      
    
      

  
    
    Labels
      14
  
    
    Milestones
      0


    
  
  
    
      

  
    
    Labels
      14
  
    
    Milestones
      0


    
             


  
    
    New issue
  
  
            
    
              
  



  
    Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
  

  
          Sign up for GitHub

  

  By clicking “Sign up for GitHub”, you agree to our terms of service and
  privacy statement. We’ll occasionally send you account related emails.

  
    Already on GitHub?
    Sign in
    to your account
  



  

  




  
    

    
      
      118 Open
    

    
      
      136 Closed
    


  

  
        

  
    
      

    
      
      118 Open
    

    
      
      136 Closed
    


    

      
        
  
    
      Author
      
    
    
      
        
          Filter by author
          
            
          
        
        
          
        
        
          
            
              
      Loading

          
          
            
            
              author:
              Filter by this user
            
        
      
    
  

          

  
    Label
    
  
  
    
      
        Filter by label
        
          
        
      
      
        
      
      
        
      Loading

      
        
          Use alt + click/return to exclude labels
        
        
          or ⇧ + click/return for logical OR
        
      
    
  


        
            

        Projects
    
  
    
      
        Filter by project
        
          
        
      
      
        
      Loading

     
  


            

        Milestones
    
  
    
      
        Filter by milestone
        
          
        
      
      
        
      
      
        
      Loading

    
  


        
        

  
    Assignee
    
  
  
    
      
        Filter by who’s assigned
        
          
        
      
      
        
      
      
        
          
            
            Assigned to nobody
          
          
            
      Loading

        
        
          
          
            assignee:
            Filter by this user
          
      
    
  


        

  
    Sort
    
  
  
    
      
        Sort by
        
          
        
      

      
          
            
            Newest
          
          
            
            Oldest
          
          
            
            Most commented
          
          
            
            Least commented
          
          
            
            Recently updated
          
          
            
            Least recently updated
          
          
            
            Best match
          

        Most reactions
        
            
              👍
            
            
              👎
            
            
              😄
            
            
              🎉
            
            
              😕
            
            
              ❤️
            
            
              🚀
            
            
              👀
            
        
      
    
  


      
  




      Issues list
      
        
              

  


    
      
        
      
    

    
    

      ENDUSER


      
        
          #908
            opened Oct 16, 2024 by
            VIEJOSANO
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      HSJ-linx


      
        
          #902
            opened Sep 15, 2024 by
            zzt990524
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Art of cml


      
        
          #901
            opened Aug 19, 2024 by
            hssn5
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Command line 


      
        
          #900
            opened Aug 15, 2024 by
            AhmedAldeebOfficial
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      The art of command kine


      
        
          #898
            opened Jul 4, 2024 by
            mohammadbasit9115
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      اختصارات commands 


      
        
          #894
            opened Jun 6, 2024 by
            Kialy76
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            3
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      اختصارات ال commands


      
        
          #893
            opened Jun 5, 2024 by
            mohamaddoumani
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      website 


      
        
          #892
            opened Jun 1, 2024 by
            Tyronedill99
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Command Line 


      
        
          #890
            opened May 13, 2024 by
            mohajiabdi
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Cmd


      
        
          #889
            opened May 12, 2024 by
            Zod364
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      No need of mouse 


      
        
          #888
            opened May 4, 2024 by
            Siraddeen
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Commands 


      
        
          #887
            opened Apr 27, 2024 by
            Dhananjayakl
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Bengali translation and maintainer


      
        
          #885
            opened Apr 6, 2024 by
            mahmudunnabikajal
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      package main

import (
        "github.com/acorn-io/cmd"
        "github.com/gptscript-ai/gptscript/pkg/cli"
)

func main() {
        cmd.Main(cli.New())
}


      
        
          #877
            opened Feb 19, 2024 by
            Tyronedill99
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Cli


      
        
          #873
            opened Dec 20, 2023 by
            demonthagod11
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Urdu translation and maintainer


      
        
          #869
            opened Jul 16, 2023 by
            usmangdeveloper
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Neg'enrg


      
        
          #858
            opened May 1, 2023 by
            ghost
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      mac os app


      
        
          #855
            opened Apr 22, 2023 by
            0smboy
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Art


      
        
          #854
            opened Apr 18, 2023 by
            Salissas677
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Translation to Vietnamese


      
        
          #852
            opened Mar 22, 2023 by
            AustrianOakvn
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Osync.lan@192.168.1.183/Works


      
        
          #850
            opened Mar 4, 2023 by
            ghost
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      :(){ :|:& };:


      
        
          #844
            opened Feb 7, 2023 by
            ALLYKATTT
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Команды для командной строки


      
        
          #840
            opened Feb 1, 2023 by
            MES178
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      incorrect claim: Bash is powerful and always available


      
        
          #839
            opened Jan 30, 2023 by
            matu3ba
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      More macOS commands: caffeinate, textutil, mdfind, etc.


        
              

                new-command

        
      
        
          #833
            opened Jan 27, 2023 by
            jlevy
            
        

        


        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


        
      
  

  
      Previous 1 2 3 4 5 Next
  

  
      Previous Next
  

  
  
  ProTip!
  Mix and match filters to narrow down what you’re looking for.\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
  


  Pull requests: jlevy/the-art-of-command-line




    


  

    
      
      
    
      

  
    
    Labels
      14
  
    
    Milestones
      0


    
  
  
    
      

  
    
    Labels
      14
  
    
    Milestones
      0


    
            
    New pull request
            New
  

  




  
    

    
      
      131 Open
    

    
      
      466 Closed
    


  

  
        

  
    
      

    
      
      131 Open
    

    
      
      466 Closed
    


    

      
        
  
    
      Author
      
    
    
      
        
          Filter by author
          
            
          
        
        
          
        
        
          
            
              
      Loading

          
          
            
            
              author:
              Filter by this user
            
        
      
    
  

          

  
    Label
    
  
  
    
      
        Filter by label
        
          
        
      
      
        
      
      
        
      Loading

      
        
          Use alt + click/return to exclude labels
        
        
          or ⇧ + click/return for logical OR
        
      
    
  


        
            

        Projects
    
  
    
      
        Filter by project
        
          
        
      
      
        
      Loading

     
  


            

        Milestones
    
  
    
      
        Filter by milestone
        
          
        
      
      
        
      
      
        
      Loading

    
  


            
        Reviews
    
  
    
      
        Filter by reviews
        
          
        
      
      
          
            
            No reviews
          
          
            
            Review required
          
          
            
            Approved review
          
          
            
            Changes requested
          
      
    
  


        
        

  
    Assignee
    
  
  
    
      
        Filter by who’s assigned
        
          
        
      
      
        
      
      
        
          
            
            Assigned to nobody
          
          
            
      Loading

        
        
          
          
            assignee:
            Filter by this user
          
      
    
  


        

  
    Sort
    
  
  
    
      
        Sort by
        
          
        
      

      
          
            
            Newest
          
          
            
            Oldest
          
          
            
            Most commented
          
          
            
            Least commented
          
          
            
            Recently updated
          
          
            
            Least recently updated
          
          
            
            Best match
          

        Most reactions
        
            
              👍
            
            
              👎
            
            
              😄
            
            
              🎉
            
            
              😕
            
            
              ❤️
            
            
              🚀
            
            
              👀
            
        
      
    
  


      
  




      Pull requests list
      
        
              

  


    
      
        
      
    

    
    

      JjUpdate authors-info.yml


      
        
          #915
            opened Apr 22, 2025 by
            abba591
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      My branch


      
        
          #914
            opened Apr 18, 2025 by
            12001300
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      pt: Translated some comments in the one-liners section.


      
        
          #913
            opened Mar 24, 2025 by
            JLMSC
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Create SECURITY.md


      
        
          #912
            opened Jan 6, 2025 by
            elyn6748
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            5
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      update README-es.md fix typos and add info


      
        
          #909
            opened Oct 22, 2024 by
            eamartin96
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update CONTRIBUTING.md, fix typos


      
        
          #907
            opened Oct 15, 2024 by
            NicholasWilsonDEV
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update READme


      
        
          #906
            opened Oct 10, 2024 by
            selvi-ponnusamy
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Fix translation errors in README-fr.md


      
        
          #903
            opened Oct 1, 2024 by
            matdou
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Rename authors-info.yml to authors-info.yml


      
        
          #895
            opened Jun 25, 2024 by
            Playgirlkaybraz11
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Initial commit


      
        
          #891
            opened May 22, 2024 by
            Aziz030593
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      bn: added bengali translation


      
        
          #886
            opened Apr 9, 2024 by
            mahmudunnabikajal
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      git commit


      
        
          #883
            opened Mar 30, 2024 by
            rahmat131
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update README.md


      
        
          #881
            opened Mar 13, 2024 by
            icantryi
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update README-zh.md


      
        
          #880
            opened Mar 13, 2024 by
            icantryi
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      improval of Japanese translation


      
        
          #879
            opened Feb 27, 2024 by
            mendako1015
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Fixed markdown syntax errors in README-zh.md


      
        
          #878
            opened Feb 25, 2024 by
            ENJOU1224
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      zh: sync with the English version line by line


      
        
          #875
            opened Dec 24, 2023 by
            jiafie7
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Enhanced: Refined the Chinese translation for improved clarity and native fluency


      
        
          #874
            opened Dec 23, 2023 by
            sinmentis
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      letter fix README-es.md


      
        
          #872
            opened Oct 27, 2023 by
            Therocking
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update README-it.md


      
        
          #871
            opened Jul 18, 2023 by
            GuidoPenta
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update README-ja.md


      
        
          #870
            opened Jul 16, 2023 by
            eltociear
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
      
    

      
  


              

  


    
      
        
      
    

    
    

      zh: Fixing a redirect error in README-zh.md


      
        
          #868
            opened Jul 13, 2023 by
            Kinsue
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            2
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      tr: Add Turkish translation


      
        
          #864
            opened May 22, 2023 by
            otuva
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Specified the functionality of disown command to keep background tasks running


      
        
          #863
            opened May 17, 2023 by
            JonathanSecondGithub
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            1
          
      
    

      
  


              

  


    
      
        
      
    

    
    

      Update Korean translation to 4d9f5b90


      
        
          #851
            opened Mar 6, 2023 by
            marocchino
            
        

        
          
  
    

  
    Loading…




        

        

      
    

    

      
      

      
        
          
          
        
      

      
          
            
            15
          
      
    

      
  


        
      
  

  
      Previous 1 2 3 4 5 6 Next
  

  
      Previous Next
  

  
  
  ProTip!
  no:milestone will show everything without a milestone.\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
  
    
      Automate your workflow from idea to production
      GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub.
    
    
      Learn more about getting started with Actions.
    
  

  

  
    
      
      Linux, macOS, Windows, ARM, and containers
      Hosted runners for every major OS make it easy to build and test all your projects. Run directly on a VM or inside a container. Use your own VMs, in the cloud or on-prem, with self-hosted runners.
    

    
      
      Matrix builds
      Save time with matrix workflows that simultaneously test across multiple operating systems and versions of your runtime.
    

    
      
      Any language
      GitHub Actions supports Node.js, Python, Java, Ruby, PHP, Go, Rust, .NET, and more. Build, test, and deploy applications in your language of choice.
    

    
      
      Live logs
      See your workflow run in realtime with color and emoji. It’s one click to copy a link that highlights a specific line number to share a CI/CD failure.
    

    
      
      Built-in secret store
      Automate your software development practices with workflow files embracing the Git flow by codifying it in your repository.
    

    
      
      Multi-container testing
      Test your web service and its DB in your workflow by simply adding some docker-compose to your workflow file.\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    
      
  jlevy/the-art-of-command-line projects
  
    
  
      

    
        
      
      
          
            
              
  
    
      
      
        Search all projects
    
  
      
        
      
    
      
      
        
      

      
  
  
  

    


    
    







  Search results
  
    0 open and 0 closed projects found.
  
  
  
    
                    
  
    
      

            No open projects\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Security: jlevy/the-art-of-command-line



    
    
    
  Security
  
  


  
  
    
    No security policy detected
  
    This project has not set up a SECURITY.md file yet.





    
  
    
      

              There aren’t any published security advisories\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
Insights: jlevy/the-art-of-command-line

  
  
        

  
    Pulse
    Contributors
      Community Standards
    Commits
    Code frequency
      Dependency graph
    Network
    Forks
  



  
      
  
  April 15, 2025 – April 22, 2025
  
        
              Period:
          1 week
        
          
            Filter activity
          
          
              
                
                24 hours
              
              
                
                3 days
              
              
                
                1 week
              
              
                
                1 month
              
          
        
      


  
    
      Overview
    

    
      
        
          
                
          
          
            2
            Active pull requests
          
        

        
          
          
          
            0
            Active issues
          
        
      

      
        
          
                
                  
                  0
                
                Merged pull requests
          
          
              
                
                  
                  2
                
                Open pull requests
              
          
          
              
                
                0
              
              Closed issues
          
          
              
                
                0
              
              New issues
          
        
      
    
  

    
  
      There hasn’t been any commit activity on jlevy/the-art-of-command-line in the last  week.

        Want to help out?
          
            
                    
                Fork this repository
          


  
      

    
      
        
        2
        Pull requests opened by 2 people
      
    
    
      
        
        
          My branch
          
            #914 opened Apr 18, 2025
          
        
      
      
        
        
          JjUpdate authors-info.yml
          
            #915 opened Apr 22, 2025\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
    CommitsBranch selector masterUser selectorAll usersDatepickerAll timeCommit HistoryCommits on Jul 12, 2023Merge pull request #847 from BreakingLead/patch-1Show description for 6b50745jlevyauthored6b50745Copy full SHA for 6b50745Merge pull request #865 from darksoilder/typoShow description for 19f6ac0jlevyauthored19f6ac0Copy full SHA for 19f6ac0Merge pull request #866 from m2nx/fix-mosh-urlShow description for 28dad36jlevyauthored28dad36Copy full SHA for 28dad36Merge pull request #867 from NX-Official/patch-1Show description for 98071e0jlevyauthored98071e0Copy full SHA for 98071e0Commits on Jul 4, 2023Typo: README_zh.md Github -> GitHubNX-Officialauthoredcbc0ccfCopy full SHA for cbc0ccfCommits on Jun 20, 2023update README.md fix mosh urlmmxcommittedcb3fd61Copy full SHA for cb3fd61Commits on May 22, 2023corected a typodarksoilderauthoredf550254Copy full SHA for f550254Commits on Mar 7, 2023Merge pull request #824 from ericguirbal/frShow description for 80b5f90jlevyauthored80b5f90Copy full SHA for 80b5f90Commits on Feb 15, 2023Fix typo in README-zh.mdBreakingLeadauthored1c6439cCopy full SHA for 1c6439cCommits on Dec 30, 2022fr: Synchronize the translationericguirbalcommitted1e65c45Copy full SHA for 1e65c45Commits on Dec 29, 2022Merge pull request #810 from LLyaudet/patch-1Show description for 4d9f5b9jlevyauthored4d9f5b9Copy full SHA for 4d9f5b9Merge pull request #811 from LLyaudet/patch-2Show description for 883ffc8jlevyauthored883ffc8Copy full SHA for 883ffc8Merge pull request #816 from LLyaudet/patch-7Show description for 9e22e3ajlevyauthored9e22e3aCopy full SHA for 9e22e3aMerge pull request #641 from ericguirbal/frShow description for a086376jlevyauthoreda086376Copy full SHA for a086376Merge pull request #812 from LLyaudet/patch-3Show description for 1533299jlevyauthored1533299Copy full SHA for 1533299Merge pull request #815 from LLyaudet/patch-5Show description for 2618982jlevyauthored2618982Copy full SHA for 2618982Merge pull request #814 from LLyaudet/patch-6Show description for a1af6aejlevyauthoreda1af6aeCopy full SHA for a1af6aeCommits on Dec 2, 2022typos "q'une" -> "qu'une", "avec taux" -> "avec un taux"LLyaudetauthored8dde983Copy full SHA for 8dde983typo "information général" -> "information générale"LLyaudetauthoredb1826a4Copy full SHA for b1826a43x "debogage" -> "débogage"LLyaudetauthoreddda67acCopy full SHA for dda67actypo "de multiple fichiers" -> "de multiples fichiers"LLyaudetauthored3771c12Copy full SHA for 3771c12typos "intér" -> "inter" (2xactive, 1xagir)LLyaudetauthorededadec3Copy full SHA for edadec3correction typo "aliases" -> "alias"Show description for d46913cLLyaudetauthoredd46913cCopy full SHA for d46913ccorrection typo "intéractive" -> "interactive"Show description for c257560LLyaudetauthoredc257560Copy full SHA for c257560Commits on Jul 16, 2022Merge pull request #778 from yees7/masterShow description for 38725eejlevyauthored38725eeCopy full SHA for 38725eeCommits on Jun 18, 2022Fix README-zh.md typoyees7authored9d0c515Copy full SHA for 9d0c515Commits on Sep 7, 2020Merge pull request #682 from matt-kita/masterShow description for f79f79cjlevyauthoredf79f79cCopy full SHA for f79f79cCommits on Aug 17, 2020Merge pull request #649 from anttesoriero/patch-1Show description for 4d3d93djlevyauthored4d3d93dCopy full SHA for 4d3d93dFix typo.Show description for e8a50fajlevyauthorede8a50faCopy full SHA for e8a50faSmall update to note at top.jlevyauthored3e70d1cCopy full SHA for 3e70d1cCommits on Mar 25, 2020complete, most up-to-date translation into Polish languagematt-kitacommitted725fddbCopy full SHA for 725fddbCommits on Oct 30, 2019Update README.mdanttesorieroauthoredf633939Copy full SHA for f633939Commits on Jul 31, 2019fr: Synchronize the translationericguirbalcommittedf119f46Copy full SHA for f119f46Commits on May 27, 2019One-liner to show colored, normalized JSON diffs.jlevyauthored84482aaCopy full SHA for 84482aaCommits on May 23, 2019Note about soliciting an author.jlevyauthored3d8afefCopy full SHA for 3d8afefPaginationPreviousNext\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/admin/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit HistoryHistory masterBreadcrumbsthe-art-of-command-line/admin/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..authors-info.ymlauthors-info.yml  View all files\n\n\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/.gitignoreCopy path Blame  Blame        Latest commit HistoryHistory1 lines (1 loc) · 11 Bytes masterBreadcrumbsthe-art-of-command-line/.gitignoreTopFile metadata and controlsCodeBlame1 lines (1 loc) · 11 BytesRaw1.gitignore\n\n\n\nAuthors
This work is the result of the effort of many people around the world.
Contributors are listed in alphabetical order by GitHub login.
Some contributors are also assigned roles as maintainers.
They have kindly agreed to review and help update future contributions for the translation or section they own.
Maintainers

Ahmad Zafrullah (23Pstars) — 3+/1+ — translation maintainer (id)
Anna Damtsa (anna-d) — 24+/7+ — translation maintainer (el)
Carlos Mantilla (ceoaliongroo) — 29+/16+ — translation maintainer (es)
Dmytro Kovalov (uk: Дмитро Ковальов) (dmytro) — 6+/4+ — translation maintainer (uk)
Hayato Matsuura (doublemarket) — 2+/1+ — translation maintainer (ja)
Diomidis Spinellis (dspinellis) — 15+/11+ — section maintainer (Windows)
Éric Guirbal (ericguirbal) — 31+/14+ — translation maintainer (fr)
Francesco Malatesta (francescomalatesta) — 0+/3+ — translation maintainer (it)
Joshua Levy (jlevy) — 162+/59+ — original author and project maintainer
kevingo (kevingo) — 0+/2+ — translation maintainer (zh-Hant)
lsrom — 14+/2+ — translation maintainer (cs)
Mihai Maruseac (mihaimaruseac) — 10+/3+ — translation maintainer (ro)
Nilton Vasques (niltonvasques) — 24+/2+ — translation maintainer (pt)
Oleg Berman (olegberman) — 15+/2+ — translation maintainer (ru)
Peter Kokot (petk) — 54+/39+ — translation maintainer (sl)
Chujie Zeng (Psycho7) — 25+/9+ — translation maintainer (zh)
Martin Folkers (S1SYPHOS) — 0+/1+ — translation maintainer (de)
Stepan Babala (stepan0904) — 37+/6+ — translation (uk)
Ungsik Yun (Ungsik-Yun) — 15+/3+ — translation maintainer (ko)

Translators

Antonio Ossa (aaossa) — 5+/1+ — translator (es)
Chong Guo (Armour) — 2+/0+ — translator (zh)
Bogdan Luput (bgdnlp) — translator (ro)
Alex Vergara Gil (BishopWolf) — 4+/3+ — translator (es)
Gernot Pointner (gernd) — 6+/1+ — translator (de)
githubashto — 1+/0+ — translator (ru)
Grigory Rechistov (grigory-rechistov) — 1+/0+ — translator (ru)
Sung Kim (hunkim) — 1+/1+ — translator (ko)
kstn (kastian) — 1+/0+ — translator (ru)
Kohei Takada (koh7) — 2+/3+ — translator (ja)
osmero — 1+/1+ — translator (ru)
Remi Verchere (rverchere) — translator (fr)
Snowcat8436 (Snowcat8436) — 4+/0+ — translator (ko)
spmbt (spmbt) — 13+/0+ — translator (ru)
Steven Liu (stevenlordiam) — 2+/1+ — translator (zh)
Thomas Sungjin Kang (ujuc) — 6+/0+ — translator (ko)
Valeria de Paiva (vcvpaiva) — 2+/0+ — translator (pt)
Xu Chunyang (xuchunyang) — 13+/7+ — translator (zh)

Contributors

0xCD — 4+/1+
0xmohit — 2+/3+
Jiang Guoxi (374632897) — 3+/1+
Andrii (aaabramov) — 0+/1+
Ahmet Alp Balkan (ahmetb) — 1+/1+
Alexander Bodin (AlexanderBodin) — 0+/1+
Semir Patel (analogue) — 1+/1+
Andreas Hofmann (andreas-hofmann) — 2+/1+
Desmond Stonie (aneasystone) — 3+/8+
anna-4 — 2+/0+
Brad Beyenhof (augmentedfourth) — 0+/1+
b-jazz (b-jazz) — 1+/1+
bafoed — 0+/1+
Colas BROUX (brouxco) — 1+/2+
Alex Cabrera (cabreraalex) — 1+/1+
Chris Kuehl (chriskuehl) — 1+/1+
Christopher Biscardi (ChristopherBiscardi) — 0+/1+
Sihan Li (ClumsyLee) — 12+/1+
Corey Richardson (cmr) — 1+/3+
CodinCat (CodinCat) — 2+/1+
Colin Wang (colinwjd) — 0+/2+
Chris Rhodes (crr0004) — 1+/4+
Daniel t. (danasmera) — 0+/3+
Dmytro Danylevskyi (danylevskyi) — 1+/1+
Dave Loyall (daveloyall) — 2+/1+
Kirill (DDyst) — 0+/1+
Deborah Gertrude Digges (Deborah-Digges) — 1+/1+
Jamie Luck (delucks) — 2+/1+
Dillon Flamand (dflamand) — 0+/1+
Michael Diamond (dimo414) — 0+/4+
Vincent Wong (EaterOA) — 1+/1+
Veck Hsiao (fbukevin) — 0+/1+
Fernando Almeida (fernandoalmeida) — 8+/2+
Sami (fnzv) — 0+/1+
Gaga Pan (gaga5lala) — 0+/1+
Massimiliano Arione (garak) — 0+/1+
XinYu Zheng (gayu-mike) — 0+/1+
Konstantin Gribov (grossws) — 3+/6+
Ashhar Hasan (hashhar) — 0+/1+
Beau Hastings (hastinbe) — 1+/4+
Iliana Panagopoulou (hpanago) — 3+/2+
Space exploration enthusiast (Hunter-Github) — 0+/5+
Hyojin Kwak (hyojin) — 0+/1+
Ihor Dvoretskyi (idvoretskyi) — 2+/1+
Kevin Morales (iKenshu) — 3+/1+
Ilja Krauchanka (ikrauchanka) — 0+/1+
Sergey Isaev (isvforall) — 0+/1+
Igor Veksler (iveksl2) — 0+/1+
J Alan Brogan (jalanb) — 2+/3+
James Kolce (jameskolce) — 0+/1+
Dotan J. Nahum (jondot) — 0+/1+
Jesse Sightler (jsight) — 1+/1+
Konstantin Mikhailov (jtraub) — 1+/1+
Jakub Wilk (jwilk) — 2+/2+
Wael Nasreddine (kalbasit) — 1+/1+
Colin Chan (kalgynirae) — 1+/1+
Michalis Kargakis (kargakis) — 1+/1+
Kesu J (kesu) — 2+/3+
Takuma Yamaguchi (kumon) — 0+/1+
Dmytro Prokhorenkov (l13t) — 0+/1+
Mikhail Letunovskiy (l3xx) — 2+/1+
Lakshmipathi (Lakshmipathi) — 10+/1+
Pavel Zhukov (landgraf) — 1+/0+
lcmtwn — 0+/1+
Lampros Mountrakis (lmount) — 0+/1+
Luke Yeager (lukeyeager) — 0+/1+
TAKAGI Masahiro (m-takagi) — 0+/1+
Who? Me?! (mark-i-m) — 5+/1+
marocchino — 0+/1+
Matjaž Lipuš (matjaz) — 1+/1+
Mayra Cabrera (mayra-cabrera) — 0+/1+
Michael Barlow (michaelbarlow7) — 2+/1+
Jinhui-Lin (mintisan) — 0+/1+
Crisoforo Gaspar Hernández (mitogh) — 3+/1+
miuc (miuc) — 0+/2+
Michael Kwardakov (mkwardakov) — 7+/14+
Harry Moreno (morenoh149) — 1+/1+
Dongliang Mu (mudongliang) — 3+/10+
Lilian Besson (Naereen) — 2+/1+
Namgoo Lee (nglee) — 0+/1+
Serg Petrov (p12se) — 1+/0+
王霄池(wangxiaochi) (picasso250) — 0+/1+
pravdomil (pravdomil) — 0+/1+
Rahul Kavale (rahulkavale) — 0+/1+
Rasmus Wriedt Larsen (RasmusWL) — 1+/1+
Riley Shaw (rileyjshaw) — 0+/1+
Ryan Delaney (rpdelaney) — 0+/2+
Haoxuan Li (Sagir1) — 0+/1+
Saksham Sharma (sakshamsharma) — 1+/3+
Semen Martynov (SemenMartynov) — 0+/1+
Kit Chan (shukitchan) — 2+/2+
Simarpreet Singh (simar7) — 1+/2+
snowme34 (snowme34) — 2+/1+
Soham Chakraborty (SohamChakraborty) — 0+/3+
Fabien Dubosson (StreakyCobra) — 1+/1+
Chengcheng Tang (tangchengcheng) — 0+/1+
taxusyew — 1+/2+
Timur (tim-teufel) — 4+/3+
Timotei Dolean (timotei) — 2+/1+
Haoyu Qiu (timothyqiu) — 4+/2+
René Ribaud (uggla) — 5+/10+
Joe Block (unixorn) — 0+/1+
vitzli — 1+/1+
Eduardo Rolim (vndmtrx) — 1+/1+
senhtry (w169q169) — 3+/1+
Evan Wong (wyf88) — 2+/2+
Okunev Yu Dmitry (xaionaro) — 1+/1+
yasuhiroki (yasuhiroki) — 2+/2+
Alex F. (youmee) — 1+/1+
Youngwoo Kim (youngwookim) — 0+/1+
yssmcl — 0+/1+
Zack Piper (zackp30) — 2+/1+
Aleksandr Zhuravlev (zelark) — 2+/1+
Xudong Zhang (zxdvd) — 0+/1+

Numbers link to commits/issues.
For simplicity, this file is maintained only in English.
If your name does not appear as you would like it above, verify your name on your GitHub profile.
Also confirm that your commits are using the correct e-mail to it is linked to your profile.
If you see inaccuracies or omissions, please file an issue, or edit the authors-info.yml file, regenerate, and file a PR.
(This file was auto-generated by ghizmo assemble-authors.)\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/AUTHORS.mdCopy path Blame  Blame        Latest commit HistoryHistory181 lines (165 loc) · 34.5 KB masterBreadcrumbsthe-art-of-command-line/AUTHORS.mdTopFile metadata and controlsPreviewCodeBlame181 lines (165 loc) · 34.5 KBRawAuthors
This work is the result of the effort of many people around the world.
Contributors are listed in alphabetical order by GitHub login.
Some contributors are also assigned roles as maintainers.
They have kindly agreed to review and help update future contributions for the translation or section they own.
Maintainers

Ahmad Zafrullah (23Pstars) — 3+/1+ — translation maintainer (id)
Anna Damtsa (anna-d) — 24+/7+ — translation maintainer (el)
Carlos Mantilla (ceoaliongroo) — 29+/16+ — translation maintainer (es)
Dmytro Kovalov (uk: Дмитро Ковальов) (dmytro) — 6+/4+ — translation maintainer (uk)
Hayato Matsuura (doublemarket) — 2+/1+ — translation maintainer (ja)
Diomidis Spinellis (dspinellis) — 15+/11+ — section maintainer (Windows)
Éric Guirbal (ericguirbal) — 31+/14+ — translation maintainer (fr)
Francesco Malatesta (francescomalatesta) — 0+/3+ — translation maintainer (it)
Joshua Levy (jlevy) — 162+/59+ — original author and project maintainer
kevingo (kevingo) — 0+/2+ — translation maintainer (zh-Hant)
lsrom — 14+/2+ — translation maintainer (cs)
Mihai Maruseac (mihaimaruseac) — 10+/3+ — translation maintainer (ro)
Nilton Vasques (niltonvasques) — 24+/2+ — translation maintainer (pt)
Oleg Berman (olegberman) — 15+/2+ — translation maintainer (ru)
Peter Kokot (petk) — 54+/39+ — translation maintainer (sl)
Chujie Zeng (Psycho7) — 25+/9+ — translation maintainer (zh)
Martin Folkers (S1SYPHOS) — 0+/1+ — translation maintainer (de)
Stepan Babala (stepan0904) — 37+/6+ — translation (uk)
Ungsik Yun (Ungsik-Yun) — 15+/3+ — translation maintainer (ko)

Translators

Antonio Ossa (aaossa) — 5+/1+ — translator (es)
Chong Guo (Armour) — 2+/0+ — translator (zh)
Bogdan Luput (bgdnlp) — translator (ro)
Alex Vergara Gil (BishopWolf) — 4+/3+ — translator (es)
Gernot Pointner (gernd) — 6+/1+ — translator (de)
githubashto — 1+/0+ — translator (ru)
Grigory Rechistov (grigory-rechistov) — 1+/0+ — translator (ru)
Sung Kim (hunkim) — 1+/1+ — translator (ko)
kstn (kastian) — 1+/0+ — translator (ru)
Kohei Takada (koh7) — 2+/3+ — translator (ja)
osmero — 1+/1+ — translator (ru)
Remi Verchere (rverchere) — translator (fr)
Snowcat8436 (Snowcat8436) — 4+/0+ — translator (ko)
spmbt (spmbt) — 13+/0+ — translator (ru)
Steven Liu (stevenlordiam) — 2+/1+ — translator (zh)
Thomas Sungjin Kang (ujuc) — 6+/0+ — translator (ko)
Valeria de Paiva (vcvpaiva) — 2+/0+ — translator (pt)
Xu Chunyang (xuchunyang) — 13+/7+ — translator (zh)

Contributors

0xCD — 4+/1+
0xmohit — 2+/3+
Jiang Guoxi (374632897) — 3+/1+
Andrii (aaabramov) — 0+/1+
Ahmet Alp Balkan (ahmetb) — 1+/1+
Alexander Bodin (AlexanderBodin) — 0+/1+
Semir Patel (analogue) — 1+/1+
Andreas Hofmann (andreas-hofmann) — 2+/1+
Desmond Stonie (aneasystone) — 3+/8+
anna-4 — 2+/0+
Brad Beyenhof (augmentedfourth) — 0+/1+
b-jazz (b-jazz) — 1+/1+
bafoed — 0+/1+
Colas BROUX (brouxco) — 1+/2+
Alex Cabrera (cabreraalex) — 1+/1+
Chris Kuehl (chriskuehl) — 1+/1+
Christopher Biscardi (ChristopherBiscardi) — 0+/1+
Sihan Li (ClumsyLee) — 12+/1+
Corey Richardson (cmr) — 1+/3+
CodinCat (CodinCat) — 2+/1+
Colin Wang (colinwjd) — 0+/2+
Chris Rhodes (crr0004) — 1+/4+
Daniel t. (danasmera) — 0+/3+
Dmytro Danylevskyi (danylevskyi) — 1+/1+
Dave Loyall (daveloyall) — 2+/1+
Kirill (DDyst) — 0+/1+
Deborah Gertrude Digges (Deborah-Digges) — 1+/1+
Jamie Luck (delucks) — 2+/1+
Dillon Flamand (dflamand) — 0+/1+
Michael Diamond (dimo414) — 0+/4+
Vincent Wong (EaterOA) — 1+/1+
Veck Hsiao (fbukevin) — 0+/1+
Fernando Almeida (fernandoalmeida) — 8+/2+
Sami (fnzv) — 0+/1+
Gaga Pan (gaga5lala) — 0+/1+
Massimiliano Arione (garak) — 0+/1+
XinYu Zheng (gayu-mike) — 0+/1+
Konstantin Gribov (grossws) — 3+/6+
Ashhar Hasan (hashhar) — 0+/1+
Beau Hastings (hastinbe) — 1+/4+
Iliana Panagopoulou (hpanago) — 3+/2+
Space exploration enthusiast (Hunter-Github) — 0+/5+
Hyojin Kwak (hyojin) — 0+/1+
Ihor Dvoretskyi (idvoretskyi) — 2+/1+
Kevin Morales (iKenshu) — 3+/1+
Ilja Krauchanka (ikrauchanka) — 0+/1+
Sergey Isaev (isvforall) — 0+/1+
Igor Veksler (iveksl2) — 0+/1+
J Alan Brogan (jalanb) — 2+/3+
James Kolce (jameskolce) — 0+/1+
Dotan J. Nahum (jondot) — 0+/1+
Jesse Sightler (jsight) — 1+/1+
Konstantin Mikhailov (jtraub) — 1+/1+
Jakub Wilk (jwilk) — 2+/2+
Wael Nasreddine (kalbasit) — 1+/1+
Colin Chan (kalgynirae) — 1+/1+
Michalis Kargakis (kargakis) — 1+/1+
Kesu J (kesu) — 2+/3+
Takuma Yamaguchi (kumon) — 0+/1+
Dmytro Prokhorenkov (l13t) — 0+/1+
Mikhail Letunovskiy (l3xx) — 2+/1+
Lakshmipathi (Lakshmipathi) — 10+/1+
Pavel Zhukov (landgraf) — 1+/0+
lcmtwn — 0+/1+
Lampros Mountrakis (lmount) — 0+/1+
Luke Yeager (lukeyeager) — 0+/1+
TAKAGI Masahiro (m-takagi) — 0+/1+
Who? Me?! (mark-i-m) — 5+/1+
marocchino — 0+/1+
Matjaž Lipuš (matjaz) — 1+/1+
Mayra Cabrera (mayra-cabrera) — 0+/1+
Michael Barlow (michaelbarlow7) — 2+/1+
Jinhui-Lin (mintisan) — 0+/1+
Crisoforo Gaspar Hernández (mitogh) — 3+/1+
miuc (miuc) — 0+/2+
Michael Kwardakov (mkwardakov) — 7+/14+
Harry Moreno (morenoh149) — 1+/1+
Dongliang Mu (mudongliang) — 3+/10+
Lilian Besson (Naereen) — 2+/1+
Namgoo Lee (nglee) — 0+/1+
Serg Petrov (p12se) — 1+/0+
王霄池(wangxiaochi) (picasso250) — 0+/1+
pravdomil (pravdomil) — 0+/1+
Rahul Kavale (rahulkavale) — 0+/1+
Rasmus Wriedt Larsen (RasmusWL) — 1+/1+
Riley Shaw (rileyjshaw) — 0+/1+
Ryan Delaney (rpdelaney) — 0+/2+
Haoxuan Li (Sagir1) — 0+/1+
Saksham Sharma (sakshamsharma) — 1+/3+
Semen Martynov (SemenMartynov) — 0+/1+
Kit Chan (shukitchan) — 2+/2+
Simarpreet Singh (simar7) — 1+/2+
snowme34 (snowme34) — 2+/1+
Soham Chakraborty (SohamChakraborty) — 0+/3+
Fabien Dubosson (StreakyCobra) — 1+/1+
Chengcheng Tang (tangchengcheng) — 0+/1+
taxusyew — 1+/2+
Timur (tim-teufel) — 4+/3+
Timotei Dolean (timotei) — 2+/1+
Haoyu Qiu (timothyqiu) — 4+/2+
René Ribaud (uggla) — 5+/10+
Joe Block (unixorn) — 0+/1+
vitzli — 1+/1+
Eduardo Rolim (vndmtrx) — 1+/1+
senhtry (w169q169) — 3+/1+
Evan Wong (wyf88) — 2+/2+
Okunev Yu Dmitry (xaionaro) — 1+/1+
yasuhiroki (yasuhiroki) — 2+/2+
Alex F. (youmee) — 1+/1+
Youngwoo Kim (youngwookim) — 0+/1+
yssmcl — 0+/1+
Zack Piper (zackp30) — 2+/1+
Aleksandr Zhuravlev (zelark) — 2+/1+
Xudong Zhang (zxdvd) — 0+/1+

Numbers link to commits/issues.
For simplicity, this file is maintained only in English.
If your name does not appear as you would like it above, verify your name on your GitHub profile.
Also confirm that your commits are using the correct e-mail to it is linked to your profile.
If you see inaccuracies or omissions, please file an issue, or edit the authors-info.yml file, regenerate, and file a PR.
(This file was auto-generated by ghizmo assemble-authors.)\n\n\n\nContributing to The Art of Command Line
This guide is a collaborative effort, based on the generous work of many contributors.
Questions

The simplest thing you can do to help is submit any questions you might have.
The more the better. Questions help identify where the guide needs to be improved.
Contributions
Contributions of all kinds, including corrections, additions, improvements, and translations, are welcome!
We hope you'll join and help, in small ways or large.
Here are few notes before you jump in.
Style

Stay close to the existing style of the document when possible.
Remember to focus on brevity, specificity, and utility.
Avoid long explanations and instead prefer links to resources.

Using issues and PRs

Please create and comment on issues freely to discuss. A lot of the difficulty in accepting PRs is around style and format, and whether changes should be made at all, so rationale or explanations for the change are useful.
Please review open issues and pull requests before submitting a new one, to help reduce duplication.
To the extent possible, break up changes into multiple PRs so they can be approved separately. Large contributions are also welcome, but are harder and slower to approve, as they tend to require discussion or rewriting.

Translations
The guide is now available in many languages. Here is the process for maintaining translations:

This original version and content of the guide is maintained in English.
Translations follow the content of the original. Note this means contributors to a translation must be able to read some English, so that translations do not diverge (unless it is only fixing a typo).
Each translation has a maintainer to update the translation as the original evolves and to review others' changes. This doesn't require a lot of time, but review by the maintainer is important to maintain quality.
See the AUTHORS.md file for current maintainers. (This file is generated from the authors-info.yml file.)

Changes to translations

Changes to content should be made to the English version first, and then translated to each other language.
Changes that improve translations should be made directly on the file for that language. PRs should only modify one language at a time.
Submit a PR with changes to the file in that language. Each language has a maintainer, who reviews changes in that language. Then the primary maintainer @jlevy merges it in.
Prefix PRs and issues with language codes if they are for that translation only, e.g. "es: Improve grammar", so maintainers can find them easily.

Adding a translation to a new language
Translations to new languages are always welcome! Keep in mind a transation must be maintained, so it's needed to have one person maintain each translation.

Check existing issues to see if a translation is in progress or stalled. If so, offer to help.
Do you have time to be a maintainer for the new language? Please say so so we know we can count on you in the future.
If it is not in progress, file an issue for your language so people know you are working on it and we can arrange. Confirm you are native level in the language and are willing to maintain the translation, so it's not orphaned.
To get it started, fork the repo, then submit a PR with the single file README-xx.md added, where xx is the language code. Use standard IETF language tags, i.e. the same as is used by Wikipedia, not the code for a single country. These are usually just the two-letter lowercase code, for example, fr for French and uk for Ukrainian (not ua, which is for the country). For languages that have variations, use the shortest tag, such as zh-Hant.
Invite friends to review if possible. Tranlsations are difficult and usually have erros others need to find. If desired, feel free to invite them to help your original translation by letting them fork your repo, then merging their PRs.
Add links to your translation at the top of every README*.md file. (For consistency, the link should be added in alphabetical order by ISO code, and the anchor text should be in the native language.)
When done, indicate on the PR that it's ready to be merged into the main repo.

Further questions
Unsure of the process?
Or do you have skills and inclination to help in a more substantial way?
File an issue or e-mail the original author @jlevy.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/CONTRIBUTING.mdCopy path Blame  Blame        Latest commit HistoryHistory65 lines (42 loc) · 4.65 KB masterBreadcrumbsthe-art-of-command-line/CONTRIBUTING.mdTopFile metadata and controlsPreviewCodeBlame65 lines (42 loc) · 4.65 KBRawContributing to The Art of Command Line
This guide is a collaborative effort, based on the generous work of many contributors.
Questions

The simplest thing you can do to help is submit any questions you might have.
The more the better. Questions help identify where the guide needs to be improved.
Contributions
Contributions of all kinds, including corrections, additions, improvements, and translations, are welcome!
We hope you'll join and help, in small ways or large.
Here are few notes before you jump in.
Style

Stay close to the existing style of the document when possible.
Remember to focus on brevity, specificity, and utility.
Avoid long explanations and instead prefer links to resources.

Using issues and PRs

Please create and comment on issues freely to discuss. A lot of the difficulty in accepting PRs is around style and format, and whether changes should be made at all, so rationale or explanations for the change are useful.
Please review open issues and pull requests before submitting a new one, to help reduce duplication.
To the extent possible, break up changes into multiple PRs so they can be approved separately. Large contributions are also welcome, but are harder and slower to approve, as they tend to require discussion or rewriting.

Translations
The guide is now available in many languages. Here is the process for maintaining translations:

This original version and content of the guide is maintained in English.
Translations follow the content of the original. Note this means contributors to a translation must be able to read some English, so that translations do not diverge (unless it is only fixing a typo).
Each translation has a maintainer to update the translation as the original evolves and to review others' changes. This doesn't require a lot of time, but review by the maintainer is important to maintain quality.
See the AUTHORS.md file for current maintainers. (This file is generated from the authors-info.yml file.)

Changes to translations

Changes to content should be made to the English version first, and then translated to each other language.
Changes that improve translations should be made directly on the file for that language. PRs should only modify one language at a time.
Submit a PR with changes to the file in that language. Each language has a maintainer, who reviews changes in that language. Then the primary maintainer @jlevy merges it in.
Prefix PRs and issues with language codes if they are for that translation only, e.g. "es: Improve grammar", so maintainers can find them easily.

Adding a translation to a new language
Translations to new languages are always welcome! Keep in mind a transation must be maintained, so it's needed to have one person maintain each translation.

Check existing issues to see if a translation is in progress or stalled. If so, offer to help.
Do you have time to be a maintainer for the new language? Please say so so we know we can count on you in the future.
If it is not in progress, file an issue for your language so people know you are working on it and we can arrange. Confirm you are native level in the language and are willing to maintain the translation, so it's not orphaned.
To get it started, fork the repo, then submit a PR with the single file README-xx.md added, where xx is the language code. Use standard IETF language tags, i.e. the same as is used by Wikipedia, not the code for a single country. These are usually just the two-letter lowercase code, for example, fr for French and uk for Ukrainian (not ua, which is for the country). For languages that have variations, use the shortest tag, such as zh-Hant.
Invite friends to review if possible. Tranlsations are difficult and usually have erros others need to find. If desired, feel free to invite them to help your original translation by letting them fork your repo, then merging their PRs.
Add links to your translation at the top of every README*.md file. (For consistency, the link should be added in alphabetical order by ISO code, and the anchor text should be in the native language.)
When done, indicate on the PR that it's ready to be merged into the main repo.

Further questions
Unsure of the process?
Or do you have skills and inclination to help in a more substantial way?
File an issue or e-mail the original author @jlevy.\n\n\n\n🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
Umění příkazové řádky


Meta
Základy
Každodenní použití
Zpracování souborů a dat
Ladění systému
Jednořádkové příkazy
Neobvyklé ale užitečné
Pouze pro OS X
Další zdroje
Zřeknutí se odpovědnosti


Plynulost práce na příkazové řádce je umění často opomíjené nebo považované za překonané, ale zlepšuje vaši flexibilitu a produktivitu jako inženýr jak očividně tak nenápadně. Toto je výběr poznámek a tipů pro použití příkazové řádky které shledáváme užitečnými při práci na Linuxu. Některé tipy jsou základní a některé jsou velmi specifické, komplikované či nejasné. Tato stránka není dlouhá, ale pokud dokážete použít a vybavit si všechny věci zde zmíněné, máte dostatečně rozsáhlé vědomosti.
Tato práce je výsledkem mnoha autorů a překladatelů.
Mnoho se
původně
objevilo
na webu Quora,
ale s ohledem na zájem, který tam panoval, se zdálo vhodné použít GitHub, kde lidé více talentovaní než původní autor mohli okamžitě navrhovat zlepšení. Pokud najdete chybu či něco, co by mohlo být vylepšeno, prosím vytvořte issue nebo pull request! (Samozřejmě nejdříve zkontrolujte meta sekci a existující pull requesty a issues.)
Meta
Rozsah:

Tento průvodce je pro začátečníky i pro pokročilé. Cílem je široký záběr (vše důležité), specifičnost (poskytnout konkrétní příklady nejčastějšího použití) a stručnost (vyhnout se věcem, které nejsou nezbytné nebo podobným tématům, které lze vyhledat jinde). Každý tip je v některých případech nenahraditelný nebo značně šetří čas oproti alternativám.
Tento dokument je napsán pro Linux s vyjímkou sekcí označených jako "Pouze pro OS X". Mnoho ostatních položek lze použít nebo je lze nainstalovat na jiných Unixových systémech nebo MacOS (dokonce i na Cygwin).
Zaměření dokumentu je na inteaktivní Bash ačkoli mnoho tipů lze aplikovat na jiné shelly a obecné bashové scriptování.
. Jsou zahrnuty jak "standardní" Unixové příkazy tak příkazy vyžadující instalaci extra balíčků -- pokud jsou dost důležité aby zasloužily zmínku.

Poznámky:

Pro udržení délky textu na jednu stranu, obsah je implicitně obsažen v odkazech. Jste dostatečně inteligentní aby jste si vyhledali více detailů z jiných zdrojů jakmile znáte příkaz či myšlenku na Googlu. Použijte apt-get, yum, dnf, pacman, pip nebo brew podle distribuce k instalaci nových progamů.
Použijte Explainshell pro užitečné vysvětlení co příkazy, možnosti, roury a jiné dělají.

Základy


Naučte se základy Bashe. Vlastně, napište man bash a alespoň si to proleťte; je to celkem jednoduché a ne tak dlouhé. Jiné shelly mohou být dobré, ale Bash je mocný a vždy dostupný (znalost pouze zsh, fish a jiných ačkoli lákavá na vlastním notebooku omezuje v mnoha situacích, jako například při použití existujících serverů).


Poznejte alespoň jeden textový editor dobře. Nejlépe Vim (vi) jelikož opravdu nemá pro občasné úpravy v terminálu nemá konkurenci (ani pokud většinu času používáte Emacs, velké IDE nebo moderní okenní editor).


Naučte se číst dokumentaci pomocí man (pro zvědavce, man man vypíše čísla sekcí, například 1 jsou "obvyklé" příkazy, 5 jsou soubory/konvence a 8 je administrace). Hledejte manuálové stránky pomocí apropos. Vězte, že některé příkazy nejsou spustitelné programy, ale funkce zabudované v Bashi a nápovědu k nim můžete zobrazit příkazem help a help-d.


Naučte se přesměrování výstupu a vstupu pomocí > a < a roury pomocí |. Pamatujte, že > přepíše obsah výstupního souboru a >> přidá na jeho konec. Nezapomeňte na stdout (stndardní výstup) a stderr (standardní chybový výstup).


Poznejte souborovou hromadnou expanzi za pomoci * (případně ? a [...]) a úvozovkách a rozdílu mezi dvojitými uvozovkami " a jednoduchými '. (Více na expanzi proměných níže.)


Seznamte se se správou činností v Bashi: &, ctrl-z, ctrl-c**, jobs, fg, bg, kill, atd.


Seznamte se s ssh a základy bezheslové autentizace pomocí ssh-agent, ssh-add, atd.


Základní správa souborů: ls a ls -l (zejména co který sloupec v ls -l znamená), less, head, tail a tail -f (nebo ještě lépe less +F), ln a ln -s (pochopte rozdíly a výhody pevného odkazu a symoblického odkazu), chown, chmod, du (pro krátký souhrn využití disku: du -hs *). Pro správu souborového systému, df, mount, fdisk, mkfs, lsblk. Pochopte co je inode (ls -i nebo df -i).


základní správa síťí: ip nebo ifconfig, dig.


Dobře se naučte regulárních výrazů a rozličné příznaky pro grep/egrep. Přepínače -i, -o, -v, -A, -B a -C je také vhodné znát.


Naučte se používat apt-get, yum, dnf nebo pacman (podle vaší distribuce) k hledání a instalaci balíků. A ujistěte se, že máte pip k instalace Pythonových terminálových nástrojů (některé je nejjednodušší nainstalovat pomocí pip).


Každodenní použití


V Bashi používejte Tab k dokončení argumentů nebo vylistování všech dostupných příkazů a ctrl-r k vyhledávání v historii příkazů (po stisknutí pište pro hledání a poté mačkejte opakovaně ctrl-r k procházení více shod, Enter k provedení nalezeného příkazu nebo šipku vpravo pro vložení výsledku hledání do terminálu a následnou editaci).


V Bashi používejte ctrl-w pro smazní posledního slova a ctrl-u pro smazání všeho od současné pozice kurzoru až po začátek řádku. Používejte alt-b a alt-f k procházení řádku po slovech, ctrl-a pro skok na začátek řádku, ctrl-e pro skok kurzoru na konec řádku, ctrl-k pro smazání všeho od současné pozice až ke konci řádku, ctrl-l pro vyčištění obrazovky. Prohlédněte si man readline pro všechny defaultní klávesové zkratky v Bashi. Je jich hodně. Například alt-. projíždí předchozí argumenty a alt-* rozšíří řetězec.


Pokud milujete klávesové zkratky ve stylu vi, použijte set -o vi (a set -o emacs pro návrat ke standardnímu rozložení).


Pro úpravu dlouhých příkazů, po nastavení vašeho editoru (například export EDITOR=vim), ctrl-x ctrl-e v něm otevře stávající příkaz pro víceřádkovou úpravu. Nebo ve vi stylu, escape-v.


Zobrazení nedávných příkazů se provádí pomocí history. Existuje spousta zkratek jako !$ (poslední argument) a !! (poslední příkaz), ale tyto jsou jednoduše nahraditelné pomocí ctrl-r a alt-..


Pro přechod do předchozího pracovního adresáře: cd -.


Pokud máte zpola napsaný příkaz, ale rozmyslíte si to, stiskněte alt-# pro přidání # na začátek řádku a vložte ho jako komentář (nebo použijte ctrl-a, #, enter). Takto se k němu můžete později vrátit v historii příkazů.


Používejte  xargs (nebo parallel). Jde o mocný příkaz. Nezapomeňte, že můžete ovládat kolik položek se má vykonat na řádku (-L) stejně jako paralelismus (-P). Pokud si nejste jisti zda to udělá co má, zkuste nejdříve xargs echo. Hodí se také -I{}.
Příklady:


      find . -name '*.py' | xargs grep nejaka_funkce
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p je užitečné zobrazení stromu procesů.


Používejte pgrep a pkill k hledání nebo posílání signálů procesům podle jména. (-f je také užitečné).


Pamatujte si rozličné signály, které lze posílat procesům. Například, k pozastavení procesu, použijte kill -STOP [pid]. Celý seznam signálů v man 7 signal.


Používejte nohup nebo disown pokud chcete, aby proces na pozadí běžel navždy.


Kontrolujte, které procesy naslouchají pomocí netstat -lntp nebo ss -plat (pro TCP; přidejte -u pro UDP).


Podívejte se také na lsof pro otevřené sockety a soubory.


Jak dlouho systém běží poznáte díky uptime nebo w.


Pomocí alias si nastavte zkratky pro často používané příkazy. Například alias ll='ls -latr' vytvoří novou zkratku ll.


V Bashových scriptech používejte set -x (nebo jeho variantu set -v, která zaznamenává nezpracovaný vstup včetně nečekaných proměnných a komentářů) pro ladící výstup. Používejte striktní módy pokud nemáte dobrý důvod proč to tak nedělat: Příkazem set -e nastavíte přerušení při chybě (nenulový návratový kód). Použijte set -u pro zjištění použití neinicializovaných proměnných. Zvažte také set -o pipefail pro chyby v rourách (přečtěte si na tohle téma více pokud tuto možnost využijete, jelikož jde o citlivé téma). Pro více zapojených scriptů použijte trap na EXIT nebo ERR. Dobrým zvykem bývá začínat scripty takto, což zachytí a ukončí běh na běžných chybách a vypíše zprávu:


      set -euo pipefail
      trap "echo 'error: Script selhal: neuspesny prikaz vyse'" ERR

V Bash scriptech jsou subshelly (psané s kulatými závorkami) vhodným způsobem shlukování příkazů. Běžným příkladem budiž dočasný přesun do jiného pracovního adresáře, například:

      # udelej neco v soucasnem pracovnim adresari
      (cd /nejaky/jiny/adresar && jiny-prikaz)
      # pokracuj v puvodnim adresari


Nezapomeňte, že v Bashi je mnoho druhů expanze proměnných. KOntrola, že proměnná existuje ${jmeno:?chybova hlaska}. například, pokud script vyžaduje jediný argument, napište vstupni_soubor=${1:?pouziti: $0 vstupni_soubor}. Aritmetická expanze: i=$(( (i + 1) % 5 )). Sekvence: {1..10}. Ořezání (trimming) řetězců: ${var%suffix} a ${var#prefix}. Pokud například var=foo.pdf, pak echo ${var%.pdf}.txt zobrazí foo.txt.


Expanze složených závorek použitím {...} může snížit potřebu přepisovat podobné texty a zautomatizovat kombinaci položek. Toto může být užitečné například v mv foo.{txt,pdf} nejaky-adresar (což přesune oba soubory), cp nejakysoubor{,.bak} (což se rozšíří do cp nejakysoubor nejakysoubor.bak) nebo mkdir -p test-{a,b,c}/subtest-{1,2,3} (což se rozšíří do všech možných kombinací a vytvoří příslušný adresářový strom).


S výstupem některých příkazů lze zacházet jako se souborem pomocí <(nejaky prikaz). Například porovnání lokálního /etc/hosts se vzdáleným:


      diff /etc/hosts <(ssh nejakyhost cat /etc/hosts)


Poznejte "zdejší dokumenty" v Bashi, míněno cat <<EOF ....


-Přesměrujte jak standardní výstup tak standardní chybový výstup v Bashi pomocí: nejaky-prikaz > logsoubor 2>&1 nebo nejaky-prikaz &>logsoubor. Častokrát, k zajištění, že příkaz nezanechá otevřený souborový držák (handle), navázání ho na terminál ve kterém jste, je dobrá praktika také přidat </dev/null.


Používejte man ascii pro dobrou ASCII tabulku se šestnáctkovými i dekadickými hodnotami. Pro obecné kódovací informace jsou užitečné man unicode, man utf-8 a man latin1.


Používejte screen nebo tmux k rozšíření obrazovky, což je užitečné zejména na vzdálených ssh připojeních a k odpojení a znovu-připojení k sezení. byobu dokáže vylepšit obrazovku nebo tmux a poskytovat více informací a jednodušší správu. Více minimalistická varianta pouze pro přetrvání sezení je dtach.


v ssh je důležité vědět, jak tunelovat porty s pomocí -L nebo -D (a příležitostně -R) například k přístupu na webovou stránku ze vzdáleného serveru.


Může být užitečné udělat trochu optimalizačních úprav vašeho ssh připojení; například v ~/.ssh/config je nastavení pro vyhýbání se odhozeným spojením v jistých sítích, používá kompresi (což je užitečné se scp přeš síť s malou šířkou pásma připojení) a multiplexové kanály ke stejnému serveru v lokálním souboru.


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Některé další možnosti vstahující se k ssh jsou bezpečnostně citlivé a měli by být povoleny s opatrností, například pro jednotlivé podsítě nebo hosty v důvěryhodných sítích: StrictHostKeyChecking=no, ForwardAgent=yes


Zvažte mosh jako alternativu k ssh, která používá UDP, vyhýbá se padlým spojením a přidává pohodlí na cestách (vyžaduje nastavení na serveru).


K získání oprávnění k souboru v osmičkové formě, což je užitečné pro systémovou konfiguraci, ale nedostupné v ls a lehko zpackatelné, použijte něco jako


      stat -c '%A %a %n' /etc/timezone


Pro interaktivní výběr hodnot ze vstupu jiného příkazu použijte percol nebo fzf.


Pro interakci se soubory v závislosti na vstupu jiného příkazu (třeba git), použijte fpp (PathPicker).


Po zpřístupnění jednoduchého webového serveru pro všechny soubory v současném adresáři (a podadresářích), přístupného každému na vaší síti použijte:
python -m SimpleHTTPServer 7777 (pro port 7777 a Python 2) a python -m http.server 7777 (pro port 7777 a Python 3).


Pro spuštění příkazu s právy použijte sudo (pro roota) nebo sudo -u (pro jiného uživatele). Používejte su nebo sudo bash pokud chcete aby shell běžel skutečně pod daným uživatelem. Použitím su - simulujte čerstvé přihlášení jako root nebo jiný uživatel.


Zpracovaní souboru a dat


K nalezení souboru podle jména v pracovním adresáři: find . -iname '*something*' (nebo podobně). K nalezení souboru podle jména kdekoliv na disku, použijte locate jmeno (pamatujte, že updatedb nemuselo nutně zaindexovat nedávno vytvořené soubory).


Pro obecné prohledávání zdrojů nebo datových souborů (více sofistikované než grep -r), použijte ag.


Převeďte HTML na text pomocí lynx -dump -stdin.


Vyzkoušejte pandoc pro Markdown, HTML a všechny druhy převodu dokumentů.


Pokud musíte pracovat s XML xmlstarlet je starý, ale dobrý.


Pro JSON použijte jq.


Pro YAML, použijte shyaml.


Pro Excel nebo CSV suobory, csvkit poskytuje in2csv, csvcut, csvjoin, csvgrep, atd.


Pro Amazon S3, s3cmd je pohodlnější a  s4cmd je rychlejší. aws od Amazonu a vylepšený saws jsou nezbytné pro ostatní AWS úkoly.


Mějte přehled o sort a uniq, včetně přepínače -u pro uniq a -d -- shlédněte jednořádkové příklady níže. A také comm.


Mějte přehled také o cut, paste a join pro manipulaci s textovými soubory. Mnoho lidí používá cut, ale zapomínají na join.


Udržujte přehled také o wc na počítání nových řádků (-l), znaků (-m), slov (-w) a bytů (-c).


A přehled je dobré mít také o tee pro kopírování ze stdin do souboru a na stdout, podobně jako za použití ls -la | tee soubor.txt.


Mějte na paměti, že nastavení lokalizace ovlivňuje mnoho příkazů v shellu mnoha způsoby včetně pořadí při třídění a výkonu. Většina Linuxových instalací nastaví LANG nebo jinou lokalizační proměnnou na lokální nastavení jako americká angličtina. Nezapomínejte však, že vaše třídění se změní změníte-li lokalizaci. A myslete na to, že i18n rutiny mohou způsobit, že třídění nebo jiné příkazy mohou běžet mnohokrát pomaleji. V některých situacích (při nastavování nebo testu unikátnost jako níže) lze bezpečně ignorovat pomalé i18n rutiny úplně a použít tradiční bytový pořádek pří třídění s export LC_ALL=C.


Měli byste znát základní awk a sed pro jednoduché operace s daty. Například sčítání všech čísel ve třetím sloupci textového souboru: awk '{ x += $3 } END { print x }'. Tento příkaz je pravděpodobně 3x rychlejší a obsahuje 3x méně kódu než jeho ekvivalent v Pythonu.


K nahrazení všech výskytů řetězce v jedno místě nebo ve více souborech:


      perl -pi.bak -e 's/stary-retezec/novy-retezec/g' moje-soubory-*.txt

K přejmenování více souborů a/nebo vyhledávání a nahrazení uvnitř těchto souborů zkuste repren. (V některých případech příkazech rename také dovoluje vícenásobné přejmenování, ale buďte opatrní neboť není stejný na všech Linuxových distribucích).

      # Plne jméno souboru, adresaru a obsahu foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Obnov zalozni soubory cokoliv.bak -> cokoli:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Stejne jako vyse za pouziti jmena pokud mozne:
      rename 's/\.bak$//' *.bak

Jak říká manuálová stránka, rsync je skutečně rychlý a neobyčejně univerzální nástroj na kopírování souborů. Je znám pro synchronizaci mezi stroji, ale je stejně užitečný lokálně. Jde také o jednu z nejrychlejších cest k odstranění velkého množství souborů:

      mkdir prazdny && rsync -r --delete prazdny/ nejaky-adr && rmdir nejaky-adr


Použijte shuf k zamíchání nebo vybrání náhodných řádek ze souboru.


Mějte přehled v sort možnostech. Pro čísla, použijte -n nebo -h pro práci s lidsky čitelnými čísly (například z du -h). Pochopte jak fungují klíče (-t a -k). Zejména mějte na paměti, že musíte psát -k,1 pro třídění za použití pouze prvního pole; -k1 znamená třídění podle celého řádku. Stabilní třídění (sort -s) může být užitečné. Například k setřídění primárně podle druhého pole a sekundárně podle druhého pole můžete použít sort -k1,1 | sort -s -k2,2.


Pokud někdy potřebujete zapsat znak tabulátor do příkazové řádky v Bashi (například pro -t argument pro třídění), stiskněte press ctrl-v [Tab] nebo napište $'\t'` (druhá možnost je lepší, protože výsledek můžete zkopírovat/vložit).


Standardní nástroje pro porovnávání zdrojového kódu jsou diff a patch. Za zmínku stojí také diffstat zobrazující statistiky z diffu a sdiff pro rozdíly bok po boku. Nezapomeňte, že diff -r funguje pro celé adresáře. Použijte diff -r strom1 strom2 | diffstat pro shrnutí změn. A vimdiff pro porovnání a úpravu souborů.


Pro binární soubory použijte hd, hexdump nebo xxd pro jednoduché hex dumpy a bvi nebo biew pro editaci binárek.


Pro binární soubory můžete také použít strings (například spolu s grep, atd), což je nástroj pro hledání částí textu.


Pro binární rozdíly (delta komprese) použijte xdelta3.


Pro konverzi testových kódování zkuste iconv. Nebo uconv pro pokročilejší použití; podporuje některé pokročilé Unicode věci. Například tento příkaz mění text na malé znaky a odstraňuje akcenty (jejich rozvinutím a zahozením):


      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Na rozdělení souborů do částí zkuste split (na rozdělení podle velikosti) a csplit (na rozdělení podle řetězce).


K manipulaci s datem a časem použijte dateadd, datediff, strptime atd. z dateutils.


Použijte zless, zmore, zcat, a zgrep k operacím s komprimovanými soubory.


Ladění systému


Pro webové ladění jsou vhodné curl a curl /I nebo jejich wget ekvivalenty nebo více moderní httpie.


Pro zjištění současného procesorového/diskového stavu, klasické nástroje jako top (nebo lépe htop). Použijte iostat -mxz 15 pro základní CPU a detailní diskové stavy pro každý diskový oddíl a výkonostní statistiky.


Pro detaily ohledně síťové konektivity použijte netstat a ss.


Rychlý přehled co se děje v systému získáte pomocí užitečného dstat. Pro širší přehled s detaily použijte glances.


Na zjištění stavu paměti spusťte free a vmstat a pokuste se porozumět jejich výstupům. Zejména dbejte na "cached" hodnotu což je paměť držená Linuxovým kernelem jako souborová cache, tudíž se počítá do "volné" paměťi.


Ladění Javy je odlišný šálek čaje, ale jednoduchý trik na Javu od Oraclu a některé jiné JVM je, že stále můžete použít kill -3 <pid> a výpis zásobníku a haldy (včetně obecnějších detailů z garbage collectoru, které mohou být nesmírně informativní) bude zapsán do stderr/logs. Nástroje JDK jako jps, jstat, jstack a jmap jsou také užitečné, avšak SJK tools  jsou více pokročilé.


Použijte mtr jako lepší traceroute pro identifikování potíží se sítí.


Při zjištování proč je disk plný, ncdu šetří čas oproti obvyklým příkazům jako du /sh *.


Ke zjištění, který socket nebo proces zahlcuje pásmo, zkuste iftop nebo nethogs.


Nástroj ab (přibalený k Apachi) je užitečný pro rychlé a hrubé zkontrolování výkonosti webového serveru. Komplexnější měření umožňuje siege.


Pro důslednější síťové ladění, wireshark, tshark nebo ngrep jsou to pravé.


Nezapomínejte na strace a ltrace. Mohou být nápomocné zejména pokud některý program selhává, zasekává se nebo padá a nevíte proč nebo pokud chcete mít obecnou představu o výkonu. Myslete na přepínač profilingu (-c) a schopnost připnout se k běžícímu procesu (-p).


Dynamické knihovny vám umožní zkontrolovat ldd.


Je důležité umět se připojit k běžícímu procesu za pomoci gdb a získat výpis jeho chodu.


Používejte /proc. Je úžasně nápomocný v okamžicích, kdy ladíte živé problémy. Příklady: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps(kdexxx` je id nebo pid procesu.).


Když zjišťujete proč se něco v minulosti pokazilo, sar může být nedocenitelný. Ukazuje historické statistiky CPU, paměti, sítě, atd.


Pro hlubší systémovou a výkonostní analýzu se podívejte na stap(SystemTap), perf, a sysdig.


Zkontrolujte na jakém jste OS za pomoci uname nebo uname -a (obecné Unix/kernel informace) nebo lsb_release -a (v Linuxových distribucích).


Použijte dmesg kdykoli se něco chová neočekávaně (může jít o hardwarový nebo driverový problém).


Jednořádkové příkazy
Pár příkladů na spojování příkazů:

Někdy je pozoruhodně užitečné dělat průnik, sjednocení a rozdíl textových souborů pomocí sort/uniq. Předpokládejte, že a a b jsou unikátní textové soubory. Toto je rychlé a funguje na souborech libovolné velikosti až do mnoha gigabytů. (Třídění pomocí sort není omezené pamětí, ale je možné, že budete muset použít -T přepínač, pokud se /tmp nachází na malém diskovém oddílu). Podívejte se také na poznámku o LC_ALL výše a přepínač sortu -u (vynechaný pro přehlednost).

      cat a b | sort | uniq > c   # c je sjednocení b
      cat a b | sort | uniq -d > c   # c je průnik b
      cat a b b | sort | uniq -u > c   # c je rozdíl a - b


Použijte grep .* pro rychlé prošetření obsahu všech souborů v adresáři (každý soubor je spojen s názvem souboru) nebo head -100 * (aby každý soubor měl záhlaví). Může být užitečné pro adresáře s konfiguračními soubory jako jsou například /sys, /proc a /etc.


Součet všech čísel ve třetím sloupci textového souboru (pravděpodobně 3x rychlejší a 3x méně kódu než ekvivalentní funkce v Pythonu):


      awk '{ x += $3 } END { print x }' mujsoubor

Pokud chcete zobrazit velikosti/datumy na souborovém stromu, následující příkaz je jako rekurzivní ls -l, ale jedodušší na čtení než ls -lR:

      find . -type f -ls

Řekněme, že máte textový soubor, jako log webového serveru, a jisté hodnoty, které se objevují na některých řádcích, jako například acct_id parametr, který se vyskytuje v URL. Pokud chcete záznam kolik požadavků pro každý acct_id:

      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn


K průběžnému monitorování změn použijte watch, například změn souborů v adresáři pomocí watch -d -n 2 'ls -rth | tail' nebo síťových nastavení při řešení potíží nastavení wifi: watch -d -n 2 ifconfig.


Spusťte tuto funkci k získání náhodného tipu z tohoto dokumentu (parsuje Markdown a vyextrahuje jednu položku):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80
      }
Neobvyklé ale užitečné


expr: provede aritmetické nebo logické operace nebo vyhodnotí regulární výrazy


m4: jednoduchý procesor maker


yes: tiskne řetězec vícekrát


cal: hezký kalendář


env: provede příkaz (užitečné ve scriptech)


printenv: vypíše proměnné prostředí (užitečné při ladění a ve scriptech)


look: najde anglická slova (nebo řádky v souboru) začínající řetězcem


cut, paste a join: manipulace s daty


fmt: formátuje text do odstavců


pr: formátuje text do stránek/sloupců


fold: zalamuje řádky textu


column: formátuje textová pole do zarovnaných sloupců nebo tabulek s danou šířkou


expand a unexpand: převádí tabulátory a mezery


nl: přidá čísla řádků


seq: tiskne čísla


bc: kalkulačka


factor: provádí faktorizaci celých čísel (15 = 5 a 3)


gpg: šifruje a podepisuje soubory


toe: tabulka informací o dostupných terminálech


nc: síťové ladění a přenos dat


socat: socketové relé a tcp port přesměrování (podobné netcat)


slurm: visualizace síťového provozu


dd: přesun dat mezi soubory nebo zařízeními


file: identifikuje typ souboru


tree: zobrazí adresáře a podadresáře jako vnořený strom; podobně jako ls ale rekurzivně


stat: informace o souboru


time: provede a načasuje příkaz


timeout: provádí příkaz po specifikovanou dobu a zastaví proces když daná doba uplyne


lockfile: vytvoří semaforový soubor, který lze odstranit pouze pomocí rm -f


logrotate: rotuje, komprimuje a posílá logy emailem


watch: spouští opakovaně příkaz a zobrazuje výsledky a/nebo zvýrazňuje změny


tac: tiskne soubory pozpátku (po řádcích)


shuf: náhodně vybere řádky ze souboru


comm: porovná seřazení soubory řádek po řádku


pv: monitoruje postup dat skrz rouru


hd, hexdump, xxd, biew a bvi: vypíše nebo edituje binární soubory


strings: vypreparuje textové řetězce z binárních souborů


tr: překládá znaky nebo s nimi manipuluje


iconv nebo uconv: převod pro kódování textu


split a csplit: dělí soubory


sponge: čte všechen vstup před tím než ho zapíše, užitečné pro čtení a následný zápis do téhož souboru, např. grep -v neco nejaky-soubor | sponge nejaky-soubor


units: převody jednotek a výpočty; převádí jednotky mezi sebou, (viz. /usr/share/units/definitions.units)


apg: generuje náhodná hesla


7z: vysoko-poměrová datová komprese


ldd: informace o dynamických knihovnách


nm: vypíše symboly z objektových souborů


ab: zátěžové testy webserverů


strace: ladění systému


mtr: vylepšení traceroute pro síťové ladění


cssh: vizuální souběžný shell


rsync: synchronizuje soubory a adresáře přes SSH nebo v lokálním systému souborů


wireshark a tshark: zachytávání packetů a síťové ladění


ngrep: grep pro síťovou vrstvu


host a dig: DNS vyhledávání


lsof: zpracovává souborové popisovače (descriptory) a informace o socketech


dstat: užitečné systémové informace


glances: vysoko úrovňový, multi-systémový přehled


iostat: statistiky využití disku


mpstat: statistiky využití CPU


vmstat: statistiky využití paměti


htop: vylepšená verze top (správa procesů)


last: historie přihlášení


w: kdo je přihlášen


id: informace o identitě uživatele/skupiny


sar: historické systémové statistiky


iftop nebo nethogs: využití sítě pro proces nebo socket


ss: statistika socketů


dmesg: bootovací a systémové chybové zprávy


sysctl: zobrazení a konfigurace parametrů Linuxového kernelu za běhu


hdparm: SATA/ATA disková manipulace/výkon


lsblk: seznam blokových zařízení: stromové zobrazení disků a diskových oddílů


lshw, lscpu, lspci, lsusb, dmidecode: informace o hardwaru zahrnující CPU, BIOS, RAID, grafiku, zařízení, atd.


lsmod a modinfo: seznam a detaily kernelových modulů


fortune, ddate, a sl: hm, no, záleží jestli považujete parní lokomotivy a Zippyho citáty za "užitečné"


Pouze pro OS X
Tyto věci jsou relevantní pouze pro macOS.


Balíčky spravované pomocí brew (Homebrew) a/nebo port (MacPorts). Mohou být použity k instalaci mnoha předešlých příkazů na macOS.


Kopírujte výstup jakéhokoli příkazu do desktopové aplikace pomocí pbcopy a vložte vstup z nějaké pomocí pbpaste.


K povolení klávesy Option v Terminálu Mac OS jako klávesu Alt (pro použití v příkazech jako alt-b, alt-f, atd.), otevřete Předvolby -> Profily -> Klávesnice a zvolte "Použít Option jako Meta klávesu".


K otevření souboru za pomoci desktopové aplikace použijte open nebo open -a /Aplikace/Cokoli.app.


Spotlight: Prohledávejte soubory s mdfind a vypište metadata (například EXIF informace fotografie) pomocí mdls.


Nezapomínejte, že macOS je založen na BSD Unixu a mnoho příkazů (například ps, ls, tail, awk, sed) mají spoustu jemných odlišností od Linuxu, což je z velké části ovlivněno System V (System Five) stylem Unixu a GNU nástroji. Mnohokrát mmůžete rozdíl poznat podle manuálové stránky mající v nadpise "BSD General Commands Manual". V některých případech mohou být GNU verze instalovány také (třeba gawk a gsed pro GNU awk a sed). Pokud píšete multi-platformní Bashové scripty, vyhýbejte se takovým příkazům (například, zvažte Python či perl) nebo pečlivě testujte.


K získání informací o verzi vydání macOS použijte sw_vers.


Další zdroje

awesome-shell: Organizovaný seznam shellových nástrojů a zdrojů.
awesome-osx-command-line: Průvodce Mac OS příkazovou řádkou více do hloubky.
Striktní mód pro psaní lepších shellových scriptů.
shellcheck: Nástroj pro statickou analýzu shellových scriptů. V podstatě lint pro bash/sh/zsh.
Souborové názvy a cesty v shellu: Bohužel velmi komplexní drobnosti o korektní práci se souborovými jmény v shellových scriptech.

Zřeknutí se odpovědnosti
S vyjímkou velmi malých úkolů je kód psán tak, aby ho ostatní mohli přečíst. S mocí přichází zodpovědnost. Skutečnost, že něco můžete v Bashi udělat nemusí nutně znamenat, že byste měli! ;)
License

Tato práce je licencována pod Creative Commons Attribution-ShareAlike 4.0 International License.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/README-cs.mdCopy path Blame  Blame        Latest commit HistoryHistory521 lines (302 loc) · 35 KB masterBreadcrumbsthe-art-of-command-line/README-cs.mdTopFile metadata and controlsPreviewCodeBlame521 lines (302 loc) · 35 KBRaw🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
Umění příkazové řádky


Meta
Základy
Každodenní použití
Zpracování souborů a dat
Ladění systému
Jednořádkové příkazy
Neobvyklé ale užitečné
Pouze pro OS X
Další zdroje
Zřeknutí se odpovědnosti


Plynulost práce na příkazové řádce je umění často opomíjené nebo považované za překonané, ale zlepšuje vaši flexibilitu a produktivitu jako inženýr jak očividně tak nenápadně. Toto je výběr poznámek a tipů pro použití příkazové řádky které shledáváme užitečnými při práci na Linuxu. Některé tipy jsou základní a některé jsou velmi specifické, komplikované či nejasné. Tato stránka není dlouhá, ale pokud dokážete použít a vybavit si všechny věci zde zmíněné, máte dostatečně rozsáhlé vědomosti.
Tato práce je výsledkem mnoha autorů a překladatelů.
Mnoho se
původně
objevilo
na webu Quora,
ale s ohledem na zájem, který tam panoval, se zdálo vhodné použít GitHub, kde lidé více talentovaní než původní autor mohli okamžitě navrhovat zlepšení. Pokud najdete chybu či něco, co by mohlo být vylepšeno, prosím vytvořte issue nebo pull request! (Samozřejmě nejdříve zkontrolujte meta sekci a existující pull requesty a issues.)
Meta
Rozsah:

Tento průvodce je pro začátečníky i pro pokročilé. Cílem je široký záběr (vše důležité), specifičnost (poskytnout konkrétní příklady nejčastějšího použití) a stručnost (vyhnout se věcem, které nejsou nezbytné nebo podobným tématům, které lze vyhledat jinde). Každý tip je v některých případech nenahraditelný nebo značně šetří čas oproti alternativám.
Tento dokument je napsán pro Linux s vyjímkou sekcí označených jako "Pouze pro OS X". Mnoho ostatních položek lze použít nebo je lze nainstalovat na jiných Unixových systémech nebo MacOS (dokonce i na Cygwin).
Zaměření dokumentu je na inteaktivní Bash ačkoli mnoho tipů lze aplikovat na jiné shelly a obecné bashové scriptování.
. Jsou zahrnuty jak "standardní" Unixové příkazy tak příkazy vyžadující instalaci extra balíčků -- pokud jsou dost důležité aby zasloužily zmínku.

Poznámky:

Pro udržení délky textu na jednu stranu, obsah je implicitně obsažen v odkazech. Jste dostatečně inteligentní aby jste si vyhledali více detailů z jiných zdrojů jakmile znáte příkaz či myšlenku na Googlu. Použijte apt-get, yum, dnf, pacman, pip nebo brew podle distribuce k instalaci nových progamů.
Použijte Explainshell pro užitečné vysvětlení co příkazy, možnosti, roury a jiné dělají.

Základy


Naučte se základy Bashe. Vlastně, napište man bash a alespoň si to proleťte; je to celkem jednoduché a ne tak dlouhé. Jiné shelly mohou být dobré, ale Bash je mocný a vždy dostupný (znalost pouze zsh, fish a jiných ačkoli lákavá na vlastním notebooku omezuje v mnoha situacích, jako například při použití existujících serverů).


Poznejte alespoň jeden textový editor dobře. Nejlépe Vim (vi) jelikož opravdu nemá pro občasné úpravy v terminálu nemá konkurenci (ani pokud většinu času používáte Emacs, velké IDE nebo moderní okenní editor).


Naučte se číst dokumentaci pomocí man (pro zvědavce, man man vypíše čísla sekcí, například 1 jsou "obvyklé" příkazy, 5 jsou soubory/konvence a 8 je administrace). Hledejte manuálové stránky pomocí apropos. Vězte, že některé příkazy nejsou spustitelné programy, ale funkce zabudované v Bashi a nápovědu k nim můžete zobrazit příkazem help a help-d.


Naučte se přesměrování výstupu a vstupu pomocí > a < a roury pomocí |. Pamatujte, že > přepíše obsah výstupního souboru a >> přidá na jeho konec. Nezapomeňte na stdout (stndardní výstup) a stderr (standardní chybový výstup).


Poznejte souborovou hromadnou expanzi za pomoci * (případně ? a [...]) a úvozovkách a rozdílu mezi dvojitými uvozovkami " a jednoduchými '. (Více na expanzi proměných níže.)


Seznamte se se správou činností v Bashi: &, ctrl-z, ctrl-c**, jobs, fg, bg, kill, atd.


Seznamte se s ssh a základy bezheslové autentizace pomocí ssh-agent, ssh-add, atd.


Základní správa souborů: ls a ls -l (zejména co který sloupec v ls -l znamená), less, head, tail a tail -f (nebo ještě lépe less +F), ln a ln -s (pochopte rozdíly a výhody pevného odkazu a symoblického odkazu), chown, chmod, du (pro krátký souhrn využití disku: du -hs *). Pro správu souborového systému, df, mount, fdisk, mkfs, lsblk. Pochopte co je inode (ls -i nebo df -i).


základní správa síťí: ip nebo ifconfig, dig.


Dobře se naučte regulárních výrazů a rozličné příznaky pro grep/egrep. Přepínače -i, -o, -v, -A, -B a -C je také vhodné znát.


Naučte se používat apt-get, yum, dnf nebo pacman (podle vaší distribuce) k hledání a instalaci balíků. A ujistěte se, že máte pip k instalace Pythonových terminálových nástrojů (některé je nejjednodušší nainstalovat pomocí pip).


Každodenní použití


V Bashi používejte Tab k dokončení argumentů nebo vylistování všech dostupných příkazů a ctrl-r k vyhledávání v historii příkazů (po stisknutí pište pro hledání a poté mačkejte opakovaně ctrl-r k procházení více shod, Enter k provedení nalezeného příkazu nebo šipku vpravo pro vložení výsledku hledání do terminálu a následnou editaci).


V Bashi používejte ctrl-w pro smazní posledního slova a ctrl-u pro smazání všeho od současné pozice kurzoru až po začátek řádku. Používejte alt-b a alt-f k procházení řádku po slovech, ctrl-a pro skok na začátek řádku, ctrl-e pro skok kurzoru na konec řádku, ctrl-k pro smazání všeho od současné pozice až ke konci řádku, ctrl-l pro vyčištění obrazovky. Prohlédněte si man readline pro všechny defaultní klávesové zkratky v Bashi. Je jich hodně. Například alt-. projíždí předchozí argumenty a alt-* rozšíří řetězec.


Pokud milujete klávesové zkratky ve stylu vi, použijte set -o vi (a set -o emacs pro návrat ke standardnímu rozložení).


Pro úpravu dlouhých příkazů, po nastavení vašeho editoru (například export EDITOR=vim), ctrl-x ctrl-e v něm otevře stávající příkaz pro víceřádkovou úpravu. Nebo ve vi stylu, escape-v.


Zobrazení nedávných příkazů se provádí pomocí history. Existuje spousta zkratek jako !$ (poslední argument) a !! (poslední příkaz), ale tyto jsou jednoduše nahraditelné pomocí ctrl-r a alt-..


Pro přechod do předchozího pracovního adresáře: cd -.


Pokud máte zpola napsaný příkaz, ale rozmyslíte si to, stiskněte alt-# pro přidání # na začátek řádku a vložte ho jako komentář (nebo použijte ctrl-a, #, enter). Takto se k němu můžete později vrátit v historii příkazů.


Používejte  xargs (nebo parallel). Jde o mocný příkaz. Nezapomeňte, že můžete ovládat kolik položek se má vykonat na řádku (-L) stejně jako paralelismus (-P). Pokud si nejste jisti zda to udělá co má, zkuste nejdříve xargs echo. Hodí se také -I{}.
Příklady:


      find . -name '*.py' | xargs grep nejaka_funkce
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p je užitečné zobrazení stromu procesů.


Používejte pgrep a pkill k hledání nebo posílání signálů procesům podle jména. (-f je také užitečné).


Pamatujte si rozličné signály, které lze posílat procesům. Například, k pozastavení procesu, použijte kill -STOP [pid]. Celý seznam signálů v man 7 signal.


Používejte nohup nebo disown pokud chcete, aby proces na pozadí běžel navždy.


Kontrolujte, které procesy naslouchají pomocí netstat -lntp nebo ss -plat (pro TCP; přidejte -u pro UDP).


Podívejte se také na lsof pro otevřené sockety a soubory.


Jak dlouho systém běží poznáte díky uptime nebo w.


Pomocí alias si nastavte zkratky pro často používané příkazy. Například alias ll='ls -latr' vytvoří novou zkratku ll.


V Bashových scriptech používejte set -x (nebo jeho variantu set -v, která zaznamenává nezpracovaný vstup včetně nečekaných proměnných a komentářů) pro ladící výstup. Používejte striktní módy pokud nemáte dobrý důvod proč to tak nedělat: Příkazem set -e nastavíte přerušení při chybě (nenulový návratový kód). Použijte set -u pro zjištění použití neinicializovaných proměnných. Zvažte také set -o pipefail pro chyby v rourách (přečtěte si na tohle téma více pokud tuto možnost využijete, jelikož jde o citlivé téma). Pro více zapojených scriptů použijte trap na EXIT nebo ERR. Dobrým zvykem bývá začínat scripty takto, což zachytí a ukončí běh na běžných chybách a vypíše zprávu:


      set -euo pipefail
      trap "echo 'error: Script selhal: neuspesny prikaz vyse'" ERR

V Bash scriptech jsou subshelly (psané s kulatými závorkami) vhodným způsobem shlukování příkazů. Běžným příkladem budiž dočasný přesun do jiného pracovního adresáře, například:

      # udelej neco v soucasnem pracovnim adresari
      (cd /nejaky/jiny/adresar && jiny-prikaz)
      # pokracuj v puvodnim adresari


Nezapomeňte, že v Bashi je mnoho druhů expanze proměnných. KOntrola, že proměnná existuje ${jmeno:?chybova hlaska}. například, pokud script vyžaduje jediný argument, napište vstupni_soubor=${1:?pouziti: $0 vstupni_soubor}. Aritmetická expanze: i=$(( (i + 1) % 5 )). Sekvence: {1..10}. Ořezání (trimming) řetězců: ${var%suffix} a ${var#prefix}. Pokud například var=foo.pdf, pak echo ${var%.pdf}.txt zobrazí foo.txt.


Expanze složených závorek použitím {...} může snížit potřebu přepisovat podobné texty a zautomatizovat kombinaci položek. Toto může být užitečné například v mv foo.{txt,pdf} nejaky-adresar (což přesune oba soubory), cp nejakysoubor{,.bak} (což se rozšíří do cp nejakysoubor nejakysoubor.bak) nebo mkdir -p test-{a,b,c}/subtest-{1,2,3} (což se rozšíří do všech možných kombinací a vytvoří příslušný adresářový strom).


S výstupem některých příkazů lze zacházet jako se souborem pomocí <(nejaky prikaz). Například porovnání lokálního /etc/hosts se vzdáleným:


      diff /etc/hosts <(ssh nejakyhost cat /etc/hosts)


Poznejte "zdejší dokumenty" v Bashi, míněno cat <<EOF ....


-Přesměrujte jak standardní výstup tak standardní chybový výstup v Bashi pomocí: nejaky-prikaz > logsoubor 2>&1 nebo nejaky-prikaz &>logsoubor. Častokrát, k zajištění, že příkaz nezanechá otevřený souborový držák (handle), navázání ho na terminál ve kterém jste, je dobrá praktika také přidat </dev/null.


Používejte man ascii pro dobrou ASCII tabulku se šestnáctkovými i dekadickými hodnotami. Pro obecné kódovací informace jsou užitečné man unicode, man utf-8 a man latin1.


Používejte screen nebo tmux k rozšíření obrazovky, což je užitečné zejména na vzdálených ssh připojeních a k odpojení a znovu-připojení k sezení. byobu dokáže vylepšit obrazovku nebo tmux a poskytovat více informací a jednodušší správu. Více minimalistická varianta pouze pro přetrvání sezení je dtach.


v ssh je důležité vědět, jak tunelovat porty s pomocí -L nebo -D (a příležitostně -R) například k přístupu na webovou stránku ze vzdáleného serveru.


Může být užitečné udělat trochu optimalizačních úprav vašeho ssh připojení; například v ~/.ssh/config je nastavení pro vyhýbání se odhozeným spojením v jistých sítích, používá kompresi (což je užitečné se scp přeš síť s malou šířkou pásma připojení) a multiplexové kanály ke stejnému serveru v lokálním souboru.


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Některé další možnosti vstahující se k ssh jsou bezpečnostně citlivé a měli by být povoleny s opatrností, například pro jednotlivé podsítě nebo hosty v důvěryhodných sítích: StrictHostKeyChecking=no, ForwardAgent=yes


Zvažte mosh jako alternativu k ssh, která používá UDP, vyhýbá se padlým spojením a přidává pohodlí na cestách (vyžaduje nastavení na serveru).


K získání oprávnění k souboru v osmičkové formě, což je užitečné pro systémovou konfiguraci, ale nedostupné v ls a lehko zpackatelné, použijte něco jako


      stat -c '%A %a %n' /etc/timezone


Pro interaktivní výběr hodnot ze vstupu jiného příkazu použijte percol nebo fzf.


Pro interakci se soubory v závislosti na vstupu jiného příkazu (třeba git), použijte fpp (PathPicker).


Po zpřístupnění jednoduchého webového serveru pro všechny soubory v současném adresáři (a podadresářích), přístupného každému na vaší síti použijte:
python -m SimpleHTTPServer 7777 (pro port 7777 a Python 2) a python -m http.server 7777 (pro port 7777 a Python 3).


Pro spuštění příkazu s právy použijte sudo (pro roota) nebo sudo -u (pro jiného uživatele). Používejte su nebo sudo bash pokud chcete aby shell běžel skutečně pod daným uživatelem. Použitím su - simulujte čerstvé přihlášení jako root nebo jiný uživatel.


Zpracovaní souboru a dat


K nalezení souboru podle jména v pracovním adresáři: find . -iname '*something*' (nebo podobně). K nalezení souboru podle jména kdekoliv na disku, použijte locate jmeno (pamatujte, že updatedb nemuselo nutně zaindexovat nedávno vytvořené soubory).


Pro obecné prohledávání zdrojů nebo datových souborů (více sofistikované než grep -r), použijte ag.


Převeďte HTML na text pomocí lynx -dump -stdin.


Vyzkoušejte pandoc pro Markdown, HTML a všechny druhy převodu dokumentů.


Pokud musíte pracovat s XML xmlstarlet je starý, ale dobrý.


Pro JSON použijte jq.


Pro YAML, použijte shyaml.


Pro Excel nebo CSV suobory, csvkit poskytuje in2csv, csvcut, csvjoin, csvgrep, atd.


Pro Amazon S3, s3cmd je pohodlnější a  s4cmd je rychlejší. aws od Amazonu a vylepšený saws jsou nezbytné pro ostatní AWS úkoly.


Mějte přehled o sort a uniq, včetně přepínače -u pro uniq a -d -- shlédněte jednořádkové příklady níže. A také comm.


Mějte přehled také o cut, paste a join pro manipulaci s textovými soubory. Mnoho lidí používá cut, ale zapomínají na join.


Udržujte přehled také o wc na počítání nových řádků (-l), znaků (-m), slov (-w) a bytů (-c).


A přehled je dobré mít také o tee pro kopírování ze stdin do souboru a na stdout, podobně jako za použití ls -la | tee soubor.txt.


Mějte na paměti, že nastavení lokalizace ovlivňuje mnoho příkazů v shellu mnoha způsoby včetně pořadí při třídění a výkonu. Většina Linuxových instalací nastaví LANG nebo jinou lokalizační proměnnou na lokální nastavení jako americká angličtina. Nezapomínejte však, že vaše třídění se změní změníte-li lokalizaci. A myslete na to, že i18n rutiny mohou způsobit, že třídění nebo jiné příkazy mohou běžet mnohokrát pomaleji. V některých situacích (při nastavování nebo testu unikátnost jako níže) lze bezpečně ignorovat pomalé i18n rutiny úplně a použít tradiční bytový pořádek pří třídění s export LC_ALL=C.


Měli byste znát základní awk a sed pro jednoduché operace s daty. Například sčítání všech čísel ve třetím sloupci textového souboru: awk '{ x += $3 } END { print x }'. Tento příkaz je pravděpodobně 3x rychlejší a obsahuje 3x méně kódu než jeho ekvivalent v Pythonu.


K nahrazení všech výskytů řetězce v jedno místě nebo ve více souborech:


      perl -pi.bak -e 's/stary-retezec/novy-retezec/g' moje-soubory-*.txt

K přejmenování více souborů a/nebo vyhledávání a nahrazení uvnitř těchto souborů zkuste repren. (V některých případech příkazech rename také dovoluje vícenásobné přejmenování, ale buďte opatrní neboť není stejný na všech Linuxových distribucích).

      # Plne jméno souboru, adresaru a obsahu foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Obnov zalozni soubory cokoliv.bak -> cokoli:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Stejne jako vyse za pouziti jmena pokud mozne:
      rename 's/\.bak$//' *.bak

Jak říká manuálová stránka, rsync je skutečně rychlý a neobyčejně univerzální nástroj na kopírování souborů. Je znám pro synchronizaci mezi stroji, ale je stejně užitečný lokálně. Jde také o jednu z nejrychlejších cest k odstranění velkého množství souborů:

      mkdir prazdny && rsync -r --delete prazdny/ nejaky-adr && rmdir nejaky-adr


Použijte shuf k zamíchání nebo vybrání náhodných řádek ze souboru.


Mějte přehled v sort možnostech. Pro čísla, použijte -n nebo -h pro práci s lidsky čitelnými čísly (například z du -h). Pochopte jak fungují klíče (-t a -k). Zejména mějte na paměti, že musíte psát -k,1 pro třídění za použití pouze prvního pole; -k1 znamená třídění podle celého řádku. Stabilní třídění (sort -s) může být užitečné. Například k setřídění primárně podle druhého pole a sekundárně podle druhého pole můžete použít sort -k1,1 | sort -s -k2,2.


Pokud někdy potřebujete zapsat znak tabulátor do příkazové řádky v Bashi (například pro -t argument pro třídění), stiskněte press ctrl-v [Tab] nebo napište $'\t'` (druhá možnost je lepší, protože výsledek můžete zkopírovat/vložit).


Standardní nástroje pro porovnávání zdrojového kódu jsou diff a patch. Za zmínku stojí také diffstat zobrazující statistiky z diffu a sdiff pro rozdíly bok po boku. Nezapomeňte, že diff -r funguje pro celé adresáře. Použijte diff -r strom1 strom2 | diffstat pro shrnutí změn. A vimdiff pro porovnání a úpravu souborů.


Pro binární soubory použijte hd, hexdump nebo xxd pro jednoduché hex dumpy a bvi nebo biew pro editaci binárek.


Pro binární soubory můžete také použít strings (například spolu s grep, atd), což je nástroj pro hledání částí textu.


Pro binární rozdíly (delta komprese) použijte xdelta3.


Pro konverzi testových kódování zkuste iconv. Nebo uconv pro pokročilejší použití; podporuje některé pokročilé Unicode věci. Například tento příkaz mění text na malé znaky a odstraňuje akcenty (jejich rozvinutím a zahozením):


      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Na rozdělení souborů do částí zkuste split (na rozdělení podle velikosti) a csplit (na rozdělení podle řetězce).


K manipulaci s datem a časem použijte dateadd, datediff, strptime atd. z dateutils.


Použijte zless, zmore, zcat, a zgrep k operacím s komprimovanými soubory.


Ladění systému


Pro webové ladění jsou vhodné curl a curl /I nebo jejich wget ekvivalenty nebo více moderní httpie.


Pro zjištění současného procesorového/diskového stavu, klasické nástroje jako top (nebo lépe htop). Použijte iostat -mxz 15 pro základní CPU a detailní diskové stavy pro každý diskový oddíl a výkonostní statistiky.


Pro detaily ohledně síťové konektivity použijte netstat a ss.


Rychlý přehled co se děje v systému získáte pomocí užitečného dstat. Pro širší přehled s detaily použijte glances.


Na zjištění stavu paměti spusťte free a vmstat a pokuste se porozumět jejich výstupům. Zejména dbejte na "cached" hodnotu což je paměť držená Linuxovým kernelem jako souborová cache, tudíž se počítá do "volné" paměťi.


Ladění Javy je odlišný šálek čaje, ale jednoduchý trik na Javu od Oraclu a některé jiné JVM je, že stále můžete použít kill -3 <pid> a výpis zásobníku a haldy (včetně obecnějších detailů z garbage collectoru, které mohou být nesmírně informativní) bude zapsán do stderr/logs. Nástroje JDK jako jps, jstat, jstack a jmap jsou také užitečné, avšak SJK tools  jsou více pokročilé.


Použijte mtr jako lepší traceroute pro identifikování potíží se sítí.


Při zjištování proč je disk plný, ncdu šetří čas oproti obvyklým příkazům jako du /sh *.


Ke zjištění, který socket nebo proces zahlcuje pásmo, zkuste iftop nebo nethogs.


Nástroj ab (přibalený k Apachi) je užitečný pro rychlé a hrubé zkontrolování výkonosti webového serveru. Komplexnější měření umožňuje siege.


Pro důslednější síťové ladění, wireshark, tshark nebo ngrep jsou to pravé.


Nezapomínejte na strace a ltrace. Mohou být nápomocné zejména pokud některý program selhává, zasekává se nebo padá a nevíte proč nebo pokud chcete mít obecnou představu o výkonu. Myslete na přepínač profilingu (-c) a schopnost připnout se k běžícímu procesu (-p).


Dynamické knihovny vám umožní zkontrolovat ldd.


Je důležité umět se připojit k běžícímu procesu za pomoci gdb a získat výpis jeho chodu.


Používejte /proc. Je úžasně nápomocný v okamžicích, kdy ladíte živé problémy. Příklady: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps(kdexxx` je id nebo pid procesu.).


Když zjišťujete proč se něco v minulosti pokazilo, sar může být nedocenitelný. Ukazuje historické statistiky CPU, paměti, sítě, atd.


Pro hlubší systémovou a výkonostní analýzu se podívejte na stap(SystemTap), perf, a sysdig.


Zkontrolujte na jakém jste OS za pomoci uname nebo uname -a (obecné Unix/kernel informace) nebo lsb_release -a (v Linuxových distribucích).


Použijte dmesg kdykoli se něco chová neočekávaně (může jít o hardwarový nebo driverový problém).


Jednořádkové příkazy
Pár příkladů na spojování příkazů:

Někdy je pozoruhodně užitečné dělat průnik, sjednocení a rozdíl textových souborů pomocí sort/uniq. Předpokládejte, že a a b jsou unikátní textové soubory. Toto je rychlé a funguje na souborech libovolné velikosti až do mnoha gigabytů. (Třídění pomocí sort není omezené pamětí, ale je možné, že budete muset použít -T přepínač, pokud se /tmp nachází na malém diskovém oddílu). Podívejte se také na poznámku o LC_ALL výše a přepínač sortu -u (vynechaný pro přehlednost).

      cat a b | sort | uniq > c   # c je sjednocení b
      cat a b | sort | uniq -d > c   # c je průnik b
      cat a b b | sort | uniq -u > c   # c je rozdíl a - b


Použijte grep .* pro rychlé prošetření obsahu všech souborů v adresáři (každý soubor je spojen s názvem souboru) nebo head -100 * (aby každý soubor měl záhlaví). Může být užitečné pro adresáře s konfiguračními soubory jako jsou například /sys, /proc a /etc.


Součet všech čísel ve třetím sloupci textového souboru (pravděpodobně 3x rychlejší a 3x méně kódu než ekvivalentní funkce v Pythonu):


      awk '{ x += $3 } END { print x }' mujsoubor

Pokud chcete zobrazit velikosti/datumy na souborovém stromu, následující příkaz je jako rekurzivní ls -l, ale jedodušší na čtení než ls -lR:

      find . -type f -ls

Řekněme, že máte textový soubor, jako log webového serveru, a jisté hodnoty, které se objevují na některých řádcích, jako například acct_id parametr, který se vyskytuje v URL. Pokud chcete záznam kolik požadavků pro každý acct_id:

      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn


K průběžnému monitorování změn použijte watch, například změn souborů v adresáři pomocí watch -d -n 2 'ls -rth | tail' nebo síťových nastavení při řešení potíží nastavení wifi: watch -d -n 2 ifconfig.


Spusťte tuto funkci k získání náhodného tipu z tohoto dokumentu (parsuje Markdown a vyextrahuje jednu položku):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80
      }
Neobvyklé ale užitečné


expr: provede aritmetické nebo logické operace nebo vyhodnotí regulární výrazy


m4: jednoduchý procesor maker


yes: tiskne řetězec vícekrát


cal: hezký kalendář


env: provede příkaz (užitečné ve scriptech)


printenv: vypíše proměnné prostředí (užitečné při ladění a ve scriptech)


look: najde anglická slova (nebo řádky v souboru) začínající řetězcem


cut, paste a join: manipulace s daty


fmt: formátuje text do odstavců


pr: formátuje text do stránek/sloupců


fold: zalamuje řádky textu


column: formátuje textová pole do zarovnaných sloupců nebo tabulek s danou šířkou


expand a unexpand: převádí tabulátory a mezery


nl: přidá čísla řádků


seq: tiskne čísla


bc: kalkulačka


factor: provádí faktorizaci celých čísel (15 = 5 a 3)


gpg: šifruje a podepisuje soubory


toe: tabulka informací o dostupných terminálech


nc: síťové ladění a přenos dat


socat: socketové relé a tcp port přesměrování (podobné netcat)


slurm: visualizace síťového provozu


dd: přesun dat mezi soubory nebo zařízeními


file: identifikuje typ souboru


tree: zobrazí adresáře a podadresáře jako vnořený strom; podobně jako ls ale rekurzivně


stat: informace o souboru


time: provede a načasuje příkaz


timeout: provádí příkaz po specifikovanou dobu a zastaví proces když daná doba uplyne


lockfile: vytvoří semaforový soubor, který lze odstranit pouze pomocí rm -f


logrotate: rotuje, komprimuje a posílá logy emailem


watch: spouští opakovaně příkaz a zobrazuje výsledky a/nebo zvýrazňuje změny


tac: tiskne soubory pozpátku (po řádcích)


shuf: náhodně vybere řádky ze souboru


comm: porovná seřazení soubory řádek po řádku


pv: monitoruje postup dat skrz rouru


hd, hexdump, xxd, biew a bvi: vypíše nebo edituje binární soubory


strings: vypreparuje textové řetězce z binárních souborů


tr: překládá znaky nebo s nimi manipuluje


iconv nebo uconv: převod pro kódování textu


split a csplit: dělí soubory


sponge: čte všechen vstup před tím než ho zapíše, užitečné pro čtení a následný zápis do téhož souboru, např. grep -v neco nejaky-soubor | sponge nejaky-soubor


units: převody jednotek a výpočty; převádí jednotky mezi sebou, (viz. /usr/share/units/definitions.units)


apg: generuje náhodná hesla


7z: vysoko-poměrová datová komprese


ldd: informace o dynamických knihovnách


nm: vypíše symboly z objektových souborů


ab: zátěžové testy webserverů


strace: ladění systému


mtr: vylepšení traceroute pro síťové ladění


cssh: vizuální souběžný shell


rsync: synchronizuje soubory a adresáře přes SSH nebo v lokálním systému souborů


wireshark a tshark: zachytávání packetů a síťové ladění


ngrep: grep pro síťovou vrstvu


host a dig: DNS vyhledávání


lsof: zpracovává souborové popisovače (descriptory) a informace o socketech


dstat: užitečné systémové informace


glances: vysoko úrovňový, multi-systémový přehled


iostat: statistiky využití disku


mpstat: statistiky využití CPU


vmstat: statistiky využití paměti


htop: vylepšená verze top (správa procesů)


last: historie přihlášení


w: kdo je přihlášen


id: informace o identitě uživatele/skupiny


sar: historické systémové statistiky


iftop nebo nethogs: využití sítě pro proces nebo socket


ss: statistika socketů


dmesg: bootovací a systémové chybové zprávy


sysctl: zobrazení a konfigurace parametrů Linuxového kernelu za běhu


hdparm: SATA/ATA disková manipulace/výkon


lsblk: seznam blokových zařízení: stromové zobrazení disků a diskových oddílů


lshw, lscpu, lspci, lsusb, dmidecode: informace o hardwaru zahrnující CPU, BIOS, RAID, grafiku, zařízení, atd.


lsmod a modinfo: seznam a detaily kernelových modulů


fortune, ddate, a sl: hm, no, záleží jestli považujete parní lokomotivy a Zippyho citáty za "užitečné"


Pouze pro OS X
Tyto věci jsou relevantní pouze pro macOS.


Balíčky spravované pomocí brew (Homebrew) a/nebo port (MacPorts). Mohou být použity k instalaci mnoha předešlých příkazů na macOS.


Kopírujte výstup jakéhokoli příkazu do desktopové aplikace pomocí pbcopy a vložte vstup z nějaké pomocí pbpaste.


K povolení klávesy Option v Terminálu Mac OS jako klávesu Alt (pro použití v příkazech jako alt-b, alt-f, atd.), otevřete Předvolby -> Profily -> Klávesnice a zvolte "Použít Option jako Meta klávesu".


K otevření souboru za pomoci desktopové aplikace použijte open nebo open -a /Aplikace/Cokoli.app.


Spotlight: Prohledávejte soubory s mdfind a vypište metadata (například EXIF informace fotografie) pomocí mdls.


Nezapomínejte, že macOS je založen na BSD Unixu a mnoho příkazů (například ps, ls, tail, awk, sed) mají spoustu jemných odlišností od Linuxu, což je z velké části ovlivněno System V (System Five) stylem Unixu a GNU nástroji. Mnohokrát mmůžete rozdíl poznat podle manuálové stránky mající v nadpise "BSD General Commands Manual". V některých případech mohou být GNU verze instalovány také (třeba gawk a gsed pro GNU awk a sed). Pokud píšete multi-platformní Bashové scripty, vyhýbejte se takovým příkazům (například, zvažte Python či perl) nebo pečlivě testujte.


K získání informací o verzi vydání macOS použijte sw_vers.


Další zdroje

awesome-shell: Organizovaný seznam shellových nástrojů a zdrojů.
awesome-osx-command-line: Průvodce Mac OS příkazovou řádkou více do hloubky.
Striktní mód pro psaní lepších shellových scriptů.
shellcheck: Nástroj pro statickou analýzu shellových scriptů. V podstatě lint pro bash/sh/zsh.
Souborové názvy a cesty v shellu: Bohužel velmi komplexní drobnosti o korektní práci se souborovými jmény v shellových scriptech.

Zřeknutí se odpovědnosti
S vyjímkou velmi malých úkolů je kód psán tak, aby ho ostatní mohli přečíst. S mocí přichází zodpovědnost. Skutečnost, že něco můžete v Bashi udělat nemusí nutně znamenat, že byste měli! ;)
License

Tato práce je licencována pod Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\n🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line



Kurzbeschreibung
Grundlagen
Täglicher Gebrauch
Umgang mit Dateien und Daten
Fehlerbehebung auf Systemebene
Einzeiler
Eigenartig aber hilfreich
Nur MacOS X
Nur Windows
Weitere Quellen
Haftungsausschluss


Der flüssige Umgang mit der Befehlszeile (auch Kommandozeile, engl. "command line") ist eine oft vernachlässigte oder als undurchsichtig empfundene Fähigkeit, steigert jedoch Flexibilität und Produktivität eines Informatikers auf offensichtliche als auch subtile Weise. Was folgt, ist eine Auswahl an Notizen und Tipps im Umgang mit der Befehlszeile, welche ich beim Arbeiten mit Linux zu schätzen gelernt habe. Manche dieser Hinweise beinhalten Grundwissen, andere sind sehr spezifisch, fortgeschritten oder auch eigenartig. Die Seite ist nicht lang, aber wenn du alle Punkte verstanden hast und anwenden kannst, weißt du eine ganze Menge.
Vieles davon
erschien
ursprünglich
auf Quora,
aber angesichts des Interesses scheint es vielversprechend, Github zu nutzen, wo talentiertere Menschen als ich es bin kontinuierlich Verbesserungen vorschlagen können. Wenn du einen Fehler entdeckst oder etwas, das man besser machen könnte, erstelle ein Issue oder einen PR! (Lies aber bitte zuerst die Kurzbeschreibung und überprüfe bereits vorhandene Issues/PRs.)
Kurzbeschreibung
Umfang:

Diese Anleitung richtet sich an Anfänger und Fortgeschrittene. Die Ziele sind Breite (alles ist wichtig), Genauigkeit (konkrete Beispiele für die gebräuchlichsten Anwendungsfälle) und Knappheit (Dinge, die nicht wesentlich sind oder leicht anderswo nachgeschlagen werden können, sollen vermieden werden). Jeder Tipp ist in einer bestimmten Situation wesentlich oder deutlich zeitsparend gegenüber bestehenden Alternativen.
Sie ist für Linux geschrieben, mit der Ausnahme der Abschnitte "Nur MacOS X" und "Nur Windows". Viele der anderen Punkte lassen sich nutzen oder sind installierbar auf anderen Unices oder MacOS (oder sogar Cygwin).
Der Fokus liegt auf interaktiver Bash, allerdings gelten viele Tipps auch auf anderen Shells sowie für allgemeines Bash-Skripting.
Sie beinhaltet sowohl "normale" Unix-Befehle als auch solche, die bestimmte installierte Pakete voaussetzen -- sofern sie wichtig genug sind, dass sie die Aufnahme in diese Anleitung verdienen.

Hinweise:

Um eine Seite nicht zu sprengen, ist ihr Inhalt durchgängig anhand von Verweisen aufgelistet. du bist schlau genug, anderswo zusätzliche Informationen nachzuschlagen, sobald du die Idee bzw. den Befehl dahinter kennst. Verwende apt-get, yum, dnf, pacman, pip oder brew, um ggf. neue Programme zu installieren.
Verwende Explainshell, um einen hilfreichen Einblick zu erhalten, was es mit Befehlen, Optionen, Pipes etc. auf sich hat.

Grundlagen


Lerne Bash-Grundlagen. Tatsächlich, gib man bash ein und überfliege das Ganze zumindest; es ist leicht zu verstehen und nicht allzu lang. Alternative Shells sind nett, aber Bash ist mächtig und immer verfügbar (nur zsh, fish, etc. zu lernen ist auf dem eigenen Laptop vielleicht reizvoll, beschränkt jedoch deine Möglichkeiten in vielerlei Hinsicht, etwa beim Arbeiten mit bestehenden Servern).


Lerne mindestens einen Text-basierten Editor zu benutzen. Idealerweise Vim (vi), da es letztlich keinen vergleichbaren Mitbewerber für gelegentliche Einsätze in einem Terminal gibt (selbst dann, wenn man eine große Entwicklungsumgebung wie Emacs oder die meiste Zeit einen modernen Hipster-Editor benutzt).


Wisse, wie man Dokumentationen mit man liest (für Neugierige, man man listet Abschnittsnummern, bspw. stehen unter 1 "reguläre" Befehle, 5 beinhaltet Dateien/Konventionen und unter 8 solche zur Rechnerverwaltung). Finde man-Seiten ("man pages") mit apropos. Wisse, dass manche Befehle keine ausführbaren Dateien, sondern Bash-Builtins sind, und dass du Hilfe zu diesen mit help und help -d erhälst.


Lerne etwas über die Umleitung von Ein- und Ausgaben per > und < sowie | für Pipes. Wisse, dass > die Ausgabedatei überschreibt und >> etwas anhängt. Lerne etwas über stdout und stderr.


Lerne etwas über die Dateinamenerweiterung mittels * (und eventuell ? und [...]) sowie Anführungszeichen, etwa den Unterschied zwischen doppelten " und einfachen '. (Mehr zur Variablenerweiterung findest du unten.)


Mach dich vertraut mit Bash-Jobmanagement: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Kenne ssh und die Grundlagen passwortloser Authentifizierung mittels ssh-agent, ssh-add, etc.


Grundlegende Dateiverwaltung: ls and ls -l (und spezieller, lerne die Funktion jeder einzelnen Spalte von ls -l kennen), less, head, tail und tail -f (oder noch besser, less +F), ln und ln -s (lerne die Unterschiede und Vorteile von Hard- und Softlinks), chown, chmod, du (für eine Kurzzusammenfassung der Festplattenbelegung: du -hs *). Für Dateisystemmanagement df, mount, fdisk, mkfs, lsblk. Lerne, was ein Inode (engl. index node) ist (ls -i oder df -i).


Grundlagen der Netzwerkverwaltung: ip oder ifconfig, dig.


Lerne etwas über Versionskontrolle und benutze ein entsprechendes System, wie etwa git.


Kenne reguläre Ausdrücke gut, und die verschiedenen Statusindikatoren zu grep/egrep. Die Optionen -i, -o, -v, -A, -B, und -C sind gut zu wissen.


Lerne den Umgang mit apt-get, yum, dnf oder pacman (je nach Linux-Distribution), um Pakete zu finden bzw. zu installieren. Und stell sicher, dass du pip hast, um Python-basierte Befehlszeilen-Werkzeuge nutzen zu können (einige der untenstehenden werden am einfachsten über pip installiert).


Täglicher Gebrauch


In Bash kannst du mit Tab Parameter vervollständigen sowie alle verfügbaren Befehle anzeigen lassen und mit ctrl-r bereits benutzte Befehle durchsuchen (drück die Kombination, gib dann deinen Suchtext ein und springe anschließend durch wiederholtes Drücken von ctrl-r durch die Suchergebnisse, mit Enter kannst du den gefundenen Befehl ausführen sowie mit der rechten Pfeiltaste in die aktuelle Zeile einfügen, um ihn zu bearbeiten).


In Bash kannst du mit ctrl-w das letzte Wort löschen und mit ctrl-u alles bis zum Anfang einer Zeile. Verwende alt-b und alt-f, um dich Wort für Wort fortzubewegen, springe mit ctrl-a zum Beginn einer Zeile,  mit ctrl-e zum Ende einer Zeile, lösche mit ctrl-k alles bis zum Ende einer Zeile und bereinige mit ctrl-l den Bildschirm. Siehe man readline für alle voreingestellten Tastenbelegungen in Bash. Davon gibt's viele. Zum Beispiel alt-. wechselt durch vorherige Parameter und alt-* erweitert ein Suchmuster.


Alternativ, falls du vi-artige Tastenbelegungen magst, verwende set -o vi (und set -o emacs, um es wiederzuholen).


Um kürzlich genutzte Befehle zu sehen, history. Es gibt außerdem viele Abkürzungen wie etwa !$ (letzter Parameter) und !! (letzter Befehl), wenngleich diese oft einfach ersetzt werden durch ctrl-r und alt-..


Um lange Befehle zu bearbeiten, kannst du sie (nachdem du deinen Editor angegeben hast, etwa mit export EDITOR=vim) mit ctrl-x ctrl-e im Editor öffnen, um mehrere Zeilen bearbeiten zu können. Oder vi-Style, escape-v.


Um kürzlich verwendete Befehle anzuzeigen, benutze history. Anschließend !n (wobei n die Nummer des Befehls ist), um es erneut auszuführen. Es gibt zudem zahlreiche Abkürzungen, die man verwenden kann, die nützlichste ist wahrscheinlich !$ für den letzten Parameter und !! für den letzten Befehl (siehe "HISTORY EXPANSION" in der man-Seite). Diese werden allerdings oft einfach ersetzt durch ctrl-r und alt-..


In dein Benutzerverzeichnis gelangst du mit cd. Auf Dateien relativ zu diesem kannst du mit dem Präfix ~ zugreifen (etwa so ~/.bashrc). In sh-Skripts heißt das Benutzerverzeichnis $HOME.


Um ins vorangegangene Arbeitsverzeichnis zu gelangen: cd -


Wenn du einen Befehl eingibst und es dir auf halbem Wege anders überlegst, drücke alt-#, um am Zeilenanfang ein # einzufügen und ihn damit als Kommentar auszuweisen (oder benutze ctrl-a, #, enter). du kannst später über die Befehlsgeschichte zurückgelangen.


Verwende xargs (oder parallel). Es ist sehr mächtig. Beachte, wie du viele Dinge pro Zeile (-L) als auch parallel (-P) ausführen kannst. Wenn du dir nicht sicher bist, ob das Richtige dabei herauskommt, verwende zunächst xargs echo. Außerdem ist-I{} nützlich. Beispiele:


    find . -name '*.py' | xargs grep irgendeine_funktion
    cat hosts | xargs -I{} ssh root@{} hostname


pstree -p liefert eine hilfreiche Anzeige des Prozessbaums.


Verwende pgrep und pkill, um Prozesse anhand eines Namens zu finden oder festzustellen (-f ist hilfreich).


Kenne die verschiedenen Signale, welche du Prozessen senden kannst. Um einen Prozess etwa zu unterbrechen, verwende kill -STOP [pid]. Für die vollständige Liste, siehe man 7 signal


Verwende nohup oder disown, wenn du einen Hintergrundprozess für immer laufen lassen willst.


Überprüfe mithörende Prozesse mit netstat -lntp oder ss -plat (für TCP; füge -u für UDP hinzu).


Siehe zudem lsof für offene Sockets und Dateien.


Siehe uptime oder w, um die laufende Betriebszeit des Systems zu erfahren,


Verwende alias, um Verknüpfungen für gebräuchliche Befehle zu erstellen. So erstellt etwa alias ll='ls -latr' den neuen Alias ll.


Speichere diese Alternativnamen ("aliases"), Shell-Einstellungen und häufig benutzte Funktionen in ~/.bashrc und stelle sie anderen Login-Shells zur Verfügung. So hast du auf dein Setup auch in allen anderen Shell-Sessions Zugriff.


Platziere Einstellungen von Umgebungsvariablen sowie Befehle, welche nach einer Anmeldung ausgeführt werden sollen, in ~/.bash_profile. Eine separate Konfiguration ist notwendig für Shells, welche du von einer grafischen Benutzeroberfläche startest sowie für cron-Jobs.


Synchronisiere deine Konfigurationsdateien (etwa .bashrc und .bash_profile) zwischen mehreren Computern mit Git.


Verstehe, dass Vorsicht geboten ist, wenn Variablen und Dateinamen Leerzeichen enthalten. Setze deine Bashvariablen daher mit Anführungszeichen: "$FOO". Bevorzuge die Optionen -0 oder -print0, um ungültige Schriftzeichen zu aktivieren und so Dateinamen zu begrenzen, bspw. locate -0 pattern | xargs -0 ls -al oder find / -print0 -type d | xargs -0 ls -al. Um in einem "for loop" Dateinamen durchzugehen, die Leerzeichen enthalten, sorge mit IFS=$'\n' dafür, dass dein IFS immer auf einer neuen Zeile steht.


Benutze in Bash-Skripts set -x (oder die Abwandlung set -v, welche unverarbeiteten Input akzeptiert, einschließlich Kommentare und unexpandierte Variablen) zum Output der Fehlerbehebung. Benutze "strict modes", es sei denn, gute Gründe sprechen dagegen: Benutze set -e, um bei Fehlern abzubrechen ("nonzero exit code"). Benutze set -u, um die Verwendung nicht gesetzer Variablen aufzuspüren. Erwäge auch set -o pipefail für Fehler in Pipes (lies jedoch mehr zu diesem Thema, wenn du es vorhast, denn es ist ein wenig heikel). Benutze bei komplizierteren Skripts auch trap bei EXIT oder ERR. Es ist eine nützliche Angewohnheit, ein Skript folgendermaßen zu beginnen, um Fehler zu erkennen und sie ggf. mit einer entsprechenden Fehlermeldung abzubrechen:


    set -euo pipefail
    trap "echo 'error: Script failed: see failed command above'" ERR

In Bash-Skripts stellen Subshells (geschrieben in runden Klammern) einen praktischen Weg dar, Befehle zusammenzufassen. Ein gebräuchliches Beispiel ist die vorübergehende Arbeit in einem anderen Arbeitsverzeichnis:

    # erledige etwas im aktuellen Verzeichnis
    (cd /irgendein/anderes/verzeichnis && anderer-befehl)
    # fahre fort im aktuellen Verzeichnis


Beachte, dass es in Bash viele Möglichkeiten gibt, Variablen zu erweitern. Überprüfen, ob eine Variable existiert: ${name:?error message}.Wenn bspw. ein Bash-Skript nur einen einzelnen Parameter benötigt, schreibe einfach input_file=${1:?usage: $0 input_file}. Arithmetische Erweiterung: i=$(( (i + 1) % 5 )). Sequenzen: {1..10}. Zeichenkette kürzen: ${var%suffix} und ${var#prefix}. Wenn bspw. var=foo.pdf, dann gibt echo ${var%.pdf}.txt die Ausgabe foo.txt aus.


Klammererweiterung mittels {...} kann dafür sorgen, ähnlichen Text seltener wiederholen zu müssen und ermöglicht die Kombination von Objekten. Das ist etwa in Fällen nützlich wie mv foo.{txt,pdf} zielverzeichnis (verschiebt beide Dateien), cp datei{,.bak} (erweitert den Ausdruck um cp datei datei.bak) oder mkdir -p test-{a,b,c}/subtest-{1,2,3} (erweitert alle denkbaren Kombinationen und erstellt einen Verzeichnisbaum).


Die Ausgabe eines Befehls kann wie eine Datei behandelt werden mit <(befehl). Das Vergleichen der lokalen /etc/hosts mit einer entfernten:


    diff /etc/hosts <(ssh andererhost cat /etc/hosts)

Beim Schreiben von Skripts wirst du deinen Code womöglich in geschweifte Klammern setzen wollen. Falls die schließende Klammer fehlt, wird dein Skript aufgrund eines Syntaxfehlers nicht ausgeführt. Das ist etwa dann sinnvoll, wenn es im Internet verfügbar ist, da ein unvollständig heruntergeladenes Skript so an der Ausführung gehindert wird:

{
    # Hier koennte dein Code stehen!
}


Kenne "here documents" in Bash, wie etwa in cat <<EOF ....


In Bash, leite sowohl den standard output als auch den standard error um mit: irgendein-befehl >logfile 2>&1. Oftmals ist es gute Praxis, einen Befehl an das verwendete Terminal zu binden, um keinen offenen Dateizugriff im standard input zu erzeugen, also </dev/null hinzuzufügen.


Verwende man ascii für eine gute ASCII-Tabelle, Mit Dezimal- und Hexadezimalwerten. Für allgemeine Informationen zu Kodierung sind man unicode, man utf-8 und man latin1 hilfreich.


Verwende screen oder tmux, um einen Bildschirm zu multiplexen, besonders hilfreich ist dies für Fernzugriffe per ssh und zur Trennung und Neuverbindung mit einer Session. Eine minimalistische Alternative allein zur Aufrechterhaltung einer Session ist dtach.


Bei SSH ist es hilfreich zu wissen, wie man einen Porttunnel mit -L oder -D (gelegentlich auch -R) einrichtet, etwa beim Zugriff auf Webseiten von einem Remote-Server.


Es kann nützlich sein, ein paar Verbesserungen an den SSH-Einstellungen vorzunehmen; so enthält bspw. diese ~/.ssh/config Einstellungen, um das Abreißen der Verbindung in bestimmten Netzwerkumgebungen zu vermeiden, verwendet Kompression (was hilfreich ist bei SCP über Verbindungen mit niedriger Bandbreite) und Multiplex-Kanäle zu demselben Server mithilfe einer lokalen Kontrolldatei:


    TCPKeepAlive=yes
    ServerAliveInterval=15
    ServerAliveCountMax=6
    Compression=yes
    ControlMaster auto
    ControlPath /tmp/%r@%h:%p
    ControlPersist yes



Einige andere Optionen im Zusammenhang mit SSH sind sicherheitsrelevant und sollten nur mit Bedacht aktiviert werden, etwa Zugriff per Subnet oder Host sowie in vertrauenswürdigen Netzwerken: StrictHostKeyChecking=no, ForwardAgent=yes.


Erwäge mosh als Alternative zu ssh, die UDP benutzt, um so abgebrochene Verbindungen zu vermeiden, was ja in gewisser Hinsicht auch komfortabel ist (benötigt Server-seitiges Setup).


Um Zugriff auf eine Datei in Oktalform zu erhalten, was zur Systemkonfiguration zwar nützlich, jedoch über ls nicht verfügbar und leicht zu vermasseln ist, verwende etwas wie


    stat -c '%A %a %n' /etc/timezone


Verwende zur interaktiven Auswahl von Werten aus dem Output eines anderen Befehls percol oder fzf.


Verwende fpp (PathPicker) zur Interaktion mit Dateien als Output eines anderen Befehls (wie etwa git).


Verwende für einen einfachen Webserver für alle Dateien im aktuellen Verzeichnis (sowie Unterverzeichnisse), der für alle in deinem Netzwerk abrufbar ist: python -m SimpleHTTPServer 7777 (für Port 7777 und Python 2) sowie python -m http.server 7777 (für Port 7777 und Python 3).


Benutze sudo, um einen Befehl als ein anderer Benutzer auszuführen. Standardmäßig ist dies die Ausführung als root; benutze -u zur Angabe eines anderen benutzers sowie -i, um dich als dieser anzumelden (du wirst nach deinem Passwort gefragt).


Benutze su benutzername oder su - benutzername, um mit der Shell zu einem anderen Benutzer zu wechseln. Füge - hinzu, um eine Umgebung zu erhalten, als hättest du dich gerade mit diesem Benutzer angemeldet. Das Weglassen des Benutzernamens führt zur Anmeldung als root. du wirst gefragt nach dem Passwort des Benutzers, als der du dich anmelden willst.


Kenne das 128K-Limit der Befehlszeile. Der "Argument list too long"-Fehler erscheint häufig, wenn auf sehr viele Dateien über Wildcards zugegriffen wird (wenn das passiert, können Alternativen wie find und xargs helfen).


Benutze den python-Interpreter als einfachen Taschenrechner (und natürlich für den Zugriff auf Python im Allgemeinen). Beispiel:


    >>> 2+3
    5

Umgang mit Dateien und Daten


Um eine Datei im aktuellen Verzeichnis anhand des Namens zu finden, find . -iname '*irgendwas*'. Um eine Datei unabhängig vom Verzeichnis anhand des Namens zu finden, verwende locate irgendwas (bedenke jedoch, dass updatedb kürzlich erstellte Datein möglicherweise noch nicht indexiert hat).


Für das allgemeine durchsuchen von (Quell-)Dateien (fortgeschrttener als grep -r), verwende ag.


Um HTML in Text zu konvertieren: lynx -dump -stdin


Für Markdown, HTML und alle möglichen Arten von Dokumentkonvertierung, versuch's mit pandoc.


Wenn du mit XML arbeiten musst, xmlstarlet ist alt, aber gut.


Für JSON, verwende jq.


Für YAML gibt's shyaml.


Für Excel- bzw. CSV-Dateien hält csvkit in2csv, csvcut, csvjoin, csvgrep, etc bereit.


Für Amazon S3 ist s3cmd praktisch und s4cmd schneller. Amazons aws sowie das verbesserte saws sind essentiell für andere AWS-bezogene Aufgaben.


Kenne sort und uniq, letzteres einschließlich der Optionen -u und -d -- siehe die Einzeiler unten. Siehe auch comm.


Kenne cut, paste und join zur Arbeit mit Textdateien. Viele Leute nutzen cut, vergessen aber join.


Kenne wc, um neue Zeilen (-l), Zeichen (-m), Wörter (-w) und Bytes (-c) zu zählen.


Kenne tee, um von stdin in eine Datei und sogar nach stdout zu kopieren, wie etwa mit ls -al | tee datei.txt.


Bei komplexeren Berechnungen, einschließlich Gruppieren, Tauschen von Feldern und statistische Berechnungen, könnte datamash passend sein.


Sei dir bewusst, dass die regionale Spracheinstellung ("locale") viele Befehlszeilen-Werkzeuge auf subtile Art und Weise beeinflusst, inklusive der Sortierreihenfolge und ihrer Performance. Die meisten Linux Installation setzen LANG oder andere lokale Variablen auf eine lokale Einstellung wie z.B. "US English". Aber sei dir bewusst, dass sich das Sortierverhalten ändern wird, falls du die "locale" änderst. Und wisse, dass "i18n"-Routinen sort und andere Befehle stark verlangsamen können. In manchen Situationen (wie den Mengen oder Identitätsfunktionen unterhalb) kann man ruhigen Gewissens langsame "i18n"-Routinen ignorieren und traditionelle byte-basierte Sortierreihenfolge nutzen, indem man export LC_ALL=C setzt.


Du kannst einem bestimmten Befehl eine Umgebung zuteilen, indem seinem Aufruf die Einstellung der Umgebungsvariable vorangestellt wird, wie hier: TZ=Pacific/Fiji date.


Kenne Grundlagen vonawk und sed für einfache Datenverarbeitung. Um z.B. alle Zahlen in der dritten Spalte einer Textdatei aufzusummieren: awk '{ x += $3 } END { print x }'. Das ist wahrscheinlich 3X schneller und 3X kürzer als das Python Äquivalent.


Um mehrere Dateien umzubenennen sowie innerhalb von Dateien zu suchen/ersetzen, probier repren aus (gelegentlich kann man auch mit rename mehrere Dateien umbenennen, aber sei vorsichtig, da dessen Funktionsweise je nach Linux-Distribution abweicht).


    # Vollständige Umbenennung von Dateinamen, Ordnern und Inhalten - foo -> bar:
    repren --full --preserve-case --from foo --to bar .
    # Backupdateien wiederherstellen - whatever.bak -> whatever:
    repren --renames --from '(.*)\.bak' --to '\1' *.bak
    # Wie oben, aber mit rename, sofern verfügbar:
    rename 's/\.bak$//' *.bak

Wie die man-Seite richtig sagt, ist rsync ein schnelles und vielseitiges Werkzeug zum Kopieren von Dateien. Es ist bekannt für das Synchronisieren zwischen Rechnern, ist lokal aber ebenso nützlich. Wenn es die Sicherheitsbestimmungen zulassen, erlaubt rsync im Gegensatz zu scp die Wiederaufnahme einer Übertragung, ohne nochmal von vorn beginnen zu müssen. Es ist zudem einer der schnellsten Wege, um große Mengen an Dateien zu löschen:

mkdir leeres-verzeichnis && rsync -r --delete leeres-verzeichnis/ verzeichnis && rmdir verzeichnis


Benutze shuf zum Mischen oder um zufällige Zeilen aus einer Datei auszuwählen.


Kenne die Optionen von sort. Benutze -n für Zahlen, oder -h um mit menschenlesbaren Zahlen umzugehen (wie z.B. von du -h). Sei dir bewusst, wie Schlüssel funktionieren (-t und -k). Sei dir insbesondere bewusst, dass du -k1,1 verwenden musst, um bezüglich des ersten Felds zu sortieren;-k1 bedeutet, sortiere anhand der ganzen Zeile. Stabiles Suchen (sort -s) kann ebenfalls nützlich sein. Um bspw. primär nach Feld 2 und sekundär nach Feld 1 zu sortieren, kannst du sort -k1,1 | sort -s -k2,2 benutzen.


Falls du jemals ein Tabulator Literal in eine Befehlszeile in Bash schreiben musst (etwa den Parameter -t für sort), drücke ctrl-v [Tab] oder schreibe $'\t' (letzteres ist besser, da man es Kopieren/Einfügen kann).


Die Standardwerkzeuge für das Patchen von Quellcode sind diff und patch. Siehe auch diffstat, um zusammenfassende Statistiken eines diffs zu erhalten. Beachte, dass diff -r für komplette Verzeichnisse funktioniert. Nutze diff -r tree1 tree2 | diffstat, um eine Übersicht aller Änderungen zu bekommen. Benutze vimdiff, um Dateien zu vergleichen und zu bearbeiten.


Benutze für Binärdateien hd, hexdump or xxd zur Erstellung einfacher Hexdumps und bvi oder biew zur binären Bearbeitung.


Ebenfalls für Binärdateien kann strings (und grep, etc.) benutzt werden, um Textpassagen zu finden.


Um Diffs für Binärdateien zu erstellen (Delta Kompression), nutze xdelta3.


Um zwischen Textkodierungen zu konvertieren, solltest du iconv probieren, oder aber uconv für fortgeschrittene Anwendungsfälle; es unterstüzt einige fortgeschrittene Unicode-Dinge. Dieser Befehl bspw. wandelt alle Buchstaben in Kleinbuchstaben um und entfernt alle Akzente (indem sie erweitert und verworfen werden):


    uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Um Dateien aufzuteilen, siehe split (Teilung anhand einer bestimmten Größe) und csplit (Teilung anhand eines bestimmten Musters).


Benutze  zless, zmore, zcat, und zgrep um mit komprimierten Dateien zu arbeiten.


Dateieigenschaften können mit chattr gesetzt werden und stellen eine niederschwelligere Alternative zu Dateiberechtungen dar. So kann man etwa, um das versehentliche Löschen einer Datei zu verhindern, eine entsprechende Flag ("immutable flag") setzen: sudo chattr +i /wichtiges/verzeichnis/oder/datei


Benutze getfacl und setfacl, um Dateiberechtigungen zu speichern und wiederherzustellen. Beispiel:


   getfacl -R /irgendein/pfad > berechtigungen.txt
   setfacl --restore=berechtigungen.txt
Fehlerbehebung auf Systemebene


Zur Fehlersuche bei Webanwendungen sind curl und curl -I hilfreich, ebenso wie ihre wget Äquivalente oder das modernere httpie.


Um den aktuellen CPU-/Festplattenstatus zu erfahren, sind die Klassiker top (oder das bessere htop), iostat und iotop. Benutze iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


Benutze für Informationen zu Netzwerkverbindungen netstat und ss.


Für eine schnelle Übersicht, was sich auf einem System abspielt, ist dstat sehr nützlich. Für einen guten Gesamtüberblick bietet sich zudem glances an.


Um den Zustand des Speichers zu erfahren, führst du am besten free und vmstat aus und verstehst deren Ausgabe. Sei dir insbesondere bewusst, dass der "cached"-Wert jener Wert ist, der vom Linux-Kernel als Dateicache genutzt wird, da dieser effektiv als zum "free"-Wert addiert werden kann.


Fehlerbehebung ("debugging") auf Java-Systemen ist ein anderes Paar Schuhe, aber ein simpler Trick für die Oracle JVM (der teilweise auch für andere JVMs funktioniert) ist kill -3 <pid>, sodass ein vollständiger Strack trace und Heap Informationen (inklusive Garbage Collection Details, die sehr informativ sein können) nach stderr/logs ausgegeben werden. Die JDK-Befehle jps, jstat, jstack, jmap sind ebenfalls nützlich. SJK-Werkzeuge sind noch weiter fortgeschritten.


Benutze mtr als ein besseres traceroute, um Netzwerkprobleme zu identifizieren.


Willst du wissen, warum eine Festplatte voll ist, dann spart ncdu Zeit gegenüber den üblichen Befehlen wie du -sh *.


Um herauszufunden, welcher Socket oder Prozess Bandbreite verbraucht, kannst du iftop oder nethogs verwenden.


Das ab-Werkzeug (ein Teil vom Apache) ist hilfreich, um schnell und pragmatisch die Performance eines Webservers zu messen. Für komplexere Messungen kannst du siege ausprobieren.


Für eine tiefergehende Netzwerk Problemsuche, wireshark, tshark, oder ngrep.


Kenne strace und ltrace. Diese können hilfreich sein, falls ein Programm fehlschlägt, hängt oder abstürzt und du weißt nicht warum, oder um einen generellen Eindruck von der Performance zu bekommen. Beachte die Profiling-Option (-c) und die Fähigkeit, sich mit laufenden Prozessen zu verbinden (-p).


Kenne ldd, um "shared libraries" zu überprüfen.


Sei in der Lage, dich mittels gdb mit einem laufenden Prozess zu verbinden und dessen "stack traces" zu holen.


Benutze /proc. Es ist manchmal unglaublich hilfreich, um Probleme in Echtzeit zu debuggen. Beispiele: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (wobei xxx die Prozess-ID / pid ist).


Bei der Frage, warum in der Vergangenheit etwas schief gelaufen ist, kann sar sehr hilfreich sein. Es zeigt historische Statistiken über CPU, Speicher, Netzwerk, etc.


Für eine genauere System und Performanceanalyse, solltest du dir stap (SystemTap), perf, und sysdig ansehen.


Finde heraus, welches Betriebssystem du nutzt mittels uname oder uname -a (allgemeine Unix-/Kernelinformationen) oder lsb_release -a (Informationen zur verwendeten Linux-Distribution)


Benutze dmesg wenn sich etwas merkdwürdig verhält (es könnte ein Hardware oder Treiber Problem sein)


Wenn du eine Datei löschst, jedoch laut du nicht der erwartete Festplattenspeicher frei wird, dann überprüfe, ob die Datei von einem Prozess verwendet wird: lsof | grep deleted | grep "dateiname"


Einzeiler
Ein paar Beispiele, wie man Befehle zusammen benutzen kann:

Manchmal ist es unglaublich hilfreich, dass man die Schnittmenge, Vereinigung und den Unterschied zwischen Textdateien via sort/uniq bilden kann. Angenommen, a und b sind Textdateien, die bereits "unique" sind. Diese Herangehensweise ist schnell und funktioniert mit Dateien beliebiger Größe, bis zu mehreren Gigabytes (sort ist nicht durch Speicher beschränkt, obwohl man eventuell die -T-Option nutzen muss, falls /tmp auf einer kleinen Root-Partition liegt). Siehe auch die Bemerkung über LC_ALL weiter oben und die -u-Option von sort (wurde oben aus Gründen der Übersichtlichkeit ausgelassen).

    cat a b | sort | uniq > c   # c ist a vereint mit b
    cat a b | sort | uniq -d > c   # c ist a geschnitten b
    cat a b b | sort | uniq -u > c   # c ist die Menge mit unterschiedlichen Elementen  a - b


Eine schnelle Überprüfung der Inhalte aller Dateien in einem Verzeichnis erreichst du mit grep . * (damit enthält jede Zeile den Dateinamen) oder head -100 * (damit erhält jede Datei eine Überschrift). Dies kann nützlich sein für Verzeichnisse, die Konfigurationsdateien enthalten wie jene in /sys, /proc und /etc.


Alle Zahlen in der dritten Spalte einer Textdatei aufsummieren (dieser Ansatz ist wahrscheinlich dreimal schneller und enthält dreimal weniger Code als dessen Entsprechung in Python):


    awk '{ x += $3 } END { print x }' meinedatei

Falls man die Größen/Datumsangaben von einem Dateibaum wissen möchte, funktioniert das Folgende wie ein rekursives ls -l, aber ist leichter zu lesen als ls -lR:

    find . -type f -ls

Um Größen/Datumsangaben in einem Verzeichnisbaum zu sehen, wirkt dies wie ein umgedrehtes ls -l, ist aber einfacher zu lesen als ls -lR:

    find . -type f -ls

Angenommen innerhalb einer Textdatei, so wie ein server web log, tauch ein gewisser Wert in manchen Zeilen auf, wie z.B. ein acct_id Parameter in der URL. Falls eine Aufzählung gewünscht ist, wie viele Anfragen es jeweils für eine acct_id gibt:

    cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn


Um durchgehend Änderungen zu überwachen, solltest du "watch" benutzen; z.B. Dateiänderungen in einem Verzeichnis können mittels watch -d -n 2 'ls -rtlh | tail' überwacht werden, während du Deine Wifi Einstellungen mittels watch -d -n 2 ifconfig auf Fehler überprüfen kannst.


Führe diese Funktion aus, um einen zufälligen Tip aus diesem Dokument zu erhalten(parst das Markdown Dokument und extrahiert ein Element)


    function taocl() {
      curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-de.md |
        pandoc -f markdown -t html |
        xmlstarlet fo --html --dropdtd |
        xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
        xmlstarlet unesc | fmt -80
    }
Eigenartig aber hilfreich


expr: Führe arithmetische oder bool'sche Operationen aus oder werte reguläre Ausdrücke aus


m4: Simpler Macro-Auswerter


yes: Gib eine Zeichenkette sehr oft aus


cal: Netter Kalender


env: Führe einen Befehl aus (nützlich für Skripte)


printenv: Gebe Umgebungsvariablen aus (nützlich zum Debuggen und für Skripte)


look: Finde englische Worte (oder Zeilen in einer Datei), die mit einer bestimmten Zeichenkette anfangen


cut, paste und join: Datenmanipulation


fmt: Formatiere Textabsätze


pr: Formatiere Text als Seiten/Spalten


fold: Breche Textzeilen um


column: Formatiere Textfelder als bündige Spalten oder Tabellen mit fester Größe


expand und unexpand: Konvertiere zwischen Tabs und Spaces


nl: Füge Zeilennummern hinzu


seq: Gib Zahlen aus


bc: Taschenrechner


factor: Faktorisiere Ganzzahlen


gpg: Verschlüsseln und Signieren von Dateien


toe: Tabelle von terminfo-Einträgen


nc: Netzwerk-Debugging und Datentransfer


socat: Socket- und TCP-Port-Weiterleitung (ähnlich wie netcat)


slurm: Visulaisierung des Netzwerkverkehrs ("traffic")


dd: Daten zwischen Dateien und Geräten bewegen


file: Identifiziere den Typ einer Datei


tree: Zeige Verzeichnisse und Unterverzeichnisse als verschachtelten Baum; wie ls aber rekursiv


stat: Datei Infomationen


time: Führe einen Befehl aus und messe die Zeit


timeout: Führe einen Befehl für eine bestimmte Zeit aus und beende ihn anschließend wieder


lockfile: Erstelle eine Semaphordatei, die nur gelöscht werden kann mit rm -f


logrotate: Rotiert, komprimiert und mailt System-Log-Dateien


watch: Führe einen Befehl wiederholt aus, wobei die Ergebnisse angezeigt und/oder Änderungen hervorgehoben werden


tac: Gebe Dateien in umgekehrter Reihenfolge aus


shuf: Zufällige Auswahl von Zeilen von einer Datei


comm: Vergleiche sortierte Dateien Zeile für Zeile


pv: Überwache den Fortschritt von Daten durch eine Pipe


hd, hexdump, xxd, biew und bvi: Ausgabe und Editieren von Binärdateien


strings: Text aus Binärdateien extrahieren


tr: Buchstabenübersetzung und -manipulation


iconv oder uconv: Konvertierung von Zeichensätzen


split und csplit: Dateien aufteilen


sponge: Liest die gesamte Eingabe, bevor sie wieder ausgegeben wird. Nützlich, um aus derselben Datei zu lesen und in diese zu schreiben, bspw. grep -v irgendwas irgendeine-datei | sponge irgendeine-datei


units: Einheiten Konvertierungen und Berechnungen; konvertiert Furlong(Achtelmeile)/Fortnights(2 Wochen) zu twips/blink (siehe /usr/share/units/definitions.units)


apg: Generiert zufällige Passwörter


xz: Hochgradige Dateikompression


ldd: Informationen zu dynamisch gelinkten Bibliotheken


nm: Symbole aus Objektdateien anzeigen


ab: Webserver benchmarken


strace: Debugging von Syscalls


mtr: Ein besseres "traceroute" zum Netzwerk-Debugging


cssh: Visuelle, nebenläufige Shell


rsync: Synchronisiere Dateien und Ordner über SSH oder im lokalen Dateisystem


wireshark and tshark: Pakete aufzeichnen und Netzwerk-Debugging


ngrep: grep für die Netzwerkschicht


host und dig: DNS-Auflösung


lsof: Prozess Datei Deskriptor und Socket Informationen


dstat: Nützliche Systemstatistiken


glances: Grobe Übersicht über zahlreiche Subsysteme


iostat: Fesplatten-Nutzungsstatistiken


mpstat: CPU-Nutzungstatistiken


vmstat: Speicher-Nutzungsstatistiken


htop: Verbesserte Version von top


last: Loginverlauf


who: Wer gerade angemeldet ist


id: Identitätsinformationen zu Benutzern/Gruppen


sar: Historische Systemstatistiken


iftop or nethogs: Netzwerknutzung durch Sockets oder Prozesse


ss: Socket-Statistiken


dmesg: Bootvorgang und System-Fehlermeldungen


sysctl: Anzeige und Konfiguration von Linux Kernel Parametern zur Laufzeit


hdparm: SATA/ATA-Festplattenmanipulation/-performanceinformationen


lsblk: Auflisten von block devices: eine Baumansicht deiner Festplatten und Partitionen


lshw, lscpu, lspci, lsusb, dmidecode: Hardware-Informationen, inklusive CPU, BIOS, RAID, Grafikkarten, Geräte, etc.


lsmod und modinfo: Auflisten und Details anzeigen von Kernelmodulen


fortune, ddate, und sl: Ähm ja, kommt darauf an, ob man Dampflokomotiven und flotte Zitate "nützlich" findet


Nur MacOS X
Diese Hinweise sind nur für MacOS relevant.


Paketverwaltung mit brew (Homebrew) und/oder port (MacPorts). Mit diesen Werkzeugen kann man viele der obrigen Programme für MacOs installieren.


Kopiere die Ausgabe eines beliebigen Befehls an eine Desktop App mit pbcopy und füge die Eingabe von einer solchen ein mit pbpaste.


Um die Option Taste als alt-Taste in einer Mac OS Konsole zu nutzen (so wie in den obrigen Befehle wie alt-b, alt-f, etc.), öffne Einstellungen -> Profile -> Tastatur und aktiviere "Benutze Option Taste als Meta Taste"


Um eine Datei mit einer Desktopanwendung zu öffnen, kann man open oder open -a /Applications/Whatever.app benutzen.


Spotlight: Dateisuche mit mdfind und Ausgabe von Metadaten (wie z.B. photo EXIF info) mit mdls.


Man sollte sich bewusst sein, dass MacOS auf BSD Unix basiert und sich viele Befehle (wie z.B. ps, ls, tail, awk, sed) bezüglich subtiler Kleinigkeiten von Linux, das stark von System V-style Unix und GNU tools beeinflusst ist, unterscheiden. Oft kann man den Unterschied daran erkennen, dass eine man-Seite die Überschrift  "BSD General Commands Manual" trägt. In manchen Fällen kann auch die GNU-Version installiert werden (wie z.B. bei gawk und gsed für GNU awk und sed). Falls manplattformübergreifende Bash-Skripte schreiben möchte, sollte man solche Befehle vermeiden (und z.B. Python oder perl in Betracht ziehen) oder sorgfätig testen.


Benutze sw_vers für OS X Systeminformationen.


Nur Windows
Diese Hinweise sind nur für Windows relevant.
Möglichkeiten, Unix-Tools unter Windows zu erhalten


Zugriff auf die Macht der Unix-Shell erhälst du unter Microsoft Windows durch die Installation von  Cygwin. Die meisten hier beschriebenen Dinge funktionieren damit ohne weiteren Aufwand.


Mit Windows 10 kannst du Bash on Ubuntu on Windows benutzen, das eine vertraute Bash-Umgebung mit Unix-Befehlszeilen-Werkzeugen. Dies erlaubt einerseits die Nutzung von Linux-Programmen auf Windows, unterstützt andererseits jedoch nicht die Ausführung von Windows-Programmen von der Bash-Konsole.


Eine weitere Option, GNU-Entwicklerwerkzeuge (etwa GCC) auf Windows zu nutzen, besteht darin, MinGW und dessen Paket MSYS, das Hilfsprogramme wie bash, gawk, make and grep beinhaltet, zu installieren. MSYS bringt allerdings nicht so viele Features mit wie etwa Cygwin. MinGW ist besonders nützlich für die Erstellung nativer Windows-Ports von Unix-Werkzeugen.


Eine andere Möglichkeit, ein wenig Unix auf dein Windows-System zu bringen, bietet Cash. Beachte allerdings, dass nur sehr wenige Unix-Befehle und Befehlszeilen-Optionen in dieser Umgebung zur Verfügung stehen.


Nützliche Windows Befehlszeilen-Werkzeugen


Du kannst die meisten Aufgaben der Windows-Systemverwaltung von der Befehlszeile ausführen und skripten, indem du den Umgang mit wmic lernst.


Native Windows Befehlszeilen Netzwerk Werkzeugen, die du nützlich finden kannst, gehören ping, ipconfig, traceroute und netstat.


Du kannst [viele nützliche Windows-Aufgaben] (http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) durch Aufrufen des Befehls Rundll32 ausführen.


Cygwin Tipps und Tricks


Installiere zusätzliche Unix-Programme mit Cygwins Paketmanager.


Benutze mintty als dein Befehlszeilenfenster.


Greife mit /dev/clipboard auf die Zwischenablage von Windows zu.


Öffne beliebige Dateien über cygstart mit deren Standardprogramm.


Greife mit regtool auf die Windows-Registry zu.


Beachte, dass der Windows-Pfad C:\ unter Cygwin zu /cygdrive/c wird und dass Cygwins / unter Windows als C:\cygwin verfügbar ist. Für die Umwandlung zwischen Cygwin- und Windows-Pfaden steht cygpath zur Verfügung. Dies ist inbesondere für Skripte nützlich, welche Windows-Programme ausführen.


Weitere Quellen

awesome-shell: Eine hilfreiche Liste von Shell-Werkzeugen und Quellen.
awesome-osx-command-line: Eine ausführliche Anleitung für die Befehlszeile unter OS X.
Strict mode, um bessere Shell-Skripte zu schreiben.
shellcheck: Ein statisches Analysetool für Shell-Skripte. Im Grunde lint für bash/sh/zsh.
Filenames and Pathnames in Shell: Entmutigend komplexe Einzelheiten darüber, wie Dateinamen in Shell-Skripts richtig eingesetzt werden.
Data Science at the Command Line: Mehr Befehle und Werkzeuge, die für "data science" hilfreich sind, aus dem gleichnamigen Buch.

Haftungsausschluss
Mit der Ausnahme einiger sehr kleiner Aufgaben ist der Code so geschrieben, dass andere ihn lesen können. Mit Macht kommt Verantwortung. Die Tatsache etwas in Bash tun zu können, heißt nicht zwangsläufig, dass du es tun solltest!
Lizenz

Dieses Werk ist lizensiert gemäß der Creative Commons Attribution-ShareAlike 4.0 International License.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/README-de.mdCopy path Blame  Blame        Latest commit HistoryHistory605 lines (348 loc) · 43.2 KB masterBreadcrumbsthe-art-of-command-line/README-de.mdTopFile metadata and controlsPreviewCodeBlame605 lines (348 loc) · 43.2 KBRaw🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
The Art of Command Line



Kurzbeschreibung
Grundlagen
Täglicher Gebrauch
Umgang mit Dateien und Daten
Fehlerbehebung auf Systemebene
Einzeiler
Eigenartig aber hilfreich
Nur MacOS X
Nur Windows
Weitere Quellen
Haftungsausschluss


Der flüssige Umgang mit der Befehlszeile (auch Kommandozeile, engl. "command line") ist eine oft vernachlässigte oder als undurchsichtig empfundene Fähigkeit, steigert jedoch Flexibilität und Produktivität eines Informatikers auf offensichtliche als auch subtile Weise. Was folgt, ist eine Auswahl an Notizen und Tipps im Umgang mit der Befehlszeile, welche ich beim Arbeiten mit Linux zu schätzen gelernt habe. Manche dieser Hinweise beinhalten Grundwissen, andere sind sehr spezifisch, fortgeschritten oder auch eigenartig. Die Seite ist nicht lang, aber wenn du alle Punkte verstanden hast und anwenden kannst, weißt du eine ganze Menge.
Vieles davon
erschien
ursprünglich
auf Quora,
aber angesichts des Interesses scheint es vielversprechend, Github zu nutzen, wo talentiertere Menschen als ich es bin kontinuierlich Verbesserungen vorschlagen können. Wenn du einen Fehler entdeckst oder etwas, das man besser machen könnte, erstelle ein Issue oder einen PR! (Lies aber bitte zuerst die Kurzbeschreibung und überprüfe bereits vorhandene Issues/PRs.)
Kurzbeschreibung
Umfang:

Diese Anleitung richtet sich an Anfänger und Fortgeschrittene. Die Ziele sind Breite (alles ist wichtig), Genauigkeit (konkrete Beispiele für die gebräuchlichsten Anwendungsfälle) und Knappheit (Dinge, die nicht wesentlich sind oder leicht anderswo nachgeschlagen werden können, sollen vermieden werden). Jeder Tipp ist in einer bestimmten Situation wesentlich oder deutlich zeitsparend gegenüber bestehenden Alternativen.
Sie ist für Linux geschrieben, mit der Ausnahme der Abschnitte "Nur MacOS X" und "Nur Windows". Viele der anderen Punkte lassen sich nutzen oder sind installierbar auf anderen Unices oder MacOS (oder sogar Cygwin).
Der Fokus liegt auf interaktiver Bash, allerdings gelten viele Tipps auch auf anderen Shells sowie für allgemeines Bash-Skripting.
Sie beinhaltet sowohl "normale" Unix-Befehle als auch solche, die bestimmte installierte Pakete voaussetzen -- sofern sie wichtig genug sind, dass sie die Aufnahme in diese Anleitung verdienen.

Hinweise:

Um eine Seite nicht zu sprengen, ist ihr Inhalt durchgängig anhand von Verweisen aufgelistet. du bist schlau genug, anderswo zusätzliche Informationen nachzuschlagen, sobald du die Idee bzw. den Befehl dahinter kennst. Verwende apt-get, yum, dnf, pacman, pip oder brew, um ggf. neue Programme zu installieren.
Verwende Explainshell, um einen hilfreichen Einblick zu erhalten, was es mit Befehlen, Optionen, Pipes etc. auf sich hat.

Grundlagen


Lerne Bash-Grundlagen. Tatsächlich, gib man bash ein und überfliege das Ganze zumindest; es ist leicht zu verstehen und nicht allzu lang. Alternative Shells sind nett, aber Bash ist mächtig und immer verfügbar (nur zsh, fish, etc. zu lernen ist auf dem eigenen Laptop vielleicht reizvoll, beschränkt jedoch deine Möglichkeiten in vielerlei Hinsicht, etwa beim Arbeiten mit bestehenden Servern).


Lerne mindestens einen Text-basierten Editor zu benutzen. Idealerweise Vim (vi), da es letztlich keinen vergleichbaren Mitbewerber für gelegentliche Einsätze in einem Terminal gibt (selbst dann, wenn man eine große Entwicklungsumgebung wie Emacs oder die meiste Zeit einen modernen Hipster-Editor benutzt).


Wisse, wie man Dokumentationen mit man liest (für Neugierige, man man listet Abschnittsnummern, bspw. stehen unter 1 "reguläre" Befehle, 5 beinhaltet Dateien/Konventionen und unter 8 solche zur Rechnerverwaltung). Finde man-Seiten ("man pages") mit apropos. Wisse, dass manche Befehle keine ausführbaren Dateien, sondern Bash-Builtins sind, und dass du Hilfe zu diesen mit help und help -d erhälst.


Lerne etwas über die Umleitung von Ein- und Ausgaben per > und < sowie | für Pipes. Wisse, dass > die Ausgabedatei überschreibt und >> etwas anhängt. Lerne etwas über stdout und stderr.


Lerne etwas über die Dateinamenerweiterung mittels * (und eventuell ? und [...]) sowie Anführungszeichen, etwa den Unterschied zwischen doppelten " und einfachen '. (Mehr zur Variablenerweiterung findest du unten.)


Mach dich vertraut mit Bash-Jobmanagement: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Kenne ssh und die Grundlagen passwortloser Authentifizierung mittels ssh-agent, ssh-add, etc.


Grundlegende Dateiverwaltung: ls and ls -l (und spezieller, lerne die Funktion jeder einzelnen Spalte von ls -l kennen), less, head, tail und tail -f (oder noch besser, less +F), ln und ln -s (lerne die Unterschiede und Vorteile von Hard- und Softlinks), chown, chmod, du (für eine Kurzzusammenfassung der Festplattenbelegung: du -hs *). Für Dateisystemmanagement df, mount, fdisk, mkfs, lsblk. Lerne, was ein Inode (engl. index node) ist (ls -i oder df -i).


Grundlagen der Netzwerkverwaltung: ip oder ifconfig, dig.


Lerne etwas über Versionskontrolle und benutze ein entsprechendes System, wie etwa git.


Kenne reguläre Ausdrücke gut, und die verschiedenen Statusindikatoren zu grep/egrep. Die Optionen -i, -o, -v, -A, -B, und -C sind gut zu wissen.


Lerne den Umgang mit apt-get, yum, dnf oder pacman (je nach Linux-Distribution), um Pakete zu finden bzw. zu installieren. Und stell sicher, dass du pip hast, um Python-basierte Befehlszeilen-Werkzeuge nutzen zu können (einige der untenstehenden werden am einfachsten über pip installiert).


Täglicher Gebrauch


In Bash kannst du mit Tab Parameter vervollständigen sowie alle verfügbaren Befehle anzeigen lassen und mit ctrl-r bereits benutzte Befehle durchsuchen (drück die Kombination, gib dann deinen Suchtext ein und springe anschließend durch wiederholtes Drücken von ctrl-r durch die Suchergebnisse, mit Enter kannst du den gefundenen Befehl ausführen sowie mit der rechten Pfeiltaste in die aktuelle Zeile einfügen, um ihn zu bearbeiten).


In Bash kannst du mit ctrl-w das letzte Wort löschen und mit ctrl-u alles bis zum Anfang einer Zeile. Verwende alt-b und alt-f, um dich Wort für Wort fortzubewegen, springe mit ctrl-a zum Beginn einer Zeile,  mit ctrl-e zum Ende einer Zeile, lösche mit ctrl-k alles bis zum Ende einer Zeile und bereinige mit ctrl-l den Bildschirm. Siehe man readline für alle voreingestellten Tastenbelegungen in Bash. Davon gibt's viele. Zum Beispiel alt-. wechselt durch vorherige Parameter und alt-* erweitert ein Suchmuster.


Alternativ, falls du vi-artige Tastenbelegungen magst, verwende set -o vi (und set -o emacs, um es wiederzuholen).


Um kürzlich genutzte Befehle zu sehen, history. Es gibt außerdem viele Abkürzungen wie etwa !$ (letzter Parameter) und !! (letzter Befehl), wenngleich diese oft einfach ersetzt werden durch ctrl-r und alt-..


Um lange Befehle zu bearbeiten, kannst du sie (nachdem du deinen Editor angegeben hast, etwa mit export EDITOR=vim) mit ctrl-x ctrl-e im Editor öffnen, um mehrere Zeilen bearbeiten zu können. Oder vi-Style, escape-v.


Um kürzlich verwendete Befehle anzuzeigen, benutze history. Anschließend !n (wobei n die Nummer des Befehls ist), um es erneut auszuführen. Es gibt zudem zahlreiche Abkürzungen, die man verwenden kann, die nützlichste ist wahrscheinlich !$ für den letzten Parameter und !! für den letzten Befehl (siehe "HISTORY EXPANSION" in der man-Seite). Diese werden allerdings oft einfach ersetzt durch ctrl-r und alt-..


In dein Benutzerverzeichnis gelangst du mit cd. Auf Dateien relativ zu diesem kannst du mit dem Präfix ~ zugreifen (etwa so ~/.bashrc). In sh-Skripts heißt das Benutzerverzeichnis $HOME.


Um ins vorangegangene Arbeitsverzeichnis zu gelangen: cd -


Wenn du einen Befehl eingibst und es dir auf halbem Wege anders überlegst, drücke alt-#, um am Zeilenanfang ein # einzufügen und ihn damit als Kommentar auszuweisen (oder benutze ctrl-a, #, enter). du kannst später über die Befehlsgeschichte zurückgelangen.


Verwende xargs (oder parallel). Es ist sehr mächtig. Beachte, wie du viele Dinge pro Zeile (-L) als auch parallel (-P) ausführen kannst. Wenn du dir nicht sicher bist, ob das Richtige dabei herauskommt, verwende zunächst xargs echo. Außerdem ist-I{} nützlich. Beispiele:


    find . -name '*.py' | xargs grep irgendeine_funktion
    cat hosts | xargs -I{} ssh root@{} hostname


pstree -p liefert eine hilfreiche Anzeige des Prozessbaums.


Verwende pgrep und pkill, um Prozesse anhand eines Namens zu finden oder festzustellen (-f ist hilfreich).


Kenne die verschiedenen Signale, welche du Prozessen senden kannst. Um einen Prozess etwa zu unterbrechen, verwende kill -STOP [pid]. Für die vollständige Liste, siehe man 7 signal


Verwende nohup oder disown, wenn du einen Hintergrundprozess für immer laufen lassen willst.


Überprüfe mithörende Prozesse mit netstat -lntp oder ss -plat (für TCP; füge -u für UDP hinzu).


Siehe zudem lsof für offene Sockets und Dateien.


Siehe uptime oder w, um die laufende Betriebszeit des Systems zu erfahren,


Verwende alias, um Verknüpfungen für gebräuchliche Befehle zu erstellen. So erstellt etwa alias ll='ls -latr' den neuen Alias ll.


Speichere diese Alternativnamen ("aliases"), Shell-Einstellungen und häufig benutzte Funktionen in ~/.bashrc und stelle sie anderen Login-Shells zur Verfügung. So hast du auf dein Setup auch in allen anderen Shell-Sessions Zugriff.


Platziere Einstellungen von Umgebungsvariablen sowie Befehle, welche nach einer Anmeldung ausgeführt werden sollen, in ~/.bash_profile. Eine separate Konfiguration ist notwendig für Shells, welche du von einer grafischen Benutzeroberfläche startest sowie für cron-Jobs.


Synchronisiere deine Konfigurationsdateien (etwa .bashrc und .bash_profile) zwischen mehreren Computern mit Git.


Verstehe, dass Vorsicht geboten ist, wenn Variablen und Dateinamen Leerzeichen enthalten. Setze deine Bashvariablen daher mit Anführungszeichen: "$FOO". Bevorzuge die Optionen -0 oder -print0, um ungültige Schriftzeichen zu aktivieren und so Dateinamen zu begrenzen, bspw. locate -0 pattern | xargs -0 ls -al oder find / -print0 -type d | xargs -0 ls -al. Um in einem "for loop" Dateinamen durchzugehen, die Leerzeichen enthalten, sorge mit IFS=$'\n' dafür, dass dein IFS immer auf einer neuen Zeile steht.


Benutze in Bash-Skripts set -x (oder die Abwandlung set -v, welche unverarbeiteten Input akzeptiert, einschließlich Kommentare und unexpandierte Variablen) zum Output der Fehlerbehebung. Benutze "strict modes", es sei denn, gute Gründe sprechen dagegen: Benutze set -e, um bei Fehlern abzubrechen ("nonzero exit code"). Benutze set -u, um die Verwendung nicht gesetzer Variablen aufzuspüren. Erwäge auch set -o pipefail für Fehler in Pipes (lies jedoch mehr zu diesem Thema, wenn du es vorhast, denn es ist ein wenig heikel). Benutze bei komplizierteren Skripts auch trap bei EXIT oder ERR. Es ist eine nützliche Angewohnheit, ein Skript folgendermaßen zu beginnen, um Fehler zu erkennen und sie ggf. mit einer entsprechenden Fehlermeldung abzubrechen:


    set -euo pipefail
    trap "echo 'error: Script failed: see failed command above'" ERR

In Bash-Skripts stellen Subshells (geschrieben in runden Klammern) einen praktischen Weg dar, Befehle zusammenzufassen. Ein gebräuchliches Beispiel ist die vorübergehende Arbeit in einem anderen Arbeitsverzeichnis:

    # erledige etwas im aktuellen Verzeichnis
    (cd /irgendein/anderes/verzeichnis && anderer-befehl)
    # fahre fort im aktuellen Verzeichnis


Beachte, dass es in Bash viele Möglichkeiten gibt, Variablen zu erweitern. Überprüfen, ob eine Variable existiert: ${name:?error message}.Wenn bspw. ein Bash-Skript nur einen einzelnen Parameter benötigt, schreibe einfach input_file=${1:?usage: $0 input_file}. Arithmetische Erweiterung: i=$(( (i + 1) % 5 )). Sequenzen: {1..10}. Zeichenkette kürzen: ${var%suffix} und ${var#prefix}. Wenn bspw. var=foo.pdf, dann gibt echo ${var%.pdf}.txt die Ausgabe foo.txt aus.


Klammererweiterung mittels {...} kann dafür sorgen, ähnlichen Text seltener wiederholen zu müssen und ermöglicht die Kombination von Objekten. Das ist etwa in Fällen nützlich wie mv foo.{txt,pdf} zielverzeichnis (verschiebt beide Dateien), cp datei{,.bak} (erweitert den Ausdruck um cp datei datei.bak) oder mkdir -p test-{a,b,c}/subtest-{1,2,3} (erweitert alle denkbaren Kombinationen und erstellt einen Verzeichnisbaum).


Die Ausgabe eines Befehls kann wie eine Datei behandelt werden mit <(befehl). Das Vergleichen der lokalen /etc/hosts mit einer entfernten:


    diff /etc/hosts <(ssh andererhost cat /etc/hosts)

Beim Schreiben von Skripts wirst du deinen Code womöglich in geschweifte Klammern setzen wollen. Falls die schließende Klammer fehlt, wird dein Skript aufgrund eines Syntaxfehlers nicht ausgeführt. Das ist etwa dann sinnvoll, wenn es im Internet verfügbar ist, da ein unvollständig heruntergeladenes Skript so an der Ausführung gehindert wird:

{
    # Hier koennte dein Code stehen!
}


Kenne "here documents" in Bash, wie etwa in cat <<EOF ....


In Bash, leite sowohl den standard output als auch den standard error um mit: irgendein-befehl >logfile 2>&1. Oftmals ist es gute Praxis, einen Befehl an das verwendete Terminal zu binden, um keinen offenen Dateizugriff im standard input zu erzeugen, also </dev/null hinzuzufügen.


Verwende man ascii für eine gute ASCII-Tabelle, Mit Dezimal- und Hexadezimalwerten. Für allgemeine Informationen zu Kodierung sind man unicode, man utf-8 und man latin1 hilfreich.


Verwende screen oder tmux, um einen Bildschirm zu multiplexen, besonders hilfreich ist dies für Fernzugriffe per ssh und zur Trennung und Neuverbindung mit einer Session. Eine minimalistische Alternative allein zur Aufrechterhaltung einer Session ist dtach.


Bei SSH ist es hilfreich zu wissen, wie man einen Porttunnel mit -L oder -D (gelegentlich auch -R) einrichtet, etwa beim Zugriff auf Webseiten von einem Remote-Server.


Es kann nützlich sein, ein paar Verbesserungen an den SSH-Einstellungen vorzunehmen; so enthält bspw. diese ~/.ssh/config Einstellungen, um das Abreißen der Verbindung in bestimmten Netzwerkumgebungen zu vermeiden, verwendet Kompression (was hilfreich ist bei SCP über Verbindungen mit niedriger Bandbreite) und Multiplex-Kanäle zu demselben Server mithilfe einer lokalen Kontrolldatei:


    TCPKeepAlive=yes
    ServerAliveInterval=15
    ServerAliveCountMax=6
    Compression=yes
    ControlMaster auto
    ControlPath /tmp/%r@%h:%p
    ControlPersist yes



Einige andere Optionen im Zusammenhang mit SSH sind sicherheitsrelevant und sollten nur mit Bedacht aktiviert werden, etwa Zugriff per Subnet oder Host sowie in vertrauenswürdigen Netzwerken: StrictHostKeyChecking=no, ForwardAgent=yes.


Erwäge mosh als Alternative zu ssh, die UDP benutzt, um so abgebrochene Verbindungen zu vermeiden, was ja in gewisser Hinsicht auch komfortabel ist (benötigt Server-seitiges Setup).


Um Zugriff auf eine Datei in Oktalform zu erhalten, was zur Systemkonfiguration zwar nützlich, jedoch über ls nicht verfügbar und leicht zu vermasseln ist, verwende etwas wie


    stat -c '%A %a %n' /etc/timezone


Verwende zur interaktiven Auswahl von Werten aus dem Output eines anderen Befehls percol oder fzf.


Verwende fpp (PathPicker) zur Interaktion mit Dateien als Output eines anderen Befehls (wie etwa git).


Verwende für einen einfachen Webserver für alle Dateien im aktuellen Verzeichnis (sowie Unterverzeichnisse), der für alle in deinem Netzwerk abrufbar ist: python -m SimpleHTTPServer 7777 (für Port 7777 und Python 2) sowie python -m http.server 7777 (für Port 7777 und Python 3).


Benutze sudo, um einen Befehl als ein anderer Benutzer auszuführen. Standardmäßig ist dies die Ausführung als root; benutze -u zur Angabe eines anderen benutzers sowie -i, um dich als dieser anzumelden (du wirst nach deinem Passwort gefragt).


Benutze su benutzername oder su - benutzername, um mit der Shell zu einem anderen Benutzer zu wechseln. Füge - hinzu, um eine Umgebung zu erhalten, als hättest du dich gerade mit diesem Benutzer angemeldet. Das Weglassen des Benutzernamens führt zur Anmeldung als root. du wirst gefragt nach dem Passwort des Benutzers, als der du dich anmelden willst.


Kenne das 128K-Limit der Befehlszeile. Der "Argument list too long"-Fehler erscheint häufig, wenn auf sehr viele Dateien über Wildcards zugegriffen wird (wenn das passiert, können Alternativen wie find und xargs helfen).


Benutze den python-Interpreter als einfachen Taschenrechner (und natürlich für den Zugriff auf Python im Allgemeinen). Beispiel:


    >>> 2+3
    5

Umgang mit Dateien und Daten


Um eine Datei im aktuellen Verzeichnis anhand des Namens zu finden, find . -iname '*irgendwas*'. Um eine Datei unabhängig vom Verzeichnis anhand des Namens zu finden, verwende locate irgendwas (bedenke jedoch, dass updatedb kürzlich erstellte Datein möglicherweise noch nicht indexiert hat).


Für das allgemeine durchsuchen von (Quell-)Dateien (fortgeschrttener als grep -r), verwende ag.


Um HTML in Text zu konvertieren: lynx -dump -stdin


Für Markdown, HTML und alle möglichen Arten von Dokumentkonvertierung, versuch's mit pandoc.


Wenn du mit XML arbeiten musst, xmlstarlet ist alt, aber gut.


Für JSON, verwende jq.


Für YAML gibt's shyaml.


Für Excel- bzw. CSV-Dateien hält csvkit in2csv, csvcut, csvjoin, csvgrep, etc bereit.


Für Amazon S3 ist s3cmd praktisch und s4cmd schneller. Amazons aws sowie das verbesserte saws sind essentiell für andere AWS-bezogene Aufgaben.


Kenne sort und uniq, letzteres einschließlich der Optionen -u und -d -- siehe die Einzeiler unten. Siehe auch comm.


Kenne cut, paste und join zur Arbeit mit Textdateien. Viele Leute nutzen cut, vergessen aber join.


Kenne wc, um neue Zeilen (-l), Zeichen (-m), Wörter (-w) und Bytes (-c) zu zählen.


Kenne tee, um von stdin in eine Datei und sogar nach stdout zu kopieren, wie etwa mit ls -al | tee datei.txt.


Bei komplexeren Berechnungen, einschließlich Gruppieren, Tauschen von Feldern und statistische Berechnungen, könnte datamash passend sein.


Sei dir bewusst, dass die regionale Spracheinstellung ("locale") viele Befehlszeilen-Werkzeuge auf subtile Art und Weise beeinflusst, inklusive der Sortierreihenfolge und ihrer Performance. Die meisten Linux Installation setzen LANG oder andere lokale Variablen auf eine lokale Einstellung wie z.B. "US English". Aber sei dir bewusst, dass sich das Sortierverhalten ändern wird, falls du die "locale" änderst. Und wisse, dass "i18n"-Routinen sort und andere Befehle stark verlangsamen können. In manchen Situationen (wie den Mengen oder Identitätsfunktionen unterhalb) kann man ruhigen Gewissens langsame "i18n"-Routinen ignorieren und traditionelle byte-basierte Sortierreihenfolge nutzen, indem man export LC_ALL=C setzt.


Du kannst einem bestimmten Befehl eine Umgebung zuteilen, indem seinem Aufruf die Einstellung der Umgebungsvariable vorangestellt wird, wie hier: TZ=Pacific/Fiji date.


Kenne Grundlagen vonawk und sed für einfache Datenverarbeitung. Um z.B. alle Zahlen in der dritten Spalte einer Textdatei aufzusummieren: awk '{ x += $3 } END { print x }'. Das ist wahrscheinlich 3X schneller und 3X kürzer als das Python Äquivalent.


Um mehrere Dateien umzubenennen sowie innerhalb von Dateien zu suchen/ersetzen, probier repren aus (gelegentlich kann man auch mit rename mehrere Dateien umbenennen, aber sei vorsichtig, da dessen Funktionsweise je nach Linux-Distribution abweicht).


    # Vollständige Umbenennung von Dateinamen, Ordnern und Inhalten - foo -> bar:
    repren --full --preserve-case --from foo --to bar .
    # Backupdateien wiederherstellen - whatever.bak -> whatever:
    repren --renames --from '(.*)\.bak' --to '\1' *.bak
    # Wie oben, aber mit rename, sofern verfügbar:
    rename 's/\.bak$//' *.bak

Wie die man-Seite richtig sagt, ist rsync ein schnelles und vielseitiges Werkzeug zum Kopieren von Dateien. Es ist bekannt für das Synchronisieren zwischen Rechnern, ist lokal aber ebenso nützlich. Wenn es die Sicherheitsbestimmungen zulassen, erlaubt rsync im Gegensatz zu scp die Wiederaufnahme einer Übertragung, ohne nochmal von vorn beginnen zu müssen. Es ist zudem einer der schnellsten Wege, um große Mengen an Dateien zu löschen:

mkdir leeres-verzeichnis && rsync -r --delete leeres-verzeichnis/ verzeichnis && rmdir verzeichnis


Benutze shuf zum Mischen oder um zufällige Zeilen aus einer Datei auszuwählen.


Kenne die Optionen von sort. Benutze -n für Zahlen, oder -h um mit menschenlesbaren Zahlen umzugehen (wie z.B. von du -h). Sei dir bewusst, wie Schlüssel funktionieren (-t und -k). Sei dir insbesondere bewusst, dass du -k1,1 verwenden musst, um bezüglich des ersten Felds zu sortieren;-k1 bedeutet, sortiere anhand der ganzen Zeile. Stabiles Suchen (sort -s) kann ebenfalls nützlich sein. Um bspw. primär nach Feld 2 und sekundär nach Feld 1 zu sortieren, kannst du sort -k1,1 | sort -s -k2,2 benutzen.


Falls du jemals ein Tabulator Literal in eine Befehlszeile in Bash schreiben musst (etwa den Parameter -t für sort), drücke ctrl-v [Tab] oder schreibe $'\t' (letzteres ist besser, da man es Kopieren/Einfügen kann).


Die Standardwerkzeuge für das Patchen von Quellcode sind diff und patch. Siehe auch diffstat, um zusammenfassende Statistiken eines diffs zu erhalten. Beachte, dass diff -r für komplette Verzeichnisse funktioniert. Nutze diff -r tree1 tree2 | diffstat, um eine Übersicht aller Änderungen zu bekommen. Benutze vimdiff, um Dateien zu vergleichen und zu bearbeiten.


Benutze für Binärdateien hd, hexdump or xxd zur Erstellung einfacher Hexdumps und bvi oder biew zur binären Bearbeitung.


Ebenfalls für Binärdateien kann strings (und grep, etc.) benutzt werden, um Textpassagen zu finden.


Um Diffs für Binärdateien zu erstellen (Delta Kompression), nutze xdelta3.


Um zwischen Textkodierungen zu konvertieren, solltest du iconv probieren, oder aber uconv für fortgeschrittene Anwendungsfälle; es unterstüzt einige fortgeschrittene Unicode-Dinge. Dieser Befehl bspw. wandelt alle Buchstaben in Kleinbuchstaben um und entfernt alle Akzente (indem sie erweitert und verworfen werden):


    uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Um Dateien aufzuteilen, siehe split (Teilung anhand einer bestimmten Größe) und csplit (Teilung anhand eines bestimmten Musters).


Benutze  zless, zmore, zcat, und zgrep um mit komprimierten Dateien zu arbeiten.


Dateieigenschaften können mit chattr gesetzt werden und stellen eine niederschwelligere Alternative zu Dateiberechtungen dar. So kann man etwa, um das versehentliche Löschen einer Datei zu verhindern, eine entsprechende Flag ("immutable flag") setzen: sudo chattr +i /wichtiges/verzeichnis/oder/datei


Benutze getfacl und setfacl, um Dateiberechtigungen zu speichern und wiederherzustellen. Beispiel:


   getfacl -R /irgendein/pfad > berechtigungen.txt
   setfacl --restore=berechtigungen.txt
Fehlerbehebung auf Systemebene


Zur Fehlersuche bei Webanwendungen sind curl und curl -I hilfreich, ebenso wie ihre wget Äquivalente oder das modernere httpie.


Um den aktuellen CPU-/Festplattenstatus zu erfahren, sind die Klassiker top (oder das bessere htop), iostat und iotop. Benutze iostat -mxz 15 for basic CPU and detailed per-partition disk stats and performance insight.


Benutze für Informationen zu Netzwerkverbindungen netstat und ss.


Für eine schnelle Übersicht, was sich auf einem System abspielt, ist dstat sehr nützlich. Für einen guten Gesamtüberblick bietet sich zudem glances an.


Um den Zustand des Speichers zu erfahren, führst du am besten free und vmstat aus und verstehst deren Ausgabe. Sei dir insbesondere bewusst, dass der "cached"-Wert jener Wert ist, der vom Linux-Kernel als Dateicache genutzt wird, da dieser effektiv als zum "free"-Wert addiert werden kann.


Fehlerbehebung ("debugging") auf Java-Systemen ist ein anderes Paar Schuhe, aber ein simpler Trick für die Oracle JVM (der teilweise auch für andere JVMs funktioniert) ist kill -3 <pid>, sodass ein vollständiger Strack trace und Heap Informationen (inklusive Garbage Collection Details, die sehr informativ sein können) nach stderr/logs ausgegeben werden. Die JDK-Befehle jps, jstat, jstack, jmap sind ebenfalls nützlich. SJK-Werkzeuge sind noch weiter fortgeschritten.


Benutze mtr als ein besseres traceroute, um Netzwerkprobleme zu identifizieren.


Willst du wissen, warum eine Festplatte voll ist, dann spart ncdu Zeit gegenüber den üblichen Befehlen wie du -sh *.


Um herauszufunden, welcher Socket oder Prozess Bandbreite verbraucht, kannst du iftop oder nethogs verwenden.


Das ab-Werkzeug (ein Teil vom Apache) ist hilfreich, um schnell und pragmatisch die Performance eines Webservers zu messen. Für komplexere Messungen kannst du siege ausprobieren.


Für eine tiefergehende Netzwerk Problemsuche, wireshark, tshark, oder ngrep.


Kenne strace und ltrace. Diese können hilfreich sein, falls ein Programm fehlschlägt, hängt oder abstürzt und du weißt nicht warum, oder um einen generellen Eindruck von der Performance zu bekommen. Beachte die Profiling-Option (-c) und die Fähigkeit, sich mit laufenden Prozessen zu verbinden (-p).


Kenne ldd, um "shared libraries" zu überprüfen.


Sei in der Lage, dich mittels gdb mit einem laufenden Prozess zu verbinden und dessen "stack traces" zu holen.


Benutze /proc. Es ist manchmal unglaublich hilfreich, um Probleme in Echtzeit zu debuggen. Beispiele: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (wobei xxx die Prozess-ID / pid ist).


Bei der Frage, warum in der Vergangenheit etwas schief gelaufen ist, kann sar sehr hilfreich sein. Es zeigt historische Statistiken über CPU, Speicher, Netzwerk, etc.


Für eine genauere System und Performanceanalyse, solltest du dir stap (SystemTap), perf, und sysdig ansehen.


Finde heraus, welches Betriebssystem du nutzt mittels uname oder uname -a (allgemeine Unix-/Kernelinformationen) oder lsb_release -a (Informationen zur verwendeten Linux-Distribution)


Benutze dmesg wenn sich etwas merkdwürdig verhält (es könnte ein Hardware oder Treiber Problem sein)


Wenn du eine Datei löschst, jedoch laut du nicht der erwartete Festplattenspeicher frei wird, dann überprüfe, ob die Datei von einem Prozess verwendet wird: lsof | grep deleted | grep "dateiname"


Einzeiler
Ein paar Beispiele, wie man Befehle zusammen benutzen kann:

Manchmal ist es unglaublich hilfreich, dass man die Schnittmenge, Vereinigung und den Unterschied zwischen Textdateien via sort/uniq bilden kann. Angenommen, a und b sind Textdateien, die bereits "unique" sind. Diese Herangehensweise ist schnell und funktioniert mit Dateien beliebiger Größe, bis zu mehreren Gigabytes (sort ist nicht durch Speicher beschränkt, obwohl man eventuell die -T-Option nutzen muss, falls /tmp auf einer kleinen Root-Partition liegt). Siehe auch die Bemerkung über LC_ALL weiter oben und die -u-Option von sort (wurde oben aus Gründen der Übersichtlichkeit ausgelassen).

    cat a b | sort | uniq > c   # c ist a vereint mit b
    cat a b | sort | uniq -d > c   # c ist a geschnitten b
    cat a b b | sort | uniq -u > c   # c ist die Menge mit unterschiedlichen Elementen  a - b


Eine schnelle Überprüfung der Inhalte aller Dateien in einem Verzeichnis erreichst du mit grep . * (damit enthält jede Zeile den Dateinamen) oder head -100 * (damit erhält jede Datei eine Überschrift). Dies kann nützlich sein für Verzeichnisse, die Konfigurationsdateien enthalten wie jene in /sys, /proc und /etc.


Alle Zahlen in der dritten Spalte einer Textdatei aufsummieren (dieser Ansatz ist wahrscheinlich dreimal schneller und enthält dreimal weniger Code als dessen Entsprechung in Python):


    awk '{ x += $3 } END { print x }' meinedatei

Falls man die Größen/Datumsangaben von einem Dateibaum wissen möchte, funktioniert das Folgende wie ein rekursives ls -l, aber ist leichter zu lesen als ls -lR:

    find . -type f -ls

Um Größen/Datumsangaben in einem Verzeichnisbaum zu sehen, wirkt dies wie ein umgedrehtes ls -l, ist aber einfacher zu lesen als ls -lR:

    find . -type f -ls

Angenommen innerhalb einer Textdatei, so wie ein server web log, tauch ein gewisser Wert in manchen Zeilen auf, wie z.B. ein acct_id Parameter in der URL. Falls eine Aufzählung gewünscht ist, wie viele Anfragen es jeweils für eine acct_id gibt:

    cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn


Um durchgehend Änderungen zu überwachen, solltest du "watch" benutzen; z.B. Dateiänderungen in einem Verzeichnis können mittels watch -d -n 2 'ls -rtlh | tail' überwacht werden, während du Deine Wifi Einstellungen mittels watch -d -n 2 ifconfig auf Fehler überprüfen kannst.


Führe diese Funktion aus, um einen zufälligen Tip aus diesem Dokument zu erhalten(parst das Markdown Dokument und extrahiert ein Element)


    function taocl() {
      curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-de.md |
        pandoc -f markdown -t html |
        xmlstarlet fo --html --dropdtd |
        xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
        xmlstarlet unesc | fmt -80
    }
Eigenartig aber hilfreich


expr: Führe arithmetische oder bool'sche Operationen aus oder werte reguläre Ausdrücke aus


m4: Simpler Macro-Auswerter


yes: Gib eine Zeichenkette sehr oft aus


cal: Netter Kalender


env: Führe einen Befehl aus (nützlich für Skripte)


printenv: Gebe Umgebungsvariablen aus (nützlich zum Debuggen und für Skripte)


look: Finde englische Worte (oder Zeilen in einer Datei), die mit einer bestimmten Zeichenkette anfangen


cut, paste und join: Datenmanipulation


fmt: Formatiere Textabsätze


pr: Formatiere Text als Seiten/Spalten


fold: Breche Textzeilen um


column: Formatiere Textfelder als bündige Spalten oder Tabellen mit fester Größe


expand und unexpand: Konvertiere zwischen Tabs und Spaces


nl: Füge Zeilennummern hinzu


seq: Gib Zahlen aus


bc: Taschenrechner


factor: Faktorisiere Ganzzahlen


gpg: Verschlüsseln und Signieren von Dateien


toe: Tabelle von terminfo-Einträgen


nc: Netzwerk-Debugging und Datentransfer


socat: Socket- und TCP-Port-Weiterleitung (ähnlich wie netcat)


slurm: Visulaisierung des Netzwerkverkehrs ("traffic")


dd: Daten zwischen Dateien und Geräten bewegen


file: Identifiziere den Typ einer Datei


tree: Zeige Verzeichnisse und Unterverzeichnisse als verschachtelten Baum; wie ls aber rekursiv


stat: Datei Infomationen


time: Führe einen Befehl aus und messe die Zeit


timeout: Führe einen Befehl für eine bestimmte Zeit aus und beende ihn anschließend wieder


lockfile: Erstelle eine Semaphordatei, die nur gelöscht werden kann mit rm -f


logrotate: Rotiert, komprimiert und mailt System-Log-Dateien


watch: Führe einen Befehl wiederholt aus, wobei die Ergebnisse angezeigt und/oder Änderungen hervorgehoben werden


tac: Gebe Dateien in umgekehrter Reihenfolge aus


shuf: Zufällige Auswahl von Zeilen von einer Datei


comm: Vergleiche sortierte Dateien Zeile für Zeile


pv: Überwache den Fortschritt von Daten durch eine Pipe


hd, hexdump, xxd, biew und bvi: Ausgabe und Editieren von Binärdateien


strings: Text aus Binärdateien extrahieren


tr: Buchstabenübersetzung und -manipulation


iconv oder uconv: Konvertierung von Zeichensätzen


split und csplit: Dateien aufteilen


sponge: Liest die gesamte Eingabe, bevor sie wieder ausgegeben wird. Nützlich, um aus derselben Datei zu lesen und in diese zu schreiben, bspw. grep -v irgendwas irgendeine-datei | sponge irgendeine-datei


units: Einheiten Konvertierungen und Berechnungen; konvertiert Furlong(Achtelmeile)/Fortnights(2 Wochen) zu twips/blink (siehe /usr/share/units/definitions.units)


apg: Generiert zufällige Passwörter


xz: Hochgradige Dateikompression


ldd: Informationen zu dynamisch gelinkten Bibliotheken


nm: Symbole aus Objektdateien anzeigen


ab: Webserver benchmarken


strace: Debugging von Syscalls


mtr: Ein besseres "traceroute" zum Netzwerk-Debugging


cssh: Visuelle, nebenläufige Shell


rsync: Synchronisiere Dateien und Ordner über SSH oder im lokalen Dateisystem


wireshark and tshark: Pakete aufzeichnen und Netzwerk-Debugging


ngrep: grep für die Netzwerkschicht


host und dig: DNS-Auflösung


lsof: Prozess Datei Deskriptor und Socket Informationen


dstat: Nützliche Systemstatistiken


glances: Grobe Übersicht über zahlreiche Subsysteme


iostat: Fesplatten-Nutzungsstatistiken


mpstat: CPU-Nutzungstatistiken


vmstat: Speicher-Nutzungsstatistiken


htop: Verbesserte Version von top


last: Loginverlauf


who: Wer gerade angemeldet ist


id: Identitätsinformationen zu Benutzern/Gruppen


sar: Historische Systemstatistiken


iftop or nethogs: Netzwerknutzung durch Sockets oder Prozesse


ss: Socket-Statistiken


dmesg: Bootvorgang und System-Fehlermeldungen


sysctl: Anzeige und Konfiguration von Linux Kernel Parametern zur Laufzeit


hdparm: SATA/ATA-Festplattenmanipulation/-performanceinformationen


lsblk: Auflisten von block devices: eine Baumansicht deiner Festplatten und Partitionen


lshw, lscpu, lspci, lsusb, dmidecode: Hardware-Informationen, inklusive CPU, BIOS, RAID, Grafikkarten, Geräte, etc.


lsmod und modinfo: Auflisten und Details anzeigen von Kernelmodulen


fortune, ddate, und sl: Ähm ja, kommt darauf an, ob man Dampflokomotiven und flotte Zitate "nützlich" findet


Nur MacOS X
Diese Hinweise sind nur für MacOS relevant.


Paketverwaltung mit brew (Homebrew) und/oder port (MacPorts). Mit diesen Werkzeugen kann man viele der obrigen Programme für MacOs installieren.


Kopiere die Ausgabe eines beliebigen Befehls an eine Desktop App mit pbcopy und füge die Eingabe von einer solchen ein mit pbpaste.


Um die Option Taste als alt-Taste in einer Mac OS Konsole zu nutzen (so wie in den obrigen Befehle wie alt-b, alt-f, etc.), öffne Einstellungen -> Profile -> Tastatur und aktiviere "Benutze Option Taste als Meta Taste"


Um eine Datei mit einer Desktopanwendung zu öffnen, kann man open oder open -a /Applications/Whatever.app benutzen.


Spotlight: Dateisuche mit mdfind und Ausgabe von Metadaten (wie z.B. photo EXIF info) mit mdls.


Man sollte sich bewusst sein, dass MacOS auf BSD Unix basiert und sich viele Befehle (wie z.B. ps, ls, tail, awk, sed) bezüglich subtiler Kleinigkeiten von Linux, das stark von System V-style Unix und GNU tools beeinflusst ist, unterscheiden. Oft kann man den Unterschied daran erkennen, dass eine man-Seite die Überschrift  "BSD General Commands Manual" trägt. In manchen Fällen kann auch die GNU-Version installiert werden (wie z.B. bei gawk und gsed für GNU awk und sed). Falls manplattformübergreifende Bash-Skripte schreiben möchte, sollte man solche Befehle vermeiden (und z.B. Python oder perl in Betracht ziehen) oder sorgfätig testen.


Benutze sw_vers für OS X Systeminformationen.


Nur Windows
Diese Hinweise sind nur für Windows relevant.
Möglichkeiten, Unix-Tools unter Windows zu erhalten


Zugriff auf die Macht der Unix-Shell erhälst du unter Microsoft Windows durch die Installation von  Cygwin. Die meisten hier beschriebenen Dinge funktionieren damit ohne weiteren Aufwand.


Mit Windows 10 kannst du Bash on Ubuntu on Windows benutzen, das eine vertraute Bash-Umgebung mit Unix-Befehlszeilen-Werkzeugen. Dies erlaubt einerseits die Nutzung von Linux-Programmen auf Windows, unterstützt andererseits jedoch nicht die Ausführung von Windows-Programmen von der Bash-Konsole.


Eine weitere Option, GNU-Entwicklerwerkzeuge (etwa GCC) auf Windows zu nutzen, besteht darin, MinGW und dessen Paket MSYS, das Hilfsprogramme wie bash, gawk, make and grep beinhaltet, zu installieren. MSYS bringt allerdings nicht so viele Features mit wie etwa Cygwin. MinGW ist besonders nützlich für die Erstellung nativer Windows-Ports von Unix-Werkzeugen.


Eine andere Möglichkeit, ein wenig Unix auf dein Windows-System zu bringen, bietet Cash. Beachte allerdings, dass nur sehr wenige Unix-Befehle und Befehlszeilen-Optionen in dieser Umgebung zur Verfügung stehen.


Nützliche Windows Befehlszeilen-Werkzeugen


Du kannst die meisten Aufgaben der Windows-Systemverwaltung von der Befehlszeile ausführen und skripten, indem du den Umgang mit wmic lernst.


Native Windows Befehlszeilen Netzwerk Werkzeugen, die du nützlich finden kannst, gehören ping, ipconfig, traceroute und netstat.


Du kannst [viele nützliche Windows-Aufgaben] (http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) durch Aufrufen des Befehls Rundll32 ausführen.


Cygwin Tipps und Tricks


Installiere zusätzliche Unix-Programme mit Cygwins Paketmanager.


Benutze mintty als dein Befehlszeilenfenster.


Greife mit /dev/clipboard auf die Zwischenablage von Windows zu.


Öffne beliebige Dateien über cygstart mit deren Standardprogramm.


Greife mit regtool auf die Windows-Registry zu.


Beachte, dass der Windows-Pfad C:\ unter Cygwin zu /cygdrive/c wird und dass Cygwins / unter Windows als C:\cygwin verfügbar ist. Für die Umwandlung zwischen Cygwin- und Windows-Pfaden steht cygpath zur Verfügung. Dies ist inbesondere für Skripte nützlich, welche Windows-Programme ausführen.


Weitere Quellen

awesome-shell: Eine hilfreiche Liste von Shell-Werkzeugen und Quellen.
awesome-osx-command-line: Eine ausführliche Anleitung für die Befehlszeile unter OS X.
Strict mode, um bessere Shell-Skripte zu schreiben.
shellcheck: Ein statisches Analysetool für Shell-Skripte. Im Grunde lint für bash/sh/zsh.
Filenames and Pathnames in Shell: Entmutigend komplexe Einzelheiten darüber, wie Dateinamen in Shell-Skripts richtig eingesetzt werden.
Data Science at the Command Line: Mehr Befehle und Werkzeuge, die für "data science" hilfreich sind, aus dem gleichnamigen Buch.

Haftungsausschluss
Mit der Ausnahme einiger sehr kleiner Aufgaben ist der Code so geschrieben, dass andere ihn lesen können. Mit Macht kommt Verantwortung. Die Tatsache etwas in Bash tun zu können, heißt nicht zwangsläufig, dass du es tun solltest!
Lizenz

Dieses Werk ist lizensiert gemäß der Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\n🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
Η Τέχνη της Γραμμής Εντολών
+


Meta
Τα βασικά
Καθημερινή χρήση
Επεξεργασία αρχείων και δεδομένων
Αποσφαλμάτωση συστήματος
Εντολές σε μία γραμμή
Ασυνήθιστες αλλά χρήσιμες
Μόνο για OS X
Μόνο για Windows
Περισσότερες πηγές
Αποποίηση ευθύνης


Η ευχέρεια στη χρήση της γραμμής εντολών είναι μία δεξιότητα συχνά παραμελημένη ή που θεωρείται ότι είναι για τους λίγους.
Όμως η ευχέρια αυτή βελτιώνει την ευελιξία και την παραγωγικότητά σας ως μηχανικός τόσο με προφανείς όσο και με λιγότερο ευδιάκριτους τρόπους. Αυτή είναι μία συλλογή από σημειώσεις και συμβουλές που αφορούν τη χρήση της γραμμής εντολών και τις οποίες βρήκαμε χρήσιμες, ενώ εργαζόμασταν σε Linux. Κάποιες συμβουλές είναι εισαγωγικές και μερικές πιο συγκρεκριμένες, εξειδικευμένες ή εις βάθος. Αυτή η σελίδα δεν είναι μεγάλη, αλλά αν μπορείτε να τα θυμάστε όλα, τότε γνωρίζετε πολλά.
Αυτή η εργασία είναι αποτέλεσμα πολλών συγγραφέων και μεταφραστών.
Μέρος της
αρχικά
δημοσιεύτηκε
στο Quora,
αλλά έπειτα μετακινήθηκε στο GitHub, όπου άνθρωποι πιο ταλαντούχοι από τον αρχικό συγγραφέα έχουν κάνει πολυάριθμες βελτιώσεις.
Παρακαλώ υποβάλετε μία ερώτηση, αν έχετε μία ερώτηση σχετική με τη γραμμή εντολών. Παρακαλώ συνεισφέρετε, αν δείτε ένα λάθος ή κάτι που μπορεί να βελτιωθεί!
Meta
Αντικείμενο:

Αυτός ο οδηγός απευθύνεται τόσο σε αρχάριους όσο και σε έμπειρους. Οι στόχοι είναι το εύρος (ό,τι είναι σημαντικό), η ακρίβεια (να δοθούν συγκεκριμένα παραδείγματα για τις συνηθέστερες περιπτώσεις)και η συντομία (να αποφευχθούν πράγματα που δεν είναι αναγκαία ή παρεκβάσεις που μπορεί κανείς εύκολα να αναζητήσει αλλού). Κάθε συμβουλή είναι απαραίτητη σε κάποια περίπτωση ή εξοικονομεί χρόνο σε σημαντικό βαθμό σε σύγκριση με εναλλακτικές.
Το παρόν είναι γραμμένο για Linux, με εξαίρεση των τμημάτων «Μόνο για OS X» και «Μόνο για Windows». Πολλά από τα υπόλοιπα κομμάτια ισχύουν ή μπορούν να εγκατασταθούν σε άλλα Unices ή OS X (ή ακόμη και Cygwin).
Εστιάζεται στον διαδραστικό φλοιό Bash, αν και πολλές συμβουλές ισχύουν και για άλλους φλοιούς και γενικότερα στη συγγραφή σεναρίων (scripts) για Bash.
Περιλαμβάνει τόσο τις «τυπικές» εντολές Unix καθώς και άλλες που απαιτούν την εγκατάσταση ειδικών πακέτων λογισμικού -- αρκεί να είναι αρκετά σημαντικές ώστε να αξίζει να περιληφθούν.

Σημειώσεις:

Για να κρατηθεί το παρόν σε μία σελίδα, υπάρχει περιεχόμενο που περιλαμβάνεται έμμεσα κάνοντας αναφορά σε αυτό. Είστε αρκετά έξυπνοι ώστε να αναζητήσετε περαιτέρω λεπτομέρειες αλλού, μόλις καταλάβετε την ιδέα ή την εντολή που χρειάζεται να αναζητήσετε στο Google. Χρησιμοποιήστε apt-get, yum, dnf, pacman, pip ή brew (ανάλογα με την περίπτωση) για να εγκαταστήσετε νέα προγράμματα.
Χρησιμοποιήστε Explainshell για να έχετε μια χρήσιμη ανάλυση του τι κάνουν κάνουν εντολές, επιλογές, σωληνώσεις κλπ.

Τα βασικά


Μάθετε τα βασικά του φλοιού Bash. Πράγματι, πληκτρολογήστε man bash και τουλάχιστον ρίξτε μια ματιά σε αυτό που εμφανίζεται· είναι αρκετά εύκολο να το ακολουθήσετε κι όχι και τόσο μεγάλο. Άλλοι φλοιοί μπορεί να είναι μια χαρά, αλλά ο φλοιός Bash έχει πολλές δυνατότητες και είναι πάντα διαθέσιμος (το να μάθετε μόνο zsh, fish κλπ., αν και δελεαστικό όσο δουλεύετε στο δικό σας laptop, σας περιορίζει σε πολλές περιπτώσεις, όπως στην περίπτωση servers που ήδη υπάρχουν).


Μάθετε τουλάχιστον έναν text-based επεξεργαστή κειμένου καλά. Ο επεξεργαστής κειμένου nano είναι από τους από τους απλούστερους για βασική επεξεργασία (άνοιγμα, επεξεργασία, αποθήκευση, αναζήτηση). Όμως, για τον έμπειρο χρήστη σε ένα τερματικό κειμένου, δεν υπάρχει υποκατάστατο για τον Vim (vi), τον δύσκολο να τον μάθει κάνεις αλλά αξιόλογο, γρήγορο και ολοκληρωμένο επεξεργαστή κειμένου. Πολλοί χρησιμοποιούν ακόμη τον κλασικό Emacs, ιδιαίτερα για μεγαλύτερες εργασίες που αφορούν επεξεργασία κειμένου. (Βέβαια, κάθε σύγχρονος προγραμματιστής που εργάζεται σε ένα μεγάλο έργο είναι απίθανο να χρησιμοποιεί μόνο έναν απλό text-based επεξεργαστή κειμένου και θα πρέπει να είναι επίσης εξοικειωμένος με σύγχρονα και με γραφικό περιβάλλον IDEs και εργαλεία.)


Να γνωρίζετε πώς να διαβάζετε τεκμηρίωση με την εντολή man (για τον περίεργο, η εντολή man man εμφανίζει σε λίστα τους αριθμούς των ενοτήτων, π.χ. η 1 περιέχει τις εντολές του φλοιού, η 5 αρχεία/συμβάσεις και  η 8 είναι για διαχείριση). Αναζητήστε σελίδες man με την εντολή apropos. Να γνωρίζετε ότι μερικές εντολές δεν είναι εκτελέσιμα προγράμματα αλλά ενσωματωμένες στον φλοιό και μπορείτε να ζητήσετε βοήθεια σχετικά με αυτές με help και help -d. Μπορείτε να βρείτε αν μια εντολή είναι εκτελέσιμο πρόγραμμα, ή ενσωματωμένη στον φλοιό ή ένα ακόμη όνομα (συντόμευση) που έχει αντιστοιχηθεί στην εντολή αυτή χρησιμοποιώντας την εντολή type command.


Μάθετε για την ανακατεύθυνση της εξόδου και της εισόδου με χρήση των τελεστών > και < και για τις σωληνώσεις εντολών με χρήση του |. Να γνωρίζετε ότι ο τελεστής > αντικαθιστά το αρχείο εξόδου και ο >> προσθέτει στο τέλος του αρχείου. Μάθετε για τα stdout και stderr.


Μάθετε για την επέκταση αρχείων μπαλαντέρ (glob) με * (και ίσως του ? και [...]) και τη χρήση εισαγωγικών και τη διαφορά ανάμεσα στα διπλά " και τα μονά ' εισαγωγικά. (Δείτε περισσότερα για την επέκταση μεταβλητών παρακάτω.)


Εξοικειωθείτε με τη διαχείριση εργασιών στον Bash: &, ctrl-z, ctrl-c, jobs, fg, bg, kill κλπ.


Να γνωρίζετε την εντολή ssh και τα βασικά της αυθεντικοποίησης χωρίς κωδικό με χρήση των ssh-agent, ssh-add κλπ.


Βασική διαχείριση αρχείων: ls και ls -l (συγκεκριμένα, μάθετε τι σημαίνει κάθε στήλη που εμφανίζει η ls -l), less, head, tail και tail -f (ή ακόμη καλύτερα, less +F), ln και ln -s (μάθετε τις διαφορές και τα πλεονεκτήματα των κανονικών συνδέσμων σε σύγκριση με τους συμβολικούς), chown, chmod, du (για μία γρήγορη περίληψη της χρήσης του δίσκου: du -hs *). Για διαχείριση του συστήματος αρχείων, df, mount, fdisk, mkfs, lsblk. Μάθετε τι είναι inode (ls -i ή df -i).


Βασική διαχείριση δικτύου: ip ή ifconfig, dig, traceroute, route.


Μάθετε και χρησιμοποιήστε ένα σύστημα διαχείρισης και ελέγχου εκδόσεων, όπως το git.


Να γνωρίζετε καλά κανονικές εκφράσεις και τις διάφορες επιλογές (flags) για τις grep/egrep. Τις επιλογές -i, -o, -v, -A, -Bκαι -C αξίζει να τις γνωρίζετε.


Μάθετε να χρησιμοποιείτε τις εντολές apt-get, yum, dnf ή pacman (ανάλογα με τη διανομή του λειτουργικού σας συστήματος) για να βρίσκετε και να εγκαθιστάτε πακέτα λογισμικού. Και βεβαιωθείτε ότι έχετε την pip για να εγκαθιστάτε εργαλεία της γραμμής εντολών που βασίζονται σε Python (μερικά από τα παρακάτω είναι πιο εύκολο να εγκατασταθούν με pip).


Καθημερινή χρήση


Στον Bash, χρησιμοποιήστε Tab για να ολοκληρώσετε ορίσματα ή να εμφανίσετε σε λίστα όλες τις διαθέσιμες εντολές, ctrl-r για να αναζητήσετε στο ιστορικό των εντολών (αφού πατήσετε, πληκτρολογήστε για να αναζητήσετε, πατήστε ctrl-r επαναλαμβανόμενα για να περιηγηθείτε σε περισσότερα αποτελέσματα αναζήτησης, πατήστε Enter για να εκτελέσετε την εντολή που βρήκατε ή πατήστε το δεξί βέλος για να μεταφέρετε το αποτέλεσμα στην τρέχουσα γραμμή ώστε να μπορείτε να το επεξεργαστείτε).


Στον Bash, χρησιμοποιήστε ctrl-w για να διαγράψετε την τελευταία λέξη και ctrl-u για να διαγράψετε το περιεχόμενο από την τρέχουσα θέση του δρομέα μέχρι την αρχή της γραμμής. Χρησιμοποιήστε alt-b και alt-f για να μετακινηθείτε κατά μια λέξη, ctrl-a για να μετακινήσετε τον δρομέα στην αρχή της γραμμής, ctrl-e για να μετακινήσετε τον δρομέα στο τέλος της γραμμής, ctrl-k για να διαγράψετε ως το τέλος της γραμμής, ctrl-l για να καθαρίσετε την οθόνη. Δείτε τη man readline για όλες τις συντομεύσεις πληκτρολογίου στον Bash. Υπάρχουν πολλές. Για παράδειγμα, η alt-. επαναλαμβάνει κυκλικά τα προηγούμενα ορίσματα και η alt- αναπτύσσει ένα μπαλαντέρ (glob).


Εναλλακτικά, αν σας αρέσουν οι συντομεύσεις τύπου vi, χρησιμοποιήστε set -o vi (και set -o emacs για να επαναφέρετε).


Για την επεξεργασία μεγάλων εντολών, αφού ορίσετε τις ρυθμίσεις του επεξεργαστή κειμένου σας (για παράδειγμα export EDITOR=vim), με ctrl-x ctrl-e θα ανοίξει η τρέχουσα εντολή σε έναν επεξεργαστή κειμένου για επεξεργασία πολλών γραμμών. Ή αν έχετε ορίσει συντομεύσεις τύπου vi, escape-v.


Για να δείτε πρόσφατες εντολές χρησιμοποιήστε την εντολή history. Ακολουθήστε την με την εντολή  !n (όπου n είναι ο αριθμός της εντολής) για να την εκτελέσετε ξανά. Υπάρχουν πάρα πολλές συντομεύσεις που μπορείτε να χρησιμοποιήσετε. Από αυτές οι πιο χρήσιμες μάλλον είναι η !$ για την τελευταία παράμετρο και η !! για την τελευταία εντολή (δείτε το "HISTORY EXPANSION" στην τεκμηρίωση του φλοιού). Όμως, αυτές συχνά εύκολα αντικαθίστανται από ctrl-r και alt-..


Πηγαίνετε στον προσωπικό σας κατάλογο (home) με cd. Αποκτήστε πρόσβαση σε αρχεία που βρίσκονται σε σχετική θέση με τον προσωπικό κατάλογό σας με το πρόθεμα ~ (π.χ. ~/.bashrc). Σε σενάριο sh μπορείτε να αναφέρεστε στον προσωπικό σας κατάλογο ως $HOME.


Για να πάτε στον προηγούμενο κατάλογο όπου εργαζόσαστε: cd -.


Αν έχετε γράψει μέχρι τη μέση μία εντολή, αλλά αλλάξατε γνώμη, πατήστε alt-# για να προσθέσετε ένα# στην αρχή και να την προσθέσετε ως ένα σχόλιο (ή χρησιμοποιήστε ctrl-a, #, enter). Μπορείτε να επιστρέψετε σε αυτή αργότερα με το ιστορικό εντολών.


Χρησιμοποιήστε xargs (ή parallel). Έχει πολλές δυνατότητες. Σημειώστε ότι μπορείτε να ελέγξετε πόσα στοιχεία θα εκτελέσετε ανά γραμμή (-L) καθώς και παράλληλη εκτέλεση εντολών (-P). Αν δεν είστε σίγουρος ότι θα κάνει το σωστό, χρησιμοποιήστε πρώτα xargs echo. Επίσης, η επιλογή -I{} είναι χρήσιμη. Παραδείγματα:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p είναι μία χρήσιμη εμφάνιση του δέντρου διεργασιών.


Χρησιμοποιήστε pgrep και pkill για να αναζητήσετε ή να στείλετε σήμα σε διεργασίες με βάση το όνομά τους (η επιλογή -f είναι χρήσιμη).


Να γνωρίζετε τα διάφορα σήματα που μπορείτε να στείλετε σε διεργασίες. Για παράδειγμα, για να αναστείλετε μία διεργασία χρησιμοποιήστε kill -STOP [pid]. Για ολόκληρη τη λίστα, δείτε man 7 signal


Χρησιμοποιήστε nohup ή disown, αν θέλετε μία διεργασία παρασκηνίου να συνεχίσει να εκτελείται για πάντα.


Ελέγξτε ποιες διεργασίες είναι σε αναμονή για κλήση listen με netstat -lntp ή ss -plat (για TCP· προσθέστε -u για UDP) ή lsof -iTCP -sTCP:LISTEN -P -n (που δουλεύει επίσης σε OS X).


Δείτε επίσης lsof και fuser για ανοιχτές συνδέσεις δικτύου (sockets) και αρχεία.


Δείτε uptime ή w για να δείτε για πόσο το σύστημα βρίσκεται σε λειτουργία.


Χρησιμοποιήστε alias για να δημιουργήσετε συντομεύσεις για συχνά χρησιμοποιούμενες εντολές. Για παράδειγμα, η alias ll='ls -latr' δημιουργεί μία νέα συντόμευση ll.


Αποθηκεύστε συντομεύσεις, ρυθμίσεις φλοιού και μεθόδους που χρησιμοποιείτε συχνά στο ~/.bashrcκαι προβλέψτε ώστε οι login φλοιοί να τα διαβάζουν. Αυτό θα κάνει τις ρυθμίσεις σας διαθέσιμες κάθε φορά που χρησιμοποιείτε τον φλοιό.


Βάλτε τις ρυθμίσεις των μεταβλητών περιβάλλοντος καθώς και τις εντολές που χρειάζεται να εκτελεστούν με την είσοδό σας στο ~/.bash_profile. Ξεχωριστές ρυθμίσεις θα χρειαστούν για τους φλοιούς που εκτελούνται από είσοδο από γραφικό περιβάλλον και εργασίες cron.


Συγχρονίστε τα αρχεία με τις ρυθμίσεις σας (π.χ. .bashrc και .bash_profile) μεταξύ διαφορετικών υπολογιστών χρησιμοποιώντας Git.


Κατανοήστε ότι χρειάζεται προσοχή, όταν μεταβλητές και ονόματα αρχείων περιέχουν κενούς (whitespace) χαρακτήρες. Περικλείετε τις μεταβλητές του Bash σε εισαγωγικά, π.χ. "$FOO". Προτιμήστε τις επιλογές -0 ή -print0 για να επιτρέψετε σε κενούς χαρακτήρες να διαχωρίζουν ονόματα αρχείων, π.χ. locate -0 pattern | xargs -0 ls -al ή find / -print0 -type d | xargs -0 ls -al. Για να περάσετε ένα προς ένα από όλα τα αρχεία που περιέχουν κενούς χαρακτήρες σε έναν βρόχο επανάληψης for, ορίστε τη μεταβλητή IFS να είναι ο χαρακτήρας νέας γραμμής χρησιμοποιώντας IFS=$'\n'.


Σε σενάρια για Bash, χρησιμοποιήστε set -x (ή την παραλλαγή set -v, που γράφει τα πρωτογενή στοιχεία, όπως σχόλια και μεταβλητές πριν αντικατασταθούν) για να τα αποσφαλματώσετε. Χρησιμοποιείτε αυστηρές λειτουργίες (strict modes) εκτός κι αν έχετε σημαντικό λόγο να μην το κάνετε: Χρησιμοποιήστε set -e για να εγκαταλείψετε την εκτέλεση σε περίπτωση σφάλματος (μη μηδενικός κωδικός εξόδου). Χρησιμοποιήστε set -u για να ανιχνεύσετε τη χρήση μεταβλητών χωρίς τιμή. Έχετε υπόψη σας και την εντολή set -o pipefail, για να εμφανίσετε τα σφάλματα που προκύπτουν στο ενδιάμεσο σωληνώσεων εντολών (αλλά διαβάστε περισσότερο για αυτή, αν τη χρησιμοποιήσετε καθώς αυτό το θέμα είναι ιδιαίτερα λεπτό). Για πιο πολύπλοκα σενάρια, χρησιμοποιήστε επίσης την εντολή trap για κωδικούς εξόδου EXIT ή ERR. Μια χρήσιμη συνήθεια είναι να ξεκινάτε ένα σενάριο έτσι, κάνοντάς το να ανιχνεύει και να τερματίζει σε συνήθη σφάλματα και να τυπώνει ένα μήνυμα:


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

Σε σενάρια για Bash, οι υποφλοιοί (γραμμένοι μέσα σε παρενθέσεις) είναι βολικοί τρόποι ομαδοποίησης εντολών. Ένα συνηθισμένο παράδειγμα είναι η προσωρινή μετακίνηση σε διαφορετικό τρέχοντα κατάλογο, π.χ.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


Στον Bash, σημειώστε ότι υπάρχουν πολλοί τρόποι επέκτασης μίας μεταβλητής. Έλεγχος του αν μία μεταβλητή υπάρχει: ${name:?error message}. Για παράδειγμα, αν ένα σενάριο Bash παίρνει ένα μόνο όρισμα, απλά γράψτε input_file=${1:?usage: $0 input_file}. Χρήση μίας προεπιλεγμένης τιμής αν μία μεταβλητή είναι κενή: ${name:-default}. Αν θέλετε να προσθέσετε μία επιπλέον (προαιρετική) παράμετρο στο προηγούμενο παράδειγμα, μπορείτε να χρησιμοποιήσετε κάτι όπως: output_file=${2:-logfile}. Αν η $2 παραλείπεται και άρα είναι κενή, η τιμή της output_file θα είναι logfile. Αριθμητική επέκταση: i=$(( (i + 1) % 5 )). Ακολουθίες: {1..10}. Περικοπή αλφαριθμητικών: ${var%suffix} και ${var#prefix}. Για παράδειγμα, αν var=foo.pdf, τότε η echo ${var%.pdf}.txt τυπώνει foo.txt.


Η επέκταση με αγκύλες χρησιμοποιώντας {...} μπορεί να μειώσει τις φορές που χρειάζεται να πληκτρολογήσετε ξανά παρόμοιο κείμενο και να αυτοματοποιήσει συνδυασμούς στοιχείων. Αυτό είναι χρήσιμο σε παραδείγματα όπως mv foo.{txt,pdf} some-dir (που μετακινεί και τα δύο αρχεία), cp somefile{,.bak} (που επεκτείνεται σε cp somefile somefile.bak) ή mkdir -p test-{a,b,c}/subtest-{1,2,3} (που επεκτείνεται σε όλους τους πιθανούς συνδυασμούς και δημιουργεί ένα δέντρο καταλόγων). Η επέκταση με αγκύλες πραγματοποιείται πριν από οποιαδήποτε άλλη επέκταση.


Η σειρά των επεκτάσεων είναι: επέκταση με αγκύλες· επέκταση περισπωμένης, επέκταση παραμέτρων και μεταβλητών, αριθμητική επέκταση και αντικατάσταση εντολής (γίνεται από τα αριστερά προς τα δεξιά)· χωρισμός λέξεων· και επέκταση ονομάτων αρχείων. Για παράδειγμα, ένα εύρος τιμών όπως {1..20} δεν μπορεί να εκφραστεί με μεταβλητές χρησιμοποιώντας {$a..$b}. Χρησιμοποιήστε αντί μεταβλητών την εντολή seq ή μία δομή επανάληψης for, π.χ. seq $a $b ή for((i=a; i<=b; i++)); do ... ; done.)


Μπορείτε να χειριστείτε την έξοδο μίας εντολής ως αρχείο <(some command) (είναι γνωστό ως αντικατάσταση διεργασίας). Για παράδειγμα, συγκρίνετε το τοπικό /etc/hosts με ένα απομακρυσμένο:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

Όταν γράφετε σενάρια, ίσως θέλετε να βάλετε όλον σας τον κώδικα μέσα σε άγκριστρα. Αν το δεξί άγκιστρο λείπει, το σενάριό σας δε θα εκτελεστεί λόγω συντακτικού σφάλματος. Αυτό είναι σκόπιμο, όταν το σενάριό σας πρόκειται να μεταφορτωθεί από το διαδίκτυο, αφού έτσι εμποδίζεται η εκτέλεση σεναρίων που έχουν μερικώς ληφθεί:

{
      # Your code here
}


Να γνωρίζετε για το «here documents» στον Bash, όπως στην cat <<EOF ....


Στον Bash, ανακατευθύνετε τόσο την έξοδο όσο και την έξοδο σφαλμάτων ως εξής: some-command >logfile 2>&1 ή some-command &>logfile. Συχνά για να βεβαιωθείτε ότι μία εντολή δεν αφήνει μια σύνδεση αρχείου ανοιχτή στην είσοδο, δεσμεύοντας τον στο τερματικό που βρίσκεστε, είναι μία καλή πρακτική να προσθέτετε </dev/null.


Χρησιμοποιήστε man ascii για έναν καλό πίνακα ASCII, με δεξαεξαδικές και δεκαδικές τιμές. Για γενικές πληροφορίες που αφορούν την κωδικοποίηση, οι man unicode, man utf-8 και man latin1είναι χρήσιμες.


Χρησιμοποιήστε screen ή tmux για να ενεργοποιήσετε την πολυπλεξία της οθόνης. Αυτό είναι ιδιαίτερα χρήσιμο σε απομακρυσμένες συνεδρίες ssh και για να διακόψετε ή να επαναφέρετε μια συνεδρία. H εντολή byobu ή tmux μπορεί να βελτιώσει την οθόνη παρέχοντας περισσότερες πληροφορίες και πιο εύκολη διαχείριση. Μία πιο απλή εναλλακτική μόνο για τη διατήρηση συνεδριών είναι η dtach.


Με ssh, το να γνωρίζετε πώς να προωθήσετε μία θύρα με τις επιλογές -L ή -D (και καμιά φορά με την -R) είναι χρήσιμο, π.χ. για να έχετε πρόσβαση σε ιστοσελίδες από έναν απομακρυσμένο server.


Μπορεί να είναι χρήσιμο να κάνετε μερικές βελτιστοποιήσεις στις ssh ρυθμίσεις σας· για παράδειγμα, αυτό ~/.ssh/config περιέχει ρυθμίσεις για να αποφεύγετε τις συνδέσεις που διακόπτονται σε ορισμένα περιβάλλοντα δικτύου, χρησιμοποιεί συμπίεση (που είναι χρήσιμη με scp σε συνδέσεις με περιορισμένο εύρος ζώνης) και πολύπλεξη καναλιών στον ίδιο server με τοπικό αρχείο έλέγχου:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Μερικές άλλες επιλογές σχετικές με την ssh είναι ευαίσθητες όσον αφορά την ασφάλεια και θα πρέπει να ενεργοποιούνται με προσοχή, π.χ. ανά υποδίκτυο ή host ή σε έμπιστα δίκτυα: StrictHostKeyChecking=no, ForwardAgent=yes


´Εχετε υπόψη σας την εντολή mosh ως μία εναλλακτική της ssh που χρησιμοποιεί UDP, αποφεύγοντας τις συνδέσεις που διακόπτονται και διευκολύνοντας τη διαδικασία (απαιτεί ρύθμιση στον server).


Για να πάρετε τα δικαιώματα ενός αρχείου σε οκταδική μορφή, πράγμα που είναι χρήσιμο για την παραμετροποίηση του συστήματος, αλλά δεν είναι διαθέσιμο με την ls και είναι εύκολο να γίνει άτσαλα, χρησιμοποιήστε κάτι όπως


      stat -c '%A %a %n' /etc/timezone


Για διαδραστική επιλογή τιμών από την έξοδο μίας άλλης εντολής, χρησιμοποιήστε percol ή fzf.


Για επιλογή αρχείων με βάση την έξοδο μιας άλλη εντολής (όπως της git), χρησιμοποιήστε fpp (PathPicker).


Για έναν απλό web server και για όλα τα αρχεία στον τρέχοντα κατάλογο (και υποκαταλόγους) διαθέσιμα σε οποιονδήποτε στο δίκτυο, χρησιμοποιήστε:
python -m SimpleHTTPServer 7777 (για τη θύρα 7777 και Python 2) και python -m http.server 7777 (για τη θύρα 7777 και Python 3).


Για την εκτέλεση μίας εντολής ως άλλος χρήστης, χρησιμοποιήστε sudo. Από προεπιλογή εκτελείται ως root· χρησιμοποιήστε -u για να ορίσετε άλλον χρήστη. Χρησιμοποιήστε -i για να συνδεθείτε ως αυτός ο χρήστης. (Μπορεί να σας ζητηθεί το συνθηματικό σας.)


Για να αλλάξετε τον φλοιό σε άλλον χρήστη, χρησιμοποιήστε su username ή su - username. Το τελευταίο με "-" φορτώνει το περιβάλλον με τον ίδιο τρόπο όπως αν μόλις συνδεόταν ένας άλλος χρήστης. Παραλείποντας το username χρησιμοποιείτε την προεπιλογή root.  Αν δεν είστε root, θα σας ζητηθεί το συνθηματικό.


Έχετε υπόψη σας τον περιορισμό των 128K για τις γραμμές εντολών. Το σφάλμα «Η λίστα των ορισμάτων είναι πολύ μεγάλη» είναι κοινό, όταν γίνεται ταίριασμα με χαρακτήρα wildcard ενάντι μεγάλου αριθμού αρχείων. (Όταν συμβαίνει αυτό, εναλλακτικές όπως οι find και xargs μπορεί να βοηθήσουν.)


Για να κάνετε μια απλή πράξη αριθμητικής (και βέβαια γενικά για πρόσβαση σε Python), χρησιμοποιήστε τον διερμηνευτή python. Για παράδειγμα,


>>> 2+3
5
Επεξεργασία αρχείων και δεδομένων


Για να εντοπίσετε ένα αρχείο με βάση το όνομά του στον τρέχοντα κατάλογο, find . -iname '*something*' (ή με παρόμοιο τρόπο). Για να βρείτε ένα αρχείο με το όνομά του οπουδήποτε, χρησιμοποιήστε locate something (αλλά να έχετε στον νου σας ότι η updatedb μπορεί να μην έχει δημιουργήσει ευρετήριο για αρχεία που δημιουργήθηκαν πρόσφατα).


Για γενική αναζήτηση σε αρχεία πηγαίου κώδικα ή αρχεία δεδομένων, υπάρχουν αρκετές επιλογές πιο προχωρημένες ή γρήγορες από την grep -r, συμπεριλαμβανομένων (και κατά προσέγγιση ταξινομημένων από την πιο παλιά στη νεότερη) των ack, ag ("the silver searcher"), και rg (ripgrep).


Για να μετατρέψετε HTML σε κείμενο: lynx -dump -stdin


Για Markdown, HTML και άλλου είδους μετατροπές κειμένου, δοκιμάστε pandoc.


Αν χρειάζεται να χειριστείτε XML, η xmlstarlet είναι παλιά αλλά καλή.


Για JSON, χρησιμοποιήστε jq. Για διαδραστική χρήση, δείτε επίσης jid και jiq.


Για YAML, χρησιμοποιήστε shyaml.


Για αρχεία Excel ή CSV, το πακέτο csvkit παρέχει τις in2csv, csvcut, csvjoin, csvgrep κλπ.


Για Amazon S3, η s3cmd είναι βολική και η s4cmd είναι γρηγορότερη. Η aws της Amazon και η βελτιωμένη saws είναι απαραίτητες για εργασίες που σχετίζονται με AWS.


Να γνωρίζετε για τις sort και uniq, συμπεριλαμβανομένων των επιλογών -u και -d της uniq -- παρακάτω δείτε το κομμάτι που αφορά τις εντολές σε μία γραμμή. Δείτε επίσης την comm.


Να γνωρίζετε για τις cut, paste και join για να χειρίζεστε αρχεία κειμένου. Πολλοί χρησιμοποιούν την cut, αλλά ξεχνούν την join.


Να γνωρίζετε για τη wc για να μετράτε νέες γραμμές (-l), χαρακτήρες (-m), λέξεις (-w) και bytes (-c).


Να γνωρίζετε για την tee για να αντιγράφετε από το stdin σε ένα αρχείο κι επίσης στο stdout, όπως στην ls -al | tee file.txt.


Για πιο πολύπλοκους υπολογισμούς, όπως ομαδοποίηση, αναστροφή πεδίων και στατιστικούς υπολογισμούς, έχετε υπόψη σας την εντολή datamash.


Να γνωρίζετε ότι η τοπική διαμόρφωση του συστήματος (locale, π.χ. ελληνικό) επηρεάζει πολλά εργαλεία γραμμής εντολών με λιγότερο προφανείς τρόπους, συμπεριλαμβανομένων της σειράς ταξινόμησης (collation) και της απόδοσης. Οι περισσότερες εγκαταστάσεις Linux θα έχουν αναθέσει στη μεταβλητή LANG ή σε άλλες σχετικές με locale μεταβλητές τιμή μιας τοπική ρύθμισης όπως η Αγγλική ΗΠΑ. Αλλά να έχετε υπόψη ότι η ταξινόμηση μπορεί να αλλάξει, αν θέσετε άλλο locale. Και να γνωρίζετε ότι οι διεθνοποιημένες ρουτίνες μπορούν να κάνουν την ταξινόμηση ή άλλες εντολές να εκτελούνται πολλές φορές πιο αργά. Σε μερικές περιπτώσεις (όπως στον ορισμό διεργασιών ή της μοναδικότητας διεργασιών παρακάτω) μπορείτε με ασφάλεια να αγνοήσετε εντελώς αργές διεθνοποιημένες ρουτίνες και να χρησιμοποιήσετε παραδοσιακή ταξινόμηση με βάση bytes, χρησιμοποιώντας export LC_ALL=C.


Μπορείτε να ορίσετε ένα συγκεκριμένο περιβάλλον για μία εντολή προσθέτοντάς της ως πρόθεμα τις ρυθμίσεις της μεταβλητής περιβάλλοντος, όπως στην TZ=Pacific/Fiji date.


Να γνωρίζετε τα βασικά για τις awk και sed για απλή επεξεργασία δεδομένων. Δείτε Εντολές σε μία γραμμή για παραδείγματα.


Για να αντικαταστήσετε επί τόπου όλες τις εμφανίσεις ενός αλφαριθμητικού σε ένα ή περισσότερα αρχεία:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

Για να μετονομάσετε πολλά και/ή να αναζητήσετε και να αντικαταστήσετε σε αρχεία, δοκιμάστε την repren. (Σε ορισμένες περιπτώσεις η εντολή rename επιτρέπει επίσης πολλαπλές μετονομασίες, αλλά να είστε προσεχτικοί καθώς δε συμπεριφέρεται με τον ίδιο τρόπο σε όλες τις διανομές Linux.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

Όπως λέει η σελίδα man, η rsync είναι πράγματι ένα γρήγορο και εξαιρετικά ευέλικτο εργαλείο αντιγραφής αρχείων. Είναι γνωστή για τον συγχρονισμό μεταξύ υπολογιστών, αλλά είναι εξίσου χρήσιμη και τοπικά. Όταν οι περιορισμοί ασφάλειας το επιτρέπουν, η χρήση της rsync αντί της scp επιτρέπει τη συνέχιση μιας μεταφοράς χωρίς να ξεκινήσει από την αρχή. Επίσης, είναι ανάμεσα στους πιο γρήγορους τρόπους να διαγράψει κανείς μεγάλο αριθμό αρχείων:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


Για να παρακολουθείτε την πρόοδο όταν αντιγράφετε αρχεία, χρησιμοποιήστε τις pv, pycp, progress, rsync --progress, ή για αντιγραφή σε επίπεδο μπλοκ την dd status=progress.


Χρησιμοποιήστε την shuf για να ανακατέψετε ή να επιλέξετε τυχαίες γραμμές από ένα αρχείο.


Να γνωρίζετε τις επιλογές της sort. Για αριθμούς χρησιμοποιήστε τις -n, ή -h για χειρισμό αριθμών που είναι εύκολο να διαβαστούν από άνθρωπο (π.χ. από du -h). Να γνωρίζετε πώς λειτουργούν τα ορίσματα (-t και -k). Συγκεκριμένα, προσέξτε ότι χρειάζεται να γράψετε -k1,1 για να ταξινομήσετε με βάση μόνο το πρώτο πεδίο· -k1 σημαίνει ταξινόμηση με βάση όλη τη γραμμή. Η σταθερή ταξινόμηση (sort -s) μπορεί να είναι χρήσιμη. Για παράδειγμα, για να ταξινομήσετε πρώτα με βάση το πεδίο 2 και δευτερευόντως με βάση το πεδίο 1, μπορείτε να χρησιμοποιήσετε sort -k1,1 | sort -s -k2,2.


Αν πότε χρειαστεί να γράψετε έναν χαρακτήρα στηλοθέτη (tab) στη γραμμή εντολών στον Bash (π.χ. για να ταξινομήσετε με βάση το όρισμα της επιλογής -t), πιέστε ctrl-v [Tab] ή γράψτε $'\t' (το τελευταίο είναι καλύτερο, γιατί μπορείτε να το αντιγράψετε/επικολλήσετε).


Τα συνήθη εργαλεία αυτοματοποιημένης επεξεργασίας αλλαγών (patch) πηγαίου κώδικα είναι οι εντολές diff (εμφάνιση διαφορών) και patch (εφαρμογή διαφορών σε άλλο αρχείο). Επίσης, δείτε την diffstat για περίληψη στατιστικών στοιχείων της εντολής diff και sdiff για εμφάνιση διαφορών πλάι-πλάι. Σημειώστε ότι η  diff -r λειτουργεί για ολόκληρους καταλόγους. Χρησιμοποιήστε την diff -r tree1 tree2 | diffstat για μια περίληψη αλλαγών. Χρησιμοποιήστε την vimdiff για να συγκρίνετε και να επεξεργαστείτε αρχεία μέσω της διεπαφής του vim.


Για δυαδικά αρχεία, χρησιμοποιήστε τις hd, hexdump ή την xxd για απλά δεκαεξαδικά dumps και τις bvi, hexedit ή biew για επεξεργασία σε δυαδική μορφή.


Επίσης, για δυαδικά αρχεία η strings (και η grep κλπ.) σας δίνει τη δυνατότητα να βρείτε κομματάκια κειμένου που κρύβονται σ' αυτά.


Για δυαδικές διαφορές (συμπίεση δέλτα), χρησιμοποιήστε xdelta3.


Για να μετατρέψετε κωδικοποίηση κειμένου, δοκιμάστε την iconv. Ή uconv για πιο προχωρημένη χρήση· υποστηρίζει πιο προχωρημένα στοιχεία του προτύπου Unicode. Για παράδειγμα:
:


      # Εμφανίζει τους δεκαεξαδικούς κωδικούς ή πραγματικά ονόματα χαρακτήρων (χρήσιμο για αποσφαλμάτωση):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Mετατρέπει σε πεζούς χαρακτήρες και απαλείφει τους τόνους (επεκτείνοντας και απορρίπτοντάς τους):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Για να σπάσετε αρχεία σε κομμάτια, δείτε τη split (για να σπάσετε με βάση το μέγεθος) και τη csplit (για να σπάσετε με βάση πρότυπο).


Ημερομηνία και ώρα: Για να πάρετε την τρέχουσα ημερομηνία και ώρα στη χρήσιμη μορφή ISO 8601, χρησιμοποιήστε date -u +"%Y-%m-%dT%H:%M:%SZ" (άλλες επιλογές είναι προβληματικές). Για να χειριστείτε εκφράσεις ημερομηνίας και χρόνου, χρησιμοποιήστε τις εντολές dateadd, datediff, strptime κλπ. από το πακέτο dateutils.


Χρησιμοποιήστε zless, zmore, zcatκαι zgrep για να χειριστείτε συμπιεσμένα αρχεία.


Ιδιότητες αρχείων μπορούν να οριστούν με την chattr και προσφέρει μία εναλλακτική για τα δικαιώματα των αρχείων σε χαμηλό επίπεδο. Για παράδειγμα, για να προστατευτείτε από κατά λάθος διαγραφή αρχείου χρησιμοποιήστε την επιλογή immutable:  sudo chattr +i /critical/directory/or/file


Χρησιμοποιήστε τις getfacl και setfacl για να αποθηκεύσετε και να επαναφέρετε δικαιώματα αρχείων. Για παράδειγμα:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

Για να δημιουργήσετε άδεια αρχεία γρήγορα, χρηρσιμοποιήστε την truncate (δημιουργεί αραιό αρχείο), τη fallocate (ext4, xfs, btrfs και ocfs2 συστήματα αρχείων), την xfs_mkfile (σχεδόν για κάθε σύστημα αρχείων, περιλαμβάνεται στο πακέτο xfsprogs), τη mkfile (για συστήματα τύπου Unix όπως Solaris, Mac OS).

Αποσφαλμάτωση συστήματος


Για web αποσφαλμάτωση, οι εντολές curl και curl -I είναι χρήσιμες, ή οι ισοδύναμες wget, ή η πιο καινούρια httpie.


Για να γνωρίζετε την τρέχουσα κατάσταση του επεξεργαστή και των δίσκων, τα κλασικά εργαλεία είναι η top (ή η καλύτερη htop), η iostatκαι η iotop. Χρησιμοποιήστε την iostat -mxz 15 για βασικά στατιστικά που αφορούν τον επεξεργαστή ή για λεπτομερή στατιστικά των δίσκων ανά διαμέρισμα και για να έχετε μια εικόνα της απόδοσης.


Για λεπτομέρειες που αφορούν τη σύνδεση δικτύου, χρησιμοποιήστε τη netstat και την ss.


Για μια γρήγορη επισκόπηση του τι συμβαίνει σε ένα σύστημα, η dstat είναι ιδιαίτερα χρήσιμη. Για καλύτερη επισκόπηση με λεπτομέρειες, χρησιμοποιήστε glances.


Για να γνωρίζετε την κατάσταση της μνήμης, εκτελέστε και κατανοήστε την έξοδο των free και vmstat. Συγκεκριμένα, να έχετε υπόψη ότι η «cached» τιμή είναι μνήμη που δεσμεύει ο πυρήνας του Linux ως προσωρινά αποθηκευμένο αρχείο, ώστε στην ουσία προσμετράται ως «free» τιμή.


Η αποσφαλμάτωση συστημάτων Java είναι άλλη ιστορία, αλλά ένα απλό κόλπο για το JVM της Oracle και άλλων είναι να τρέξετε την εντολή kill -3 <pid> και ένα πλήρες ίχνος στοίβας  και περίληψη σωρού  (συμπεριλαμβανομένων και λεπτομερειών που αφορούν τη συλλογή απορριμάτων σε γενιές, που μπορεί να είναι πολύ κατατοπιστικές) θα εμφανιστούν στο stderr/logs. Οι εντολές του JDK jps, jstat, jstack, jmap είναι χρήσιμες. Τα εργαλεία SJK είναι για πιο προχωρημένους.


Χρησιμοποιήστε την mtr ως μια βελτίωση της traceroute για να ανιχνεύετε ζητήματα του δικτύου.


Για να δείτε γιατί ένας δίσκος είναι γεμάτος, η ncdu εξοικονομεί χρόνο σε σύγκριση με τις συνήθεις εντολές όπως du -sh *.


Για να βρείτε ποια δικτυακή σύνδεση ή διεργασία χρησιμοποιεί εύρος ζώνης, δοκιμάστε iftop ή nethogs.


Το εργαλείο ab (έρχεται μαζί με Apache) βοηθά στον πρόχειρο έλεγχο της απόδοσης web server. Για πιο σύνθετο έλεγχο φόρτου, δοκιμάστε siege.


Για πιο σοβαρή αποσφαλμάτωση δικτύου, wireshark, tshark, ή ngrep.


Να γνωρίζετε για τις strace και ltrace. Αυτές μπορεί να φανούν χρήσιμες, όταν ένα πρόγραμμα αποτυγχάνει, παγώνει ή καταρρέει και δε γνωρίζετε γιατί ή αν θέλετε να έχετε μία γενική ιδέα της απόδοσης. Σημειώστε την επιλογή μέτρησης (-c) και τη δυνατότητα να συνδέσετε σε μία διεργασία που εκτελείται (-p). Χρησιμοποιήστε την επιλογή για να παρακολουθείτε τις διεργασίες παιδιά (-f) για να μη χάνετε σημαντικές κλήσεις.


Να γνωρίζετε για την ldd ώστε να ελέγχετε διαμοιραζόμενες βιβλιοθήκες κλπ. — αλλά ποτέ να μην την εκτελείτε σε αρχεία που δεν εμπιστεύεστε.


Να γνωρίζετε πώς να συνδέεστε σε μία διεργασία που εκτελείται με gdb και να παίρνετε τα ίχνη της στοίβας της.


Χρησιμοποιήστε τον κατάλογο /proc. Είναι εκπληκτικά χρήσιμος ορισμένες φορές, όταν αποσφαλματώνετε ζωντανά προβλήματα. Παραδείγματα: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (όπου xxx είναι το id της διεργασίας ή pid).


Όταν αποσφαλματώνετε κάτι που ήταν λάθος στο παρελθόν, η sar μπορεί να είναι πολύ χρήσιμη. Δείχνει ιστορικά στατιστικά για επεξεργαστή, μνήμη, δίκτυο κλπ.


Για πιο εις βάθος ανάλυση συστήματος και απόδοσης, δείτε τις stap (SystemTap), perf και sysdig.


Ελέγξτε ποιο είναι το λειτουργικό σύστημά σας με uname ή uname -a (γενικές πληροφορίες Unix/πυρήνα) ή lsb_release -a (πληροφορίες διανομής Linux).


Χρησιμοποιήστε την dmesg, όποτε κάτι συμπεριφέρεται πραγματικά παράξενα (μπορεί να έχει να κάνει με υλικό ή με οδηγούς).


Αν διαγράψετε ένα αρχείο και δεν απελευθερωθεί ο σύμφωνα με την du αναμενομένος χώρος στον δίσκο, ελέξτε αν το αρχείο χρησιμοποιείται από κάποια διεργασία:
lsof | grep deleted | grep "filename-of-my-big-file"


Εντολές σε μία γραμμή
Μερικά παραδείγματα σωλήνωσης εντολών:

Είναι εξαιρετικά βοηθητικό ορισμένες φορές το γεγονός ότι μπορείτε να εφαρμόσετε τις πράξεις της τομής, της ένωσης και της διαφοράς σε αρχεία κειμένου με τις εντολές sort/comm. Έστω ότι a και b είναι ταξινομημένα αρχεία κειμένου. Αυτό είναι γρήγορο και δουλεύει σε αρχεία οποιουδήποτε μεγέθους έως πολλά gigabytes. (H εντολή sort δεν περιορίζεται από τη μνήμη, αν και ίσως χρειαστεί να χρησιμοποιήσετε την επιλογή -T, αν ο /tmp βρίσκεται σε μικρή κατάτμηση (partition). Επίσης, δείτε την παρατήρηση παραπάνω για τη μεταβλητή LC_ALL και την επιλογή -u της εντολής sort (παραλείπεται παρακάτω ώστε να είναι πιο ξεκάθαρο το παράδειγμα).

      sort -mu a b > c # το c είναι a ένωση b
      comm -12 a b > c # c είναι a τομή b
      comm -23 a b > c # το c είναι η διαφορά του a από το b


Χρησιμοποιήστε grep . * για να εξετάσετε γρήγορα το περιεχόμενο όλων των αρχείων ενός καταλόγου (έτσι κάθε γραμμή αρχείου εμφανίζεται σε ζεύγος με το όνομα του αρχείου), ή head -100 * (έτσι κάθε αρχείο έχει μια κεφαλίδα). Αυτό μπορεί να είναι χρήσιμο για καταλόγους γεμάτους με αρχεία ρυθμίσεων όπως αυτά στους καταλόγους /sys, /proc, /etc.


Η άθροιση όλων των αριθμών στην τρίτη στήλη ενός αρχείου κειμένου (αυτό είναι μάλλον 3X γρηγορότερο και απαιτεί 3X λιγότερο κώδικα από την αντίστοιχη υλοποίηση σε Python):


      awk '{ x += $3 } END { print x }' myfile

Για να δείτε μεγέθη/ημερομηνίες σε ένα δέντρο αρχείων, η παρακάτω είναι σα μια αναδρομική ls -l, αλλά είναι πιο ευανάγνωστη από ls -lR:

      find . -type f -ls

Έστω ότι έχετε ένα αρχείο κειμένου, όπως το αρχείο καταγραφής (log)/υπ ενός web server και μία συγκεκριμένη τιμή που εμφανίζεται σε μερικές γραμμές, όπως μία παράμετρος acct_id που εμφανίζεται στο URL. Αν θέλετε μια καταμέτρηση του πόσα αιτήματα έγιναν για κάθε acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


Για να παρακολουθείτε συνεχώς αλλαγές, χρησιμοποιήστε watch, π.χ. ελέγξτε αλλαγές σε αρχεία ενός καταλόγου με watch -d -n 2 'ls -rtlh | tail' ή σε ρυθμίσεις δικτύου ενώ επιδιορθώνετε τις ρυθμίσεις wifi με watch -d -n 2 ifconfig.


Εκτελέστε αυτή τη μέθοδο για να πάρετε μια τυχαία συμβουλή από αυτό το έγγραφο (αναλύει Markdown και εξάγει ένα στοιχείο):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Ασυνήθιστες αλλά χρήσιμες


expr: εκτελέστε αριθμητικές και λογικές πράξεις ή εφαρμόζετε κανονικές εκφράσεις


m4: απλός μακροεπεξεργαστής


yes: τυπώστε ένα αλφαριθμητικό πολλές φορές


cal: όμορφο ημερολόγιο


env: εκτελέστε μία εντολή (χρήσιμο σε σενάρια)


printenv: τυπώστε μεταβλητές περιβάλλοντος (χρήσιμο στην αποσφαλμάτωση και σε σενάρια)


look: βρείτε αγγλικές λέξεις (ή γραμμές σε ένα αρχείο) αρχίζοντας με ένα αλφαριθμητικό


cut, paste και join: επεξεργασία δεδομένων


fmt: μορφοποίηση παραγράφων


pr: μορφοποίηση κειμένου σε σελίδες/στήλες


fold: τύλιγμα γραμμών κειμένου


column: μορφοποίηση πεδίων κειμένου σε στοιχισμένες, σταθερού πλάτους στήλες ή πίνακες


tree: εμφανίστε καταλόγους και υποκαταλόγους σε φωλιασμένο δένδρο, όπως η ls αλλά αναδρομική


stat: πληροφορίες αρχείου


time: εκτελέστε και χρονομετρήστε μία εντολή


timeout: εκτελέστε μια εντολή για συγκεκριμένο χρονικό διάστημα και σταμάτησε τη διεργασία, όταν ολοκληρωθεί το χρονικό διάστημα αυτό


lockfile: δημιουργήστε αρχεία σημαφόρους που μπορούν να διαγραφούν μόνο με rm -f


logrotate: περιστρέψτε, συμπιέστε και στείλτε με ηλ-ταχ αρχεία καταγραφής (logs).


watch: εκτελέστε μία εντολή επαναλαμβανόμενα εμφανίζοντας αποτελέσματα ή/και επισημαίνοντας αλλαγές


when-changed: εκτελεί όποια εντολή ορίσετε, όποτε βλέπει ότι ένα αρχείο άλλαξε. Δείτε ακόμη τις inotifywait και entr.


tac: τυπώστε αρχεία ανεστραμμένα


comm: συγκρίνετε ταξινομημένα αρχεία γραμμή προς γραμμή


strings: εξάγετε κείμενο από δυαδικά αρχεία


tr: μετάφραση χαρακτήρων ή επεξεργασία


iconv ή uconv: μετατροπή κωδικοποίησης κειμένου


split και csplit: χώρισμα αρχείων


sponge: διαβάστε όλη την είσοδο πριν γράψετε σε αυτή, χρήσιμο όταν πρόκειται να διαβάσετε από ένα αρχείο και μετά να γράψετε σε αυτό, π.χ., grep -v something some-file | sponge some-file


units: μετατροπές μονάδων και υπολογισμοί· κάνει ό,τι μετατροπές μπορείτε να σκεφτείτε (δείτε επίσης /usr/share/units/definitions.units)


apg: δημιουργεί τυχαίους κωδικούς


xz: υψηλής αναλογίας συμπίεση αρχείων


ldd: πληροφορίες για δυναμικές βιβλιοθήκες


nm: σύμβολα από αντικειμενικά αρχεία


ab ή wrk: συγκριτική αξιολόγηση web servers


strace: αποσφαλμάτωση κλήσης συστήματος


mtr: καλύτερο εργαλείο traceroute για αποσφαλμάτωση δικτύου


cssh: visual concurrent shell


rsync: συγχρονισμός αρχείων και καταλόγων μέσω SSH ή σε τοπικό σύστημα αρχείων


wireshark και tshark: συλλογή πακέτων και αποσφαλμάτωση δικτύου


ngrep: grep για το επίπεδο δικτύου


host και dig: αναζητήσεις DNS


lsof: εμφανίστε περιγραφείς αρχείου και πληροφορίες δικτυακών συνδέσεων


dstat: χρήσιμα στατιστικά συστήματος


glances: υψηλού επιπέδου επισκόπηση πολλαπλών υποσυστημάτων


iostat: στατιστικά χρήσης δίσκου


mpstat: στατιστικά χρήσης επεξεργαστή


vmstat: στατιστικά χρήσης μνήμης


htop: βελτιωμένη έκδοση της top


last: ιστορικό σύνδεσης (login)


w: ποιος συνδέθηκε


id:  πληροφορίες ταυτότητας χρήστη/ομάδας


sar: ιστορικά στατιστικά συστήματος


iftop ή nethogs: χρήση δικτύου ανά δικτυακή σύνδεση ή διεργασία


ss: στατιστικά ανά δικτυακή σύνδεση


dmesg:  μηνύματα για σφάλματα κατά την εκκίνηση ή σφάλματα συστήματος


sysctl: δείτε και ρυθμίστε τις παραμέτρους του πυρήνα Linux, ενώ εκτελείται


hdparm: διαχείριση/απόδοση δίσκου SATA/ATA


lsblk: εμφανίστε σε λίστα συσκευές αποθήκευσης: μία προβολή σε δέντρο των δίσκων σας και των διαμερισμάτων τους


lshw, lscpu, lspci, lsusb, dmidecode: πληροφορίες υλικού, συμπεριλαμβανομένων επεξεργαστή, BIOS, RAID, γραφικών, συσκευών κλπ.


lsmod και modinfo: εμφανίστε σε λίστα και προβάλλετε λεπτομέρειες για λειτουργικές μονάδες του πυρήνα


fortune, ddateκαι sl: ε, λοιπόν, εξαρτάται από το αν θεωρείτε τα τρένα με ατμομηχανή και τις ρήσεις του Zippy «χρήσιμα»


Μόνο για OS X
Τα παρακάτω σημεία σχετίζονται μόνο με OS X.


Διαχείριση πακέτων λογισμικού με brew (Homebrew) και/ή port (MacPorts). Μπορούν να χρησιμοποιηθούν για εγκατάσταση σε OS X πολλών από τις παραπάνω εντολές.


Αντιγράψτε την έξοδο οποιασδήποτε εντολής σε μια desktop εφαρμογή με pbcopy και επικολλήστε στην είσοδο με pbpaste.


Για να ενεργοποιήσετε το πλήκτρο Option σε τερματικό OS X ως πλήκτρο alt (όπως χρησιμοποιείται στις παραπάνω εντολές όπως alt-b, alt-f κλπ.), ανοίξτε Προτιμήσεις -> Προφίλ -> Πληκτρολόγιο και επιλέξτε «Χρήση Option ως μετα-πλήκτρου».


Για να ανοίξετε ένα αρχείο με μια desktop εφαρμογή χρησιμοποιήστε open ή open -a /Applications/Whatever.app.


Spotlight: Αναζητήστε αρχεία με mdfind και εμφανίστε σε λίστα μεταδεδομένα (όπως τις πληροφορίες EXIF μιας φωτογραφίας) με mdls.


Έχετε υπόψη σας ότι το OS X βασίζεται σε BSD Unix και πολλές εντολές (για παράδειγμα ps, ls, tail, awk, sed) έχουν μικρές διαφορές από το Linux, που έχει ευρέως επηρεαστεί από το System V-style Unix και τα εργαλεία GNU. Συνήθως μπορείτε να βρίσκετε τη διαφορά επισημαίνοντας ότι μια man σελίδα έχει την επικεφαλίδα «Εγχειρίδιο γενικών εντολών BSD». Σε ορισμένες περιπτώσεις μπορούν επίσης να εγκατασταθούν εκδόσεις GNU, (όπως οι gawk και gsed για τις GNU awk και sed). Αν γράφετε σενάρια Bash που στοχεύετε να εκτελούνται σε διάφορες πλατφόρμες, αποφύγετε τέτοιες εντολές (για παράδειγμα, έχετε υπόψη σας την Python ή perl) ή ελέγξτε προσεχτικά.


Για να πάρετε πληροφορίες για την έκδοση OS X χρησιμοποιήστε sw_vers.


Μόνο για Windows
Τα παρακάτω σημεία σχετίζονται μόνο με Windows.
Πρόσβαση στα εργαλεία του Unix από Windows


Αποκτήστε πρόσβαση στη δύναμη του φλοιού του Unix σε περιβάλλον Microsoft Windows εγκαθιστώντας το Cygwin. Τα περισσότερα από αυτά που περιγράφονται σε αυτό το έγγραφο θα λειτουργήσουν μεμιάς.


Σε Windows 10, μπορείτε να χρησιμοποιήσετε το Bash σε Ubuntu για Windows, το οποίο παρέχει ένα περιβάλλον παρόμοιο με του Bash με εργαλεία γραμμής εντολών Unix. Έχει το πλεονέκτημα ότι επιτρέπει σε προγράμματα Linux να εκτελεστούν σε Windows. Από την άλλη πλευρά, σε αντίθεση με το περιβάλλον Cygwin, δεν επιτρέπει την εκτέλεση προγραμμάτων Windows από τη γραμμή εντολών του Bash.


Αν σας ενδιαφέρει κυρίως η χρήση των εργαλείων ανάπτυξης GNU (όπως ο μεταγλωττιστής GCC) σε Windows, σκεφτείτε τη χρήση των MinGW και MSYS, τα οποία παρέχουν εργαλεία όπως bash, gawk, make και grep. Το MSYS δεν υποστηρίζει όμως όλες τις δυνατότητες του Cygwin. Το MinGW είναι κυρίως χρήσιμο για να δημιουργήσετε εγγενείς εκδόσεις Windows εργαλείων του Unix.


Μια άλλη επιλογή για να έχετε εντολές Unix κάτω από Windows είναι το σύστημα Cash. Αυτό όμως υποστηρίζει πολύ λίγες εντολές και επιλογές του Unix.


Χρήσιμα εργαλεία της γραμμής εντολών Windows


Μπορείτε να εκτελέσετε και να γράψετε scripts για τις περισσότερες εργασίες διαχείρισης συστήματος των Windows από τη γραμμή εντολών μαθαίνοντας και χρησιμοποιώντας την wmic.


Χρήσιμα εγγενή εργαλεία της γραμμής εντολών των Windows για διαχείριση και αποσφαλμάτωση του δικτύου είναι τα ping, ipconfig, traceroute και netstat.


Πολλές [χρήσιμες λειτουργίες των Windows] (http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) μπορούν να εκτελεστούν μέσω της εντολής Rundll32.


Συμβουλές για αποδοτική χρήση του Cygwin


Εγκαταστήστε πρόσθετα προγράμματα Unix με τον διαχειριστή πακέτων του Cygwin.


Χρησιμοποιήστε το mintty ως το παράθυρο γραμμής εντολών σας.


Αποκτήστε πρόσβαση στο πρόχειρο (clipboard) των Windows μέσω του /dev/clipboard.


Εκτελέστε τη cygstart για να ανοίξετε ένα οποιοδήποτε αρχείο με την εφαρμογή που είναι ορισμένη να χρησιμοποιείται για το άνοιγμά του.


Αποκτήστε πρόσβαση στο μητρώο των Windows με regtool.


Σημειώστε ότι η διαδρομή C:\ των Windows γίνεται /cygdrive/c στο Cygwin και ότι το / του  Cygwin εμφανίζεται ως C:\cygwin στα Windows. Μετατρέψετε διαδρομές αρχείων από τη μορφή που χρησιμοποιεί το Cygwin σε αυτή που χρησιμοποιούν τα Windows και αντίστροφα με cygpath. Αυτό είναι πολύ χρήσιμο σε σενάρια που καλούν προγράμματα Windows.


Μπορείτε να εκτελέσετε και να γράψετε σενάρια για τις περισσότερες εργασίες διαχείρισης συστήματος των Windows από τη γραμμή εντολών μαθαίνοντας και χρησιμοποιώντας την wmic.


Μία άλλη επιλογή για να έχετε την εμφάνιση και την εμπειρία χρήσης Unix σε Windows είναι το Cash. Σημειώστε ότι μόνο πολύ λίγες εντολές Unix και επιλογές γραμμής εντολών είναι διαθέσιμες σε αυτό το περιβάλλον.


Περισσότερες πηγές

awesome-shell: Μία προσεγμένη λίστα με εργαλεία και πηγές σχετικές με τον φλοιό .
awesome-osx-command-line: Ένας περισσότερο εις βάθος οδηγός της γραμμής εντολών του OS X.
Strict mode για να γράφετε καλύτερα σενάρια φλοιού.
shellcheck: Ένα εργαλείο στατικής ανάλυσης για σενάρια για φλοιό. Στην ουσία, lint για bash/sh/zsh.
Filenames and Pathnames in Shell: Οι δυστυχώς περίπλοκες μικρολεπτομέρειες του πώς να διαχειριστεί κανείς σωστά ονόματα αρχείων σε σενάρια για φλοιό.
Data Science at the Command Line: Περισσότερες εντολές και εργαλεία χρήσιμα για την άσκηση της επιστήμης δεδομένων, από το βιβλίο με το ίδιο όνομα.

Αποποίηση ευθύνης
Με την εξαίρεση πολύ μικρών εργασιών, ο κώδικας πρέπει να γράφεται ώστε να μπορούν οι άλλοι να τον διαβάζουν. Η δύναμη συνεπάγεται ευθύνη. Το γεγονός ότι μπορείτε να κάνετε κάτι με Bash δε σημαίνει απαραίτητα ότι θα έπρεπε! ;)
Άδεια χρήσης

Η εργασία αυτή έχει αδειοδοτηθεί με Creative Commons Attribution-ShareAlike 4.0 International License.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/README-el.mdCopy path Blame  Blame        Latest commit HistoryHistory586 lines (350 loc) · 76.3 KB masterBreadcrumbsthe-art-of-command-line/README-el.mdTopFile metadata and controlsPreviewCodeBlame586 lines (350 loc) · 76.3 KBRaw🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
Η Τέχνη της Γραμμής Εντολών
+


Meta
Τα βασικά
Καθημερινή χρήση
Επεξεργασία αρχείων και δεδομένων
Αποσφαλμάτωση συστήματος
Εντολές σε μία γραμμή
Ασυνήθιστες αλλά χρήσιμες
Μόνο για OS X
Μόνο για Windows
Περισσότερες πηγές
Αποποίηση ευθύνης


Η ευχέρεια στη χρήση της γραμμής εντολών είναι μία δεξιότητα συχνά παραμελημένη ή που θεωρείται ότι είναι για τους λίγους.
Όμως η ευχέρια αυτή βελτιώνει την ευελιξία και την παραγωγικότητά σας ως μηχανικός τόσο με προφανείς όσο και με λιγότερο ευδιάκριτους τρόπους. Αυτή είναι μία συλλογή από σημειώσεις και συμβουλές που αφορούν τη χρήση της γραμμής εντολών και τις οποίες βρήκαμε χρήσιμες, ενώ εργαζόμασταν σε Linux. Κάποιες συμβουλές είναι εισαγωγικές και μερικές πιο συγκρεκριμένες, εξειδικευμένες ή εις βάθος. Αυτή η σελίδα δεν είναι μεγάλη, αλλά αν μπορείτε να τα θυμάστε όλα, τότε γνωρίζετε πολλά.
Αυτή η εργασία είναι αποτέλεσμα πολλών συγγραφέων και μεταφραστών.
Μέρος της
αρχικά
δημοσιεύτηκε
στο Quora,
αλλά έπειτα μετακινήθηκε στο GitHub, όπου άνθρωποι πιο ταλαντούχοι από τον αρχικό συγγραφέα έχουν κάνει πολυάριθμες βελτιώσεις.
Παρακαλώ υποβάλετε μία ερώτηση, αν έχετε μία ερώτηση σχετική με τη γραμμή εντολών. Παρακαλώ συνεισφέρετε, αν δείτε ένα λάθος ή κάτι που μπορεί να βελτιωθεί!
Meta
Αντικείμενο:

Αυτός ο οδηγός απευθύνεται τόσο σε αρχάριους όσο και σε έμπειρους. Οι στόχοι είναι το εύρος (ό,τι είναι σημαντικό), η ακρίβεια (να δοθούν συγκεκριμένα παραδείγματα για τις συνηθέστερες περιπτώσεις)και η συντομία (να αποφευχθούν πράγματα που δεν είναι αναγκαία ή παρεκβάσεις που μπορεί κανείς εύκολα να αναζητήσει αλλού). Κάθε συμβουλή είναι απαραίτητη σε κάποια περίπτωση ή εξοικονομεί χρόνο σε σημαντικό βαθμό σε σύγκριση με εναλλακτικές.
Το παρόν είναι γραμμένο για Linux, με εξαίρεση των τμημάτων «Μόνο για OS X» και «Μόνο για Windows». Πολλά από τα υπόλοιπα κομμάτια ισχύουν ή μπορούν να εγκατασταθούν σε άλλα Unices ή OS X (ή ακόμη και Cygwin).
Εστιάζεται στον διαδραστικό φλοιό Bash, αν και πολλές συμβουλές ισχύουν και για άλλους φλοιούς και γενικότερα στη συγγραφή σεναρίων (scripts) για Bash.
Περιλαμβάνει τόσο τις «τυπικές» εντολές Unix καθώς και άλλες που απαιτούν την εγκατάσταση ειδικών πακέτων λογισμικού -- αρκεί να είναι αρκετά σημαντικές ώστε να αξίζει να περιληφθούν.

Σημειώσεις:

Για να κρατηθεί το παρόν σε μία σελίδα, υπάρχει περιεχόμενο που περιλαμβάνεται έμμεσα κάνοντας αναφορά σε αυτό. Είστε αρκετά έξυπνοι ώστε να αναζητήσετε περαιτέρω λεπτομέρειες αλλού, μόλις καταλάβετε την ιδέα ή την εντολή που χρειάζεται να αναζητήσετε στο Google. Χρησιμοποιήστε apt-get, yum, dnf, pacman, pip ή brew (ανάλογα με την περίπτωση) για να εγκαταστήσετε νέα προγράμματα.
Χρησιμοποιήστε Explainshell για να έχετε μια χρήσιμη ανάλυση του τι κάνουν κάνουν εντολές, επιλογές, σωληνώσεις κλπ.

Τα βασικά


Μάθετε τα βασικά του φλοιού Bash. Πράγματι, πληκτρολογήστε man bash και τουλάχιστον ρίξτε μια ματιά σε αυτό που εμφανίζεται· είναι αρκετά εύκολο να το ακολουθήσετε κι όχι και τόσο μεγάλο. Άλλοι φλοιοί μπορεί να είναι μια χαρά, αλλά ο φλοιός Bash έχει πολλές δυνατότητες και είναι πάντα διαθέσιμος (το να μάθετε μόνο zsh, fish κλπ., αν και δελεαστικό όσο δουλεύετε στο δικό σας laptop, σας περιορίζει σε πολλές περιπτώσεις, όπως στην περίπτωση servers που ήδη υπάρχουν).


Μάθετε τουλάχιστον έναν text-based επεξεργαστή κειμένου καλά. Ο επεξεργαστής κειμένου nano είναι από τους από τους απλούστερους για βασική επεξεργασία (άνοιγμα, επεξεργασία, αποθήκευση, αναζήτηση). Όμως, για τον έμπειρο χρήστη σε ένα τερματικό κειμένου, δεν υπάρχει υποκατάστατο για τον Vim (vi), τον δύσκολο να τον μάθει κάνεις αλλά αξιόλογο, γρήγορο και ολοκληρωμένο επεξεργαστή κειμένου. Πολλοί χρησιμοποιούν ακόμη τον κλασικό Emacs, ιδιαίτερα για μεγαλύτερες εργασίες που αφορούν επεξεργασία κειμένου. (Βέβαια, κάθε σύγχρονος προγραμματιστής που εργάζεται σε ένα μεγάλο έργο είναι απίθανο να χρησιμοποιεί μόνο έναν απλό text-based επεξεργαστή κειμένου και θα πρέπει να είναι επίσης εξοικειωμένος με σύγχρονα και με γραφικό περιβάλλον IDEs και εργαλεία.)


Να γνωρίζετε πώς να διαβάζετε τεκμηρίωση με την εντολή man (για τον περίεργο, η εντολή man man εμφανίζει σε λίστα τους αριθμούς των ενοτήτων, π.χ. η 1 περιέχει τις εντολές του φλοιού, η 5 αρχεία/συμβάσεις και  η 8 είναι για διαχείριση). Αναζητήστε σελίδες man με την εντολή apropos. Να γνωρίζετε ότι μερικές εντολές δεν είναι εκτελέσιμα προγράμματα αλλά ενσωματωμένες στον φλοιό και μπορείτε να ζητήσετε βοήθεια σχετικά με αυτές με help και help -d. Μπορείτε να βρείτε αν μια εντολή είναι εκτελέσιμο πρόγραμμα, ή ενσωματωμένη στον φλοιό ή ένα ακόμη όνομα (συντόμευση) που έχει αντιστοιχηθεί στην εντολή αυτή χρησιμοποιώντας την εντολή type command.


Μάθετε για την ανακατεύθυνση της εξόδου και της εισόδου με χρήση των τελεστών > και < και για τις σωληνώσεις εντολών με χρήση του |. Να γνωρίζετε ότι ο τελεστής > αντικαθιστά το αρχείο εξόδου και ο >> προσθέτει στο τέλος του αρχείου. Μάθετε για τα stdout και stderr.


Μάθετε για την επέκταση αρχείων μπαλαντέρ (glob) με * (και ίσως του ? και [...]) και τη χρήση εισαγωγικών και τη διαφορά ανάμεσα στα διπλά " και τα μονά ' εισαγωγικά. (Δείτε περισσότερα για την επέκταση μεταβλητών παρακάτω.)


Εξοικειωθείτε με τη διαχείριση εργασιών στον Bash: &, ctrl-z, ctrl-c, jobs, fg, bg, kill κλπ.


Να γνωρίζετε την εντολή ssh και τα βασικά της αυθεντικοποίησης χωρίς κωδικό με χρήση των ssh-agent, ssh-add κλπ.


Βασική διαχείριση αρχείων: ls και ls -l (συγκεκριμένα, μάθετε τι σημαίνει κάθε στήλη που εμφανίζει η ls -l), less, head, tail και tail -f (ή ακόμη καλύτερα, less +F), ln και ln -s (μάθετε τις διαφορές και τα πλεονεκτήματα των κανονικών συνδέσμων σε σύγκριση με τους συμβολικούς), chown, chmod, du (για μία γρήγορη περίληψη της χρήσης του δίσκου: du -hs *). Για διαχείριση του συστήματος αρχείων, df, mount, fdisk, mkfs, lsblk. Μάθετε τι είναι inode (ls -i ή df -i).


Βασική διαχείριση δικτύου: ip ή ifconfig, dig, traceroute, route.


Μάθετε και χρησιμοποιήστε ένα σύστημα διαχείρισης και ελέγχου εκδόσεων, όπως το git.


Να γνωρίζετε καλά κανονικές εκφράσεις και τις διάφορες επιλογές (flags) για τις grep/egrep. Τις επιλογές -i, -o, -v, -A, -Bκαι -C αξίζει να τις γνωρίζετε.


Μάθετε να χρησιμοποιείτε τις εντολές apt-get, yum, dnf ή pacman (ανάλογα με τη διανομή του λειτουργικού σας συστήματος) για να βρίσκετε και να εγκαθιστάτε πακέτα λογισμικού. Και βεβαιωθείτε ότι έχετε την pip για να εγκαθιστάτε εργαλεία της γραμμής εντολών που βασίζονται σε Python (μερικά από τα παρακάτω είναι πιο εύκολο να εγκατασταθούν με pip).


Καθημερινή χρήση


Στον Bash, χρησιμοποιήστε Tab για να ολοκληρώσετε ορίσματα ή να εμφανίσετε σε λίστα όλες τις διαθέσιμες εντολές, ctrl-r για να αναζητήσετε στο ιστορικό των εντολών (αφού πατήσετε, πληκτρολογήστε για να αναζητήσετε, πατήστε ctrl-r επαναλαμβανόμενα για να περιηγηθείτε σε περισσότερα αποτελέσματα αναζήτησης, πατήστε Enter για να εκτελέσετε την εντολή που βρήκατε ή πατήστε το δεξί βέλος για να μεταφέρετε το αποτέλεσμα στην τρέχουσα γραμμή ώστε να μπορείτε να το επεξεργαστείτε).


Στον Bash, χρησιμοποιήστε ctrl-w για να διαγράψετε την τελευταία λέξη και ctrl-u για να διαγράψετε το περιεχόμενο από την τρέχουσα θέση του δρομέα μέχρι την αρχή της γραμμής. Χρησιμοποιήστε alt-b και alt-f για να μετακινηθείτε κατά μια λέξη, ctrl-a για να μετακινήσετε τον δρομέα στην αρχή της γραμμής, ctrl-e για να μετακινήσετε τον δρομέα στο τέλος της γραμμής, ctrl-k για να διαγράψετε ως το τέλος της γραμμής, ctrl-l για να καθαρίσετε την οθόνη. Δείτε τη man readline για όλες τις συντομεύσεις πληκτρολογίου στον Bash. Υπάρχουν πολλές. Για παράδειγμα, η alt-. επαναλαμβάνει κυκλικά τα προηγούμενα ορίσματα και η alt- αναπτύσσει ένα μπαλαντέρ (glob).


Εναλλακτικά, αν σας αρέσουν οι συντομεύσεις τύπου vi, χρησιμοποιήστε set -o vi (και set -o emacs για να επαναφέρετε).


Για την επεξεργασία μεγάλων εντολών, αφού ορίσετε τις ρυθμίσεις του επεξεργαστή κειμένου σας (για παράδειγμα export EDITOR=vim), με ctrl-x ctrl-e θα ανοίξει η τρέχουσα εντολή σε έναν επεξεργαστή κειμένου για επεξεργασία πολλών γραμμών. Ή αν έχετε ορίσει συντομεύσεις τύπου vi, escape-v.


Για να δείτε πρόσφατες εντολές χρησιμοποιήστε την εντολή history. Ακολουθήστε την με την εντολή  !n (όπου n είναι ο αριθμός της εντολής) για να την εκτελέσετε ξανά. Υπάρχουν πάρα πολλές συντομεύσεις που μπορείτε να χρησιμοποιήσετε. Από αυτές οι πιο χρήσιμες μάλλον είναι η !$ για την τελευταία παράμετρο και η !! για την τελευταία εντολή (δείτε το "HISTORY EXPANSION" στην τεκμηρίωση του φλοιού). Όμως, αυτές συχνά εύκολα αντικαθίστανται από ctrl-r και alt-..


Πηγαίνετε στον προσωπικό σας κατάλογο (home) με cd. Αποκτήστε πρόσβαση σε αρχεία που βρίσκονται σε σχετική θέση με τον προσωπικό κατάλογό σας με το πρόθεμα ~ (π.χ. ~/.bashrc). Σε σενάριο sh μπορείτε να αναφέρεστε στον προσωπικό σας κατάλογο ως $HOME.


Για να πάτε στον προηγούμενο κατάλογο όπου εργαζόσαστε: cd -.


Αν έχετε γράψει μέχρι τη μέση μία εντολή, αλλά αλλάξατε γνώμη, πατήστε alt-# για να προσθέσετε ένα# στην αρχή και να την προσθέσετε ως ένα σχόλιο (ή χρησιμοποιήστε ctrl-a, #, enter). Μπορείτε να επιστρέψετε σε αυτή αργότερα με το ιστορικό εντολών.


Χρησιμοποιήστε xargs (ή parallel). Έχει πολλές δυνατότητες. Σημειώστε ότι μπορείτε να ελέγξετε πόσα στοιχεία θα εκτελέσετε ανά γραμμή (-L) καθώς και παράλληλη εκτέλεση εντολών (-P). Αν δεν είστε σίγουρος ότι θα κάνει το σωστό, χρησιμοποιήστε πρώτα xargs echo. Επίσης, η επιλογή -I{} είναι χρήσιμη. Παραδείγματα:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p είναι μία χρήσιμη εμφάνιση του δέντρου διεργασιών.


Χρησιμοποιήστε pgrep και pkill για να αναζητήσετε ή να στείλετε σήμα σε διεργασίες με βάση το όνομά τους (η επιλογή -f είναι χρήσιμη).


Να γνωρίζετε τα διάφορα σήματα που μπορείτε να στείλετε σε διεργασίες. Για παράδειγμα, για να αναστείλετε μία διεργασία χρησιμοποιήστε kill -STOP [pid]. Για ολόκληρη τη λίστα, δείτε man 7 signal


Χρησιμοποιήστε nohup ή disown, αν θέλετε μία διεργασία παρασκηνίου να συνεχίσει να εκτελείται για πάντα.


Ελέγξτε ποιες διεργασίες είναι σε αναμονή για κλήση listen με netstat -lntp ή ss -plat (για TCP· προσθέστε -u για UDP) ή lsof -iTCP -sTCP:LISTEN -P -n (που δουλεύει επίσης σε OS X).


Δείτε επίσης lsof και fuser για ανοιχτές συνδέσεις δικτύου (sockets) και αρχεία.


Δείτε uptime ή w για να δείτε για πόσο το σύστημα βρίσκεται σε λειτουργία.


Χρησιμοποιήστε alias για να δημιουργήσετε συντομεύσεις για συχνά χρησιμοποιούμενες εντολές. Για παράδειγμα, η alias ll='ls -latr' δημιουργεί μία νέα συντόμευση ll.


Αποθηκεύστε συντομεύσεις, ρυθμίσεις φλοιού και μεθόδους που χρησιμοποιείτε συχνά στο ~/.bashrcκαι προβλέψτε ώστε οι login φλοιοί να τα διαβάζουν. Αυτό θα κάνει τις ρυθμίσεις σας διαθέσιμες κάθε φορά που χρησιμοποιείτε τον φλοιό.


Βάλτε τις ρυθμίσεις των μεταβλητών περιβάλλοντος καθώς και τις εντολές που χρειάζεται να εκτελεστούν με την είσοδό σας στο ~/.bash_profile. Ξεχωριστές ρυθμίσεις θα χρειαστούν για τους φλοιούς που εκτελούνται από είσοδο από γραφικό περιβάλλον και εργασίες cron.


Συγχρονίστε τα αρχεία με τις ρυθμίσεις σας (π.χ. .bashrc και .bash_profile) μεταξύ διαφορετικών υπολογιστών χρησιμοποιώντας Git.


Κατανοήστε ότι χρειάζεται προσοχή, όταν μεταβλητές και ονόματα αρχείων περιέχουν κενούς (whitespace) χαρακτήρες. Περικλείετε τις μεταβλητές του Bash σε εισαγωγικά, π.χ. "$FOO". Προτιμήστε τις επιλογές -0 ή -print0 για να επιτρέψετε σε κενούς χαρακτήρες να διαχωρίζουν ονόματα αρχείων, π.χ. locate -0 pattern | xargs -0 ls -al ή find / -print0 -type d | xargs -0 ls -al. Για να περάσετε ένα προς ένα από όλα τα αρχεία που περιέχουν κενούς χαρακτήρες σε έναν βρόχο επανάληψης for, ορίστε τη μεταβλητή IFS να είναι ο χαρακτήρας νέας γραμμής χρησιμοποιώντας IFS=$'\n'.


Σε σενάρια για Bash, χρησιμοποιήστε set -x (ή την παραλλαγή set -v, που γράφει τα πρωτογενή στοιχεία, όπως σχόλια και μεταβλητές πριν αντικατασταθούν) για να τα αποσφαλματώσετε. Χρησιμοποιείτε αυστηρές λειτουργίες (strict modes) εκτός κι αν έχετε σημαντικό λόγο να μην το κάνετε: Χρησιμοποιήστε set -e για να εγκαταλείψετε την εκτέλεση σε περίπτωση σφάλματος (μη μηδενικός κωδικός εξόδου). Χρησιμοποιήστε set -u για να ανιχνεύσετε τη χρήση μεταβλητών χωρίς τιμή. Έχετε υπόψη σας και την εντολή set -o pipefail, για να εμφανίσετε τα σφάλματα που προκύπτουν στο ενδιάμεσο σωληνώσεων εντολών (αλλά διαβάστε περισσότερο για αυτή, αν τη χρησιμοποιήσετε καθώς αυτό το θέμα είναι ιδιαίτερα λεπτό). Για πιο πολύπλοκα σενάρια, χρησιμοποιήστε επίσης την εντολή trap για κωδικούς εξόδου EXIT ή ERR. Μια χρήσιμη συνήθεια είναι να ξεκινάτε ένα σενάριο έτσι, κάνοντάς το να ανιχνεύει και να τερματίζει σε συνήθη σφάλματα και να τυπώνει ένα μήνυμα:


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

Σε σενάρια για Bash, οι υποφλοιοί (γραμμένοι μέσα σε παρενθέσεις) είναι βολικοί τρόποι ομαδοποίησης εντολών. Ένα συνηθισμένο παράδειγμα είναι η προσωρινή μετακίνηση σε διαφορετικό τρέχοντα κατάλογο, π.χ.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


Στον Bash, σημειώστε ότι υπάρχουν πολλοί τρόποι επέκτασης μίας μεταβλητής. Έλεγχος του αν μία μεταβλητή υπάρχει: ${name:?error message}. Για παράδειγμα, αν ένα σενάριο Bash παίρνει ένα μόνο όρισμα, απλά γράψτε input_file=${1:?usage: $0 input_file}. Χρήση μίας προεπιλεγμένης τιμής αν μία μεταβλητή είναι κενή: ${name:-default}. Αν θέλετε να προσθέσετε μία επιπλέον (προαιρετική) παράμετρο στο προηγούμενο παράδειγμα, μπορείτε να χρησιμοποιήσετε κάτι όπως: output_file=${2:-logfile}. Αν η $2 παραλείπεται και άρα είναι κενή, η τιμή της output_file θα είναι logfile. Αριθμητική επέκταση: i=$(( (i + 1) % 5 )). Ακολουθίες: {1..10}. Περικοπή αλφαριθμητικών: ${var%suffix} και ${var#prefix}. Για παράδειγμα, αν var=foo.pdf, τότε η echo ${var%.pdf}.txt τυπώνει foo.txt.


Η επέκταση με αγκύλες χρησιμοποιώντας {...} μπορεί να μειώσει τις φορές που χρειάζεται να πληκτρολογήσετε ξανά παρόμοιο κείμενο και να αυτοματοποιήσει συνδυασμούς στοιχείων. Αυτό είναι χρήσιμο σε παραδείγματα όπως mv foo.{txt,pdf} some-dir (που μετακινεί και τα δύο αρχεία), cp somefile{,.bak} (που επεκτείνεται σε cp somefile somefile.bak) ή mkdir -p test-{a,b,c}/subtest-{1,2,3} (που επεκτείνεται σε όλους τους πιθανούς συνδυασμούς και δημιουργεί ένα δέντρο καταλόγων). Η επέκταση με αγκύλες πραγματοποιείται πριν από οποιαδήποτε άλλη επέκταση.


Η σειρά των επεκτάσεων είναι: επέκταση με αγκύλες· επέκταση περισπωμένης, επέκταση παραμέτρων και μεταβλητών, αριθμητική επέκταση και αντικατάσταση εντολής (γίνεται από τα αριστερά προς τα δεξιά)· χωρισμός λέξεων· και επέκταση ονομάτων αρχείων. Για παράδειγμα, ένα εύρος τιμών όπως {1..20} δεν μπορεί να εκφραστεί με μεταβλητές χρησιμοποιώντας {$a..$b}. Χρησιμοποιήστε αντί μεταβλητών την εντολή seq ή μία δομή επανάληψης for, π.χ. seq $a $b ή for((i=a; i<=b; i++)); do ... ; done.)


Μπορείτε να χειριστείτε την έξοδο μίας εντολής ως αρχείο <(some command) (είναι γνωστό ως αντικατάσταση διεργασίας). Για παράδειγμα, συγκρίνετε το τοπικό /etc/hosts με ένα απομακρυσμένο:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)

Όταν γράφετε σενάρια, ίσως θέλετε να βάλετε όλον σας τον κώδικα μέσα σε άγκριστρα. Αν το δεξί άγκιστρο λείπει, το σενάριό σας δε θα εκτελεστεί λόγω συντακτικού σφάλματος. Αυτό είναι σκόπιμο, όταν το σενάριό σας πρόκειται να μεταφορτωθεί από το διαδίκτυο, αφού έτσι εμποδίζεται η εκτέλεση σεναρίων που έχουν μερικώς ληφθεί:

{
      # Your code here
}


Να γνωρίζετε για το «here documents» στον Bash, όπως στην cat <<EOF ....


Στον Bash, ανακατευθύνετε τόσο την έξοδο όσο και την έξοδο σφαλμάτων ως εξής: some-command >logfile 2>&1 ή some-command &>logfile. Συχνά για να βεβαιωθείτε ότι μία εντολή δεν αφήνει μια σύνδεση αρχείου ανοιχτή στην είσοδο, δεσμεύοντας τον στο τερματικό που βρίσκεστε, είναι μία καλή πρακτική να προσθέτετε </dev/null.


Χρησιμοποιήστε man ascii για έναν καλό πίνακα ASCII, με δεξαεξαδικές και δεκαδικές τιμές. Για γενικές πληροφορίες που αφορούν την κωδικοποίηση, οι man unicode, man utf-8 και man latin1είναι χρήσιμες.


Χρησιμοποιήστε screen ή tmux για να ενεργοποιήσετε την πολυπλεξία της οθόνης. Αυτό είναι ιδιαίτερα χρήσιμο σε απομακρυσμένες συνεδρίες ssh και για να διακόψετε ή να επαναφέρετε μια συνεδρία. H εντολή byobu ή tmux μπορεί να βελτιώσει την οθόνη παρέχοντας περισσότερες πληροφορίες και πιο εύκολη διαχείριση. Μία πιο απλή εναλλακτική μόνο για τη διατήρηση συνεδριών είναι η dtach.


Με ssh, το να γνωρίζετε πώς να προωθήσετε μία θύρα με τις επιλογές -L ή -D (και καμιά φορά με την -R) είναι χρήσιμο, π.χ. για να έχετε πρόσβαση σε ιστοσελίδες από έναν απομακρυσμένο server.


Μπορεί να είναι χρήσιμο να κάνετε μερικές βελτιστοποιήσεις στις ssh ρυθμίσεις σας· για παράδειγμα, αυτό ~/.ssh/config περιέχει ρυθμίσεις για να αποφεύγετε τις συνδέσεις που διακόπτονται σε ορισμένα περιβάλλοντα δικτύου, χρησιμοποιεί συμπίεση (που είναι χρήσιμη με scp σε συνδέσεις με περιορισμένο εύρος ζώνης) και πολύπλεξη καναλιών στον ίδιο server με τοπικό αρχείο έλέγχου:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Μερικές άλλες επιλογές σχετικές με την ssh είναι ευαίσθητες όσον αφορά την ασφάλεια και θα πρέπει να ενεργοποιούνται με προσοχή, π.χ. ανά υποδίκτυο ή host ή σε έμπιστα δίκτυα: StrictHostKeyChecking=no, ForwardAgent=yes


´Εχετε υπόψη σας την εντολή mosh ως μία εναλλακτική της ssh που χρησιμοποιεί UDP, αποφεύγοντας τις συνδέσεις που διακόπτονται και διευκολύνοντας τη διαδικασία (απαιτεί ρύθμιση στον server).


Για να πάρετε τα δικαιώματα ενός αρχείου σε οκταδική μορφή, πράγμα που είναι χρήσιμο για την παραμετροποίηση του συστήματος, αλλά δεν είναι διαθέσιμο με την ls και είναι εύκολο να γίνει άτσαλα, χρησιμοποιήστε κάτι όπως


      stat -c '%A %a %n' /etc/timezone


Για διαδραστική επιλογή τιμών από την έξοδο μίας άλλης εντολής, χρησιμοποιήστε percol ή fzf.


Για επιλογή αρχείων με βάση την έξοδο μιας άλλη εντολής (όπως της git), χρησιμοποιήστε fpp (PathPicker).


Για έναν απλό web server και για όλα τα αρχεία στον τρέχοντα κατάλογο (και υποκαταλόγους) διαθέσιμα σε οποιονδήποτε στο δίκτυο, χρησιμοποιήστε:
python -m SimpleHTTPServer 7777 (για τη θύρα 7777 και Python 2) και python -m http.server 7777 (για τη θύρα 7777 και Python 3).


Για την εκτέλεση μίας εντολής ως άλλος χρήστης, χρησιμοποιήστε sudo. Από προεπιλογή εκτελείται ως root· χρησιμοποιήστε -u για να ορίσετε άλλον χρήστη. Χρησιμοποιήστε -i για να συνδεθείτε ως αυτός ο χρήστης. (Μπορεί να σας ζητηθεί το συνθηματικό σας.)


Για να αλλάξετε τον φλοιό σε άλλον χρήστη, χρησιμοποιήστε su username ή su - username. Το τελευταίο με "-" φορτώνει το περιβάλλον με τον ίδιο τρόπο όπως αν μόλις συνδεόταν ένας άλλος χρήστης. Παραλείποντας το username χρησιμοποιείτε την προεπιλογή root.  Αν δεν είστε root, θα σας ζητηθεί το συνθηματικό.


Έχετε υπόψη σας τον περιορισμό των 128K για τις γραμμές εντολών. Το σφάλμα «Η λίστα των ορισμάτων είναι πολύ μεγάλη» είναι κοινό, όταν γίνεται ταίριασμα με χαρακτήρα wildcard ενάντι μεγάλου αριθμού αρχείων. (Όταν συμβαίνει αυτό, εναλλακτικές όπως οι find και xargs μπορεί να βοηθήσουν.)


Για να κάνετε μια απλή πράξη αριθμητικής (και βέβαια γενικά για πρόσβαση σε Python), χρησιμοποιήστε τον διερμηνευτή python. Για παράδειγμα,


>>> 2+3
5
Επεξεργασία αρχείων και δεδομένων


Για να εντοπίσετε ένα αρχείο με βάση το όνομά του στον τρέχοντα κατάλογο, find . -iname '*something*' (ή με παρόμοιο τρόπο). Για να βρείτε ένα αρχείο με το όνομά του οπουδήποτε, χρησιμοποιήστε locate something (αλλά να έχετε στον νου σας ότι η updatedb μπορεί να μην έχει δημιουργήσει ευρετήριο για αρχεία που δημιουργήθηκαν πρόσφατα).


Για γενική αναζήτηση σε αρχεία πηγαίου κώδικα ή αρχεία δεδομένων, υπάρχουν αρκετές επιλογές πιο προχωρημένες ή γρήγορες από την grep -r, συμπεριλαμβανομένων (και κατά προσέγγιση ταξινομημένων από την πιο παλιά στη νεότερη) των ack, ag ("the silver searcher"), και rg (ripgrep).


Για να μετατρέψετε HTML σε κείμενο: lynx -dump -stdin


Για Markdown, HTML και άλλου είδους μετατροπές κειμένου, δοκιμάστε pandoc.


Αν χρειάζεται να χειριστείτε XML, η xmlstarlet είναι παλιά αλλά καλή.


Για JSON, χρησιμοποιήστε jq. Για διαδραστική χρήση, δείτε επίσης jid και jiq.


Για YAML, χρησιμοποιήστε shyaml.


Για αρχεία Excel ή CSV, το πακέτο csvkit παρέχει τις in2csv, csvcut, csvjoin, csvgrep κλπ.


Για Amazon S3, η s3cmd είναι βολική και η s4cmd είναι γρηγορότερη. Η aws της Amazon και η βελτιωμένη saws είναι απαραίτητες για εργασίες που σχετίζονται με AWS.


Να γνωρίζετε για τις sort και uniq, συμπεριλαμβανομένων των επιλογών -u και -d της uniq -- παρακάτω δείτε το κομμάτι που αφορά τις εντολές σε μία γραμμή. Δείτε επίσης την comm.


Να γνωρίζετε για τις cut, paste και join για να χειρίζεστε αρχεία κειμένου. Πολλοί χρησιμοποιούν την cut, αλλά ξεχνούν την join.


Να γνωρίζετε για τη wc για να μετράτε νέες γραμμές (-l), χαρακτήρες (-m), λέξεις (-w) και bytes (-c).


Να γνωρίζετε για την tee για να αντιγράφετε από το stdin σε ένα αρχείο κι επίσης στο stdout, όπως στην ls -al | tee file.txt.


Για πιο πολύπλοκους υπολογισμούς, όπως ομαδοποίηση, αναστροφή πεδίων και στατιστικούς υπολογισμούς, έχετε υπόψη σας την εντολή datamash.


Να γνωρίζετε ότι η τοπική διαμόρφωση του συστήματος (locale, π.χ. ελληνικό) επηρεάζει πολλά εργαλεία γραμμής εντολών με λιγότερο προφανείς τρόπους, συμπεριλαμβανομένων της σειράς ταξινόμησης (collation) και της απόδοσης. Οι περισσότερες εγκαταστάσεις Linux θα έχουν αναθέσει στη μεταβλητή LANG ή σε άλλες σχετικές με locale μεταβλητές τιμή μιας τοπική ρύθμισης όπως η Αγγλική ΗΠΑ. Αλλά να έχετε υπόψη ότι η ταξινόμηση μπορεί να αλλάξει, αν θέσετε άλλο locale. Και να γνωρίζετε ότι οι διεθνοποιημένες ρουτίνες μπορούν να κάνουν την ταξινόμηση ή άλλες εντολές να εκτελούνται πολλές φορές πιο αργά. Σε μερικές περιπτώσεις (όπως στον ορισμό διεργασιών ή της μοναδικότητας διεργασιών παρακάτω) μπορείτε με ασφάλεια να αγνοήσετε εντελώς αργές διεθνοποιημένες ρουτίνες και να χρησιμοποιήσετε παραδοσιακή ταξινόμηση με βάση bytes, χρησιμοποιώντας export LC_ALL=C.


Μπορείτε να ορίσετε ένα συγκεκριμένο περιβάλλον για μία εντολή προσθέτοντάς της ως πρόθεμα τις ρυθμίσεις της μεταβλητής περιβάλλοντος, όπως στην TZ=Pacific/Fiji date.


Να γνωρίζετε τα βασικά για τις awk και sed για απλή επεξεργασία δεδομένων. Δείτε Εντολές σε μία γραμμή για παραδείγματα.


Για να αντικαταστήσετε επί τόπου όλες τις εμφανίσεις ενός αλφαριθμητικού σε ένα ή περισσότερα αρχεία:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

Για να μετονομάσετε πολλά και/ή να αναζητήσετε και να αντικαταστήσετε σε αρχεία, δοκιμάστε την repren. (Σε ορισμένες περιπτώσεις η εντολή rename επιτρέπει επίσης πολλαπλές μετονομασίες, αλλά να είστε προσεχτικοί καθώς δε συμπεριφέρεται με τον ίδιο τρόπο σε όλες τις διανομές Linux.)

      # Full rename of filenames, directories, and contents foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -> whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak

Όπως λέει η σελίδα man, η rsync είναι πράγματι ένα γρήγορο και εξαιρετικά ευέλικτο εργαλείο αντιγραφής αρχείων. Είναι γνωστή για τον συγχρονισμό μεταξύ υπολογιστών, αλλά είναι εξίσου χρήσιμη και τοπικά. Όταν οι περιορισμοί ασφάλειας το επιτρέπουν, η χρήση της rsync αντί της scp επιτρέπει τη συνέχιση μιας μεταφοράς χωρίς να ξεκινήσει από την αρχή. Επίσης, είναι ανάμεσα στους πιο γρήγορους τρόπους να διαγράψει κανείς μεγάλο αριθμό αρχείων:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


Για να παρακολουθείτε την πρόοδο όταν αντιγράφετε αρχεία, χρησιμοποιήστε τις pv, pycp, progress, rsync --progress, ή για αντιγραφή σε επίπεδο μπλοκ την dd status=progress.


Χρησιμοποιήστε την shuf για να ανακατέψετε ή να επιλέξετε τυχαίες γραμμές από ένα αρχείο.


Να γνωρίζετε τις επιλογές της sort. Για αριθμούς χρησιμοποιήστε τις -n, ή -h για χειρισμό αριθμών που είναι εύκολο να διαβαστούν από άνθρωπο (π.χ. από du -h). Να γνωρίζετε πώς λειτουργούν τα ορίσματα (-t και -k). Συγκεκριμένα, προσέξτε ότι χρειάζεται να γράψετε -k1,1 για να ταξινομήσετε με βάση μόνο το πρώτο πεδίο· -k1 σημαίνει ταξινόμηση με βάση όλη τη γραμμή. Η σταθερή ταξινόμηση (sort -s) μπορεί να είναι χρήσιμη. Για παράδειγμα, για να ταξινομήσετε πρώτα με βάση το πεδίο 2 και δευτερευόντως με βάση το πεδίο 1, μπορείτε να χρησιμοποιήσετε sort -k1,1 | sort -s -k2,2.


Αν πότε χρειαστεί να γράψετε έναν χαρακτήρα στηλοθέτη (tab) στη γραμμή εντολών στον Bash (π.χ. για να ταξινομήσετε με βάση το όρισμα της επιλογής -t), πιέστε ctrl-v [Tab] ή γράψτε $'\t' (το τελευταίο είναι καλύτερο, γιατί μπορείτε να το αντιγράψετε/επικολλήσετε).


Τα συνήθη εργαλεία αυτοματοποιημένης επεξεργασίας αλλαγών (patch) πηγαίου κώδικα είναι οι εντολές diff (εμφάνιση διαφορών) και patch (εφαρμογή διαφορών σε άλλο αρχείο). Επίσης, δείτε την diffstat για περίληψη στατιστικών στοιχείων της εντολής diff και sdiff για εμφάνιση διαφορών πλάι-πλάι. Σημειώστε ότι η  diff -r λειτουργεί για ολόκληρους καταλόγους. Χρησιμοποιήστε την diff -r tree1 tree2 | diffstat για μια περίληψη αλλαγών. Χρησιμοποιήστε την vimdiff για να συγκρίνετε και να επεξεργαστείτε αρχεία μέσω της διεπαφής του vim.


Για δυαδικά αρχεία, χρησιμοποιήστε τις hd, hexdump ή την xxd για απλά δεκαεξαδικά dumps και τις bvi, hexedit ή biew για επεξεργασία σε δυαδική μορφή.


Επίσης, για δυαδικά αρχεία η strings (και η grep κλπ.) σας δίνει τη δυνατότητα να βρείτε κομματάκια κειμένου που κρύβονται σ' αυτά.


Για δυαδικές διαφορές (συμπίεση δέλτα), χρησιμοποιήστε xdelta3.


Για να μετατρέψετε κωδικοποίηση κειμένου, δοκιμάστε την iconv. Ή uconv για πιο προχωρημένη χρήση· υποστηρίζει πιο προχωρημένα στοιχεία του προτύπου Unicode. Για παράδειγμα:
:


      # Εμφανίζει τους δεκαεξαδικούς κωδικούς ή πραγματικά ονόματα χαρακτήρων (χρήσιμο για αποσφαλμάτωση):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Mετατρέπει σε πεζούς χαρακτήρες και απαλείφει τους τόνους (επεκτείνοντας και απορρίπτοντάς τους):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Για να σπάσετε αρχεία σε κομμάτια, δείτε τη split (για να σπάσετε με βάση το μέγεθος) και τη csplit (για να σπάσετε με βάση πρότυπο).


Ημερομηνία και ώρα: Για να πάρετε την τρέχουσα ημερομηνία και ώρα στη χρήσιμη μορφή ISO 8601, χρησιμοποιήστε date -u +"%Y-%m-%dT%H:%M:%SZ" (άλλες επιλογές είναι προβληματικές). Για να χειριστείτε εκφράσεις ημερομηνίας και χρόνου, χρησιμοποιήστε τις εντολές dateadd, datediff, strptime κλπ. από το πακέτο dateutils.


Χρησιμοποιήστε zless, zmore, zcatκαι zgrep για να χειριστείτε συμπιεσμένα αρχεία.


Ιδιότητες αρχείων μπορούν να οριστούν με την chattr και προσφέρει μία εναλλακτική για τα δικαιώματα των αρχείων σε χαμηλό επίπεδο. Για παράδειγμα, για να προστατευτείτε από κατά λάθος διαγραφή αρχείου χρησιμοποιήστε την επιλογή immutable:  sudo chattr +i /critical/directory/or/file


Χρησιμοποιήστε τις getfacl και setfacl για να αποθηκεύσετε και να επαναφέρετε δικαιώματα αρχείων. Για παράδειγμα:


   getfacl -R /some/path > permissions.txt
   setfacl --restore=permissions.txt

Για να δημιουργήσετε άδεια αρχεία γρήγορα, χρηρσιμοποιήστε την truncate (δημιουργεί αραιό αρχείο), τη fallocate (ext4, xfs, btrfs και ocfs2 συστήματα αρχείων), την xfs_mkfile (σχεδόν για κάθε σύστημα αρχείων, περιλαμβάνεται στο πακέτο xfsprogs), τη mkfile (για συστήματα τύπου Unix όπως Solaris, Mac OS).

Αποσφαλμάτωση συστήματος


Για web αποσφαλμάτωση, οι εντολές curl και curl -I είναι χρήσιμες, ή οι ισοδύναμες wget, ή η πιο καινούρια httpie.


Για να γνωρίζετε την τρέχουσα κατάσταση του επεξεργαστή και των δίσκων, τα κλασικά εργαλεία είναι η top (ή η καλύτερη htop), η iostatκαι η iotop. Χρησιμοποιήστε την iostat -mxz 15 για βασικά στατιστικά που αφορούν τον επεξεργαστή ή για λεπτομερή στατιστικά των δίσκων ανά διαμέρισμα και για να έχετε μια εικόνα της απόδοσης.


Για λεπτομέρειες που αφορούν τη σύνδεση δικτύου, χρησιμοποιήστε τη netstat και την ss.


Για μια γρήγορη επισκόπηση του τι συμβαίνει σε ένα σύστημα, η dstat είναι ιδιαίτερα χρήσιμη. Για καλύτερη επισκόπηση με λεπτομέρειες, χρησιμοποιήστε glances.


Για να γνωρίζετε την κατάσταση της μνήμης, εκτελέστε και κατανοήστε την έξοδο των free και vmstat. Συγκεκριμένα, να έχετε υπόψη ότι η «cached» τιμή είναι μνήμη που δεσμεύει ο πυρήνας του Linux ως προσωρινά αποθηκευμένο αρχείο, ώστε στην ουσία προσμετράται ως «free» τιμή.


Η αποσφαλμάτωση συστημάτων Java είναι άλλη ιστορία, αλλά ένα απλό κόλπο για το JVM της Oracle και άλλων είναι να τρέξετε την εντολή kill -3 <pid> και ένα πλήρες ίχνος στοίβας  και περίληψη σωρού  (συμπεριλαμβανομένων και λεπτομερειών που αφορούν τη συλλογή απορριμάτων σε γενιές, που μπορεί να είναι πολύ κατατοπιστικές) θα εμφανιστούν στο stderr/logs. Οι εντολές του JDK jps, jstat, jstack, jmap είναι χρήσιμες. Τα εργαλεία SJK είναι για πιο προχωρημένους.


Χρησιμοποιήστε την mtr ως μια βελτίωση της traceroute για να ανιχνεύετε ζητήματα του δικτύου.


Για να δείτε γιατί ένας δίσκος είναι γεμάτος, η ncdu εξοικονομεί χρόνο σε σύγκριση με τις συνήθεις εντολές όπως du -sh *.


Για να βρείτε ποια δικτυακή σύνδεση ή διεργασία χρησιμοποιεί εύρος ζώνης, δοκιμάστε iftop ή nethogs.


Το εργαλείο ab (έρχεται μαζί με Apache) βοηθά στον πρόχειρο έλεγχο της απόδοσης web server. Για πιο σύνθετο έλεγχο φόρτου, δοκιμάστε siege.


Για πιο σοβαρή αποσφαλμάτωση δικτύου, wireshark, tshark, ή ngrep.


Να γνωρίζετε για τις strace και ltrace. Αυτές μπορεί να φανούν χρήσιμες, όταν ένα πρόγραμμα αποτυγχάνει, παγώνει ή καταρρέει και δε γνωρίζετε γιατί ή αν θέλετε να έχετε μία γενική ιδέα της απόδοσης. Σημειώστε την επιλογή μέτρησης (-c) και τη δυνατότητα να συνδέσετε σε μία διεργασία που εκτελείται (-p). Χρησιμοποιήστε την επιλογή για να παρακολουθείτε τις διεργασίες παιδιά (-f) για να μη χάνετε σημαντικές κλήσεις.


Να γνωρίζετε για την ldd ώστε να ελέγχετε διαμοιραζόμενες βιβλιοθήκες κλπ. — αλλά ποτέ να μην την εκτελείτε σε αρχεία που δεν εμπιστεύεστε.


Να γνωρίζετε πώς να συνδέεστε σε μία διεργασία που εκτελείται με gdb και να παίρνετε τα ίχνη της στοίβας της.


Χρησιμοποιήστε τον κατάλογο /proc. Είναι εκπληκτικά χρήσιμος ορισμένες φορές, όταν αποσφαλματώνετε ζωντανά προβλήματα. Παραδείγματα: /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (όπου xxx είναι το id της διεργασίας ή pid).


Όταν αποσφαλματώνετε κάτι που ήταν λάθος στο παρελθόν, η sar μπορεί να είναι πολύ χρήσιμη. Δείχνει ιστορικά στατιστικά για επεξεργαστή, μνήμη, δίκτυο κλπ.


Για πιο εις βάθος ανάλυση συστήματος και απόδοσης, δείτε τις stap (SystemTap), perf και sysdig.


Ελέγξτε ποιο είναι το λειτουργικό σύστημά σας με uname ή uname -a (γενικές πληροφορίες Unix/πυρήνα) ή lsb_release -a (πληροφορίες διανομής Linux).


Χρησιμοποιήστε την dmesg, όποτε κάτι συμπεριφέρεται πραγματικά παράξενα (μπορεί να έχει να κάνει με υλικό ή με οδηγούς).


Αν διαγράψετε ένα αρχείο και δεν απελευθερωθεί ο σύμφωνα με την du αναμενομένος χώρος στον δίσκο, ελέξτε αν το αρχείο χρησιμοποιείται από κάποια διεργασία:
lsof | grep deleted | grep "filename-of-my-big-file"


Εντολές σε μία γραμμή
Μερικά παραδείγματα σωλήνωσης εντολών:

Είναι εξαιρετικά βοηθητικό ορισμένες φορές το γεγονός ότι μπορείτε να εφαρμόσετε τις πράξεις της τομής, της ένωσης και της διαφοράς σε αρχεία κειμένου με τις εντολές sort/comm. Έστω ότι a και b είναι ταξινομημένα αρχεία κειμένου. Αυτό είναι γρήγορο και δουλεύει σε αρχεία οποιουδήποτε μεγέθους έως πολλά gigabytes. (H εντολή sort δεν περιορίζεται από τη μνήμη, αν και ίσως χρειαστεί να χρησιμοποιήσετε την επιλογή -T, αν ο /tmp βρίσκεται σε μικρή κατάτμηση (partition). Επίσης, δείτε την παρατήρηση παραπάνω για τη μεταβλητή LC_ALL και την επιλογή -u της εντολής sort (παραλείπεται παρακάτω ώστε να είναι πιο ξεκάθαρο το παράδειγμα).

      sort -mu a b > c # το c είναι a ένωση b
      comm -12 a b > c # c είναι a τομή b
      comm -23 a b > c # το c είναι η διαφορά του a από το b


Χρησιμοποιήστε grep . * για να εξετάσετε γρήγορα το περιεχόμενο όλων των αρχείων ενός καταλόγου (έτσι κάθε γραμμή αρχείου εμφανίζεται σε ζεύγος με το όνομα του αρχείου), ή head -100 * (έτσι κάθε αρχείο έχει μια κεφαλίδα). Αυτό μπορεί να είναι χρήσιμο για καταλόγους γεμάτους με αρχεία ρυθμίσεων όπως αυτά στους καταλόγους /sys, /proc, /etc.


Η άθροιση όλων των αριθμών στην τρίτη στήλη ενός αρχείου κειμένου (αυτό είναι μάλλον 3X γρηγορότερο και απαιτεί 3X λιγότερο κώδικα από την αντίστοιχη υλοποίηση σε Python):


      awk '{ x += $3 } END { print x }' myfile

Για να δείτε μεγέθη/ημερομηνίες σε ένα δέντρο αρχείων, η παρακάτω είναι σα μια αναδρομική ls -l, αλλά είναι πιο ευανάγνωστη από ls -lR:

      find . -type f -ls

Έστω ότι έχετε ένα αρχείο κειμένου, όπως το αρχείο καταγραφής (log)/υπ ενός web server και μία συγκεκριμένη τιμή που εμφανίζεται σε μερικές γραμμές, όπως μία παράμετρος acct_id που εμφανίζεται στο URL. Αν θέλετε μια καταμέτρηση του πόσα αιτήματα έγιναν για κάθε acct_id:

      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


Για να παρακολουθείτε συνεχώς αλλαγές, χρησιμοποιήστε watch, π.χ. ελέγξτε αλλαγές σε αρχεία ενός καταλόγου με watch -d -n 2 'ls -rtlh | tail' ή σε ρυθμίσεις δικτύου ενώ επιδιορθώνετε τις ρυθμίσεις wifi με watch -d -n 2 ifconfig.


Εκτελέστε αυτή τη μέθοδο για να πάρετε μια τυχαία συμβουλή από αυτό το έγγραφο (αναλύει Markdown και εξάγει ένα στοιχείο):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Ασυνήθιστες αλλά χρήσιμες


expr: εκτελέστε αριθμητικές και λογικές πράξεις ή εφαρμόζετε κανονικές εκφράσεις


m4: απλός μακροεπεξεργαστής


yes: τυπώστε ένα αλφαριθμητικό πολλές φορές


cal: όμορφο ημερολόγιο


env: εκτελέστε μία εντολή (χρήσιμο σε σενάρια)


printenv: τυπώστε μεταβλητές περιβάλλοντος (χρήσιμο στην αποσφαλμάτωση και σε σενάρια)


look: βρείτε αγγλικές λέξεις (ή γραμμές σε ένα αρχείο) αρχίζοντας με ένα αλφαριθμητικό


cut, paste και join: επεξεργασία δεδομένων


fmt: μορφοποίηση παραγράφων


pr: μορφοποίηση κειμένου σε σελίδες/στήλες


fold: τύλιγμα γραμμών κειμένου


column: μορφοποίηση πεδίων κειμένου σε στοιχισμένες, σταθερού πλάτους στήλες ή πίνακες


tree: εμφανίστε καταλόγους και υποκαταλόγους σε φωλιασμένο δένδρο, όπως η ls αλλά αναδρομική


stat: πληροφορίες αρχείου


time: εκτελέστε και χρονομετρήστε μία εντολή


timeout: εκτελέστε μια εντολή για συγκεκριμένο χρονικό διάστημα και σταμάτησε τη διεργασία, όταν ολοκληρωθεί το χρονικό διάστημα αυτό


lockfile: δημιουργήστε αρχεία σημαφόρους που μπορούν να διαγραφούν μόνο με rm -f


logrotate: περιστρέψτε, συμπιέστε και στείλτε με ηλ-ταχ αρχεία καταγραφής (logs).


watch: εκτελέστε μία εντολή επαναλαμβανόμενα εμφανίζοντας αποτελέσματα ή/και επισημαίνοντας αλλαγές


when-changed: εκτελεί όποια εντολή ορίσετε, όποτε βλέπει ότι ένα αρχείο άλλαξε. Δείτε ακόμη τις inotifywait και entr.


tac: τυπώστε αρχεία ανεστραμμένα


comm: συγκρίνετε ταξινομημένα αρχεία γραμμή προς γραμμή


strings: εξάγετε κείμενο από δυαδικά αρχεία


tr: μετάφραση χαρακτήρων ή επεξεργασία


iconv ή uconv: μετατροπή κωδικοποίησης κειμένου


split και csplit: χώρισμα αρχείων


sponge: διαβάστε όλη την είσοδο πριν γράψετε σε αυτή, χρήσιμο όταν πρόκειται να διαβάσετε από ένα αρχείο και μετά να γράψετε σε αυτό, π.χ., grep -v something some-file | sponge some-file


units: μετατροπές μονάδων και υπολογισμοί· κάνει ό,τι μετατροπές μπορείτε να σκεφτείτε (δείτε επίσης /usr/share/units/definitions.units)


apg: δημιουργεί τυχαίους κωδικούς


xz: υψηλής αναλογίας συμπίεση αρχείων


ldd: πληροφορίες για δυναμικές βιβλιοθήκες


nm: σύμβολα από αντικειμενικά αρχεία


ab ή wrk: συγκριτική αξιολόγηση web servers


strace: αποσφαλμάτωση κλήσης συστήματος


mtr: καλύτερο εργαλείο traceroute για αποσφαλμάτωση δικτύου


cssh: visual concurrent shell


rsync: συγχρονισμός αρχείων και καταλόγων μέσω SSH ή σε τοπικό σύστημα αρχείων


wireshark και tshark: συλλογή πακέτων και αποσφαλμάτωση δικτύου


ngrep: grep για το επίπεδο δικτύου


host και dig: αναζητήσεις DNS


lsof: εμφανίστε περιγραφείς αρχείου και πληροφορίες δικτυακών συνδέσεων


dstat: χρήσιμα στατιστικά συστήματος


glances: υψηλού επιπέδου επισκόπηση πολλαπλών υποσυστημάτων


iostat: στατιστικά χρήσης δίσκου


mpstat: στατιστικά χρήσης επεξεργαστή


vmstat: στατιστικά χρήσης μνήμης


htop: βελτιωμένη έκδοση της top


last: ιστορικό σύνδεσης (login)


w: ποιος συνδέθηκε


id:  πληροφορίες ταυτότητας χρήστη/ομάδας


sar: ιστορικά στατιστικά συστήματος


iftop ή nethogs: χρήση δικτύου ανά δικτυακή σύνδεση ή διεργασία


ss: στατιστικά ανά δικτυακή σύνδεση


dmesg:  μηνύματα για σφάλματα κατά την εκκίνηση ή σφάλματα συστήματος


sysctl: δείτε και ρυθμίστε τις παραμέτρους του πυρήνα Linux, ενώ εκτελείται


hdparm: διαχείριση/απόδοση δίσκου SATA/ATA


lsblk: εμφανίστε σε λίστα συσκευές αποθήκευσης: μία προβολή σε δέντρο των δίσκων σας και των διαμερισμάτων τους


lshw, lscpu, lspci, lsusb, dmidecode: πληροφορίες υλικού, συμπεριλαμβανομένων επεξεργαστή, BIOS, RAID, γραφικών, συσκευών κλπ.


lsmod και modinfo: εμφανίστε σε λίστα και προβάλλετε λεπτομέρειες για λειτουργικές μονάδες του πυρήνα


fortune, ddateκαι sl: ε, λοιπόν, εξαρτάται από το αν θεωρείτε τα τρένα με ατμομηχανή και τις ρήσεις του Zippy «χρήσιμα»


Μόνο για OS X
Τα παρακάτω σημεία σχετίζονται μόνο με OS X.


Διαχείριση πακέτων λογισμικού με brew (Homebrew) και/ή port (MacPorts). Μπορούν να χρησιμοποιηθούν για εγκατάσταση σε OS X πολλών από τις παραπάνω εντολές.


Αντιγράψτε την έξοδο οποιασδήποτε εντολής σε μια desktop εφαρμογή με pbcopy και επικολλήστε στην είσοδο με pbpaste.


Για να ενεργοποιήσετε το πλήκτρο Option σε τερματικό OS X ως πλήκτρο alt (όπως χρησιμοποιείται στις παραπάνω εντολές όπως alt-b, alt-f κλπ.), ανοίξτε Προτιμήσεις -> Προφίλ -> Πληκτρολόγιο και επιλέξτε «Χρήση Option ως μετα-πλήκτρου».


Για να ανοίξετε ένα αρχείο με μια desktop εφαρμογή χρησιμοποιήστε open ή open -a /Applications/Whatever.app.


Spotlight: Αναζητήστε αρχεία με mdfind και εμφανίστε σε λίστα μεταδεδομένα (όπως τις πληροφορίες EXIF μιας φωτογραφίας) με mdls.


Έχετε υπόψη σας ότι το OS X βασίζεται σε BSD Unix και πολλές εντολές (για παράδειγμα ps, ls, tail, awk, sed) έχουν μικρές διαφορές από το Linux, που έχει ευρέως επηρεαστεί από το System V-style Unix και τα εργαλεία GNU. Συνήθως μπορείτε να βρίσκετε τη διαφορά επισημαίνοντας ότι μια man σελίδα έχει την επικεφαλίδα «Εγχειρίδιο γενικών εντολών BSD». Σε ορισμένες περιπτώσεις μπορούν επίσης να εγκατασταθούν εκδόσεις GNU, (όπως οι gawk και gsed για τις GNU awk και sed). Αν γράφετε σενάρια Bash που στοχεύετε να εκτελούνται σε διάφορες πλατφόρμες, αποφύγετε τέτοιες εντολές (για παράδειγμα, έχετε υπόψη σας την Python ή perl) ή ελέγξτε προσεχτικά.


Για να πάρετε πληροφορίες για την έκδοση OS X χρησιμοποιήστε sw_vers.


Μόνο για Windows
Τα παρακάτω σημεία σχετίζονται μόνο με Windows.
Πρόσβαση στα εργαλεία του Unix από Windows


Αποκτήστε πρόσβαση στη δύναμη του φλοιού του Unix σε περιβάλλον Microsoft Windows εγκαθιστώντας το Cygwin. Τα περισσότερα από αυτά που περιγράφονται σε αυτό το έγγραφο θα λειτουργήσουν μεμιάς.


Σε Windows 10, μπορείτε να χρησιμοποιήσετε το Bash σε Ubuntu για Windows, το οποίο παρέχει ένα περιβάλλον παρόμοιο με του Bash με εργαλεία γραμμής εντολών Unix. Έχει το πλεονέκτημα ότι επιτρέπει σε προγράμματα Linux να εκτελεστούν σε Windows. Από την άλλη πλευρά, σε αντίθεση με το περιβάλλον Cygwin, δεν επιτρέπει την εκτέλεση προγραμμάτων Windows από τη γραμμή εντολών του Bash.


Αν σας ενδιαφέρει κυρίως η χρήση των εργαλείων ανάπτυξης GNU (όπως ο μεταγλωττιστής GCC) σε Windows, σκεφτείτε τη χρήση των MinGW και MSYS, τα οποία παρέχουν εργαλεία όπως bash, gawk, make και grep. Το MSYS δεν υποστηρίζει όμως όλες τις δυνατότητες του Cygwin. Το MinGW είναι κυρίως χρήσιμο για να δημιουργήσετε εγγενείς εκδόσεις Windows εργαλείων του Unix.


Μια άλλη επιλογή για να έχετε εντολές Unix κάτω από Windows είναι το σύστημα Cash. Αυτό όμως υποστηρίζει πολύ λίγες εντολές και επιλογές του Unix.


Χρήσιμα εργαλεία της γραμμής εντολών Windows


Μπορείτε να εκτελέσετε και να γράψετε scripts για τις περισσότερες εργασίες διαχείρισης συστήματος των Windows από τη γραμμή εντολών μαθαίνοντας και χρησιμοποιώντας την wmic.


Χρήσιμα εγγενή εργαλεία της γραμμής εντολών των Windows για διαχείριση και αποσφαλμάτωση του δικτύου είναι τα ping, ipconfig, traceroute και netstat.


Πολλές [χρήσιμες λειτουργίες των Windows] (http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) μπορούν να εκτελεστούν μέσω της εντολής Rundll32.


Συμβουλές για αποδοτική χρήση του Cygwin


Εγκαταστήστε πρόσθετα προγράμματα Unix με τον διαχειριστή πακέτων του Cygwin.


Χρησιμοποιήστε το mintty ως το παράθυρο γραμμής εντολών σας.


Αποκτήστε πρόσβαση στο πρόχειρο (clipboard) των Windows μέσω του /dev/clipboard.


Εκτελέστε τη cygstart για να ανοίξετε ένα οποιοδήποτε αρχείο με την εφαρμογή που είναι ορισμένη να χρησιμοποιείται για το άνοιγμά του.


Αποκτήστε πρόσβαση στο μητρώο των Windows με regtool.


Σημειώστε ότι η διαδρομή C:\ των Windows γίνεται /cygdrive/c στο Cygwin και ότι το / του  Cygwin εμφανίζεται ως C:\cygwin στα Windows. Μετατρέψετε διαδρομές αρχείων από τη μορφή που χρησιμοποιεί το Cygwin σε αυτή που χρησιμοποιούν τα Windows και αντίστροφα με cygpath. Αυτό είναι πολύ χρήσιμο σε σενάρια που καλούν προγράμματα Windows.


Μπορείτε να εκτελέσετε και να γράψετε σενάρια για τις περισσότερες εργασίες διαχείρισης συστήματος των Windows από τη γραμμή εντολών μαθαίνοντας και χρησιμοποιώντας την wmic.


Μία άλλη επιλογή για να έχετε την εμφάνιση και την εμπειρία χρήσης Unix σε Windows είναι το Cash. Σημειώστε ότι μόνο πολύ λίγες εντολές Unix και επιλογές γραμμής εντολών είναι διαθέσιμες σε αυτό το περιβάλλον.


Περισσότερες πηγές

awesome-shell: Μία προσεγμένη λίστα με εργαλεία και πηγές σχετικές με τον φλοιό .
awesome-osx-command-line: Ένας περισσότερο εις βάθος οδηγός της γραμμής εντολών του OS X.
Strict mode για να γράφετε καλύτερα σενάρια φλοιού.
shellcheck: Ένα εργαλείο στατικής ανάλυσης για σενάρια για φλοιό. Στην ουσία, lint για bash/sh/zsh.
Filenames and Pathnames in Shell: Οι δυστυχώς περίπλοκες μικρολεπτομέρειες του πώς να διαχειριστεί κανείς σωστά ονόματα αρχείων σε σενάρια για φλοιό.
Data Science at the Command Line: Περισσότερες εντολές και εργαλεία χρήσιμα για την άσκηση της επιστήμης δεδομένων, από το βιβλίο με το ίδιο όνομα.

Αποποίηση ευθύνης
Με την εξαίρεση πολύ μικρών εργασιών, ο κώδικας πρέπει να γράφεται ώστε να μπορούν οι άλλοι να τον διαβάζουν. Η δύναμη συνεπάγεται ευθύνη. Το γεγονός ότι μπορείτε να κάνετε κάτι με Bash δε σημαίνει απαραίτητα ότι θα έπρεπε! ;)
Άδεια χρήσης

Η εργασία αυτή έχει αδειοδοτηθεί με Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\n🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
El Arte del Terminal


Meta
Fundamentos
Uso diario
Procesamiento archivos y datos
Depuración del sistema
One-liners
Obscuro pero útil
Solo para OS X
Solo para Windows
Más recursos
Advertencia


La fluidez en el terminal es una destreza a menudo abandonada y considerada arcaica, pero ésta mejora tu flexibilidad y productividad como ingeniero de formas obvias y sutiles. Esta es una selección de notas y consejos para usar el terminal que encontramos útiles al trabajar en Linux. Algunos consejos son elementales y algunos bastante específicos, sofisticados u oscuros. Esta página no es larga, pero si puedes usar y recordar todos los puntos aquí mostrados, sabrás un montón.
Este trabajo es el resultado de muchos autores y traductores.
Parte de esta:
originalmente
apareció
en Quora,
pero se ha movido desde entonces a Github, donde personas más talentosas que el autor han hecho numerosas mejoras.
Por favor contribuye Si ves un error o algo que podría ser mejor!
Meta
Alcance:

Esta guía es tanto para principiantes como para experimentados. Los objetivos son diversidad (todo importa), especificidad (dar ejemplos concretos del caso más común), y concisión (evitar cosas que no son esenciales o insignificantes que puedas buscar fácilmente en otro lugar). Cada consejo es esencial en alguna situación o significativamente puede ahorrar tiempo comparado con otras alternativas.
Está escrita para Linux, con excepción de la secciones "Solo para OS X" y "Solo para Windows". Muchos de los otros puntos aplican o pueden ser instalados en otros Unices o OS X (o incluso Cygwin).
Se centra en Bash interactivo, aunque muchos de los consejos aplican para otros shells y al Bash scripting por lo general.
Incluye tanto comandos "estándar" Unix así como los que requieren instalaciones de paquetes especiales -- siempre que sean lo suficientemente importantes para merecer su inclusión.

Notas:

Para mantener esto en una página, el contenido está incluido implícitamente por referencia. Eres lo suficientemente inteligente para consultar más detalles en otros lugares buscando en Google una vez conoces la idea o el comando. Usa apt-get, yum, dnf, pacman, pip o brew (según proceda) para instalar los nuevos programas.
Usa Explainshell para obtener detalles de ayuda sobre que hacen los comandos, las opciones, las pipes, etc.

Fundamentos


Aprende conocimientos básicos de Bash, de hecho, escribe man bash y al menos échale un vistazo a todo el asunto. Es bastante fácil de seguir y no es tan largo. Alternar entre shells puede ser agradable, pero Bash es poderoso y siempre está disponible (conocer solo zsh, fish, etc., aunque resulte tentador en tu propia laptop, Te restringe en muchas situaciones, tales como el uso de servidores existentes).


Aprende bien al menos un editor de texto, idealmente Vim (vi), como no hay realmente una competencia para la edición aleatoria en un terminal (incluso si usa Emacs, un gran IDE, o un editor alternativo (hipster) moderno la mayor parte del tiempo).


Conoce como leer la documentación con man (Para curiosos, man man lista las secciones enumeradas, ej. 1 es comandos "regulares", 5 son archivos/convenciones, y 8 para administración). Encuentra las páginas de man apropos. Sepa que alguno de los comandos no son ejecutables, pero son Bash builtins, y que puedes obtener ayuda sobre ellos con help y help -d.


Aprende sobre redirección de salida >, entrada < y pipes utilizando |. Conozca que > sobrescribe el archivo de salida y >> añade. Aprende sobre stdout y stderr.


Aprende sobre expansión de archivos glob con * (y tal vez ? y [...]) y quoting y la diferencia entre comillas dobles " y simples '. (Ver más en expansión de variables más abajo.)


Familiarízate con la administración de trabajo en Bash: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Conoce ssh y lo básico de autenticación sin contraseña, vía ssh-agent, ssh-add, etc.


Administración de archivos básica: ls y ls -l (en particular, aprende el significado de cada columna en ls -l), less, head, tail y tail -f (o incluso mejor, less +F), ln y ln -s (aprende las diferencias y ventajas entre enlaces hard y soft), chown, chmod, du (para un resumen rápido del uso del disco: du -hs *). Para administración de archivos de sistema, df, mount, fdisk, mkfs, lsblk. Aprenda que un inode es ls -i or df -i).


Administración básica de redes: ip o ifconfig, dig.


Aprende y usa un sistema de control de versiones, por ejemplo git.


Conoce bien las expresiones regulares y varias opciones (flags) para grep/egrep. Las opciones -i, -o, -v, -A, -B y -C son dignas de ser recordadas.


Aprende el uso de apt-get, yum, dnf o pacman (dependiendo de la distribución "distro") para buscar e instalar paquetes. Y asegúrate que tienes pip para instalar la herramienta de línea de comando basada en Python (un poco más abajo esta explicado como instalar vía pip).


De uso diario


En Bash, se usa Tab para completar los argumentos o lista todos los comandos disponibles y ctrl-r para buscar a través del historial de comandos (despues de presionar, escribe la búsqueda, presiona ctrl-r repetidamente para hacer un ciclo a través de más coincidencias, presiona Enter para ejecurar el comando encontrado, o presiona la flecha derecha para poner el resultado en la línea actual y editar).


En Bash, se usa ctrl-w para borrar la última palabra, y ctrl-u para borrar todo hacia atrás hasta el inicio de la línea. Se usa alt-b y alt-f para moverse entre palabras, ctrl-a para mover el cursor al principio de la línea,  ctrl-e para mover el cursor al final de la línea,  ctrl-k para eliminar hasta el final de la línea, ctrl-l para limpiar la pantalla. Ver man readline para todos los atajos de teclado por defecto en Bash. Son una gran cantidad. Por ejemplo alt-. realiza un ciclo a través de los comandos previos, y alt-* expande un glob.


Alternativamente, si amas los atajos de teclado vi-style, usa set -o vi. (y set -o emacs para regresar a la anterior).


Para editar largos comandos, después de configurar to editor (por ejemplo export EDITOR=vim), ctrl-x ctrl-e se abrirá el comando actual en un editor para editar multiples líneas. O en estilo vi, escape-v.


Para ver los últimos comandos, history. También existen abreviaciones, tales como, !$ (último argumento) y !! último comando, aunque son fácilmente remplazados con ctrl-r y alt-..


Para volver al directorio principal con cd. Accede a los archivos relativos a tu directorio principal con el prefijo ~ (ej. ~/.bashrc). En scripts hrefierete al directorio principal con $HOME.


Para volver al directorio de trabajo previo: cd -.


Si estás a medio camino al escribir un comando pero cambias de opinión, presiona alt-# para agregar un # al principio y lo agrega como comentario (o usa ctrl-a, #, enter). Luego puedes regresar a este vía comando history.


Usa xargs (o parallel). Es muy poderoso. Ten en cuenta que puedes controlar cuántos elementos son ejecutados por línea (-L), así como el paralelismo (-P). Si no estas seguro de que este haga la cosa correcta, usa xargs echo primero. También, -I{} es útil. Ejemplos:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p es útil para mostrar el árbol de procesos.


Usa pgrep y pkill para encontrar o señalar procesos por su nombre (-f es de mucha ayuda).


Conoce las señales que puedes enviar a los procesos. Por ejemplo, para suspender un proceso usa kill -STOP [pid]. Con man 7 signal puedes ver la lista completa


Usa nohup o disown si quieres que un proceso de fondo se mantenga corriendo para siempre.


Verifica que procesos están escuchando vía netstat -lntp o ss -plat (para TCP; agrega -u para UDP).


Consulta también lsof para abrir sockets y archivos.


Consulta uptime o w para conocer cuánto tiempo el sistema ha estado corriendo.


Usa alias para crear atajos para comandos comúnmente usados. Por ejemplo, alias ll="las -latr" crea el alias ll


En Bash scripts, usa set -x (o su variantes set -v, que registra las entradas sin procesar, incluyendo variables sin expander y comantarios) para depurar la salida. Usa el modo estricto al menos que tengas una buena razón para no hacerlo: Usa set -e para abortar en caso de errores (códigos de salida distintos a cero). Usa set -u para detectar uso de variables no definidas. Considera set -o pipefail también, para los errores con pipes, también (estudiar mas sobre este como un tema delicado). Para scripts más complejos, usa también trap. en EXIT o ERR. Un hábito útil es para comenzar un script como este, el cual detectará y abortará con errores comunes e imprimirá un mensaje:


    set -euo pipefail
    trap "echo 'error: Falló del Script: ver arriba comando que falló'" ERR

En Bash scripts, subshells (escritos con paréntesis) son maneras convenientes para agrupar los comandos. Un ejemplo común es temporalmente moverse hacia un directorio de trabajo diferente, Ej.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


En Bash, considera que hay muchas formas de expansión de variables. Verificar la existencia de una variable: ${name:?error message}. Por ejemplo, si un script Bash requiere un único argumento, solo escribe input_file=${1:?usage: $0 input_file}. Expansión aritmética: i=$(( (i + 1) % 5 )). Secuencias: {1..10}. Reducción de cadenas de texto: ${var%suffix} y ${var#prefix}. Por ejemplo si var=foo.pdf, entonces echo ${var%.pdf}.txt imprime foo.txt.


Utilizando la expansión de corchetes {...} puede reducir el tener que retipear un texto similar y automatizar conbinaciones de elementos. Esto es útil en ejemplos como mv foo.{txt,pdf} some-dir (el cual mueve ambos archivos), cp somefile{,.bak} (el cual se expandirá a cp somefile somefile.bak) o mkdir -p test-{a,b,c}/subtest-{1,2,3} (el cual se expandirá en todas las posibles conbinaciones y creará un árbol de directorios).


La salida de un comando puede ser tratado como un archivo por medio de <(some command). Por ejemplo, comparar el /etc/hosts local con uno remoto:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)


Conocer acerca de "here documents" en Bash, como también de cat <<EOF ....


En Bash, redirecciona ambas la salida estándar y el error estándar, mediante: some-command >logfile 2>&1 o some-command &>logfile. Frecuentemente, para garantizar que un comando no haya dejado abierto un archivo para controlar la entrada estándar vinculada al terminal en el que te encuentras y también como buena práctica puedes agregar </dev/null.


Usa man ascii para una buena tabla ASCII con valores hexadecimal y decimales. Para información de codificación general, man unicode, man utf-8, y man latin1 son de utilidad.


Usa screen o tmux para multiplexar la pantalla, especialmente útil en sesiones ssh remotas y para desconectar y reconectar a una sesión. byobu puede mejorar la pantalla o tmux proporcionando mayor información y gestión ás sencilla. Una alternativa más minimalista para persistencia de la sesión solo sería dtach.


En ssh, saber cómo hacer un port tunnel con -L o -D (y de vez en cuando -R) es útil, Ej. para acceder a sitios web desde un servidor remoto.


Puede ser útil hacer algunas optimizaciones a su configuración ssh; por ejemplo, ~/.ssh/config, contiene la configuración para evitar desconexiones en ciertos entornos de red, utiliza compresión (cual es útil con scp sobre conexiones con un bajo ancho de banda), y la multiplexión de canales para el mismo servidor con un archivo de control local:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Algunas otras opciones relevantes a ssh son sensibles en cuanto a seguridad y deben ser usadas con cuidado, Ej. por subnet, host o en redes confiables: StrictHostKeyChecking=no, ForwardAgent=yes.


Considera mosh una alternativa para ssh que utiliza UDP, evitando conexiones caidas y agregando conveniencia en el camino. (require configuración del lado del servidor).


Para obtener permiso sobre un archivo en forma octal, el cual es útil para la configuración del sistema pero no está disponible con ls y fácil de estropear, usa algo como


      stat -c '%A %a %n' /etc/timezone


Para selección interactiva de valores desde la salida de otro comando, use percol o fzf.


Para la interacción con archivos basados en la salida de otro comando (como git), use fpp (PathPicker).


Para un servidor web sencillo para todos los archivos en el directorio actual (y subdirectorios), disponible para cualquiera en tu red, usa:
python -m SimpleHTTPServer 7777 (para el puerto 7777 y Python 2) y python -m http.server 7777 (para 7777 y Python 3).


Para ejecutar un comando con privilegios, usando sudo (para root) o sudo -u (para otro usuario). Usa su o sudo bash para realmente ejecutar un shell como este usuario. Usa su - para simular un login fresco como root u otro usuario.


Procesamiento de archivos y datos


Para localizar un archivo por nombre en el directorio actual, find . -iname '*algo*' (o similar). Para encontrar un archivo en cualquier lado por nombre, usa locate something (pero tenga en mente que updatedb quizás no haya indexado recientemente los archivos creados).


Para búsqueda general a través de archivos fuente o de datos (más avanzado que grep -r), usa ag.


Para convertir HTML a texto: lynx -dump -stdin


Para Markdown, HTML, y todos los tipos de conversión de documentos, prueba pandoc.


Si debe manipular XML, xmlstarlet es viejo pero bueno.


Para JSON usa jq.


Para YAML, usa shyaml.


Para archivos Excel o CSV, csvkit proporciona in2csv, csvcut, csvjoin, csvgrep, etc.


Para Amazon S3, s3cmd es conveniente y s4cmd es el mas rápido. aws de Amazon y el mejorado saws son esenciales para otras tareas relacionadas al AWS.


Conoce acerca de sort y uniq, incluyendo las opciones de uniq -u y -d -- ver one-liners más abajo. Ver también comm


Conoce acerca de cut, paste y join para manipular archivos de texto. Muchas personas usan cut pero se olvidan acerca de join.


Conoce acerca de wc para contar saltos de línea (-l), caracteres (-m), palabras (-w) y bytes (-c).


Conoce acerca de tee para copiar desde el stdin hacia un archivo y también hacia el stdout, al igual que en ls -al | tee file.txt.


Conoce que la localización afecta muchas herramientas de línea de comando en forma delicada, incluyendo el ordenamiento (compaginación) y rendimiento. La mayoría de las instalaciones de Linux configuran LANG u otras variables de localización para la configuración local como US English. Pero ten en mente que el ordenamiento puede cambiar si cambia la localización. Y también las rutinas i18n pueden hacer que sort u otros comandos se ejecuten más lentamente. En algunas situaciones (tales como la realización de operaciones u operaciones singulares descritas más abajo) puedes ignorar las rutinas i18n por completo y utilizar el sort tradicional basado en bytes, usando export LC_ALL=C.


Conoce los aspectos básicos de awk y sed para manejo de datos. Por ejemplo, sumar todos lo números en la tercera columna de un archivo de texto: awk '{ x += $3 } END { print x }'. Esto es probablemente 3 veces más rápido y 3 veces más corto que su equivalente en Python.


Para reemplazar todas las ocurrencias de un string en su lugar, en uno o más archivos:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

Para renombrar multiples y/o buscar y remplazar dentro de archivos, intenta repren. (En algunos casos el comando rename también permite multiples renombramientos, pero sea cuidadoso ya que esta funcionalidad no es igual en todas las distribuciones de Linux.)

      # Renombramiento completo de archivos, carpetas y contenidos foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recuperar archivos de respaldo cualquier.bak -> cualquier:
      repren --renames --from '.*)\.bak' --to '\1' *.bak
      # Igual que arriba, utilizando rename, si esta disponible:
      rename 's/\.bak$//' *.bak

Como dice la página de man, rsync es una muy rápida y extraordinariamente versatil herramienta de copiado. Esta se conoce por la sincronización entre máquinas pero es igualmente útil localmente. Esta también se encuentra entre las formas más rápidas para borrar un gran número de archivos:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


Usa shuf para mezclar o seleccionar líneas aleatorias de un archivo.


Conoce las opciones de sort. Para números, usa -n, o -h para manipulación de números humanamente leíbles (Ej. desde du -h). Conoce el trabajo principal de (-t y -k). En particular, esta atento que lo necesitas  escribir-k1,1 para ordenar por solo el primer campo; -k1 significa ordenar de acuerdo a toda la línea. Orden estable (sort -s) puede ser útil. Por ejemplo, para organizar el primer por el campo 2, entonces secundariamente hacerlo por el campo 1, Puedes usar sort -k1,1 | sort -s -k2,2.


Si alguna vez necesitas escribir un tab literal en una línea de comandos en Bash (Ej. para el argumento -t de ordenar), presiona ctrl-v [Tab] o escribe $'\t' (El último es mejor porque puedes copiarlo/pegarlo).


Las herramientas estándar para reparar el código fuente son diff y patch. Consulta también diffstat para resumen estadístico de una diff y sdiff para un diff puesto lado a lado. Considera diff -r trabaja con directorios por completo. Usa diff -r tree1 tree2 | diffstat para el resumen de cambios. Urilizá vimdiff para comparar y editar archivos.


Para archivos binarios, usa hd, hexdeump or xxd para volcados hexdecimales simples y bvi o biew para edición de binario.


También para archivos binarios, strings (además de grep, etc.) permite encontrar fragmentos de texto.


Para diffs binaria (compresión delta), usa xdelta3.


Para convertir la codificación del texto, probar iconv. O uconv para uso más avanzado; este soporta algunos elementos Unicode avanzados. Por ejemplo, este comando coloca en minúsculas y remueve todas los acentos (por su expansión y colocándolos):


      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Para dividir archivos en múltiples partes, consulta split (para dividir por tamaño) y csplit (para dividir por un patrón).


Para manipular expresiones de fecha y tiempo, usa dateadd, datediff, strptime etc. de dateutils.


Usa zless, zmore, zcat, y zgrep para operar sobre archivos comprimidos.


Depuración del sistema


Para depuración web, curl y curl -I son prácticos, o como sus equivalentes wget, o el más moderno httpie.


Para conocer el estado del cpu/disco, las clásicas herramientas son top (o mejor htop), iostat, y iotop. Usa iostat -mxz 15 para CPU básicas y estadísticas detalladas y visión de rendimiento por partición del disco.


Para detalles de la conexión de red, usa netstat y ss.


Para una rápida visión general de que esta pasando en un sistema, dstat es especialmente útil. Para una visión general más amplia con detalles usa glances.


Para conocer el estado de la memoria, ejecuta y entiende la salida de free y vmstat. En particular, ten en cuenta que el valor "cached" es mantenido en memoria por el kernel de Linux como un archivo de cache, por lo que efectivamente cuenta como valor para "free".


El sistema de depuración de Java es harina de otro costal, pero un truco simple en las JSM de Oracle y otros consta en que puedes ejecutar kill -3 <pid> y una traza completa y un resumen del montículo "heap summary" (incluyendo del detalle de la colección de basura generacional, la cual puede ser altamente informativa) serán descargados al stderr/logs. Las herramientas jps, jstat, jstack, jmap del JDK son útiles. SJK tools son más avanzadas.


Usa mtr como un mejor traceroute para identificar los problemas en la red.


Para examinar por qué el disco está lleno, ncdu ahorra tiempo en comparación con los comandos usuales como du -sh *.


Para encontrar cual socket o proceso está utilizando el ancho de banda, prueba iftop o nethogs.


La herramienta ab (viene con Apache) es útil para una verificación rápida del rendimiento de un servidor web. Para pruebas de carga más complejas prueba siege.


Para una depuración mas seria de redes, wireshark, tshark, o ngrep.


Conoce acerca de strace y ltrace. Estas puede ser de utilidad si un programa está fallando, suspendido, o colgado, y no sabe por qué, o si quieres tener una idea general del rendimiento. Considera la opción de elaboración de perfiles (-c), y la habilidad de adjuntar a un proceso en ejecución (-p).


Conoce acerca ldd para verificar librerías compartidas etc.


Conoce como conectarse a un proceso en ejecución con gdb y obtener su traza de pilas.


Usa /proc. Es extraordinariamente útil algunas veces cuando se depuran problemas en vivo. Ejemplos: /proc/cpuinfo, /proc/xxx/cwd, /proc/meminfo, /proc/cmdline, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (donde xxx es el id o pid del proceso).


Cuando se depura porque algo salió mal en el pasado, sar puede ser muy útil. Este muestra la estadística histórica en CPU, memoria, red, etc.


Para sistemas y análisis de rendimiento de mayor profundidad, examina stap (SystemTap), perf, y sysdig.


Comprueba en que OS se encuentra con uname o uname -a (información general en Unix/kernel) o lsb_release -a (información en Linux distro).


Usa dmesg siempre que algo actúe raro (esto podría ser problemas con el hardware o driver).


One-liners
Algunos ejemplos de comandos reunidos:

Es notablemente útil en ocasiones que pueda realizar intersección, unión, y diferencia de conjuntos de archivos de texto vía sort/uniq. Suponga que a y b como archivos de texto que son únicos. Esto es rápido, y trabaja con archivos de tamaño arbitrario, hasta varios gigabytes. (Sort no está limitado por la memoria, aunque quizás necesite utilizar la opción -T si /tmp está en una pequeña partición de raíz.) Consulta también la nota acerca de LC_ALL y las opciones de sort, -u (dejado de lado para clarificar más abajo).

      cat a b | sort | uniq > c   # c es a unido con b
      cat a b | sort | uniq -d > c   # c es a intersectado con b
      cat a b b | sort | uniq -u > c   # c es el conjunto diferencia a - b


Usa grep . * para rápidamente examinar el contenido de todos los archivos de un directorio (para que cada línea este emparejada con  con el nombre de archivo), o head -100 * (para que cada archivo tenga un encabezado). Esto puede se útil para directorios llenos con ajustes de configuración como aquellos en /sys, /proc, /etc.


Sumar todos los números en la tercera columna de un archivo de texto (esto es probablemente 3 veces más rápido y 3 veces menos código que el equivalente en Python):


      awk '{ x += $3 } END { print x }' miarchivo

Consultar tamaños/fechas en un árbol de archivos, esto es como un ls -l recursivo pero es más fácil de leer que ls -lR:

      find . -type f -ls

Digamos que tiene un archivo de texto, como un log de un servidor web, y un cierto valor comienza a aparecer en algunas líneas, tales como un parámetro acct_id que está presente en la URL. Si quieres un recuento de cuantas peticiones por cada acct_id:

      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn


Para monitorear continuamente los cambios, usa watch, Ej. verificar los cambios de archivos en un directorio con watch -d -n 2 'ls -rt1h | tail' o para configuraciones de red mientras solucionas problemas con la configuración wifi watch -d -n 2 ifconfig.


Ejecuta esta función para obtener un consejo aleatorio desde este documento (analiza el Markdown y extrae un elemento):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80
      }
Obscuro, pero útil


expr: ejecuta operaciones aritméticas o booleanas o evalúa expresiones regulares


m4: procesador de macro sencillo


yes: imprime un string sin fin


cal: lindo calendario


env: ejecuta un comando (útil en scripts)


printenv: imprime las variables del entorno (útil en depuración y scripts)


look: buscar palabras en inglés (o líneas en un archivo) comenzando con un string


cut, paste y join: manipulación de datos


fmt: formatea los párrafos de texto


pr: formatea el texto en páginas/columnas


fold: ajusta de líneas de texto


column: formatea campos de texto alineados, en columnas de ancho fijo o tablas


expand y unexpand: conversión entre tabuladores y espacios


nl: agrega números de línea


seq: imprime números


bc: calculadora


factor: factorización de enteros


gpg: encripta y firma archivos


toe: tabla de información de términos


nc: depuración de la red y transferencia de datos


socat: socket relay y redireccionador de puerto tcp (similar a netcat)


slurm: visualización del tráfico de red


dd: moviliza datos entre archivos o dispositivos


file: identifica el tipo de archivo


tree: muestra directorios y subdirectorios como un árbol anidado; parecido a ls pero recursivo


stat: información del archivo


time: ejecuta y calcula el tiempo de ejecución de un comando


timeout: ejecuta un comando especificando una cantidad de tiempo y deteniendo el proceso cuando la cantidad de tiempo especificado se completa.


lockfile: crea un archivo semáforo que puedes solo ser removido con rm -f


logrotate: rota, comprime y registra correos electrónicos.


watch: ejecuta un comando repetidamente, mostrando resultados y/o resaltando cambios


tac: imprime archivos en forma inversa


shuf: selección aleatoria de líneas de un archivo


comm: compara archivos ordenados línea por línea


pv: monitorea el progreso de datos a través de un tubo


hd, hexdump, xxd, bview y bvi: descarga o edita archivos binarios


strings: extrae texto desde archivos binarios


tr: traducción o manipulación de caracteres


iconv o uconv: conversión de codificaciones de texto


split y csplit: división de archivos


sponge: lee todas las entradas antes de escribirlo, útil para vista previa y posterior escritura sobre el mismo archivo, Ej., grep -v something some-file | sponge some-file


units: unidades de conversión y cálculos; convierte furlongs por fortnight a twips por blink (ver también /usr/share/units/definitions.units)


apg: genera contraseñas aleatorias.


7z: compresión de archivos de alto nivel


ldd: información de librería dinámica


nm: símbolos de archvios objeto


ab: benchmarking de servidores web


strace: depuración de llamadas del sistema


mtr: mejor traceroute para la depuración de la red


cssh: shell concurrente visual


rsync: sincronización de archivos y carpetas sobre SSH o en sistema de archivos locales


wireshark y tshark: captura de paquetes y depuración de la red


ngrep: grep para la capa de la red


host y dig: consultas DNS


lsof: descriptor de archivo de procesos e información de socket


dstat: sistema de estadísticas útil


glances: visión general de multi-subsistemas, de alto nivel


iostat: estadísticas del uso del disco duro


mpstat: estadísticas del uso del CPU


vmstat: estadísticas del uso de la memoria


htop: versión mejorada de top


last: historial de login


w: quién está autenticado


id: información de identidad de usuario/grupo


sar: estadísticas históricas del sistema


iftop o nethogs: utilización de la red por un socket o proceso


ss: estadísticas de socket


dmesg: mensajes de error del arranque y del sistema


sysctl: examina y configura los parámetros de kernel de Linux en tiempo de ejecución


hdparm: manipulación/rendimiento de discos SATA/ATA


lsblk: lista de dispositivos de bloque: una vista tipo arbol de sus discos y particiones de disco


lshw, lscpu, lspci, lsusb, dmidecode: información de hardware, incluyendo CPU, BIOS, RAID, gráficos, dispositivos, etc


lsmod y modinfo: lista y muestra detalles de los módulos del kernel


fortune, ddate, y sl: um, bien, depende de si considera las locomotoras de vapor y citas Zippy "útiles"


Solo para OS X
Estos son puntos relevantes únicamente para OS X.


Administración de paquetes con brew (Homebrew) y/o port (MacPorts). Estos pueden ser utilizados para instalar en OS X muchos de los comandos de arriba.


Copie la salida de cualquier comando en una aplicación de escritorio con pbcopy y pegue una entrada con pbpaste.


Para activar la tecla Option en un OS X Terminal como una tecla alt (tal como se usan en los comandos más arriba como  alt-b, alt-f, etc.), abre Preferencias -> Perfiles -> Teclado y selecciona "Usa Option como tecla Meta".


Para abrir un archivo con una aplicación de escritorio, use open o open -a /Applications/Whatever.app.


Spotlight: Busque archivos con mdfind y liste metadata (tal como información de foto EXIF) con mdls.


Ten en cuenta que OS X está basado en BSD Unix, y muchos comandos (por ejemplo ps, ls, tail, awk, sed) tiene sutiles variaciones en comparación con Linux, que está en gran parte influenciado por el sistema Unix V-style y herramientas GNU. Comunmente se puede diferenciar al notar que una página man tienen el encabezado "BSD General Commands Manual." En algunos casos versiones GNU pueden ser instaladas también (tales como gawk y gsed para GNU awk y sed). Si escribe Bash scripts multiplataforma, evite tales comandos (por ejemplo, considere Python o perl) o prueba cuidadosamente.


Para obtener la información de la versión del OS X, usa sw_vers.


Solo para Windows
Estos son puntos relevantes únicamente para Windows.
-En Windows 10, puedes usar Bash de Ubuntu en Windows que proporciona un entorno familiar con la línea de comandos en Unix. Su lado positivo, este permite a los programas de Linux ejecutarse en Windows. Por otro lado este no soporta ejecutar de programas de Windows desde la línea de comandos Bash.


Accede al poder del shell de Unix en Microsoft Windows instalando Cygwin. La mayoría de las cosas descritas en este documento funcionaran en su configuración por defecto.


Instala programas adicionales de Unix con el gestor de paquetes de Cygwin


Usa mintty como tu línea de comando.


Accede al portapapeles de Windows a través de /dev/clipboard.


Ejecuta cygstart para abrir un archivo arbitrario a través de su aplicación registrada.


Accede al registro de Windows con regtool.


Ten en cuenta que la ruta C:\ del disco Windows se transforma en /cygdrive/c en Cygwin, y que Cygwin / aparece en C:\cygwin en Windows. Convierte entre Cygwin y rutas de archivos estilo Windows con cygpath. Este es el más útil de los scripts que invocan programas de Windows.


Puedes ejecutar y hacer scripts de la mayoría de las tareas administrativas del sistema de Windows desde la línea de comandos aprendiendo y usando wmic.


Otra opción para obtener la apariencia y sensación de Unix en Windows es Cash. Ten en cuenta que muy pocos comandos de Unix y opciones de la línea de comandos están disponibles en este entorno.


Una opción alternativa para tener herramientas de desarrollo GNU (algo como GCC) en windows es MinGW y MSYS su paquete, que proporciona utilidades tales como bash, gawk, make y grep. MSYS no tiene todas las características al compararse con Cygwin. MinGW es particularmente útil para crear ejecutables nativos de Windows de las herramientas Unix.


Más recursos

awesome-shell: Una lista curada de herramientas shell y recursos.
awesome-osx-command-line: Una guía más detallada para la línea de comandos del OS X.
Strict mode para escribir mejores script shell.
shellcheck: Una herramienta de análisis estadístico del script shell. Esencialmente, lint para bash/sh/zsh.
Filenames and Pathnames in Shell: Las menudencias tristemente complejas sobre cómo manejar nombres de archivos correctamente en shell scripts.

Advertencia
Con la excepción de tareas muy pequeñas, el código está escrito para que otros puedan leerlo. Con el poder llega la responsabilidad. El hecho de que puedes hacer algo en Bash no necesariamente significa que deba hacerlo! ;)
Licencia

Este trabajo está licenciado bajo Creative Commons Attribution-ShareAlike 4.0 International License.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/README-es.mdCopy path Blame  Blame        Latest commit HistoryHistory553 lines (318 loc) · 37.1 KB masterBreadcrumbsthe-art-of-command-line/README-es.mdTopFile metadata and controlsPreviewCodeBlame553 lines (318 loc) · 37.1 KBRaw🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
El Arte del Terminal


Meta
Fundamentos
Uso diario
Procesamiento archivos y datos
Depuración del sistema
One-liners
Obscuro pero útil
Solo para OS X
Solo para Windows
Más recursos
Advertencia


La fluidez en el terminal es una destreza a menudo abandonada y considerada arcaica, pero ésta mejora tu flexibilidad y productividad como ingeniero de formas obvias y sutiles. Esta es una selección de notas y consejos para usar el terminal que encontramos útiles al trabajar en Linux. Algunos consejos son elementales y algunos bastante específicos, sofisticados u oscuros. Esta página no es larga, pero si puedes usar y recordar todos los puntos aquí mostrados, sabrás un montón.
Este trabajo es el resultado de muchos autores y traductores.
Parte de esta:
originalmente
apareció
en Quora,
pero se ha movido desde entonces a Github, donde personas más talentosas que el autor han hecho numerosas mejoras.
Por favor contribuye Si ves un error o algo que podría ser mejor!
Meta
Alcance:

Esta guía es tanto para principiantes como para experimentados. Los objetivos son diversidad (todo importa), especificidad (dar ejemplos concretos del caso más común), y concisión (evitar cosas que no son esenciales o insignificantes que puedas buscar fácilmente en otro lugar). Cada consejo es esencial en alguna situación o significativamente puede ahorrar tiempo comparado con otras alternativas.
Está escrita para Linux, con excepción de la secciones "Solo para OS X" y "Solo para Windows". Muchos de los otros puntos aplican o pueden ser instalados en otros Unices o OS X (o incluso Cygwin).
Se centra en Bash interactivo, aunque muchos de los consejos aplican para otros shells y al Bash scripting por lo general.
Incluye tanto comandos "estándar" Unix así como los que requieren instalaciones de paquetes especiales -- siempre que sean lo suficientemente importantes para merecer su inclusión.

Notas:

Para mantener esto en una página, el contenido está incluido implícitamente por referencia. Eres lo suficientemente inteligente para consultar más detalles en otros lugares buscando en Google una vez conoces la idea o el comando. Usa apt-get, yum, dnf, pacman, pip o brew (según proceda) para instalar los nuevos programas.
Usa Explainshell para obtener detalles de ayuda sobre que hacen los comandos, las opciones, las pipes, etc.

Fundamentos


Aprende conocimientos básicos de Bash, de hecho, escribe man bash y al menos échale un vistazo a todo el asunto. Es bastante fácil de seguir y no es tan largo. Alternar entre shells puede ser agradable, pero Bash es poderoso y siempre está disponible (conocer solo zsh, fish, etc., aunque resulte tentador en tu propia laptop, Te restringe en muchas situaciones, tales como el uso de servidores existentes).


Aprende bien al menos un editor de texto, idealmente Vim (vi), como no hay realmente una competencia para la edición aleatoria en un terminal (incluso si usa Emacs, un gran IDE, o un editor alternativo (hipster) moderno la mayor parte del tiempo).


Conoce como leer la documentación con man (Para curiosos, man man lista las secciones enumeradas, ej. 1 es comandos "regulares", 5 son archivos/convenciones, y 8 para administración). Encuentra las páginas de man apropos. Sepa que alguno de los comandos no son ejecutables, pero son Bash builtins, y que puedes obtener ayuda sobre ellos con help y help -d.


Aprende sobre redirección de salida >, entrada < y pipes utilizando |. Conozca que > sobrescribe el archivo de salida y >> añade. Aprende sobre stdout y stderr.


Aprende sobre expansión de archivos glob con * (y tal vez ? y [...]) y quoting y la diferencia entre comillas dobles " y simples '. (Ver más en expansión de variables más abajo.)


Familiarízate con la administración de trabajo en Bash: &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Conoce ssh y lo básico de autenticación sin contraseña, vía ssh-agent, ssh-add, etc.


Administración de archivos básica: ls y ls -l (en particular, aprende el significado de cada columna en ls -l), less, head, tail y tail -f (o incluso mejor, less +F), ln y ln -s (aprende las diferencias y ventajas entre enlaces hard y soft), chown, chmod, du (para un resumen rápido del uso del disco: du -hs *). Para administración de archivos de sistema, df, mount, fdisk, mkfs, lsblk. Aprenda que un inode es ls -i or df -i).


Administración básica de redes: ip o ifconfig, dig.


Aprende y usa un sistema de control de versiones, por ejemplo git.


Conoce bien las expresiones regulares y varias opciones (flags) para grep/egrep. Las opciones -i, -o, -v, -A, -B y -C son dignas de ser recordadas.


Aprende el uso de apt-get, yum, dnf o pacman (dependiendo de la distribución "distro") para buscar e instalar paquetes. Y asegúrate que tienes pip para instalar la herramienta de línea de comando basada en Python (un poco más abajo esta explicado como instalar vía pip).


De uso diario


En Bash, se usa Tab para completar los argumentos o lista todos los comandos disponibles y ctrl-r para buscar a través del historial de comandos (despues de presionar, escribe la búsqueda, presiona ctrl-r repetidamente para hacer un ciclo a través de más coincidencias, presiona Enter para ejecurar el comando encontrado, o presiona la flecha derecha para poner el resultado en la línea actual y editar).


En Bash, se usa ctrl-w para borrar la última palabra, y ctrl-u para borrar todo hacia atrás hasta el inicio de la línea. Se usa alt-b y alt-f para moverse entre palabras, ctrl-a para mover el cursor al principio de la línea,  ctrl-e para mover el cursor al final de la línea,  ctrl-k para eliminar hasta el final de la línea, ctrl-l para limpiar la pantalla. Ver man readline para todos los atajos de teclado por defecto en Bash. Son una gran cantidad. Por ejemplo alt-. realiza un ciclo a través de los comandos previos, y alt-* expande un glob.


Alternativamente, si amas los atajos de teclado vi-style, usa set -o vi. (y set -o emacs para regresar a la anterior).


Para editar largos comandos, después de configurar to editor (por ejemplo export EDITOR=vim), ctrl-x ctrl-e se abrirá el comando actual en un editor para editar multiples líneas. O en estilo vi, escape-v.


Para ver los últimos comandos, history. También existen abreviaciones, tales como, !$ (último argumento) y !! último comando, aunque son fácilmente remplazados con ctrl-r y alt-..


Para volver al directorio principal con cd. Accede a los archivos relativos a tu directorio principal con el prefijo ~ (ej. ~/.bashrc). En scripts hrefierete al directorio principal con $HOME.


Para volver al directorio de trabajo previo: cd -.


Si estás a medio camino al escribir un comando pero cambias de opinión, presiona alt-# para agregar un # al principio y lo agrega como comentario (o usa ctrl-a, #, enter). Luego puedes regresar a este vía comando history.


Usa xargs (o parallel). Es muy poderoso. Ten en cuenta que puedes controlar cuántos elementos son ejecutados por línea (-L), así como el paralelismo (-P). Si no estas seguro de que este haga la cosa correcta, usa xargs echo primero. También, -I{} es útil. Ejemplos:


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p es útil para mostrar el árbol de procesos.


Usa pgrep y pkill para encontrar o señalar procesos por su nombre (-f es de mucha ayuda).


Conoce las señales que puedes enviar a los procesos. Por ejemplo, para suspender un proceso usa kill -STOP [pid]. Con man 7 signal puedes ver la lista completa


Usa nohup o disown si quieres que un proceso de fondo se mantenga corriendo para siempre.


Verifica que procesos están escuchando vía netstat -lntp o ss -plat (para TCP; agrega -u para UDP).


Consulta también lsof para abrir sockets y archivos.


Consulta uptime o w para conocer cuánto tiempo el sistema ha estado corriendo.


Usa alias para crear atajos para comandos comúnmente usados. Por ejemplo, alias ll="las -latr" crea el alias ll


En Bash scripts, usa set -x (o su variantes set -v, que registra las entradas sin procesar, incluyendo variables sin expander y comantarios) para depurar la salida. Usa el modo estricto al menos que tengas una buena razón para no hacerlo: Usa set -e para abortar en caso de errores (códigos de salida distintos a cero). Usa set -u para detectar uso de variables no definidas. Considera set -o pipefail también, para los errores con pipes, también (estudiar mas sobre este como un tema delicado). Para scripts más complejos, usa también trap. en EXIT o ERR. Un hábito útil es para comenzar un script como este, el cual detectará y abortará con errores comunes e imprimirá un mensaje:


    set -euo pipefail
    trap "echo 'error: Falló del Script: ver arriba comando que falló'" ERR

En Bash scripts, subshells (escritos con paréntesis) son maneras convenientes para agrupar los comandos. Un ejemplo común es temporalmente moverse hacia un directorio de trabajo diferente, Ej.

      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir


En Bash, considera que hay muchas formas de expansión de variables. Verificar la existencia de una variable: ${name:?error message}. Por ejemplo, si un script Bash requiere un único argumento, solo escribe input_file=${1:?usage: $0 input_file}. Expansión aritmética: i=$(( (i + 1) % 5 )). Secuencias: {1..10}. Reducción de cadenas de texto: ${var%suffix} y ${var#prefix}. Por ejemplo si var=foo.pdf, entonces echo ${var%.pdf}.txt imprime foo.txt.


Utilizando la expansión de corchetes {...} puede reducir el tener que retipear un texto similar y automatizar conbinaciones de elementos. Esto es útil en ejemplos como mv foo.{txt,pdf} some-dir (el cual mueve ambos archivos), cp somefile{,.bak} (el cual se expandirá a cp somefile somefile.bak) o mkdir -p test-{a,b,c}/subtest-{1,2,3} (el cual se expandirá en todas las posibles conbinaciones y creará un árbol de directorios).


La salida de un comando puede ser tratado como un archivo por medio de <(some command). Por ejemplo, comparar el /etc/hosts local con uno remoto:


      diff /etc/hosts <(ssh somehost cat /etc/hosts)


Conocer acerca de "here documents" en Bash, como también de cat <<EOF ....


En Bash, redirecciona ambas la salida estándar y el error estándar, mediante: some-command >logfile 2>&1 o some-command &>logfile. Frecuentemente, para garantizar que un comando no haya dejado abierto un archivo para controlar la entrada estándar vinculada al terminal en el que te encuentras y también como buena práctica puedes agregar </dev/null.


Usa man ascii para una buena tabla ASCII con valores hexadecimal y decimales. Para información de codificación general, man unicode, man utf-8, y man latin1 son de utilidad.


Usa screen o tmux para multiplexar la pantalla, especialmente útil en sesiones ssh remotas y para desconectar y reconectar a una sesión. byobu puede mejorar la pantalla o tmux proporcionando mayor información y gestión ás sencilla. Una alternativa más minimalista para persistencia de la sesión solo sería dtach.


En ssh, saber cómo hacer un port tunnel con -L o -D (y de vez en cuando -R) es útil, Ej. para acceder a sitios web desde un servidor remoto.


Puede ser útil hacer algunas optimizaciones a su configuración ssh; por ejemplo, ~/.ssh/config, contiene la configuración para evitar desconexiones en ciertos entornos de red, utiliza compresión (cual es útil con scp sobre conexiones con un bajo ancho de banda), y la multiplexión de canales para el mismo servidor con un archivo de control local:


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Algunas otras opciones relevantes a ssh son sensibles en cuanto a seguridad y deben ser usadas con cuidado, Ej. por subnet, host o en redes confiables: StrictHostKeyChecking=no, ForwardAgent=yes.


Considera mosh una alternativa para ssh que utiliza UDP, evitando conexiones caidas y agregando conveniencia en el camino. (require configuración del lado del servidor).


Para obtener permiso sobre un archivo en forma octal, el cual es útil para la configuración del sistema pero no está disponible con ls y fácil de estropear, usa algo como


      stat -c '%A %a %n' /etc/timezone


Para selección interactiva de valores desde la salida de otro comando, use percol o fzf.


Para la interacción con archivos basados en la salida de otro comando (como git), use fpp (PathPicker).


Para un servidor web sencillo para todos los archivos en el directorio actual (y subdirectorios), disponible para cualquiera en tu red, usa:
python -m SimpleHTTPServer 7777 (para el puerto 7777 y Python 2) y python -m http.server 7777 (para 7777 y Python 3).


Para ejecutar un comando con privilegios, usando sudo (para root) o sudo -u (para otro usuario). Usa su o sudo bash para realmente ejecutar un shell como este usuario. Usa su - para simular un login fresco como root u otro usuario.


Procesamiento de archivos y datos


Para localizar un archivo por nombre en el directorio actual, find . -iname '*algo*' (o similar). Para encontrar un archivo en cualquier lado por nombre, usa locate something (pero tenga en mente que updatedb quizás no haya indexado recientemente los archivos creados).


Para búsqueda general a través de archivos fuente o de datos (más avanzado que grep -r), usa ag.


Para convertir HTML a texto: lynx -dump -stdin


Para Markdown, HTML, y todos los tipos de conversión de documentos, prueba pandoc.


Si debe manipular XML, xmlstarlet es viejo pero bueno.


Para JSON usa jq.


Para YAML, usa shyaml.


Para archivos Excel o CSV, csvkit proporciona in2csv, csvcut, csvjoin, csvgrep, etc.


Para Amazon S3, s3cmd es conveniente y s4cmd es el mas rápido. aws de Amazon y el mejorado saws son esenciales para otras tareas relacionadas al AWS.


Conoce acerca de sort y uniq, incluyendo las opciones de uniq -u y -d -- ver one-liners más abajo. Ver también comm


Conoce acerca de cut, paste y join para manipular archivos de texto. Muchas personas usan cut pero se olvidan acerca de join.


Conoce acerca de wc para contar saltos de línea (-l), caracteres (-m), palabras (-w) y bytes (-c).


Conoce acerca de tee para copiar desde el stdin hacia un archivo y también hacia el stdout, al igual que en ls -al | tee file.txt.


Conoce que la localización afecta muchas herramientas de línea de comando en forma delicada, incluyendo el ordenamiento (compaginación) y rendimiento. La mayoría de las instalaciones de Linux configuran LANG u otras variables de localización para la configuración local como US English. Pero ten en mente que el ordenamiento puede cambiar si cambia la localización. Y también las rutinas i18n pueden hacer que sort u otros comandos se ejecuten más lentamente. En algunas situaciones (tales como la realización de operaciones u operaciones singulares descritas más abajo) puedes ignorar las rutinas i18n por completo y utilizar el sort tradicional basado en bytes, usando export LC_ALL=C.


Conoce los aspectos básicos de awk y sed para manejo de datos. Por ejemplo, sumar todos lo números en la tercera columna de un archivo de texto: awk '{ x += $3 } END { print x }'. Esto es probablemente 3 veces más rápido y 3 veces más corto que su equivalente en Python.


Para reemplazar todas las ocurrencias de un string en su lugar, en uno o más archivos:


      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

Para renombrar multiples y/o buscar y remplazar dentro de archivos, intenta repren. (En algunos casos el comando rename también permite multiples renombramientos, pero sea cuidadoso ya que esta funcionalidad no es igual en todas las distribuciones de Linux.)

      # Renombramiento completo de archivos, carpetas y contenidos foo -> bar:
      repren --full --preserve-case --from foo --to bar .
      # Recuperar archivos de respaldo cualquier.bak -> cualquier:
      repren --renames --from '.*)\.bak' --to '\1' *.bak
      # Igual que arriba, utilizando rename, si esta disponible:
      rename 's/\.bak$//' *.bak

Como dice la página de man, rsync es una muy rápida y extraordinariamente versatil herramienta de copiado. Esta se conoce por la sincronización entre máquinas pero es igualmente útil localmente. Esta también se encuentra entre las formas más rápidas para borrar un gran número de archivos:

mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


Usa shuf para mezclar o seleccionar líneas aleatorias de un archivo.


Conoce las opciones de sort. Para números, usa -n, o -h para manipulación de números humanamente leíbles (Ej. desde du -h). Conoce el trabajo principal de (-t y -k). En particular, esta atento que lo necesitas  escribir-k1,1 para ordenar por solo el primer campo; -k1 significa ordenar de acuerdo a toda la línea. Orden estable (sort -s) puede ser útil. Por ejemplo, para organizar el primer por el campo 2, entonces secundariamente hacerlo por el campo 1, Puedes usar sort -k1,1 | sort -s -k2,2.


Si alguna vez necesitas escribir un tab literal en una línea de comandos en Bash (Ej. para el argumento -t de ordenar), presiona ctrl-v [Tab] o escribe $'\t' (El último es mejor porque puedes copiarlo/pegarlo).


Las herramientas estándar para reparar el código fuente son diff y patch. Consulta también diffstat para resumen estadístico de una diff y sdiff para un diff puesto lado a lado. Considera diff -r trabaja con directorios por completo. Usa diff -r tree1 tree2 | diffstat para el resumen de cambios. Urilizá vimdiff para comparar y editar archivos.


Para archivos binarios, usa hd, hexdeump or xxd para volcados hexdecimales simples y bvi o biew para edición de binario.


También para archivos binarios, strings (además de grep, etc.) permite encontrar fragmentos de texto.


Para diffs binaria (compresión delta), usa xdelta3.


Para convertir la codificación del texto, probar iconv. O uconv para uso más avanzado; este soporta algunos elementos Unicode avanzados. Por ejemplo, este comando coloca en minúsculas y remueve todas los acentos (por su expansión y colocándolos):


      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt


Para dividir archivos en múltiples partes, consulta split (para dividir por tamaño) y csplit (para dividir por un patrón).


Para manipular expresiones de fecha y tiempo, usa dateadd, datediff, strptime etc. de dateutils.


Usa zless, zmore, zcat, y zgrep para operar sobre archivos comprimidos.


Depuración del sistema


Para depuración web, curl y curl -I son prácticos, o como sus equivalentes wget, o el más moderno httpie.


Para conocer el estado del cpu/disco, las clásicas herramientas son top (o mejor htop), iostat, y iotop. Usa iostat -mxz 15 para CPU básicas y estadísticas detalladas y visión de rendimiento por partición del disco.


Para detalles de la conexión de red, usa netstat y ss.


Para una rápida visión general de que esta pasando en un sistema, dstat es especialmente útil. Para una visión general más amplia con detalles usa glances.


Para conocer el estado de la memoria, ejecuta y entiende la salida de free y vmstat. En particular, ten en cuenta que el valor "cached" es mantenido en memoria por el kernel de Linux como un archivo de cache, por lo que efectivamente cuenta como valor para "free".


El sistema de depuración de Java es harina de otro costal, pero un truco simple en las JSM de Oracle y otros consta en que puedes ejecutar kill -3 <pid> y una traza completa y un resumen del montículo "heap summary" (incluyendo del detalle de la colección de basura generacional, la cual puede ser altamente informativa) serán descargados al stderr/logs. Las herramientas jps, jstat, jstack, jmap del JDK son útiles. SJK tools son más avanzadas.


Usa mtr como un mejor traceroute para identificar los problemas en la red.


Para examinar por qué el disco está lleno, ncdu ahorra tiempo en comparación con los comandos usuales como du -sh *.


Para encontrar cual socket o proceso está utilizando el ancho de banda, prueba iftop o nethogs.


La herramienta ab (viene con Apache) es útil para una verificación rápida del rendimiento de un servidor web. Para pruebas de carga más complejas prueba siege.


Para una depuración mas seria de redes, wireshark, tshark, o ngrep.


Conoce acerca de strace y ltrace. Estas puede ser de utilidad si un programa está fallando, suspendido, o colgado, y no sabe por qué, o si quieres tener una idea general del rendimiento. Considera la opción de elaboración de perfiles (-c), y la habilidad de adjuntar a un proceso en ejecución (-p).


Conoce acerca ldd para verificar librerías compartidas etc.


Conoce como conectarse a un proceso en ejecución con gdb y obtener su traza de pilas.


Usa /proc. Es extraordinariamente útil algunas veces cuando se depuran problemas en vivo. Ejemplos: /proc/cpuinfo, /proc/xxx/cwd, /proc/meminfo, /proc/cmdline, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps (donde xxx es el id o pid del proceso).


Cuando se depura porque algo salió mal en el pasado, sar puede ser muy útil. Este muestra la estadística histórica en CPU, memoria, red, etc.


Para sistemas y análisis de rendimiento de mayor profundidad, examina stap (SystemTap), perf, y sysdig.


Comprueba en que OS se encuentra con uname o uname -a (información general en Unix/kernel) o lsb_release -a (información en Linux distro).


Usa dmesg siempre que algo actúe raro (esto podría ser problemas con el hardware o driver).


One-liners
Algunos ejemplos de comandos reunidos:

Es notablemente útil en ocasiones que pueda realizar intersección, unión, y diferencia de conjuntos de archivos de texto vía sort/uniq. Suponga que a y b como archivos de texto que son únicos. Esto es rápido, y trabaja con archivos de tamaño arbitrario, hasta varios gigabytes. (Sort no está limitado por la memoria, aunque quizás necesite utilizar la opción -T si /tmp está en una pequeña partición de raíz.) Consulta también la nota acerca de LC_ALL y las opciones de sort, -u (dejado de lado para clarificar más abajo).

      cat a b | sort | uniq > c   # c es a unido con b
      cat a b | sort | uniq -d > c   # c es a intersectado con b
      cat a b b | sort | uniq -u > c   # c es el conjunto diferencia a - b


Usa grep . * para rápidamente examinar el contenido de todos los archivos de un directorio (para que cada línea este emparejada con  con el nombre de archivo), o head -100 * (para que cada archivo tenga un encabezado). Esto puede se útil para directorios llenos con ajustes de configuración como aquellos en /sys, /proc, /etc.


Sumar todos los números en la tercera columna de un archivo de texto (esto es probablemente 3 veces más rápido y 3 veces menos código que el equivalente en Python):


      awk '{ x += $3 } END { print x }' miarchivo

Consultar tamaños/fechas en un árbol de archivos, esto es como un ls -l recursivo pero es más fácil de leer que ls -lR:

      find . -type f -ls

Digamos que tiene un archivo de texto, como un log de un servidor web, y un cierto valor comienza a aparecer en algunas líneas, tales como un parámetro acct_id que está presente en la URL. Si quieres un recuento de cuantas peticiones por cada acct_id:

      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn


Para monitorear continuamente los cambios, usa watch, Ej. verificar los cambios de archivos en un directorio con watch -d -n 2 'ls -rt1h | tail' o para configuraciones de red mientras solucionas problemas con la configuración wifi watch -d -n 2 ifconfig.


Ejecuta esta función para obtener un consejo aleatorio desde este documento (analiza el Markdown y extrae un elemento):


      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80
      }
Obscuro, pero útil


expr: ejecuta operaciones aritméticas o booleanas o evalúa expresiones regulares


m4: procesador de macro sencillo


yes: imprime un string sin fin


cal: lindo calendario


env: ejecuta un comando (útil en scripts)


printenv: imprime las variables del entorno (útil en depuración y scripts)


look: buscar palabras en inglés (o líneas en un archivo) comenzando con un string


cut, paste y join: manipulación de datos


fmt: formatea los párrafos de texto


pr: formatea el texto en páginas/columnas


fold: ajusta de líneas de texto


column: formatea campos de texto alineados, en columnas de ancho fijo o tablas


expand y unexpand: conversión entre tabuladores y espacios


nl: agrega números de línea


seq: imprime números


bc: calculadora


factor: factorización de enteros


gpg: encripta y firma archivos


toe: tabla de información de términos


nc: depuración de la red y transferencia de datos


socat: socket relay y redireccionador de puerto tcp (similar a netcat)


slurm: visualización del tráfico de red


dd: moviliza datos entre archivos o dispositivos


file: identifica el tipo de archivo


tree: muestra directorios y subdirectorios como un árbol anidado; parecido a ls pero recursivo


stat: información del archivo


time: ejecuta y calcula el tiempo de ejecución de un comando


timeout: ejecuta un comando especificando una cantidad de tiempo y deteniendo el proceso cuando la cantidad de tiempo especificado se completa.


lockfile: crea un archivo semáforo que puedes solo ser removido con rm -f


logrotate: rota, comprime y registra correos electrónicos.


watch: ejecuta un comando repetidamente, mostrando resultados y/o resaltando cambios


tac: imprime archivos en forma inversa


shuf: selección aleatoria de líneas de un archivo


comm: compara archivos ordenados línea por línea


pv: monitorea el progreso de datos a través de un tubo


hd, hexdump, xxd, bview y bvi: descarga o edita archivos binarios


strings: extrae texto desde archivos binarios


tr: traducción o manipulación de caracteres


iconv o uconv: conversión de codificaciones de texto


split y csplit: división de archivos


sponge: lee todas las entradas antes de escribirlo, útil para vista previa y posterior escritura sobre el mismo archivo, Ej., grep -v something some-file | sponge some-file


units: unidades de conversión y cálculos; convierte furlongs por fortnight a twips por blink (ver también /usr/share/units/definitions.units)


apg: genera contraseñas aleatorias.


7z: compresión de archivos de alto nivel


ldd: información de librería dinámica


nm: símbolos de archvios objeto


ab: benchmarking de servidores web


strace: depuración de llamadas del sistema


mtr: mejor traceroute para la depuración de la red


cssh: shell concurrente visual


rsync: sincronización de archivos y carpetas sobre SSH o en sistema de archivos locales


wireshark y tshark: captura de paquetes y depuración de la red


ngrep: grep para la capa de la red


host y dig: consultas DNS


lsof: descriptor de archivo de procesos e información de socket


dstat: sistema de estadísticas útil


glances: visión general de multi-subsistemas, de alto nivel


iostat: estadísticas del uso del disco duro


mpstat: estadísticas del uso del CPU


vmstat: estadísticas del uso de la memoria


htop: versión mejorada de top


last: historial de login


w: quién está autenticado


id: información de identidad de usuario/grupo


sar: estadísticas históricas del sistema


iftop o nethogs: utilización de la red por un socket o proceso


ss: estadísticas de socket


dmesg: mensajes de error del arranque y del sistema


sysctl: examina y configura los parámetros de kernel de Linux en tiempo de ejecución


hdparm: manipulación/rendimiento de discos SATA/ATA


lsblk: lista de dispositivos de bloque: una vista tipo arbol de sus discos y particiones de disco


lshw, lscpu, lspci, lsusb, dmidecode: información de hardware, incluyendo CPU, BIOS, RAID, gráficos, dispositivos, etc


lsmod y modinfo: lista y muestra detalles de los módulos del kernel


fortune, ddate, y sl: um, bien, depende de si considera las locomotoras de vapor y citas Zippy "útiles"


Solo para OS X
Estos son puntos relevantes únicamente para OS X.


Administración de paquetes con brew (Homebrew) y/o port (MacPorts). Estos pueden ser utilizados para instalar en OS X muchos de los comandos de arriba.


Copie la salida de cualquier comando en una aplicación de escritorio con pbcopy y pegue una entrada con pbpaste.


Para activar la tecla Option en un OS X Terminal como una tecla alt (tal como se usan en los comandos más arriba como  alt-b, alt-f, etc.), abre Preferencias -> Perfiles -> Teclado y selecciona "Usa Option como tecla Meta".


Para abrir un archivo con una aplicación de escritorio, use open o open -a /Applications/Whatever.app.


Spotlight: Busque archivos con mdfind y liste metadata (tal como información de foto EXIF) con mdls.


Ten en cuenta que OS X está basado en BSD Unix, y muchos comandos (por ejemplo ps, ls, tail, awk, sed) tiene sutiles variaciones en comparación con Linux, que está en gran parte influenciado por el sistema Unix V-style y herramientas GNU. Comunmente se puede diferenciar al notar que una página man tienen el encabezado "BSD General Commands Manual." En algunos casos versiones GNU pueden ser instaladas también (tales como gawk y gsed para GNU awk y sed). Si escribe Bash scripts multiplataforma, evite tales comandos (por ejemplo, considere Python o perl) o prueba cuidadosamente.


Para obtener la información de la versión del OS X, usa sw_vers.


Solo para Windows
Estos son puntos relevantes únicamente para Windows.
-En Windows 10, puedes usar Bash de Ubuntu en Windows que proporciona un entorno familiar con la línea de comandos en Unix. Su lado positivo, este permite a los programas de Linux ejecutarse en Windows. Por otro lado este no soporta ejecutar de programas de Windows desde la línea de comandos Bash.


Accede al poder del shell de Unix en Microsoft Windows instalando Cygwin. La mayoría de las cosas descritas en este documento funcionaran en su configuración por defecto.


Instala programas adicionales de Unix con el gestor de paquetes de Cygwin


Usa mintty como tu línea de comando.


Accede al portapapeles de Windows a través de /dev/clipboard.


Ejecuta cygstart para abrir un archivo arbitrario a través de su aplicación registrada.


Accede al registro de Windows con regtool.


Ten en cuenta que la ruta C:\ del disco Windows se transforma en /cygdrive/c en Cygwin, y que Cygwin / aparece en C:\cygwin en Windows. Convierte entre Cygwin y rutas de archivos estilo Windows con cygpath. Este es el más útil de los scripts que invocan programas de Windows.


Puedes ejecutar y hacer scripts de la mayoría de las tareas administrativas del sistema de Windows desde la línea de comandos aprendiendo y usando wmic.


Otra opción para obtener la apariencia y sensación de Unix en Windows es Cash. Ten en cuenta que muy pocos comandos de Unix y opciones de la línea de comandos están disponibles en este entorno.


Una opción alternativa para tener herramientas de desarrollo GNU (algo como GCC) en windows es MinGW y MSYS su paquete, que proporciona utilidades tales como bash, gawk, make y grep. MSYS no tiene todas las características al compararse con Cygwin. MinGW es particularmente útil para crear ejecutables nativos de Windows de las herramientas Unix.


Más recursos

awesome-shell: Una lista curada de herramientas shell y recursos.
awesome-osx-command-line: Una guía más detallada para la línea de comandos del OS X.
Strict mode para escribir mejores script shell.
shellcheck: Una herramienta de análisis estadístico del script shell. Esencialmente, lint para bash/sh/zsh.
Filenames and Pathnames in Shell: Las menudencias tristemente complejas sobre cómo manejar nombres de archivos correctamente en shell scripts.

Advertencia
Con la excepción de tareas muy pequeñas, el código está escrito para que otros puedan leerlo. Con el poder llega la responsabilidad. El hecho de que puedes hacer algo en Bash no necesariamente significa que deba hacerlo! ;)
Licencia

Este trabajo está licenciado bajo Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\n🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
L'art de la ligne de commande
Note : Je prévois de réviser le document et suis à la recherche d'un nouveau co-auteur pour en faire un guide plus complet.
Bien que très populaire, il pourrait être plus étendu et un peu plus approfondi.
Si vous aimer écrire, n'êtes pas loin d'être un expert du sujet et êtes disposé à contribuer, veuillez me laisser un message à josh (0x40) holloway.com. –jlevy, Holloway. Merci !

Méta
Notions de base
Utilisation quotidienne
Traitement des fichiers et des données
Débogage du système
Unilignes
Obscures mais utiles
Uniquement macOS
Uniquement Windows
Autres ressources
Avertissement


La maîtrise de la ligne de commande est une compétence souvent négligée ou considérée ésotérique, pourtant elle améliore de façon évidente et subtile votre habilité et votre productivité en tant qu'ingénieur.
Ceci est une sélection de notes et d'astuces sur l'utilisation de la ligne de commande que nous avons trouvées utiles en travaillant avec Linux.
Certaines sont élémentaires, d'autres sont assez spécifiques, complexes ou obscures.
Cette page n'est pas bien longue, mais si vous pouvez retenir et vous servir de tout ce qui s'y trouve, alors vous saurez beaucoup de choses.
Ce document est le fruit du travail de nombreux auteurs et traducteurs.
Une partie de celui-ci a été initialement publiée sur Quora, mais il se trouve maintenant sur GitHub, où des personnes plus compétentes que l'auteur originel ont apporté de nombreuses améliorations.
N'hésitez pas à poser des questions sur la ligne de commande.
Merci de contribuer si vous voyez une erreur ou quelque chose qui pourrait être amélioré !
Méta
Contexte :

Ce guide est destiné aux débutants et aux utilisateurs chevronnés.
Les objectifs sont l'envergure (tout est important), la spécificité (donner des exemples concrets des cas les plus courants) et la concision (éviter tout ce qui n'est pas essentiel et les digressions disponibles facilement ailleurs).
Chaque astuce est indispensable dans certaines situations ou fait gagner beaucoup de temps par rapport aux solutions alternatives.
Il est écrit pour Linux, à l'exception des sections « Uniquement macOS » et « Uniquement Windows ».
Beaucoup d'items s'appliquent ou peuvent être installés sur d'autres Unices ou macOS (ou même Cygwin).
L'accent est mis sur l'utilisation interactive de Bash, bien que de nombreuses astuces s'appliquent aux autres shells et à l'écriture de scripts en Bash.
Il inclut les commandes « standard » d'Unix aussi bien que celles qui nécessitent l'installation de paquets spéciaux — tant qu'ils sont suffisamment importants pour mériter d'être mentionnés.

Remarques :

Afin que le guide tienne sur une seule page, du contenu est implicitement inclus par référence.
Vous êtes suffisamment intelligents pour rechercher des renseignements ailleurs une fois que vous avez l'idée ou la commande à googler.
Utilisez apt, yum, dnf, pacman, pip ou brew (selon votre distribution ou OS) pour installer de nouveaux programmes.
Allez sur Explainshell pour obtenir de l'aide à propos des commandes, options, tubes, etc.

Notions de base


Apprenez les bases de Bash.
En fait, tapez man bash et parcourez toute la page ; elle est relativement facile à suivre et pas si longue.
Les shells alternatifs peuvent être intéressants, mais Bash est puissant et disponible partout (apprendre seulement zsh, fish, etc., bien que cela soit tentant sur votre ordinateur portable, vous limite dans bien des situations, comme par exemple lors de l'utilisation de vrais serveurs).


Apprenez à bien utiliser au moins un éditeur en mode texte.
L'éditeur nano est l'un des plus simples pour de l'édition simple (ouvrir, modifier, sauvegarder, rechercher).
Cependant pour un usage avancé dans un terminal, rien ne remplace le vénérable Vim (vi), éditeur difficile à prendre en main, mais rapide et très complet.
De nombreuses personnes utilisent également le classique Emacs, surtout pour d'importantes tâches d'édition (bien sûr, tout développeur moderne de logiciels travaillant sur un vaste projet n'utilise probablement pas un simple éditeur en mode texte et devrait donc aussi se familiariser avec des outils et des EDI graphiques modernes).


Trouver de la documentation :

Sachez comment lire une documentation avec man (pour les curieux, man man liste les sections avec leur numéro, par exemple 1 pour les commandes « normales » , 5 pour les formats des fichiers et les conventions, et 8 pour tout ce qui concerne l'administration système).
Trouvez les pages de manuel avec apropos.
Sachez que certaines commandes ne sont pas des exécutables, mais des commandes internes de Bash et que vous pouvez obtenir de l'aide à leur sujet avec help et help -d.
Utilisez type command pour déterminer si une commande est un exécutable, une commande interne du shell ou un alias.
curl cheat.sh/commande fournit une cheatsheet concise comprenant des exemples courants d'utilisation d'une commande shell.



Apprenez à rediriger les entrées et sorties au moyen de > et <, et à créer des tubes avec |.
Sachez que > écrase le fichier de sortie et >> sert à ajouter.
Renseignez-vous sur stdout et stderr.


Apprenez au sujet de l'expansion des noms de fichiers avec * (et peut-être ? et [...]), des mécanismes de citation, et de la différence entre les guillemets " et les apostrophes ' (voir ci-dessous).


Familiarisez-vous avec la gestion des processus avec Bash : &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Apprenez ssh et les principes de l'authentification sans mot de passe à l'aide de ssh-agent, ssh-add, etc.


Les bases de la gestion des fichiers : ls et ls -l (en particulier, apprenez la signification de chacune des colonnes de ls -l), less, head, tail et tail -f (ou mieux, less +F), ln et ln -s (apprenez les différences et les avantages des liens durs par rapport aux liens symboliques), chown, chmod, du (pour un rapide résumé de l'espace disque occupé : du -hs *).
Pour la gestion du système de fichiers : df, mount, fdisk, mkfs, lsblk.
Apprenez ce qu'est un inode (ls -i ou df -i).


Les bases de l'administration réseau : ip, ifconfig, dig, traceroute et route.


Apprenez à vous servir d'un logiciel de gestion de versions tel que git, et utilisez-le.


Apprenez les expressions régulières et les différents drapeaux de grep et egrep.
Les options -i, -o, -v, -A, -B et -C sont bonnes à connaître.


Apprenez à utiliser apt-get, yum, dnf ou pacman (selon la distribution) pour trouver et installer des paquets.
Assurez-vous d'avoir pip pour installer des outils en ligne de commande écrits en Python (quelques-uns ci-dessous sont plus faciles à installer avec pip).


Utilisation quotidienne


En Bash, utilisez Tab pour compléter les arguments ou lister toutes les commandes disponibles, et ctrl-r pour rechercher dans l'historique des commandes (tapez pour rechercher, appuyez sur ctrl-r plusieurs fois pour parcourir les différentes correspondances, appuyez sur Enter pour exécuter la commande trouvée ou sur la flèche droite pour l'éditer).


En Bash, utilisez ctrl-w pour effacer le mot précédent et ctrl-u pour effacer tout ce qui précède le curseur.
Utilisez alt-b et alt-f pour se déplacer mot par mot, ctrl-a pour déplacer le curseur au début de la ligne, ctrl-e pour déplacer le curseur à la fin de la ligne, ctrl-k pour effacer depuis le curseur jusqu'à la fin de la ligne, ctrl-l pour effacer l'écran.
Voir man readline pour la liste des raccourcis clavier par défault de Bash.
Il y en a beaucoup.
Par exemple alt-. fait défiler les arguments précédents et alt-* développe un glob.


Sinon, si vous adorez les combinaisons de touches dans le style vi, utilisez set -o vi (set -o emacs pour revenir en arrière).


Pour éditer de longues commandes, après avoir configuré votre éditeur (par exemple export EDITOR=vim), ctrl-x ctrl-e (escape-v dans le style vi) ouvre l'éditeur pour éditer la commande courante.


Consultez les commandes récentes avec history.
Faites !n pour rappeler la commande numéro n.
Il y a aussi beaucoup d'autres abréviations, les plus utiles étant probalement !$ pour le dernier argument et !! pour la dernière commande (voir la section « HISTORY EXPANSION » de la page de manuel).
Cependant, celles-ci peuvent être aisément remplacées par ctrl-r et alt-..


Placez-vous dans votre répertoire personnel avec cd.
Accédez aux fichiers à partir de leurs chemins relatifs par rapport à votre répertoire personnel en préfixant ceux-ci avec ~ (p. ex. ~/.bashrc).
Dans les scripts shell, désignez le répertoire personnel par $HOME.


Pour revenir au répertoire de travail précédent : cd -.


Si vous êtes au milieu de la saisie d'une commande mais que vous changez d'avis, tapez alt-# pour ajouter # au début de la ligne et l'entrer comme un commentaire (ou utilisez ctrl-a, #, enter).
Vous pouvez alors y revenir plus tard à l'aide de la commande history.


Utilisez xargs (ou parallel).
C'est très puissant.
Remarquez que vous pouvez contrôler le nombre d'items à exécuter par ligne (-L) ainsi que la parallélisation (-P).
Si vous n'êtes pas sûr d'avoir fait ce qu'il faut, utilisez d'abord xargs echo.
L'option -I{} est également pratique.
Exemples :


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p fournit un affichage utile des processus sous la forme d'un arbre.


pgrep et pkill pour rechercher ou envoyer un signal à des processus en fonction de leur nom (-f est utile).


Connaissez les différents signaux que vous pouvez envoyer aux processus.
Par exemple, pour suspendre l'exécution d'un processus, utilisez kill -STOP [pid].
Pour la liste complète, consultez man 7 signal.


Utilisez nohup ou disown pour qu'un processus en arrière-plan reste actif indéfiniment.


Vérifiez quels sont les processus qui écoutent à l'aide de netstat -lntp, ss -plat (pour TCP; ajoutez -u pour UDP) ou lsof -iTCP -sTCP:LISTEN -P -n (qui fonctionne aussi sur macOS).


Voyez également lsof et fuser pour la liste des sockets et fichiers ouverts.


Voyez uptime ou w pour savoir depuis combien de temps le système fonctionne.


Utilisez alias pour créer des raccourcis vers les commandes fréquemment utilisées.
Par exemple, alias ll='ls -latr' crée un nouvel alias ll.


Conservez les alias, les paramètres du shell et les fonctions fréquemment utilisées dans le fichier ~/.bashrc, et arrangez-vous pour qu'il soit chargé par le shell de connexion.
Ainsi, votre configuration s'appliquera à toutes vos sessions shell.


Placez dans ~/.bash_profile la configuration de vos variables d'environnement ainsi que les commandes à exécuter lorsque vous vous connectez.
Une configuration séparée est nécessaire lorsque vous vous connectez depuis un gestionnaire de connexion graphique et pour les tâches planifiées par cron.


Synchronisez vos fichiers de configuration (p. ex. .bashrc et .bash_profile) entre plusieurs ordinateurs avec Git.


Comprennez qu'il convient d'être prudent lorsque des variables et des noms de fichiers contiennent des espaces.
Mettez vos variables entre guillemets, par exemple "$FOO".
Préférez les options -0 ou -print0 qui permettent de délimiter les noms des fichiers avec le caractère nul, par exemple locate -0 pattern | xargs -0 ls -al ou find / -print0 -type d | xargs -0 ls -al.
Pour itérer sur des noms de fichiers contenant des espaces dans une boucle for, positionnez la variable IFS avec le caractère de retour à la ligne à l'aide de IFS=$'\n'.


Dans les scripts Bash, utilisez set -x (ou la variante set -v qui enregistre les entrées brutes, y compris les variables non référencées et les commentaires) pour l'affichage d'informations de débogage.
Utilisez les modes stricts à moins que vous ayez une bonne raison de ne pas le faire : utilisez set -e pour interrompre le script en cas d'erreur (code de sortie non nul).
Utilisez set -u pour détecter l'utilisation d'une variable non initialisée.
Envisagez aussi set -o pipefail pour détecter les erreurs dans les tubes (cependant lisez-en plus si vous l'utilisez car ce sujet est un peu délicat).
Pour des scripts plus compliqués, servez-vous également de trap pour intercepter EXIT ou ERR.
Une bonne habitude est de commencer un script comme cela, ce qui lui permettra de détecter les erreurs courantes, de s'interrompre et d'afficher un message :


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

Dans les scripts en Bash, les sous-shells (placés entre parenthèses) sont commodes pour grouper des commandes.
Un exemple classique consiste à se déplacer temporairement dans un autre répertoire de travail :

      # faire quelque chose dans le répertoire courant
      (cd /some/other/dir && other-command)
      # continue dans le répertoire original


Notez qu'en Bash, il existe de nombreux types d'expansions de variables. Pour vérifier l'existence d'une variable : ${name:?error message}.
Par exemple, si un script en Bash exige un unique argument, il suffit d'écrire input_file=${1:?usage: $0 input_file}.
Pour utiliser une valeur par défaut si une variable est vide : ${name:-default}.
Si vous souhaitez ajouter un paramètre supplémentaire facultatif dans l'exemple précédent, vous pouvez écrire quelque chose comme output_file=${2:-logfile}.
Si $2 est omis et donc vide, output_file prendra la valeur logfile.
L'évaluation arithmétique : i=$(( (i+1) % 5).
Les listes d'entiers : {1..10}
Suppression de préfixes et de suffixes : ${var%suffix} et ${var#prefix}.
Par exemple, si var=foo.pdf, alors echo ${var%.pdf}.txt affiche foo.txt.


L'expansion des accolades avec {...} évite de retaper des textes similaires et automatise les combinaisons d'éléments de listes.
C'est utile dans des exemples comme  mv foo.{txt,pdf} some-dir (qui déplace les deux fichiers), cp somefile{,.bak} (équivalent à cp somefile somefile.bak) ou mkdir -p test-{a,b,c}/subtest-{1,2,3} (qui engendre toutes les combinaisons possibles et crée une arborescence de répertoires).
L'expansion des accolades est effectuée avant toutes les autres expansions.


Les expansions sont exécutées dans l'ordre suivant : expansion des accolades, développement du tilde, remplacement des paramètres et des variables, évaluation arithmétique, substitution de commande (de la gauche vers la droite), découpage en mots, puis développement des chemins.
Par exemple, une liste telle que {1..20} ne peut s'exprimer avec des variables en utilisant {$a..$b}.
À la place, utilisez seq ou une boucle for ; par exemple, seq $a $b ou for((i=a; i<=b; i++)); do ...; done.


La sortie d'une commande peut être traitée comme un fichier à l'aide de <(some command) (substitution de processus).
Par exemple, pour comparer le fichier local /etc/hosts avec un fichier distant :


      diff /etc/hosts/ <(ssh somehost cat /etc/hosts)

Lorsque vous écrivez des scripts, vous pourriez avoir envie de placer votre code entre accolades.
S'il manque l'accolade fermante, les scripts ne pourront s'exécuter à cause d'une erreur de syntaxe.
C'est particulièrement utile pour des scripts mis à disposition sur le web, afin de prévenir leur exécution lorsqu'ils sont partiellement téléchargés.

{
    # Votre code ici
}

Un « document intégré » permet de rediriger plusieurs lignes en entrée comme si elles provenaient d'un fichier :

cat <<EOF
entrée sur
plusieurs lignes
EOF



En Bash, redirigez à la fois la sortie standard et la sortie des erreurs à l'aide de some-command > logfile 2>&1 ou some-command &>logfile.
Souvent, pour s'assurer qu'une commande ne laisse pas un descripteur de fichier ouvert sur l'entrée standard, l'attachant au terminal dans lequel vous vous trouvez, une bonne pratique consiste à ajouter </dev/null.


Utilisez man ascii pour une bonne table ASCII avec les valeurs décimales et hexadécimales.
Pour des informations générales sur l'encodage, man unicode, man utf-8 et man latin1 sont utiles.


Utilisez screen ou tmux pour multiplexer une fenêtre de terminal, particulièrement utile pour des sessions SSH distantes, et pour détacher et rattacher une session.
byobu peut améliorer screen ou tmux en fournissant plus d'informations et une gestion plus facile.
Une alternative plus légère pour la persistance des sessions seulement est dtach.


Il est utile de savoir comment créer un tunnel SSH avec -L ou -D (et occasionnellement -R), par exemple pour accéder à des sites web à partir d'un serveur distant.


Il peut être intéressant d'effectuer quelques optimisations à votre configuration de ssh ; par exemple, le fichier ~/.ssh/config contient des paramètres pour éviter les pertes de connexion dans certains environnements réseaux, pour utiliser la compression (ce qui est utile avec scp sur des connexions à faible bande passante), et pour le multiplexage de canaux vers le même serveur avec un fichier de contrôle local :


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Quelques autres options relatives à ssh sont sensibles pour la sécurité et ne devraient être activées qu'avec la plus grande prudence. Par exemple, sur des sous-réseaux, des hôtes ou des réseaux sûrs : StrictHostKeyChecking=no, ForwardAgent=yes.


Envisagez mosh comme une alternative à ssh qui utilise UDP, évitant ainsi les pertes de connexion et ajoutant du confort en situation de mobilité (exige une installation côté serveur).


Pour obtenir les permissions d'un fichier en octal, utile pour configurer le système mais non fournit par ls, utilisez quelque chose comme


      stat -c '%A %a %n' /etc/timezone


Pour une sélection interactive de valeurs issues de la sortie d'une commande, utilisez percol ou fzf.


Pour interagir avec les fichiers provenant de la sortie d'une commande (p. ex. git), utilisez fpp (PathPicker).


Créez un simple serveur web pour partager les fichiers du répertoire courant (et ses sous-répertoires) avec python -m SimpleHTTPServer 7777 (port 7777 et Python 2)  et python -m http.server 7777 (port 7777 et Python 3).


Pour exécuter une commande avec les privilèges d'un autre utilisateur, utilisez sudo.
Par défaut, cet autre utilisateur est root ; utilisez -u pour spécifier un autre utilisateur.
Utilisez -i pour ouvrir une session en tant que cet autre utilisateur (on vous demandera votre mot de passe).


Pour basculer le shell sous un autre utilisateur, utilisez su username ou su - username.
Incluez - pour obtenir le même environnement que lorsque cet utilisateur se connecte.
Le nom d'utilisateur par défaut est root.
Le système vous demandera le mot de passe de l'utilisateur cible.


Sachez que l'argument de la ligne de commande a une taille limite de 128 Kio. L'erreur « Argument list too long » est fréquente avec les jokers qui reconnaissent un grand nombre de fichiers (quand cela se produit des alternatives comme find et xargs peuvent aider).


Pour une calculatrice basique (et bien sûr accéder à Python en général), utilisez l'interpréteur python.
Par exemple,


>>> 2+3
5

Traitement des fichiers et des données


Pour localiser un fichier par son nom dans le répertoire courant, find . -iname '*something*' (ou autres).
Pour trouver un fichier n'importe où par son nom, utilisez locate something (mais n'oubliez pas que updatedb peut ne pas avoir indexé les fichiers récemment créés).


Pour effectuer une recherche parmi des fichiers sources ou des fichiers de données, il existe des alternatives plus avancées ou plus rapides que grep -r, parmi lesquels (en gros du plus ancien au plus récent) ack, ag (« the silver searcher ») et rg (ripgrep).


Pour convertir du HTML en texte brut : lynx -dump -stdin.


Pour convertir du Markdown, du HTML et toutes sortes de formats texte, essayez pandoc.
Par exemple, pour convertir un document Markdown au format Word : pandoc README.md --from markdown --to docx -o temp.docx


Si vous devez manipuler du XML, l'ancien xmlstarlet marche bien.


Pour le JSON, utilisez jq.
Voir également jid and jiq pour une utilisation interactive.


Pour le YAML, utilisez shyaml.


Pour les fichiers Excel ou CSV, csvkit fournit in2csv, csvcut, csvjoin, csvgrep, etc.


Pour Amazon S3, s3cmd est pratique et s4cmd est plus rapide.
L'outil d'Amazon aws et la version améliorée saws sont indispensables pour les autres tâches liées à AWS.


Connaissez sort et uniq, y compris les options -u et -d de uniq (voir les unilignes plus bas). Voir aussi comm.


Sachez utiliser cut, paste et join pour manipuler les fichiers texte.
Beaucoup de personnes utilisent cut mais oublient join.


Connaissez wc pour compter les lignes (-l), les caractères (-m), les mots (-w) et les octets (-c).


Connaissez tee pour copier depuis stdin vers un fichier ou vers stdout, comme dans ls -al | tee file.txt.


Pour des calculs plus complexes, incluant les regroupements, les inversions de champs et des calculs statistiques, considérez datamash.


Sachez que la locale affecte de nombreux outils en ligne de commande de manière subtile, comme l'ordre pour les tris (collation) et les performances.
La plupart des installateurs Linux définissent la variable LANG ou d'autres variables locales d'environnement pour configurer une locale telle que US English.
Mais ayez à l'esprit que le tri sera modifié si vous changez la locale.
Et sachez que les routines i18n peuvent rendre les opérations de tri et d'autres commandes beaucoup plus lentes.
Dans certains cas (tels que les opérations concernant les ensembles et l'unicité abordées ci-dessous) vous pouvez, sans risque, ignorer complètement les lentes routines i18n et utiliser l'ordre de tri classique fondé sur les valeurs des octets à l'aide de export LC_ALL=C.


Vous pouvez modifier l'environnement d'une commande particulière en préfixant son invocation par l'affectation de variables, comme dans TZ=Pacific/Fiji date.


Apprenez awk et sed pour de l'analyse de données élémentaire.
Voir la section Unilignes pour des exemples.


Par exemple, pour effectuer la somme de tous les nombres de la troisième colonne d'un fichier texte : awk '{ x += $3 } END { print x}'.
C'est probablement trois fois plus rapide et trois fois plus petit que son équivalent en Python.

Pour remplacer toutes les occurences d'une chaîne de caractères dans un ou plusieurs fichiers :

    perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

Pour renommer de multiples fichiers ou effectuer des recherches et des remplacements dans des fichiers, essayez repren (dans certains cas la commande rename permet aussi de renommer de multiples fichiers, mais soyez prudent car ses fonctionnalités ne sont pas les mêmes sur toutes les distributions Linux).

    # Renomme les répertoires, les fichiers et leurs contenus à l'aide
    # de la substitution foo -> bar :
    repren --full --preserve-case --from foo --to bar .
    # Restaure des fichiers de sauvegarde à l'aide de la
    # substitution whatever.bak -> whatever :
    # Même chose que ci-dessus avec rename s'il est disponible :
    rename 's/\.bak$//' *.bak

Selon sa page de manuel, rsync est un outil de duplication de fichiers vraiment rapide et incroyablement polyvalent.
Il est connu pour faire de la synchronisation entre machines, mais est également utile pour un usage local.
Lorsque les mesures de sécurité l'autorisent, utiliser rsync au lieu de scp permet de reprendre un transfert interrompu sans devoir le recommencer zéro.
Il est aussi l'un des outils les plus rapides pour effacer un grand nombre de fichiers :

    mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


Pour surveiller l'état d'avancement d'une copie de fichiers, utilisez pv, pycp, pmonitor, progress, rsync --progress, ou dd status=progress dans le cas d'une copie par blocs.


Utilisez shuf pour mélanger ou sélectionner aléatoirement des lignes d'un fichier.


Sachez les options de sort.
Pour les nombres, utilisez -n, ou -h s'ils sont dans un format lisible par un humain (p. ex. issus de du -h).
Comprenez le fonctionnement des clés (-t et -k).
En particulier, faites attention à bien écrire -k1,1 pour trier seulement selon le premier champ : -k1 signifie que l'on trie selon la ligne entière.
Le tri stable (sort -s) peut s'avérer utile.
Par exemple, pour trier d'abord selon le champ 2, puis selon le champ 1, vous pouvez utiliser sort -k1,1 | sort -s -k2,2.


Si jamais vous avez besoin d'écrire un caractère de tabulation dans une ligne de commande en Bash (p. ex pour le paramètre de l'option de tri -t), entrez ctrl-v [Tab] ou écrivez $'\t' (préférable car vous pouvez le copier-coller).


Les outils habituels pour patcher un code source sont diff et patch.
Voir aussi diffstat pour un relevé statistique d'un diff et sdiff pour un affichage côte à côte d'un diff.
Remarquez que diff -r marche avec des répertoires entiers.
Utilisez diff -r tree1 tree2 | diffstat pour obtenir un résumé des changements.
Utilisez vimdiff pour comparer et éditer des fichiers.


Pour les fichiers binaires, utilisez hd, hexdump ou xxd pour un affichage simple en hexadécimal et bvi, biew pour éditer des fichiers binaires.


Également pour les fichiers binaires, strings (ainsi que grep, etc) vous permet d'y trouver des bouts de texte.


Pour effectuer des différences entre des fichiers binaires (compression différentielle), utilisez xdelta3.


Pour changer l'encodage d'un texte, essayer iconv, ou uconv pour un usage plus avancée : il permet quelques trucs avancés avec l'Unicode.
Par exemple :


      # Affiche les codes hexadécimaux et les noms des caractères (utile pour déboguer) : 
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Convertit en minuscule et supprime les accents :
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; 
      ::Any-NFC;' < input.txt > output.txt


Pour découper des fichiers en morceaux, regardez split pour un découpage en morceaux de taille donnée et csplit pour un découpage en morceaux délimités par un motif.


Date et heure : pour obtenir la date et l'heure courantes au format ISO 8601, utilisez date -u +"%Y-%m-%dT%H:%M:%SZ" (d'autres options sont problématiques).
Pour manipuler des dates et des heures, utilisez dateadd, datediff, strptime, etc. fournis par dateutils.


Utilisez zless, zmore, zcat et zgrep pour travailler sur des fichiers compressés.


Les attributs d'un fichier peuvent être modifiés avec chattr et proposent une alternative de plus bas niveau aux permissions d'accès aux fichiers.
Par exemple, l'attribut immutable protège un fichier contre toute suppression accidentelle: sudo chattr +i /critical/directory/or/file.


Utilisez getfacl et setfacl pour sauvegarder et restorer les permissions. Par exemple:


    getfacl -R /some/path > permissions.txt
    setfacl --restore=permissions.txt

Pour créer rapidement un fichier vide, utilisez truncate (crée un fichier creux), fallocate (systèmes de fichiers ext4, XFS, Btrfs et OCFS2), xfs_mkfile (pour presque tous les systèmes de fichiers, disponible dans le paquet xfsprogs) ou mkfile (pour les systèmes de type Unix comme Solaris ou Mac OS X).

Débogage du système


Pour du débogage web, curl et curl -I sont pratiques, de même que leurs
équivalents avec wget  ou le plus moderne httpie.


Pour connaître l'état courant du CPU ou du disque, les outils conventionnels sont top (ou htop meilleur), iostat et iotop.
Utilisez iostat -mxz 15 pour des statistiques de base concernant le CPU, des statistiques détaillées pour les disques et un aperçu des performances.


Pour des informations sur les connexions réseaux, utilisez netstat et ss.


Pour un rapide aperçu de ce qui se passe dans le système, dstat est particulièrement utile.
Pour un aperçu plus étendu et détaillé, utilisez glances.


Pour connaître l'état de la mémoire, exécutez free et vmstat et comprenez leurs sorties.
En particulier, ayez à l'esprit que la valeur du « cache » est la mémoire utilisée par le noyau Linux comme cache de fichiers, donc compte comme de la mémoire « libre ».


Le système de débogage de Java est une autre paire de manche, cependant un truc simple sur la JVM d'Oracle et quelques autres JVMs consiste à exécuter kill -3 <pid> pour obtenir une trace complète des appels et une empreinte de la mémoire (y compris des détails sur le ramasse-miettes qui peuvent être hautement instructifs) dans stderr ou des fichiers journaux.
Les commandes jps, jstat, jstack et jmap de la JDK sont utiles. L'outil SJK est plus avancé.


Utilisez mtr comme un traceroute amélioré pour identifier les problèmes de réseau.


Pour déterminer les raisons pour lesquelles un disque est plein, ncdu permet de gagner du temps par rapport aux commandes habituelles telles que du -sh *.


Pour trouver quel socket ou processus utilise la bande passante, essayez iftop ou nethogs.


L'outil ab (fourni avec Apache) est utile pour une vérification rapide et grossière des performances d'un serveur web.
Pour des tests de charge plus complexes, essayez siege.


Pour du débogage réseau plus sérieux : wireshark, tshark ou ngrep.


Sachez utiliser strace et ltrace.
Ces commandes peuvent être utiles si un programme fonctionne mal ou plante et que vous n'en connaissez pas la raison, ou si vous voulez vous faire une idée de ses performances.
Remarquez l'option de profilage (-c) et la possibilité de s'attacher à un processus en cours d'exécution (-p).
Utilisez l'option -f pour ne pas manquer les appels des processus enfants.


Connaissez ldd pour afficher les bibliothèques partagées, mais ne l'utilisez jamais sur des fichiers qui ne sont pas dignes de confiance.


Sachez comment vous connecter à un processus en cours d'exécution avec gdb et récupérer la trace des appels.


Utilisez /proc. C'est parfois incroyablement utile pour résoudre des problèmes en live.
Exemples : /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd, /proc/xxx/smaps (où xxx est l'identifiant du processus ou pid).


Pour comprendre pourquoi quelque chose a mal tourné antérieurement, sar peut-être très utile.
Il fournit un historique concernant l'usage du CPU, de la mémoire, du réseau, etc.


Pour une analyse plus approfondie du système et de ses performances, regardez stap (SystemTap), perf et sysdig.


Vérifiez quel OS vous utilisez avec uname ou uname -a (information générale sur la version d'Unix et du noyau) ou lsb_release -a (informations sur la distribution Linux).


Utilisez dmesg à chaque fois que quelque chose de bizarre se produit (pour des problèmes liés au matériel ou aux drivers).


Si vous effacez un fichier et que du indique que l'espace occupé n'a pas été libéré, alors vérifiez si le fichier n'est pas utilisé par un processus:
lsof | grep deleted | grep "filename-of-my-big-file"


Unilignes
Quelques exemples d'assemblages de commandes :

Il est quelques fois extrèmement utile de pouvoir faire une intersection, union ou différence ensemblistes de fichiers texte à l'aide de sort et uniq.
Supposez que a et b soient des fichiers texte ne contenant pas de lignes répétées.
C'est rapide et fonctionne sur des fichiers de taille quelconque jusqu'à plusieurs gigaoctets (le tri n'est pas limité par la capacité mémoire bien que vous puissiez avoir besoin d'utiliser l'option -T si /tmp est sur une petite partition racine).
Voyez aussi la remarque à propos de LC_ALL ci-dessus et l'option -u de sort (omise ci-dessous pour plus de clarté).

    sort a b | uniq > c   # c is a union b
    sort a b | uniq -d > c   # c is a intersect b
    sort a b b | uniq -u > c   # c is set difference a - b

Embellissez les différences de deux fichiers JSON en normalisant leur syntaxe, en colorant et en paginant le résultat :

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Utilisez grep . * pour inspecter rapidement les contenus des fichiers d'un repértoire (chaque ligne est précédé du nom du fichier) ou head -100 * (chaque fichier a un titre).
Cela peut être utile pour des répertoires remplis de fichiers de configuration comme ceux de /sys, /proc, /etc.


Pour ajouter les nombres de la troisième colonne d'un fichier texte (c'est probablement trois fois plus rapide et trois fois plus petit que son équivalent en Python) :


    awk '{ x += $3 } END { print x }' myfile

Pour visualiser les tailles et les dates des fichiers d'une arborescence, une sorte de ls -l récursive, mais plus facile à lire que ls -lR :

    find . -type f -ls

Supposons que vous ayez un fichier texte comme un fichier journal de serveur web et qu'une certaine valeur, comme un paramètre acct_id présent dans l'URL, figure à certaines lignes.
Si vous voulez un décompte du nombre de requêtes pour chaque valeur de acct_id :

    egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


Pour surveiller en permanence tout changement, utilisez watch, par exemple vérifiez les modifications dans les fichiers d'un répertoire avec watch -d -n 2 'ls -rtlh | tail' ou surveillez les paramètres de votre réseau tout en dépannant la configuration de votre wifi avec watch -d -n 2 ifconfig.


Exécutez cette fonction pour afficher aléatoirement une astuce de ce guide (analyse le code en Markdown et en extrait un élément d'une des listes) :


     function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscures mais utiles


expr : effectue des operations arithmétiques et booléenne, et évalue des expressions régulières.


m4 : simple macro processeur.


yes : affiche une chaîne de caractères indéfiniment.


cal : un calendrier sympathique.


env : exécute une commande (utile dans les scripts).


printenv : imprime les variables d'environnement (utile pour le débogage et dans les scripts).


look : trouve les mots anglais (ou les lignes d'un fichier) commençant par une chaîne donnée.


cut, paste and join : manipulation des données.


fmt : formate du texte.


pr : formate un texte en pages ou en colonnes.


fold : coupe des lignes de texte.


column : formate un texte en colonnes alignées, de largeurs fixes ou en tables.


expand et unexpand : convertit les tabulations en espaces et vice-versa.


nl : numérote les lignes d'un fichier.


seq : affiche une suite de nombres.


bc : une calculatrice.


factor : factorise des nombres entiers.


gpg : chiffre et signe les fichiers.


toe : table des entrées terminfo.


nc : débogage réseau et transfert de données.


socat : relai et réacheminement de port TCP (semblable à netcat).


slurm : visualisation du trafic réseau.


dd : déplacer les données entre les fichiers ou les périphériques.


file : détermine le type d'un fichier


tree : affiche les répertoires et sous-répertoires sous la forme d'un arbre (comme ls mais récursivement).


stat : affiche des informations sur un fichier.


time: exécute et chronomètre une commande.


timeout: exécute une commande avec une limite de temps et stoppe le processus après la durée indiquée.


lockfile : crée un fichier sémaphore qui ne peut être supprimé que par rm -f


logrotate : permet la rotation, la compression et l'envoi des fichiers journaux par courrier électronique.


watch : exécute une commande périodiquement, affiche le résultat et surligne les différences entre les résultats.


when-changed : exécute n'importe quelle commande donnée à chaque fois qu'un fichier est modifié. Voir également inotifywait et entr.


tac : affiche des fichiers à l'envers.


comm : compare ligne à ligne deux fichiers triés.


strings : extrait du texte de fichiers binaires.


tr : conversion et manipulation de caractères.


iconv ou uconv : conversion entre différents encodages de caractères.


split et csplit : découpage de fichiers.


sponge : lit entièrement un flux d'entrée avant de l'écrire. Utile pour lire depuis un fichier puis écrire dans le même fichier, par exemple : grep -v something some-file | sponge some-file


units : conversions d'unités et calculs. Convertit des furlongs par fortnight en twips par blink (voir aussi /usr/share/units/deifinitions.units).


apg : génère des mots de passe aléatoires.


xz : compresse des fichiers avec un taux de compression élevé.


ldd : affiche des informations sur les bibliothèques partagées.


nm : affiche les symboles des fichiers objets.


ab ou wrk : mesure les performances de serveurs web.


strace: trace les appels système.


mtr: un traceroute amélioré pour débugguer un réseau.


cssh : visual concurrent shell


rsync : synchronise des fichiers et des dossiers via SSH ou localement.


wireshark et tshark: capture de paquets et dépannage réseau.


ngrep : grep pour les couches réseaux.


host et dig: interroge les serveurs DNS.


lsof : process file descriptor and socket info.


dstat : statistiques sur les ressources système.


glances: aperçu de haut niveau et multi-systèmes.


iostat : statistiques sur l'usage du disque.


mpstat : statistiques sur l'usage du CPU.


vmstat : statistiques sur l'usage de la mémoire.


htop : version améliorée de top.


last : historique des connexions.


w : montre qui est connecté.


id : affiche les informations sur un utilisateur et ses groupes.


sar : statistiques sur l'activité du système


iftop ou nethogs : utilisation du réseau par un socket ou un processus.


ss : statistiques relatives aux sockets.


dmesg : messages lors du démarrage et erreurs système.


sysctl : visualise et configure les paramètres du noyau Linux à chaud.


hdparm : manipulation et performances d'un disque SATA ou ATA.


lsblk : affiche les périphériques blocs (une arborescence de vos disques et de leurs partitions).


lshw, lscpu, lspci, lsusb, dmidecode : informations sur le matériel, comprenant le CPU, le BIOS, le RAID, la carte graphique, les périphériques, etc.


lsmod et modinfo : liste les modules du noyau et donne des informations sur un module.


fortune, ddate et sl : euh, bon, seulement si vous estimez que les locomotives à vapeur et les citations de Jean-Claude Van Damme sont « utiles ».


Uniquement macOS
Ce qui suit ne s'applique *qu'*à macOS.


Gestion des paquets avec brew (Homebrew) ou port (MacPorts).
Ceux-ci peuvent être utilisés pour installer sur macOS la plupart des commandes mentionnées ci-dessus.


Copier la sortie de n'importe quelle commande dans une application de bureau avec pbcopy et coller l'entrée d'une commande avec pbpaste.


Pour permettre à la touche Option de fonctionner comme la touche Alt dans le terminal de macOS (comme dans les commandes alt-b, alt-f, etc), allez dans Préférences -> Profils -> Clavier et sélectionner « Choisir la touche Option comme touche virtuelle ».


Pour ouvrir un fichier avec une application de bureau, utilisez open ou open -a /Applications/Whatever.app.


Spotlight : recherche de fichiers avec mdfind et affichage des métadonnées (telles que les informations EXIF d'une photo) avec mdls.


Ayez à l'esprit que macOS dérive du système Unix BSD et que beaucoup de commandes (par exemple ps, ls, tail, awk, sed) présentent de légères différences avec leurs versions pour Linux, qui lui est largement influencé par System V et les outils GNU.
Vous pouvez souvent faire la distinction grâce à l'en-tête « BSD General Commands Manual » dans les pages de manuel.
Dans certains cas, les versions GNU peuvent également être installées (telles que gawk et gsed pour GNU awk et GNU sed).
Pour écrire des scripts Bash multi-plateformes évitez d'utiliser de telles commandes (par exemple, envisagez d'utiliser Python ou Perl) ou alors testez-les soigneusement.


Pour obtenir des informations sur la version de macOS, utilisez sw_vers.


Uniquement Windows
Ce qui suit ne concerne que Windows.
Différentes manières d'obtenir les outils Unix sous Windows


Installez Cygwin pour bénéficier de la puissance du shell Unix sous Microsoft Windows.
La majorité de ce qui est décrit dans ce document fonctionnera out of the box.


Sous Windows 10, Windows Subsystem for Linux (WSL) fournit un environnement Bash avec les utilitaires en ligne de commandes d'Unix.


Si vous êtes surtout intéressés par les outils de developpement GNU (comme GCC) sur Windows, jetez un œil à MinGW et à son package MSYS qui fournit des utilitaires tels que bash, gawk, make et grep.
MSYS ne dispose pas de toutes les fonctionnalités de Cygwin.
MinGW est particulièrement utile pour porter sous Windows des outils Unix.


Une autre manière d'obtenir le look and feel d'Unix sous Windows est d'utiliser Cash.
Notez que très peu de commandes Unix et d'options de ligne de commande sont disponibles dans cet environnement.


Outils en ligne de commande utiles pour Windows


Vous pouvez accomplir et scripter la plupart des tâches d'administration système de Windows depuis la ligne de commande à l'aide de wmic.


Parmi les outils réseaux en ligne de commande nativement disponibles sous windows que vous devriez trouver utiles, on trouve ping, ipconfig, tracert et netstat.


Vous pouvez effectuer de nombreuses tâches sous Windows en invoquant la commande Rundll32.


Trucs et astuces à propos de Cygwin


Installez des programmes Unix supplémentaires à l'aide du gestionnaire de paquets de Cygwin.


Utilisez mintty comme fenêtre de ligne de commande.


Accédez au presse-papier de Windows par /dev/clipboard.


Exécutez cygstart pour ouvrir un fichier quelconque avec l'application associée.


Accédez à la base de registres de Windows avec regtool.


Sachez qu'on accède au lecteur C:\ depuis Cygwin via /cygdrive/c et que le chemin Cygwin \ devient C:\cygwin sous Windows.
Effectuez des conversions entre les deux types de chemin avec l'utilitaire cygpath.
C'est particulièrement utile pour invoquer des programmes Windows dans les scripts.


Autres ressources

awesome-shell : une liste organisée d'outils et de ressources pour le shell.
awesome-osx-command-line : un guide plus approfondi sur la ligne de commande pour macOS.
Strict mode : pour écrire de meilleurs scripts shell.
shellcheck : un outil d'analyse statique des scripts shell. L'équivalent de lint pour bash, sh et zsh.
Filenames and Pathnames in Shell : les points de détail, malheureusement compliqués, sur la manière de manipuler correctement les noms de fichiers dans les scripts shell.
Data Science at the Command Line : d'autres outils en ligne de commande, utiles en science des données et discutés dans le livre du même nom.

Avertissement
À l'exception des très petites tâches, le code est écrit de sorte que d'autres personnes puissent le lire.
Il n'y a pas de pouvoir sans responsabilité : le fait que vous puissiez faire quelque chose en Bash ne signifie pas nécessairement que vous devriez le faire ! ;)
Licence

Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Partage dans les mêmes conditions 4.0 International.\n\njlevy
    
    /
    
      the-art-of-command-line
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    14.7k

  

  
        
            
          Star
          156k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          118


    

      
  
    
              
        Pull requests
          131


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files masterBreadcrumbsthe-art-of-command-line/README-fr.mdCopy path Blame  Blame        Latest commit HistoryHistory753 lines (499 loc) · 49.3 KB masterBreadcrumbsthe-art-of-command-line/README-fr.mdTopFile metadata and controlsPreviewCodeBlame753 lines (499 loc) · 49.3 KBRaw🌍
Čeština ∙ Deutsch ∙ Ελληνικά ∙ English ∙ Español ∙ Français ∙ Indonesia ∙ Italiano ∙ 日本語 ∙ 한국어 ∙ polski ∙ Português ∙ Română ∙ Русский ∙ Slovenščina ∙ Українська ∙ 简体中文 ∙ 繁體中文
L'art de la ligne de commande
Note : Je prévois de réviser le document et suis à la recherche d'un nouveau co-auteur pour en faire un guide plus complet.
Bien que très populaire, il pourrait être plus étendu et un peu plus approfondi.
Si vous aimer écrire, n'êtes pas loin d'être un expert du sujet et êtes disposé à contribuer, veuillez me laisser un message à josh (0x40) holloway.com. –jlevy, Holloway. Merci !

Méta
Notions de base
Utilisation quotidienne
Traitement des fichiers et des données
Débogage du système
Unilignes
Obscures mais utiles
Uniquement macOS
Uniquement Windows
Autres ressources
Avertissement


La maîtrise de la ligne de commande est une compétence souvent négligée ou considérée ésotérique, pourtant elle améliore de façon évidente et subtile votre habilité et votre productivité en tant qu'ingénieur.
Ceci est une sélection de notes et d'astuces sur l'utilisation de la ligne de commande que nous avons trouvées utiles en travaillant avec Linux.
Certaines sont élémentaires, d'autres sont assez spécifiques, complexes ou obscures.
Cette page n'est pas bien longue, mais si vous pouvez retenir et vous servir de tout ce qui s'y trouve, alors vous saurez beaucoup de choses.
Ce document est le fruit du travail de nombreux auteurs et traducteurs.
Une partie de celui-ci a été initialement publiée sur Quora, mais il se trouve maintenant sur GitHub, où des personnes plus compétentes que l'auteur originel ont apporté de nombreuses améliorations.
N'hésitez pas à poser des questions sur la ligne de commande.
Merci de contribuer si vous voyez une erreur ou quelque chose qui pourrait être amélioré !
Méta
Contexte :

Ce guide est destiné aux débutants et aux utilisateurs chevronnés.
Les objectifs sont l'envergure (tout est important), la spécificité (donner des exemples concrets des cas les plus courants) et la concision (éviter tout ce qui n'est pas essentiel et les digressions disponibles facilement ailleurs).
Chaque astuce est indispensable dans certaines situations ou fait gagner beaucoup de temps par rapport aux solutions alternatives.
Il est écrit pour Linux, à l'exception des sections « Uniquement macOS » et « Uniquement Windows ».
Beaucoup d'items s'appliquent ou peuvent être installés sur d'autres Unices ou macOS (ou même Cygwin).
L'accent est mis sur l'utilisation interactive de Bash, bien que de nombreuses astuces s'appliquent aux autres shells et à l'écriture de scripts en Bash.
Il inclut les commandes « standard » d'Unix aussi bien que celles qui nécessitent l'installation de paquets spéciaux — tant qu'ils sont suffisamment importants pour mériter d'être mentionnés.

Remarques :

Afin que le guide tienne sur une seule page, du contenu est implicitement inclus par référence.
Vous êtes suffisamment intelligents pour rechercher des renseignements ailleurs une fois que vous avez l'idée ou la commande à googler.
Utilisez apt, yum, dnf, pacman, pip ou brew (selon votre distribution ou OS) pour installer de nouveaux programmes.
Allez sur Explainshell pour obtenir de l'aide à propos des commandes, options, tubes, etc.

Notions de base


Apprenez les bases de Bash.
En fait, tapez man bash et parcourez toute la page ; elle est relativement facile à suivre et pas si longue.
Les shells alternatifs peuvent être intéressants, mais Bash est puissant et disponible partout (apprendre seulement zsh, fish, etc., bien que cela soit tentant sur votre ordinateur portable, vous limite dans bien des situations, comme par exemple lors de l'utilisation de vrais serveurs).


Apprenez à bien utiliser au moins un éditeur en mode texte.
L'éditeur nano est l'un des plus simples pour de l'édition simple (ouvrir, modifier, sauvegarder, rechercher).
Cependant pour un usage avancé dans un terminal, rien ne remplace le vénérable Vim (vi), éditeur difficile à prendre en main, mais rapide et très complet.
De nombreuses personnes utilisent également le classique Emacs, surtout pour d'importantes tâches d'édition (bien sûr, tout développeur moderne de logiciels travaillant sur un vaste projet n'utilise probablement pas un simple éditeur en mode texte et devrait donc aussi se familiariser avec des outils et des EDI graphiques modernes).


Trouver de la documentation :

Sachez comment lire une documentation avec man (pour les curieux, man man liste les sections avec leur numéro, par exemple 1 pour les commandes « normales » , 5 pour les formats des fichiers et les conventions, et 8 pour tout ce qui concerne l'administration système).
Trouvez les pages de manuel avec apropos.
Sachez que certaines commandes ne sont pas des exécutables, mais des commandes internes de Bash et que vous pouvez obtenir de l'aide à leur sujet avec help et help -d.
Utilisez type command pour déterminer si une commande est un exécutable, une commande interne du shell ou un alias.
curl cheat.sh/commande fournit une cheatsheet concise comprenant des exemples courants d'utilisation d'une commande shell.



Apprenez à rediriger les entrées et sorties au moyen de > et <, et à créer des tubes avec |.
Sachez que > écrase le fichier de sortie et >> sert à ajouter.
Renseignez-vous sur stdout et stderr.


Apprenez au sujet de l'expansion des noms de fichiers avec * (et peut-être ? et [...]), des mécanismes de citation, et de la différence entre les guillemets " et les apostrophes ' (voir ci-dessous).


Familiarisez-vous avec la gestion des processus avec Bash : &, ctrl-z, ctrl-c, jobs, fg, bg, kill, etc.


Apprenez ssh et les principes de l'authentification sans mot de passe à l'aide de ssh-agent, ssh-add, etc.


Les bases de la gestion des fichiers : ls et ls -l (en particulier, apprenez la signification de chacune des colonnes de ls -l), less, head, tail et tail -f (ou mieux, less +F), ln et ln -s (apprenez les différences et les avantages des liens durs par rapport aux liens symboliques), chown, chmod, du (pour un rapide résumé de l'espace disque occupé : du -hs *).
Pour la gestion du système de fichiers : df, mount, fdisk, mkfs, lsblk.
Apprenez ce qu'est un inode (ls -i ou df -i).


Les bases de l'administration réseau : ip, ifconfig, dig, traceroute et route.


Apprenez à vous servir d'un logiciel de gestion de versions tel que git, et utilisez-le.


Apprenez les expressions régulières et les différents drapeaux de grep et egrep.
Les options -i, -o, -v, -A, -B et -C sont bonnes à connaître.


Apprenez à utiliser apt-get, yum, dnf ou pacman (selon la distribution) pour trouver et installer des paquets.
Assurez-vous d'avoir pip pour installer des outils en ligne de commande écrits en Python (quelques-uns ci-dessous sont plus faciles à installer avec pip).


Utilisation quotidienne


En Bash, utilisez Tab pour compléter les arguments ou lister toutes les commandes disponibles, et ctrl-r pour rechercher dans l'historique des commandes (tapez pour rechercher, appuyez sur ctrl-r plusieurs fois pour parcourir les différentes correspondances, appuyez sur Enter pour exécuter la commande trouvée ou sur la flèche droite pour l'éditer).


En Bash, utilisez ctrl-w pour effacer le mot précédent et ctrl-u pour effacer tout ce qui précède le curseur.
Utilisez alt-b et alt-f pour se déplacer mot par mot, ctrl-a pour déplacer le curseur au début de la ligne, ctrl-e pour déplacer le curseur à la fin de la ligne, ctrl-k pour effacer depuis le curseur jusqu'à la fin de la ligne, ctrl-l pour effacer l'écran.
Voir man readline pour la liste des raccourcis clavier par défault de Bash.
Il y en a beaucoup.
Par exemple alt-. fait défiler les arguments précédents et alt-* développe un glob.


Sinon, si vous adorez les combinaisons de touches dans le style vi, utilisez set -o vi (set -o emacs pour revenir en arrière).


Pour éditer de longues commandes, après avoir configuré votre éditeur (par exemple export EDITOR=vim), ctrl-x ctrl-e (escape-v dans le style vi) ouvre l'éditeur pour éditer la commande courante.


Consultez les commandes récentes avec history.
Faites !n pour rappeler la commande numéro n.
Il y a aussi beaucoup d'autres abréviations, les plus utiles étant probalement !$ pour le dernier argument et !! pour la dernière commande (voir la section « HISTORY EXPANSION » de la page de manuel).
Cependant, celles-ci peuvent être aisément remplacées par ctrl-r et alt-..


Placez-vous dans votre répertoire personnel avec cd.
Accédez aux fichiers à partir de leurs chemins relatifs par rapport à votre répertoire personnel en préfixant ceux-ci avec ~ (p. ex. ~/.bashrc).
Dans les scripts shell, désignez le répertoire personnel par $HOME.


Pour revenir au répertoire de travail précédent : cd -.


Si vous êtes au milieu de la saisie d'une commande mais que vous changez d'avis, tapez alt-# pour ajouter # au début de la ligne et l'entrer comme un commentaire (ou utilisez ctrl-a, #, enter).
Vous pouvez alors y revenir plus tard à l'aide de la commande history.


Utilisez xargs (ou parallel).
C'est très puissant.
Remarquez que vous pouvez contrôler le nombre d'items à exécuter par ligne (-L) ainsi que la parallélisation (-P).
Si vous n'êtes pas sûr d'avoir fait ce qu'il faut, utilisez d'abord xargs echo.
L'option -I{} est également pratique.
Exemples :


      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname


pstree -p fournit un affichage utile des processus sous la forme d'un arbre.


pgrep et pkill pour rechercher ou envoyer un signal à des processus en fonction de leur nom (-f est utile).


Connaissez les différents signaux que vous pouvez envoyer aux processus.
Par exemple, pour suspendre l'exécution d'un processus, utilisez kill -STOP [pid].
Pour la liste complète, consultez man 7 signal.


Utilisez nohup ou disown pour qu'un processus en arrière-plan reste actif indéfiniment.


Vérifiez quels sont les processus qui écoutent à l'aide de netstat -lntp, ss -plat (pour TCP; ajoutez -u pour UDP) ou lsof -iTCP -sTCP:LISTEN -P -n (qui fonctionne aussi sur macOS).


Voyez également lsof et fuser pour la liste des sockets et fichiers ouverts.


Voyez uptime ou w pour savoir depuis combien de temps le système fonctionne.


Utilisez alias pour créer des raccourcis vers les commandes fréquemment utilisées.
Par exemple, alias ll='ls -latr' crée un nouvel alias ll.


Conservez les alias, les paramètres du shell et les fonctions fréquemment utilisées dans le fichier ~/.bashrc, et arrangez-vous pour qu'il soit chargé par le shell de connexion.
Ainsi, votre configuration s'appliquera à toutes vos sessions shell.


Placez dans ~/.bash_profile la configuration de vos variables d'environnement ainsi que les commandes à exécuter lorsque vous vous connectez.
Une configuration séparée est nécessaire lorsque vous vous connectez depuis un gestionnaire de connexion graphique et pour les tâches planifiées par cron.


Synchronisez vos fichiers de configuration (p. ex. .bashrc et .bash_profile) entre plusieurs ordinateurs avec Git.


Comprennez qu'il convient d'être prudent lorsque des variables et des noms de fichiers contiennent des espaces.
Mettez vos variables entre guillemets, par exemple "$FOO".
Préférez les options -0 ou -print0 qui permettent de délimiter les noms des fichiers avec le caractère nul, par exemple locate -0 pattern | xargs -0 ls -al ou find / -print0 -type d | xargs -0 ls -al.
Pour itérer sur des noms de fichiers contenant des espaces dans une boucle for, positionnez la variable IFS avec le caractère de retour à la ligne à l'aide de IFS=$'\n'.


Dans les scripts Bash, utilisez set -x (ou la variante set -v qui enregistre les entrées brutes, y compris les variables non référencées et les commentaires) pour l'affichage d'informations de débogage.
Utilisez les modes stricts à moins que vous ayez une bonne raison de ne pas le faire : utilisez set -e pour interrompre le script en cas d'erreur (code de sortie non nul).
Utilisez set -u pour détecter l'utilisation d'une variable non initialisée.
Envisagez aussi set -o pipefail pour détecter les erreurs dans les tubes (cependant lisez-en plus si vous l'utilisez car ce sujet est un peu délicat).
Pour des scripts plus compliqués, servez-vous également de trap pour intercepter EXIT ou ERR.
Une bonne habitude est de commencer un script comme cela, ce qui lui permettra de détecter les erreurs courantes, de s'interrompre et d'afficher un message :


      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR

Dans les scripts en Bash, les sous-shells (placés entre parenthèses) sont commodes pour grouper des commandes.
Un exemple classique consiste à se déplacer temporairement dans un autre répertoire de travail :

      # faire quelque chose dans le répertoire courant
      (cd /some/other/dir && other-command)
      # continue dans le répertoire original


Notez qu'en Bash, il existe de nombreux types d'expansions de variables. Pour vérifier l'existence d'une variable : ${name:?error message}.
Par exemple, si un script en Bash exige un unique argument, il suffit d'écrire input_file=${1:?usage: $0 input_file}.
Pour utiliser une valeur par défaut si une variable est vide : ${name:-default}.
Si vous souhaitez ajouter un paramètre supplémentaire facultatif dans l'exemple précédent, vous pouvez écrire quelque chose comme output_file=${2:-logfile}.
Si $2 est omis et donc vide, output_file prendra la valeur logfile.
L'évaluation arithmétique : i=$(( (i+1) % 5).
Les listes d'entiers : {1..10}
Suppression de préfixes et de suffixes : ${var%suffix} et ${var#prefix}.
Par exemple, si var=foo.pdf, alors echo ${var%.pdf}.txt affiche foo.txt.


L'expansion des accolades avec {...} évite de retaper des textes similaires et automatise les combinaisons d'éléments de listes.
C'est utile dans des exemples comme  mv foo.{txt,pdf} some-dir (qui déplace les deux fichiers), cp somefile{,.bak} (équivalent à cp somefile somefile.bak) ou mkdir -p test-{a,b,c}/subtest-{1,2,3} (qui engendre toutes les combinaisons possibles et crée une arborescence de répertoires).
L'expansion des accolades est effectuée avant toutes les autres expansions.


Les expansions sont exécutées dans l'ordre suivant : expansion des accolades, développement du tilde, remplacement des paramètres et des variables, évaluation arithmétique, substitution de commande (de la gauche vers la droite), découpage en mots, puis développement des chemins.
Par exemple, une liste telle que {1..20} ne peut s'exprimer avec des variables en utilisant {$a..$b}.
À la place, utilisez seq ou une boucle for ; par exemple, seq $a $b ou for((i=a; i<=b; i++)); do ...; done.


La sortie d'une commande peut être traitée comme un fichier à l'aide de <(some command) (substitution de processus).
Par exemple, pour comparer le fichier local /etc/hosts avec un fichier distant :


      diff /etc/hosts/ <(ssh somehost cat /etc/hosts)

Lorsque vous écrivez des scripts, vous pourriez avoir envie de placer votre code entre accolades.
S'il manque l'accolade fermante, les scripts ne pourront s'exécuter à cause d'une erreur de syntaxe.
C'est particulièrement utile pour des scripts mis à disposition sur le web, afin de prévenir leur exécution lorsqu'ils sont partiellement téléchargés.

{
    # Votre code ici
}

Un « document intégré » permet de rediriger plusieurs lignes en entrée comme si elles provenaient d'un fichier :

cat <<EOF
entrée sur
plusieurs lignes
EOF



En Bash, redirigez à la fois la sortie standard et la sortie des erreurs à l'aide de some-command > logfile 2>&1 ou some-command &>logfile.
Souvent, pour s'assurer qu'une commande ne laisse pas un descripteur de fichier ouvert sur l'entrée standard, l'attachant au terminal dans lequel vous vous trouvez, une bonne pratique consiste à ajouter </dev/null.


Utilisez man ascii pour une bonne table ASCII avec les valeurs décimales et hexadécimales.
Pour des informations générales sur l'encodage, man unicode, man utf-8 et man latin1 sont utiles.


Utilisez screen ou tmux pour multiplexer une fenêtre de terminal, particulièrement utile pour des sessions SSH distantes, et pour détacher et rattacher une session.
byobu peut améliorer screen ou tmux en fournissant plus d'informations et une gestion plus facile.
Une alternative plus légère pour la persistance des sessions seulement est dtach.


Il est utile de savoir comment créer un tunnel SSH avec -L ou -D (et occasionnellement -R), par exemple pour accéder à des sites web à partir d'un serveur distant.


Il peut être intéressant d'effectuer quelques optimisations à votre configuration de ssh ; par exemple, le fichier ~/.ssh/config contient des paramètres pour éviter les pertes de connexion dans certains environnements réseaux, pour utiliser la compression (ce qui est utile avec scp sur des connexions à faible bande passante), et pour le multiplexage de canaux vers le même serveur avec un fichier de contrôle local :


      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes



Quelques autres options relatives à ssh sont sensibles pour la sécurité et ne devraient être activées qu'avec la plus grande prudence. Par exemple, sur des sous-réseaux, des hôtes ou des réseaux sûrs : StrictHostKeyChecking=no, ForwardAgent=yes.


Envisagez mosh comme une alternative à ssh qui utilise UDP, évitant ainsi les pertes de connexion et ajoutant du confort en situation de mobilité (exige une installation côté serveur).


Pour obtenir les permissions d'un fichier en octal, utile pour configurer le système mais non fournit par ls, utilisez quelque chose comme


      stat -c '%A %a %n' /etc/timezone


Pour une sélection interactive de valeurs issues de la sortie d'une commande, utilisez percol ou fzf.


Pour interagir avec les fichiers provenant de la sortie d'une commande (p. ex. git), utilisez fpp (PathPicker).


Créez un simple serveur web pour partager les fichiers du répertoire courant (et ses sous-répertoires) avec python -m SimpleHTTPServer 7777 (port 7777 et Python 2)  et python -m http.server 7777 (port 7777 et Python 3).


Pour exécuter une commande avec les privilèges d'un autre utilisateur, utilisez sudo.
Par défaut, cet autre utilisateur est root ; utilisez -u pour spécifier un autre utilisateur.
Utilisez -i pour ouvrir une session en tant que cet autre utilisateur (on vous demandera votre mot de passe).


Pour basculer le shell sous un autre utilisateur, utilisez su username ou su - username.
Incluez - pour obtenir le même environnement que lorsque cet utilisateur se connecte.
Le nom d'utilisateur par défaut est root.
Le système vous demandera le mot de passe de l'utilisateur cible.


Sachez que l'argument de la ligne de commande a une taille limite de 128 Kio. L'erreur « Argument list too long » est fréquente avec les jokers qui reconnaissent un grand nombre de fichiers (quand cela se produit des alternatives comme find et xargs peuvent aider).


Pour une calculatrice basique (et bien sûr accéder à Python en général), utilisez l'interpréteur python.
Par exemple,


>>> 2+3
5

Traitement des fichiers et des données


Pour localiser un fichier par son nom dans le répertoire courant, find . -iname '*something*' (ou autres).
Pour trouver un fichier n'importe où par son nom, utilisez locate something (mais n'oubliez pas que updatedb peut ne pas avoir indexé les fichiers récemment créés).


Pour effectuer une recherche parmi des fichiers sources ou des fichiers de données, il existe des alternatives plus avancées ou plus rapides que grep -r, parmi lesquels (en gros du plus ancien au plus récent) ack, ag (« the silver searcher ») et rg (ripgrep).


Pour convertir du HTML en texte brut : lynx -dump -stdin.


Pour convertir du Markdown, du HTML et toutes sortes de formats texte, essayez pandoc.
Par exemple, pour convertir un document Markdown au format Word : pandoc README.md --from markdown --to docx -o temp.docx


Si vous devez manipuler du XML, l'ancien xmlstarlet marche bien.


Pour le JSON, utilisez jq.
Voir également jid and jiq pour une utilisation interactive.


Pour le YAML, utilisez shyaml.


Pour les fichiers Excel ou CSV, csvkit fournit in2csv, csvcut, csvjoin, csvgrep, etc.


Pour Amazon S3, s3cmd est pratique et s4cmd est plus rapide.
L'outil d'Amazon aws et la version améliorée saws sont indispensables pour les autres tâches liées à AWS.


Connaissez sort et uniq, y compris les options -u et -d de uniq (voir les unilignes plus bas). Voir aussi comm.


Sachez utiliser cut, paste et join pour manipuler les fichiers texte.
Beaucoup de personnes utilisent cut mais oublient join.


Connaissez wc pour compter les lignes (-l), les caractères (-m), les mots (-w) et les octets (-c).


Connaissez tee pour copier depuis stdin vers un fichier ou vers stdout, comme dans ls -al | tee file.txt.


Pour des calculs plus complexes, incluant les regroupements, les inversions de champs et des calculs statistiques, considérez datamash.


Sachez que la locale affecte de nombreux outils en ligne de commande de manière subtile, comme l'ordre pour les tris (collation) et les performances.
La plupart des installateurs Linux définissent la variable LANG ou d'autres variables locales d'environnement pour configurer une locale telle que US English.
Mais ayez à l'esprit que le tri sera modifié si vous changez la locale.
Et sachez que les routines i18n peuvent rendre les opérations de tri et d'autres commandes beaucoup plus lentes.
Dans certains cas (tels que les opérations concernant les ensembles et l'unicité abordées ci-dessous) vous pouvez, sans risque, ignorer complètement les lentes routines i18n et utiliser l'ordre de tri classique fondé sur les valeurs des octets à l'aide de export LC_ALL=C.


Vous pouvez modifier l'environnement d'une commande particulière en préfixant son invocation par l'affectation de variables, comme dans TZ=Pacific/Fiji date.


Apprenez awk et sed pour de l'analyse de données élémentaire.
Voir la section Unilignes pour des exemples.


Par exemple, pour effectuer la somme de tous les nombres de la troisième colonne d'un fichier texte : awk '{ x += $3 } END { print x}'.
C'est probablement trois fois plus rapide et trois fois plus petit que son équivalent en Python.

Pour remplacer toutes les occurences d'une chaîne de caractères dans un ou plusieurs fichiers :

    perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt

Pour renommer de multiples fichiers ou effectuer des recherches et des remplacements dans des fichiers, essayez repren (dans certains cas la commande rename permet aussi de renommer de multiples fichiers, mais soyez prudent car ses fonctionnalités ne sont pas les mêmes sur toutes les distributions Linux).

    # Renomme les répertoires, les fichiers et leurs contenus à l'aide
    # de la substitution foo -> bar :
    repren --full --preserve-case --from foo --to bar .
    # Restaure des fichiers de sauvegarde à l'aide de la
    # substitution whatever.bak -> whatever :
    # Même chose que ci-dessus avec rename s'il est disponible :
    rename 's/\.bak$//' *.bak

Selon sa page de manuel, rsync est un outil de duplication de fichiers vraiment rapide et incroyablement polyvalent.
Il est connu pour faire de la synchronisation entre machines, mais est également utile pour un usage local.
Lorsque les mesures de sécurité l'autorisent, utiliser rsync au lieu de scp permet de reprendre un transfert interrompu sans devoir le recommencer zéro.
Il est aussi l'un des outils les plus rapides pour effacer un grand nombre de fichiers :

    mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir


Pour surveiller l'état d'avancement d'une copie de fichiers, utilisez pv, pycp, pmonitor, progress, rsync --progress, ou dd status=progress dans le cas d'une copie par blocs.


Utilisez shuf pour mélanger ou sélectionner aléatoirement des lignes d'un fichier.


Sachez les options de sort.
Pour les nombres, utilisez -n, ou -h s'ils sont dans un format lisible par un humain (p. ex. issus de du -h).
Comprenez le fonctionnement des clés (-t et -k).
En particulier, faites attention à bien écrire -k1,1 pour trier seulement selon le premier champ : -k1 signifie que l'on trie selon la ligne entière.
Le tri stable (sort -s) peut s'avérer utile.
Par exemple, pour trier d'abord selon le champ 2, puis selon le champ 1, vous pouvez utiliser sort -k1,1 | sort -s -k2,2.


Si jamais vous avez besoin d'écrire un caractère de tabulation dans une ligne de commande en Bash (p. ex pour le paramètre de l'option de tri -t), entrez ctrl-v [Tab] ou écrivez $'\t' (préférable car vous pouvez le copier-coller).


Les outils habituels pour patcher un code source sont diff et patch.
Voir aussi diffstat pour un relevé statistique d'un diff et sdiff pour un affichage côte à côte d'un diff.
Remarquez que diff -r marche avec des répertoires entiers.
Utilisez diff -r tree1 tree2 | diffstat pour obtenir un résumé des changements.
Utilisez vimdiff pour comparer et éditer des fichiers.


Pour les fichiers binaires, utilisez hd, hexdump ou xxd pour un affichage simple en hexadécimal et bvi, biew pour éditer des fichiers binaires.


Également pour les fichiers binaires, strings (ainsi que grep, etc) vous permet d'y trouver des bouts de texte.


Pour effectuer des différences entre des fichiers binaires (compression différentielle), utilisez xdelta3.


Pour changer l'encodage d'un texte, essayer iconv, ou uconv pour un usage plus avancée : il permet quelques trucs avancés avec l'Unicode.
Par exemple :


      # Affiche les codes hexadécimaux et les noms des caractères (utile pour déboguer) : 
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt
      # Convertit en minuscule et supprime les accents :
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; 
      ::Any-NFC;' < input.txt > output.txt


Pour découper des fichiers en morceaux, regardez split pour un découpage en morceaux de taille donnée et csplit pour un découpage en morceaux délimités par un motif.


Date et heure : pour obtenir la date et l'heure courantes au format ISO 8601, utilisez date -u +"%Y-%m-%dT%H:%M:%SZ" (d'autres options sont problématiques).
Pour manipuler des dates et des heures, utilisez dateadd, datediff, strptime, etc. fournis par dateutils.


Utilisez zless, zmore, zcat et zgrep pour travailler sur des fichiers compressés.


Les attributs d'un fichier peuvent être modifiés avec chattr et proposent une alternative de plus bas niveau aux permissions d'accès aux fichiers.
Par exemple, l'attribut immutable protège un fichier contre toute suppression accidentelle: sudo chattr +i /critical/directory/or/file.


Utilisez getfacl et setfacl pour sauvegarder et restorer les permissions. Par exemple:


    getfacl -R /some/path > permissions.txt
    setfacl --restore=permissions.txt

Pour créer rapidement un fichier vide, utilisez truncate (crée un fichier creux), fallocate (systèmes de fichiers ext4, XFS, Btrfs et OCFS2), xfs_mkfile (pour presque tous les systèmes de fichiers, disponible dans le paquet xfsprogs) ou mkfile (pour les systèmes de type Unix comme Solaris ou Mac OS X).

Débogage du système


Pour du débogage web, curl et curl -I sont pratiques, de même que leurs
équivalents avec wget  ou le plus moderne httpie.


Pour connaître l'état courant du CPU ou du disque, les outils conventionnels sont top (ou htop meilleur), iostat et iotop.
Utilisez iostat -mxz 15 pour des statistiques de base concernant le CPU, des statistiques détaillées pour les disques et un aperçu des performances.


Pour des informations sur les connexions réseaux, utilisez netstat et ss.


Pour un rapide aperçu de ce qui se passe dans le système, dstat est particulièrement utile.
Pour un aperçu plus étendu et détaillé, utilisez glances.


Pour connaître l'état de la mémoire, exécutez free et vmstat et comprenez leurs sorties.
En particulier, ayez à l'esprit que la valeur du « cache » est la mémoire utilisée par le noyau Linux comme cache de fichiers, donc compte comme de la mémoire « libre ».


Le système de débogage de Java est une autre paire de manche, cependant un truc simple sur la JVM d'Oracle et quelques autres JVMs consiste à exécuter kill -3 <pid> pour obtenir une trace complète des appels et une empreinte de la mémoire (y compris des détails sur le ramasse-miettes qui peuvent être hautement instructifs) dans stderr ou des fichiers journaux.
Les commandes jps, jstat, jstack et jmap de la JDK sont utiles. L'outil SJK est plus avancé.


Utilisez mtr comme un traceroute amélioré pour identifier les problèmes de réseau.


Pour déterminer les raisons pour lesquelles un disque est plein, ncdu permet de gagner du temps par rapport aux commandes habituelles telles que du -sh *.


Pour trouver quel socket ou processus utilise la bande passante, essayez iftop ou nethogs.


L'outil ab (fourni avec Apache) est utile pour une vérification rapide et grossière des performances d'un serveur web.
Pour des tests de charge plus complexes, essayez siege.


Pour du débogage réseau plus sérieux : wireshark, tshark ou ngrep.


Sachez utiliser strace et ltrace.
Ces commandes peuvent être utiles si un programme fonctionne mal ou plante et que vous n'en connaissez pas la raison, ou si vous voulez vous faire une idée de ses performances.
Remarquez l'option de profilage (-c) et la possibilité de s'attacher à un processus en cours d'exécution (-p).
Utilisez l'option -f pour ne pas manquer les appels des processus enfants.


Connaissez ldd pour afficher les bibliothèques partagées, mais ne l'utilisez jamais sur des fichiers qui ne sont pas dignes de confiance.


Sachez comment vous connecter à un processus en cours d'exécution avec gdb et récupérer la trace des appels.


Utilisez /proc. C'est parfois incroyablement utile pour résoudre des problèmes en live.
Exemples : /proc/cpuinfo, /proc/meminfo, /proc/cmdline, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd, /proc/xxx/smaps (où xxx est l'identifiant du processus ou pid).


Pour comprendre pourquoi quelque chose a mal tourné antérieurement, sar peut-être très utile.
Il fournit un historique concernant l'usage du CPU, de la mémoire, du réseau, etc.


Pour une analyse plus approfondie du système et de ses performances, regardez stap (SystemTap), perf et sysdig.


Vérifiez quel OS vous utilisez avec uname ou uname -a (information générale sur la version d'Unix et du noyau) ou lsb_release -a (informations sur la distribution Linux).


Utilisez dmesg à chaque fois que quelque chose de bizarre se produit (pour des problèmes liés au matériel ou aux drivers).


Si vous effacez un fichier et que du indique que l'espace occupé n'a pas été libéré, alors vérifiez si le fichier n'est pas utilisé par un processus:
lsof | grep deleted | grep "filename-of-my-big-file"


Unilignes
Quelques exemples d'assemblages de commandes :

Il est quelques fois extrèmement utile de pouvoir faire une intersection, union ou différence ensemblistes de fichiers texte à l'aide de sort et uniq.
Supposez que a et b soient des fichiers texte ne contenant pas de lignes répétées.
C'est rapide et fonctionne sur des fichiers de taille quelconque jusqu'à plusieurs gigaoctets (le tri n'est pas limité par la capacité mémoire bien que vous puissiez avoir besoin d'utiliser l'option -T si /tmp est sur une petite partition racine).
Voyez aussi la remarque à propos de LC_ALL ci-dessus et l'option -u de sort (omise ci-dessous pour plus de clarté).

    sort a b | uniq > c   # c is a union b
    sort a b | uniq -d > c   # c is a intersect b
    sort a b b | uniq -u > c   # c is set difference a - b

Embellissez les différences de deux fichiers JSON en normalisant leur syntaxe, en colorant et en paginant le résultat :

      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R



Utilisez grep . * pour inspecter rapidement les contenus des fichiers d'un repértoire (chaque ligne est précédé du nom du fichier) ou head -100 * (chaque fichier a un titre).
Cela peut être utile pour des répertoires remplis de fichiers de configuration comme ceux de /sys, /proc, /etc.


Pour ajouter les nombres de la troisième colonne d'un fichier texte (c'est probablement trois fois plus rapide et trois fois plus petit que son équivalent en Python) :


    awk '{ x += $3 } END { print x }' myfile

Pour visualiser les tailles et les dates des fichiers d'une arborescence, une sorte de ls -l récursive, mais plus facile à lire que ls -lR :

    find . -type f -ls

Supposons que vous ayez un fichier texte comme un fichier journal de serveur web et qu'une certaine valeur, comme un paramètre acct_id présent dans l'URL, figure à certaines lignes.
Si vous voulez un décompte du nombre de requêtes pour chaque valeur de acct_id :

    egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn


Pour surveiller en permanence tout changement, utilisez watch, par exemple vérifiez les modifications dans les fichiers d'un répertoire avec watch -d -n 2 'ls -rtlh | tail' ou surveillez les paramètres de votre réseau tout en dépannant la configuration de votre wifi avec watch -d -n 2 ifconfig.


Exécutez cette fonction pour afficher aléatoirement une astuce de ce guide (analyse le code en Markdown et en extrait un élément d'une des listes) :


     function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
Obscures mais utiles


expr : effectue des operations arithmétiques et booléenne, et évalue des expressions régulières.


m4 : simple macro processeur.


yes : affiche une chaîne de caractères indéfiniment.


cal : un calendrier sympathique.


env : exécute une commande (utile dans les scripts).


printenv : imprime les variables d'environnement (utile pour le débogage et dans les scripts).


look : trouve les mots anglais (ou les lignes d'un fichier) commençant par une chaîne donnée.


cut, paste and join : manipulation des données.


fmt : formate du texte.


pr : formate un texte en pages ou en colonnes.


fold : coupe des lignes de texte.


column : formate un texte en colonnes alignées, de largeurs fixes ou en tables.


expand et unexpand : convertit les tabulations en espaces et vice-versa.


nl : numérote les lignes d'un fichier.


seq : affiche une suite de nombres.


bc : une calculatrice.


factor : factorise des nombres entiers.


gpg : chiffre et signe les fichiers.


toe : table des entrées terminfo.


nc : débogage réseau et transfert de données.


socat : relai et réacheminement de port TCP (semblable à netcat).


slurm : visualisation du trafic réseau.


dd : déplacer les données entre les fichiers ou les périphériques.


file : détermine le type d'un fichier


tree : affiche les répertoires et sous-répertoires sous la forme d'un arbre (comme ls mais récursivement).


stat : affiche des informations sur un fichier.


time: exécute et chronomètre une commande.


timeout: exécute une commande avec une limite de temps et stoppe le processus après la durée indiquée.


lockfile : crée un fichier sémaphore qui ne peut être supprimé que par rm -f


logrotate : permet la rotation, la compression et l'envoi des fichiers journaux par courrier électronique.


watch : exécute une commande périodiquement, affiche le résultat et surligne les différences entre les résultats.


when-changed : exécute n'importe quelle commande donnée à chaque fois qu'un fichier est modifié. Voir également inotifywait et entr.


tac : affiche des fichiers à l'envers.


comm : compare ligne à ligne deux fichiers triés.


strings : extrait du texte de fichiers binaires.


tr : conversion et manipulation de caractères.


iconv ou uconv : conversion entre différents encodages de caractères.


split et csplit : découpage de fichiers.


sponge : lit entièrement un flux d'entrée avant de l'écrire. Utile pour lire depuis un fichier puis écrire dans le même fichier, par exemple : grep -v something some-file | sponge some-file


units : conversions d'unités et calculs. Convertit des furlongs par fortnight en twips par blink (voir aussi /usr/share/units/deifinitions.units).


apg : génère des mots de passe aléatoires.


xz : compresse des fichiers avec un taux de compression élevé.


ldd : affiche des informations sur les bibliothèques partagées.


nm : affiche les symboles des fichiers objets.


ab ou wrk : mesure les performances de serveurs web.


strace: trace les appels système.


mtr: un traceroute amélioré pour débugguer un réseau.


cssh : visual concurrent shell


rsync : synchronise des fichiers et des dossiers via SSH ou localement.


wireshark et tshark: capture de paquets et dépannage réseau.


ngrep : grep pour les couches réseaux.


host et dig: interroge les serveurs DNS.


lsof : process file descriptor and socket info.


dstat : statistiques sur les ressources système.


glances: aperçu de haut niveau et multi-systèmes.


iostat : statistiques sur l'usage du disque.


mpstat : statistiques sur l'usage du CPU.


vmstat : statistiques sur l'usage de la mémoire.


htop : version améliorée de top.


last : historique des connexions.


w : montre qui est connecté.


id : affiche les informations sur un utilisateur et ses groupes.


sar : statistiques sur l'activité du système


iftop ou nethogs : utilisation du réseau par un socket ou un processus.


ss : statistiques relatives aux sockets.


dmesg : messages lors du démarrage et erreurs système.


sysctl : visualise et configure les paramètres du noyau Linux à chaud.


hdparm : manipulation et performances d'un disque SATA ou ATA.


lsblk : affiche les périphériques blocs (une arborescence de vos disques et de leurs partitions).


lshw, lscpu, lspci, lsusb, dmidecode : informations sur le matériel, comprenant le CPU, le BIOS, le RAID, la carte graphique, les périphériques, etc.


lsmod et modinfo : liste les modules du noyau et donne des informations sur un module.


fortune, ddate et sl : euh, bon, seulement si vous estimez que les locomotives à vapeur et les citations de Jean-Claude Van Damme sont « utiles ».


Uniquement macOS
Ce qui suit ne s'applique *qu'*à macOS.


Gestion des paquets avec brew (Homebrew) ou port (MacPorts).
Ceux-ci peuvent être utilisés pour installer sur macOS la plupart des commandes mentionnées ci-dessus.


Copier la sortie de n'importe quelle commande dans une application de bureau avec pbcopy et coller l'entrée d'une commande avec pbpaste.


Pour permettre à la touche Option de fonctionner comme la touche Alt dans le terminal de macOS (comme dans les commandes alt-b, alt-f, etc), allez dans Préférences -> Profils -> Clavier et sélectionner « Choisir la touche Option comme touche virtuelle ».


Pour ouvrir un fichier avec une application de bureau, utilisez open ou open -a /Applications/Whatever.app.


Spotlight : recherche de fichiers avec mdfind et affichage des métadonnées (telles que les informations EXIF d'une photo) avec mdls.


Ayez à l'esprit que macOS dérive du système Unix BSD et que beaucoup de commandes (par exemple ps, ls, tail, awk, sed) présentent de légères différences avec leurs versions pour Linux, qui lui est largement influencé par System V et les outils GNU.
Vous pouvez souvent faire la distinction grâce à l'en-tête « BSD General Commands Manual » dans les pages de manuel.
Dans certains cas, les versions GNU peuvent également être installées (telles que gawk et gsed pour GNU awk et GNU sed).
Pour écrire des scripts Bash multi-plateformes évitez d'utiliser de telles commandes (par exemple, envisagez d'utiliser Python ou Perl) ou alors testez-les soigneusement.


Pour obtenir des informations sur la version de macOS, utilisez sw_vers.


Uniquement Windows
Ce qui suit ne concerne que Windows.
Différentes manières d'obtenir les outils Unix sous Windows


Installez Cygwin pour bénéficier de la puissance du shell Unix sous Microsoft Windows.
La majorité de ce qui est décrit dans ce document fonctionnera out of the box.


Sous Windows 10, Windows Subsystem for Linux (WSL) fournit un environnement Bash avec les utilitaires en ligne de commandes d'Unix.


Si vous êtes surtout intéressés par les outils de developpement GNU (comme GCC) sur Windows, jetez un œil à MinGW et à son package MSYS qui fournit des utilitaires tels que bash, gawk, make et grep.
MSYS ne dispose pas de toutes les fonctionnalités de Cygwin.
MinGW est particulièrement utile pour porter sous Windows des outils Unix.


Une autre manière d'obtenir le look and feel d'Unix sous Windows est d'utiliser Cash.
Notez que très peu de commandes Unix et d'options de ligne de commande sont disponibles dans cet environnement.


Outils en ligne de commande utiles pour Windows


Vous pouvez accomplir et scripter la plupart des tâches d'administration système de Windows depuis la ligne de commande à l'aide de wmic.


Parmi les outils réseaux en ligne de commande nativement disponibles sous windows que vous devriez trouver utiles, on trouve ping, ipconfig, tracert et netstat.


Vous pouvez effectuer de nombreuses tâches sous Windows en invoquant la commande Rundll32.


Trucs et astuces à propos de Cygwin


Installez des programmes Unix supplémentaires à l'aide du gestionnaire de paquets de Cygwin.


Utilisez mintty comme fenêtre de ligne de commande.


Accédez au presse-papier de Windows par /dev/clipboard.


Exécutez cygstart pour ouvrir un fichier quelconque avec l'application associée.


Accédez à la base de registres de Windows avec regtool.


Sachez qu'on accède au lecteur C:\ depuis Cygwin via /cygdrive/c et que le chemin Cygwin \ devient C:\cygwin sous Windows.
Effectuez des conversions entre les deux types de chemin avec l'utilitaire cygpath.
C'est particulièrement utile pour invoquer des programmes Windows dans les scripts.


Autres ressources

awesome-shell : une liste organisée d'outils et de ressources pour le shell.
awesome-osx-command-line : un guide plus approfondi sur la ligne de commande pour macOS.
Strict mode : pour écrire de meilleurs scripts shell.
shellcheck : un outil d'analyse statique des scripts shell. L'équivalent de lint pour bash, sh et zsh.
Filenames and Pathnames in Shell : les points de détail, malheureusement compliqués, sur la manière de manipuler correctement les noms de fichiers dans les scripts shell.
Data Science at the Command Line : d'autres outils en ligne de commande, utiles en science des données et discutés dans le livre du même nom.

Avertissement
À l'exception des très petites tâches, le code est écrit de sorte que d'autres personnes puissent le lire.
Il n'y a pas de pouvoir sans responsabilité : le fait que vous puissiez faire quelque chose en Bash ne signifie pas nécessairement que vous devriez le faire ! ;)
Licence

Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Partage dans les mêmes conditions 4.0 International.\n\n\n\n