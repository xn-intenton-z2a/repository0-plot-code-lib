npm DocsDocumentation for the npm registry, website, and command-line interfaceAbout npmGetting startedPackages and modulesIntegrationsOrganizationsPoliciesThreats and mitigationsnpm CLI\n\n\n\nnpm DocsDocumentation for the npm registry, website, and command-line interfaceAbout npmGetting startedPackages and modulesIntegrationsOrganizationsPoliciesThreats and mitigationsnpm CLI\n\n\n\nnpm DocsDocumentation for the npm registry, website, and command-line interfaceAbout npmGetting startedPackages and modulesIntegrationsOrganizationsPoliciesThreats and mitigationsnpm CLI\n\n\n\nAbout npmSee DetailsTable of contentsUse npm to . . .Getting startedSharing packages and collaborating with othersLearn moreCLI reference documentationnpm is the world's largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.
npm consists of three distinct components:

the website
the Command Line Interface (CLI)
the registry

Use the website to discover packages, set up profiles, and manage other aspects of your npm experience. For example, you can set up organizations to manage access to public or private packages.
The CLI runs from a terminal, and is how most developers interact with npm.
The registry is a large public database of JavaScript software and the meta-information surrounding it.
Use npm to . . .

Adapt packages of code for your apps, or incorporate packages as they are.
Download standalone tools you can use right away.
Run packages without downloading using npx.
Share code with any npm user, anywhere.
Restrict code to specific developers.
Create organizations to coordinate package maintenance, coding, and developers.
Form virtual teams by using organizations.
Manage multiple versions of code and code dependencies.
Update applications easily when underlying code is updated.
Discover multiple ways to solve the same puzzle.
Find other developers who are working on similar problems and projects.

Getting started
To get started with npm, you can create an account, which will be available at http://www.npmjs.com/~yourusername.
After you set up an npm account, the next step is to use the command line interface (CLI) to install npm. We look forward to seeing what you create!
Sharing packages and collaborating with others
If you choose to share your packages publicly, there is no cost. To use and share private packages, you need to upgrade your account. To share with others, create organizations, called npm organizations, and invite others to work with you, privately (for a fee) or publicly (for free).
You can also use a private npm package registry like GitHub Packages or the open source Verdaccio project. This lets you develop packages internally that are not shared publicly.
Learn more
To learn more about npm as a product, upcoming new features, and interesting uses of npm be sure to follow @npmjs on Twitter.
For mentoring, tutorials, and learning, visit node school. Consider attending or hosting a nodeschool event (usually free!) at a site near you, or use the self-help tools you can find on the site.
CLI reference documentation
While relevant CLI commands are covered throughout this user documentation, the CLI includes command line help, its own documentation section, and instant help (man pages).Edit this page on GitHub4 contributorslukekarrysmrienstraMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountCreating a new user account on the public registryCreating a new user account on the public registrySee DetailsTable of contentsCreating an account on the websiteTesting your new account with npm loginIf you do not already have an npm user account, you can create an account in order to share and download Javascript packages on the public registry.
Creating an account on the website


Go to the npm signup page


In the user signup form, type in the fields:

Username: The username that will be displayed when you publish packages or interact with other npm users on npmjs.com. Your username must be lower case, and can contain hyphens and numerals.
Email address: Your public email address will be added to the metadata of your packages and will be visible to anyone who downloads your packages. We will also send email to this account when you update packages, as well as occasional product updates and information.
Password: Your password must meet our password guidelines.




Read the End User License Agreement and Privacy Policy, and indicate that you agree to them.



Click Create An Account.



Note: After signing up for an npm account, you will receive an account verification email. You must verify your email address in order to publish packages to the registry.
Testing your new account with npm login
Use the npm login command to test logging in to your new account.
Note: If you misspell your existing account username when you log in with the npm login command, you will create a new account with the misspelled name. For help with accidentally-created accounts, contact npm Support.


On the command line, type the following command:
npm login


When prompted, enter your username, password, and email address.


If you have two-factor authentication enabled, when prompted, enter a one-time password.


To test that you have successfully logged in, type:
npm whoami
Your npm username should be displayed.

Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountCreating a strong passwordCreating a strong passwordSecure your npm account with a strong and unique password using a password manager.
You must choose or generate a password for your npm account that:

is longer than 10 characters
does not match or significantly contain your username, e.g. do not use 'username123'
has not been compromised and known to the Have I Been Pwned breach database

To keep your account secure, we recommend you follow these best practices:

Use a password manager, such as 1Password, to generate a password more than 16 characters.
Generate a unique password for npm. If you use your npm password elsewhere and that service is compromised, then attackers or other malicious actors could use that information to access your npm account.
Configure two-factor authentication for your account. For more information, see "About two-factor authentication."
Never share your password, even with a potential collaborator. Each person should use their own personal account on npm. For more information on ways to collaborate, see: "npm organizations".

When you type a password to sign in, create an account, or change your password, npm will check if the password you entered is considered weak according to datasets like HaveIBeenPwned. The password may be identified as weak even if you have never used that password before.
npm only inspects the password at the time you type it, and never stores the password you entered in plaintext. For more information, see HaveIBeenPwned.Edit this page on GitHub4 contributorslukekarrysMylesBorinsrzhade3ethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountReceiving a one-time password over emailReceiving a one-time password over emailSee DetailsTable of contentsLogging in with a one-time passwordEnabling two-factor authenticationUnable to access emailFor your security, npm may require additional verification to allow you to log in to your account. If you do not have two-factor authentication enabled, you may be asked to verify yourself with a one-time password sent to the email address configured for your account.
Logging in with a one-time password


On the npm "Sign In" page, enter your account details and click Sign In.



You'll be prompted for a one-time password that was sent to your email.



Check your email account for an email from npm containing your one-time password (the subject will begin "OTP for logging in to your account").



Enter the digits from your email in your one-time password field.


Enabling two-factor authentication
To avoid this additional login step, with a one-time password sent to you via e-mail, you can configure two-factor authentication with a device (2FA) instead.
Unable to access email
If you are unable to access the email linked to your npm account, you can submit a support ticket to reset this email address.


On the npm "Sign In" page, enter your account details and click Sign In.



Under the "Login Verification" form, click Try recovering your account.


On the "Request an Account Recovery" page, click Start Account Recovery.



In the "Open a Support Ticket" form, enter the following information:


In the Email field, enter an email address where our support team can contact you.

In the How can we help? section, select Reset my email.

If you need help with anything else, in the How can we help? section, select Other and enter more information in the Additional Details field.
If you have previously linked a GitHub account to your npm account, select Connect to GitHub. This will help our support team verify your account.If you have previously linked a Twitter account to your npm account, select Connect to Twitter. This will help our support team verify your account.




At the bottom of the form, click Submit Support Ticket.

Edit this page on GitHub2 contributorslukekarrysmonishcmLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountAbout two-factor authenticationAbout two-factor authenticationSee DetailsTable of contentsTwo-factor authentication on npmAuthorization and writesAuthorization onlyTwo-factor authentication (2FA) protects against unauthorized access to your account by confirming your identity using:

Something you know (e.g., a password).
Something you have (e.g., an ID badge or a cryptographic key).
Something you are (e.g., a fingerprint or other biometric data).

When you enable 2FA, you will be prompted for a second form of authentication before performing certain actions on your account or packages to which you have write access. Depending on your 2FA configuration you will be either prompted to authenticate with a security-key or a time-based one-time password (TOTP).

The security-key flow allows you to use biometric devices such as Apple Touch ID, Face ID or Windows Hello as well as physical keys such as Yubikey, Thetis or Feitian as your 2FA.
To configure TOTP you will need to install an authenticator application that can generate OTPs such as Authy, Google Authenticator, or Microsoft Authenticator on your mobile device.

Note: Two-factor authentication provides the best possible security for your account against attackers. We strongly recommend enabling 2FA on your account as soon as possible after you sign up.
Two-factor authentication on npm
Two-factor authentication on npm can be enabled for authorization and writes, or authorization only.
Authorization and writes
By default, 2FA is enabled for authorization and writes. We will request a second form of authentication for certain authorized actions, as well as write actions.
ActionCLI commandLog in to npmnpm loginChange profile settings (including your password)npm profile setChange 2FA modes for your user accountnpm profile enable-2fa auth-and-writesDisable 2FA for your user accountnpm profile disable-2faCreate tokensnpm token createRevoke tokensnpm token revokePublish packagesnpm publishUnpublish packagesnpm unpublishDeprecate packagesnpm deprecateChange package visibilitynpm access public/restrictedChange user and team package accessnpm access grant/revokeChange package 2FA requirementsnpm access 2fa-required/2fa-not-required
Authorization only
If you enable 2FA for authorization only. We will request a second form of authentication only for certain authorized actions.
ActionCLI commandLog in to npmnpm loginChange profile settings (including your password)npm profile setChange 2FA modes for your user accountnpm profile enable-2fa auth-onlyDisable 2FA for your user accountnpm profile disable-2faCreate tokensnpm token createRevoke tokensnpm token revokeEdit this page on GitHub5 contributorslukekarrysmonishcmb4mbooachrinzaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountConfiguring two-factor authenticationConfiguring two-factor authenticationSee DetailsTable of contentsPrerequisitesConfiguring 2FA from the websiteEnabling 2FADisabling 2FA for writesDisabling 2FAConfiguring 2FA from the command lineEnabling 2FA from the command lineSending a one-time password from the command lineRemoving 2FA from the command lineConfiguring account recovery optionsResolving TOTP errorsYou can enable two-factor authentication (2FA) on your npm user account to protect against unauthorized access to your account and packages, either by using a security-key or time-based one-time password (TOTP) from a mobile app.
Prerequisites
Before you enable 2FA on your npm user account, you must:

Update your npm client to version 5.5.1 or higher.
To configure a security-key requires a modern browser that support WebAuthn. This will allow you to configure a biometric devices featuring Apple Touch ID, Face ID, or Windows Hello as well as physical keys such as Yubikey, Thetis, or Feitian.
To configure TOTP you will need to install an authenticator application that can generate OTPs such as Authy, Google Authenticator, or Microsoft Authenticator on your mobile device.

For more information on supported 2FA methods, see "About two-factor authentication".
Note: npm does not accept SMS (text-to-phone) as a 2FA method.
Configuring 2FA from the website
Enabling 2FA


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Enable 2FA.



When prompted provide your current account password and then click Confirm password to continue.


On the 2FA method page, select the method you would like to enable and click Continue. For more information on supported 2FA methods, see "About two-factor authentication".



Configure the 2FA method of your choice:

When using a security-key, provide a name for it and click Add security key. Follow the browser specific steps to add your security-key.



Below is an example of configuration from Microsoft Edge running on a MacOS



When using an authenticator application on your phone, open it and scan the QR code on the two-step verification page. Enter the code generated by the app, then click Verify.




On the recovery code page, copy the recovery codes to your computer or other safe location that is not your second factor device. We recommend using a password manager.

Recovery codes are the only way to ensure you can recover your account if you lose access to your second factor device. Each code can be used only once. You can view and regenerate your recovery code from your 2FA settings page. For secondary account recovery options, see "Configuring account recovery options."


Click Go back to settings after confirming that you have saved your codes.


Disabling 2FA for writes
Check the Authorization and writes section for more information on different operations that requires 2FA when this mode is enabled.
Note: As a recommended setting, 2FA for write operations are automatically enabled when setting up 2FA. The following steps explain how to disable it.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Modify 2FA.



From the "Manage Two-Factor Authentication" navigate to "Additional Options" section


Clear the checkbox for "Require two-factor authentication for write actions" and click "Update Preferences"



Disabling 2FA
If you have 2FA enabled, you can remove it from your account settings page.
Note: You cannot remove 2FA if you are a member of an organization that enforces 2FA. You can view the list of organizations memberships from your profile page under the "Organizations" tab.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Modify 2FA.



Scroll to the bottom of the "Manage Two-Factor Authentication" page and click Disable 2FA.



Agree to the prompt from the browser.


Configuring 2FA from the command line
Enabling 2FA from the command line
Although security-key with WebAuthn can be used for authentication from both the web and the command line, it can only be configured from the web. When enabling 2FA from the command line, currently the only available option is to use an TOTP mobile app.
Note: Settings you configure on the command line will also apply to your profile settings on the npm website.


If you are logged out on the command line, log in using npm login command.


On the command line, type the npm profile command along with the option for the 2FA mode you want to enable:


To enable 2FA for authorization and writes, type:
npm profile enable-2fa auth-and-writes


To enable 2FA for authorization only, type:
npm profile enable-2fa auth-only




To add npm to your authenticator application, using the device with the app, you can either:

Scan the QR code displayed on the command line.
Type the number displayed below the QR code.



When prompted to add an OTP code from your authenticator, on the command line, enter a one-time password generated by your authenticator app.


Sending a one-time password from the command line
If you have enabled 2FA auth-and-writes, you will need to send the TOTP from the command line for certain commands to work. To do this, append --otp=123456 (where 123456 is the code generated by your authenticator) at the end of the command. Here are a few examples:
npm publish [<tarball>|<folder>][--tag <tag>] --otp=123456npm owner add <user > --otp=123456npm owner rm <user> --otp=123456npm dist-tags add <pkg>@<version> [<tag>] --otp=123456npm access edit [<package>) --otp=123456npm unpublish [<@scope>/]<pkg>[@<version>] --otp=123456
Removing 2FA from the command line


If you are logged out on the command line, log in using npm login command.


On the command line, type the following command:
npm profile disable-2fa


When prompted, enter your npm password:
npm password:


When prompted for a one-time password, enter a password from your authenticator app:
Enter one-time password from your authenticator: 123456


Configuring account recovery options
When you enable 2FA on your npm user account, we strongly recommend you link your GitHub and/or Twitter accounts to your npm user account. In the event you lose access to your 2FA device and recovery codes, these linked accounts can be used to verify your identity and expedite the recovery of your npm account.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



To link your GitHub account, on the account settings page, under "Linked Accounts & Recovery Option", click Link with GitHub.



On the authorization page, verify all information looks correct. Then click Authorize npm account link.


To link your Twitter account, on the account settings page, under "Linked Accounts & Recovery Option", click Link with Twitter.



On the authorization page, verify all information looks correct. Then click Authorize app.


The Twitter or GitHub account is now linked to your npm account. To remove the link to either account, you can click the Remove button next to the account you want to remove from your npm account.
Resolving TOTP errors
If you are entering what seems to be a valid TOTP but you see an error, be sure that you are using the correct authenticator account. If you have multiple authenticator accounts, using an TOTP from the wrong account will cause an error.
Also, when you reset two-factor authentication after it has been disabled, the authenticator might create a second account with the same name. Please see the authenticator documentation to delete the old account.Edit this page on GitHub7 contributorscdoublevlukekarrysmonishcmb4mboocoliffMylesBorinsethomsonLast edited by cdoublev on August 13, 2024\n\n\n\nGetting startedSetting up your accountAccessing npm using two-factor authenticationAccessing npm using two-factor authenticationSee DetailsTable of contentsSign in from the command line using security-key flowSign in from the command line using --auth-type=webWith an existing browser sessionWithout an existing browser sessionSign in from the command line using security-key flow


On the command line, type the npm login command.


When prompted, provide your username, password, and email address.
user@host:~$ npm loginnpm notice Log in on https://registry.npmjs.org/Username: monaPassword:Email: (this IS public) mona@github.comnpm notice Open https://www.npmjs.com/login/913c3ab1-89a0-44bd-be8d-d946e2e906f0 to use your security key for authentication or enter OTP from your authenticator app


If you have configured a security-key, open the provided URL shown in the command line. Alternatively, if you have configured a mobile authenticator skip to step 6.


Click on Use security key and follow the browser specific steps to authenticate.



Copy the generated token



Enter the one-time password into the CLI prompt.
Enter one-time password:


Sign in from the command line using --auth-type=web
npm 8.14.0 and higher support login flow through the browsers. This will become the default behavior for the npm public registry in npm 9.
With an existing browser session


On the command line, type the npm login --auth-type=web command.


When prompted hit "ENTER" to open your browser to start the login flow or click the provided URL show in the command line.
user@host:~$ npm loginnpm notice Log in on https://registry.npmjs.org/Authenticate your account at:https://www.npmjs.com/login?next=/login/cli/b1a2f96a-ce09-4463-954c-c99f6773b922Press ENTER to open in the browser...


Click on Use security key and follow the browser specific steps to authenticate.

Note: If you have configured to use TOTP, you will see an TOTP prompt instead


Without an existing browser session


On the command line, type the npm login --auth-type=web command.


When prompted hit "ENTER" to open your browser to start the login flow or click the provided URL show in the command line.
user@host:~$ npm loginnpm notice Log in on https://registry.npmjs.org/Authenticate your account at:https://www.npmjs.com/login?next=/login/cli/b1a2f96a-ce09-4463-954c-c99f6773b922Press ENTER to open in the browser...


On the npm "Sign In" page, enter your account details and click Sign In.



Click on Use security key and follow the browser specific steps to authenticate.

Note: If you have configured to use TOTP, you will see an TOTP prompt instead

Edit this page on GitHub5 contributorslukekarrysbitdawMylesBorinsmonishcmb4mbooLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountRecovering your 2FA-enabled accountRecovering your 2FA-enabled accountSee DetailsTable of contentsMisplaced second factor deviceUsing recovery code on the webUsing recovery code from the command lineViewing and regenerating recovery codeMisplaced recovery codesWhen you have two-factor access enabled on your account, and you lose access to your 2FA device, you may be able to recover your account using the following methods.
Misplaced second factor device
If you have misplaced the device that provided second-factor authentication, you can use the recovery codes generated when you enabled 2FA to access your account.
Using recovery code on the web


Locate the recovery codes generated that you have saved.


On the npm "Sign In" page, enter your account details and click Sign In.



On the "Two-Factor Authentication" page, click Use a recovery code or request a reset.

Note: If you have configured to use TOTP, you will see an TOTP prompt instead


Enter an unused recovery code in the "Use a Recovery Code" prompt.



You are now logged into npm.


(Optional) To disable 2FA, see "Disabling 2FA".


Using recovery code from the command line


Locate the recovery codes generated when you enabled 2FA on your account.


If you are logged out on the command line, log in using npm login command with your username and npm password.


Enter an unused recovery code when you see this prompt:
Enter one-time password:


Once you are logged in, use the below and enter your npm password if prompted.
npm profile disable-2fa


Enter another unused recovery code when you see this prompt:
Enter one-time password:


npm will confirm that two-factor authentication has been disabled.


Follow the steps outlined in "Configuring two-factor authentication" to re-enable 2FA and generate new recovery codes.


Note: Using the recovery codes to re-enable 2FA may create a new authenticator account with the same npm account name.If you are using a time-based one-time password (TOTP) mobile app and want to delete the old authenticator account, follow the steps for the authenticator.
Viewing and regenerating recovery code
Note: Once you regenerate a set of code, all previous recovery codes become invalid. Each code can be used only once.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Modify 2FA.



Click "Manage Recovery Codes" to view your recovery codes.



Click "Regenerate Code" to generate a new set of codes.


Misplaced recovery codes
If you have misplaced both your 2FA device and your recovery codes, you can contact our support team to attempt to recover your account. Provide as much information as possible to help us expedite the request faster.


On the npm "Sign In" page, enter your account details and click Sign In.



On the "Two-Factor Authentication" page, click Use a recovery code or request a reset.



Under the "Use a Recovery Code" form, click Try recovering your account.


On the "Request an Account Recovery" page, click Start Account Recovery.



If you have access to your registered email, enter the one-time password sent to your email in the One-Time Password field, then click Verify Email Address. If you do not have access to your registered email, select Skip email verification at the bottom of the form.


In the "Open a Support Ticket" form, enter the following information:


In the Email field, enter an email address where our support team can contact you.

In the How can we help? section, select Reset my two-factor authentication (2FA).

If you need help with anything else, in the How can we help? section, select Other and enter more information in the Additional Details field.
If you have previously linked a GitHub account to your npm account, select Connect to GitHub. This will help our support team verify your account.If you have previously linked a Twitter account to your npm account, select Connect to Twitter. This will help our support team verify your account.





At the bottom of the form, click Submit Support Ticket.

Edit this page on GitHub4 contributorslukekarrysmonishcmb4mbooethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountManaging your profile settingsManaging your profile settingsSee DetailsTable of contentsManaging user account profile settings from the webLinking your npm and GitHub accountsLinking your npm and Twitter accountsRemoving your GitHub account from npmRemoving your Twitter account from npmManaging user account profile settings from the command lineViewing user account profile settings from the command lineUpdating user account profile settings from the command lineSetting a password from the command lineConfiguring two-factor authentication from the command lineYou can manage settings for your user account profile from the web or command line.
Managing user account profile settings from the web
From the web, you can change the following user profile settings:

Avatar
Password
Full name
Link GitHub Account
Link Twitter Account
Email address added to package metadata
Two-factor authentication status



On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



Linking your npm and GitHub accounts


On the account settings page, you will find a button to link your GitHub account. Click that.



If you are not currently logged in to GitHub you will be prompted to go through the authentication flow.



After successfully logging in, or if you already had an active browser sessions, you will be prompted to "authorize npm account link", click the button.



You will be redirected to npm and the link will show as successful in your settings.



Linking your npm and Twitter accounts


On the account settings page, you will find a button to link your Twitter account. Click that.



If you are not currently logged in to Twitter you will be prompted to go through the authentication flow. Click "Log in"



After successfully logging in, or if you already had an active browser sessions, you will be prompted to "Authorize app", click the button.



You will be redirected to npm and the link will show as successful in your settings.



Removing your GitHub account from npm


On the account settings page, you will find a button to remove your GitHub account. Click that.

Note: Clicking remove will only remove the link from your npm account. You need to revoke permissions from your GitHub app authorization settings to permanently remove the integration from your GitHub account


Removing your Twitter account from npm


On the account settings page, you will find a button to remove your GitHub account. Click that.

Note: Clicking remove will only remove the link from your npm account. You need to revoke permissions from your Twitter connect apps management page to permanently remove the integration from your Twitter account


Managing user account profile settings from the command line
Note: Your npm client must be version 5.5.1 or higher to change your account settings from the CLI. To update to the latest version of npm, on the command line, run npm install npm@latest -g
Viewing user account profile settings from the command line
To view your user profile settings from the CLI, on the command line, run the following command:
npm profile get

Updating user account profile settings from the command line
From the CLI, you can change the following properties for your user account:

email
two-factor auth
fullname
homepage
freenode
password



On the command line, type the following command, replacing property with the name of the property, and value with the new value:
npm profile set <prop> <value>


When prompted, provide your current password.


If you have enabled two-factor authentication on your account, when prompted, enter a one-time password.


For more details, see the profile command line documentation.
Setting a password from the command line

On the command line, type the following command:

npm profile set password


When prompted, provide your current password.


When prompted, type a new password.


To protect your account, when you reset your password from the command line, it must:
be longer than 10 characters
not contain part of your username
not be in the "Have I Been Pwned" breach database

Configuring two-factor authentication from the command line
Enabling two-factor authentication on your account helps protect against unauthorized access to your account and packages.
To enable, configure, and disable two-factor authentication from the command line, see "Configuring two-factor authentication".Edit this page on GitHub5 contributorslukekarrysarisacobarzhade3MylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountChanging your npm usernameChanging your npm usernameIt is not currently possible to change your npm username. You'll need to create a new account and migrate the data to the new account manually.

Create a new user account with your desired username
Transfer your packages to your new account.
If you are a member of any organizations, ask the organization administrator to invite your new account to the organization.
Delete your original account. Note that this is permanent, and after 30 days, this account name is available for other people to claim.
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountDeleting your npm user accountDeleting your npm user accountFrom the web, you can delete your npm user account.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On this page, you will find a button to delete your account. Click that.



You will now be presented with an overview of how many npm packages will be deleted and deprecated as part of your account deletion. If you agree with this, then enter your username and click "Delete this account".



You will be immediately logged out, and will not be able to log back in.


In some cases, you will be presented with an error if we were unable to automatically delete your account. For example. if you are the sole owner of an organization you will need to add an additional owner before your account can be deleted. You will be presented clear instructions of what you will need to do in order to delete your account.
If you are in doubt about deleting your account, contact npm Support.Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountRequesting an export of your personal dataRequesting an export of your personal dataSee DetailsTable of contentsHow to request an exportRetrieving the exported dataYou can export and review the metadata that npm stores about your personal account. The export is an archive containing the following information.

Your personal details such as username, email address, full name, linked Twitter / GitHub accounts, masked Personal Access Tokens (PAT) and the organisations that you are a member of.
Metadata of all the packages that you have access to.
Each individual version of packages that you have published to npm.

How to request an export

Navigate to npm support form
Select "Account and Billing issues" category
Select "Data export request" sub-category



Fill in the details and submit the form

Retrieving the exported data
After a request is placed our support team will review it and initiate an export on your behalf. Once the export process is complete you will receive an email with a link to an archive of your personal data. You must be authenticated to npmjs.com to download this archive.
The download link will be available for 7 days, after which the exported data and the link is purged.\n\n\n\nGetting startedPaying for your accountUpgrading to a paid user account planUpgrading to a paid user account planNote: This article only applies to users of the public npm registry.
If you need to install and publish private packages, you can upgrade to a paid user account plan. Our paid user account plan costs $7 per month. For more information, see the "npm account" column on our pricing page.
Your paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



Under "change plan", click Upgrade Plan ($7/User).



Under "Want to upgrade?", click Enable Private Publishing for $7/mo.



In the billing information dialog box, enter your billing information:Email: the email address used for the billing contactName: the name on the credit card used to payStreet, City, ZIP Code, Country: the billing address associated with the credit card



Click Payment Info.



In the credit card information dialog box, enter your credit card information:Card numberMM / YY: the month and year of the card expiration dateCVC: the three-digit code on the credit card



To save your credit card information for other payments on npm, select "Remember me".



Click Pay $7.00.


Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedPaying for your accountViewing, downloading, and emailing receipts for your npm user accountViewing, downloading, and emailing receipts for your npm user accountSee DetailsTable of contentsViewing receiptsDownloading receiptsEmailing receiptsNote: This article only applies to users of the public npm registry.
You can view, download, and email receipts for the complete billing history of your npm user account.
Viewing receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.



Downloading receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



To download a single receipt, find the row of the receipt you want to download, then click the PDF icon on the right side of the row.



To download multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the "Date" header. Then click Download Checked.



Emailing receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



To email a single receipt, find the row of the receipt you want to download, then, on the right side of the row, click the email icon.



To email multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the "Date" header. Then click Email Checked.



In the Email Receipt dialog box, fill in the "From", "To", and "Message" fields.



Click Send.

Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedPaying for your accountUpdating user account billing settingsUpdating user account billing settingsSee DetailsTable of contentsUpdating credit card informationUpdating billing receipt email and extra receipt informationNote: This article only applies to users of the public npm registry.
You can update the credit card used to pay for your paid user account plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.
Note: If the credit card used to pay for your paid user account plan expires, or we are otherwise are unable to charge your card, you have a grace period of nine days to update the card.
Updating credit card information


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



Under "monthly bill", click Edit Payment Info.



In the billing information dialog box, enter your billing information:Email: the email address used for the billing contactName: the name on the credit card used to payStreet, City, ZIP Code, Country: the billing address associated with the credit card



Click Payment Info.



In the credit card information dialog box, enter your credit card information:Card numberMM / YY: the month and year of the card expiration dateCVC: the three-digit code on the credit card



To save your credit card information for other payments on npm, select "Remember me".



Click Update Card.



Updating billing receipt email and extra receipt information
You can update the email address used for receipts, and add extra information to the receipt for your paid user account plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.
Note: The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the paid user account plan.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



At the bottom of the Billing History dialog box, click "Receipt Settings".



To add a business name, VAT number, address of record, or other information to your receipts, in the "Extra Billing Information" text box, type the information.



To update the email address used for receipts, beside "Send my receipts", select the checkbox and type the email address that should receive billing receipts.



Click Save.


Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedPaying for your accountDowngrading to a free user account planDowngrading to a free user account planNote: This article only applies to users of the public npm registry.
If you have a paid user account, but no longer need private packages, you can downgrade your paid organization to a free organization. When you downgrade from a paid to a free organization, you will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will not be made publicly visible when you downgrade to a free plan.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



Under "change plan", click Downgrade Plan.



Under "Are you sure?", click Downgrade to a free account.


Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedConfiguringAbout npm CLI versionsAbout npm CLI versionsSee DetailsTable of contentsThe latest release of npmThe npm command line interface (CLI) is released on a regular cadence. We recommend installing the release that supports your workflow:

latest release: the most recent stable version.

The latest release of npm
The latest release of npm is the most recent stable version. When you install Node.js, npm is automatically installed. However, npm is released more frequently than Node.js, so to install the latest stable version of npm, on the command line, run:
npm install npm@latest -gEdit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 11, 2021\n\n\n\nGetting startedConfiguringDownloading and installing Node.js and npmDownloading and installing Node.js and npmSee DetailsTable of contentsOverviewChecking your version of npm and Node.jsUsing a Node version manager to install Node.js and npmOSX or Linux Node version managersWindows Node version managersUsing a Node installer to install Node.js and npmOS X or Windows Node installersLinux or other operating systems Node installersLess-common operating systemsTo publish and install packages to and from the public npm registry or a private npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. We strongly recommend using a Node version manager like nvm to install Node.js and npm. We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.
Note: to download the latest version of npm, on the command line, run the following command:npm install -g npm
Overview

Checking your version of npm and Node.js
Using a Node version manager to install Node.js and npm
Using a Node installer to install Node.js and npm

Checking your version of npm and Node.js
To see if you already have Node.js and npm installed and check the installed version, run the following commands:
node -vnpm -v
Using a Node version manager to install Node.js and npm
Node version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions.
OSX or Linux Node version managers

nvm
n

Windows Node version managers

nodist
nvm-windows

Using a Node installer to install Node.js and npm
If you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.

Node.js installer
NodeSource installer

If you use Linux, we recommend that you use a NodeSource installer.
OS X or Windows Node installers
If you're using OS X or Windows, use one of the installers from the Node.js download page. Be sure to install the version labeled LTS. Other versions have not yet been tested with npm.
Linux or other operating systems Node installers
If you're using Linux or another operating system, use one of the following installers:

NodeSource installer (recommended)
One of the installers on the Node.js download page

Or see this page to install npm for Linux in the way many Linux developers prefer.
Less-common operating systems
For more information on installing Node.js on a variety of operating systems, see this page.Edit this page on GitHub3 contributorslukekarryshappy4soulethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedTroubleshootingGenerating and locating npm-debug.log filesGenerating and locating npm-debug.log filesWhen a package fails to install or publish, the npm CLI will generate an npm-debug.log file. This log file can help you figure out what went wrong.
If you need to generate a npm-debug.log file, you can run one of these commands.
For installing packages:
npm install --timing
For publishing packages:
npm publish --timing
You can find the npm-debug.log file in your .npm directory. To find your .npm directory, use npm config get cache.
If you use a CI environment, your logs are likely located elsewhere. For example, in Travis CI, you can find them in the /home/travis/build directory.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 22, 2023\n\n\n\nGetting startedTroubleshootingCommon errorsCommon errorsSee DetailsTable of contentsErrorsBroken npm installationRandom errorsNo compatible version foundPermissions errorsError: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7No spaceNo gitRunning a Vagrant box on Windows fails due to path length issuesnpm only uses git: and ssh+git: URLs for GitHub repos, breaking proxiesSSL ErrorSSL-intercepting proxyNot found / Server errorInvalid JSONMany ENOENT / ENOTEMPTY errors in outputcb() never called! when using shrinkwrapped dependenciesnpm login errorsnpm hangs on Windows at addRemoteTarballnpm not running the latest version on a Windows machineErrors

Broken npm installation
Random errors
No compatible version found
Permissions errors
Error: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7
No space
No git
Running a Vagrant box on Windows fails due to path length issues
npm only uses git: and ssh+git: URLs for GitHub repos, breaking proxies
SSL error
SSL-intercepting proxy
Not found / Server error
Invalid JSON
Many ENOENT / ENOTEMPTY errors in output
cb() never called! when using shrinkwrapped dependencies
npm login errors
npm hangs on Windows at addRemoteTarball
npm not running the latest version on a Windows machine

Broken npm installation
If your npm is broken:

On Mac or Linux, reinstall npm.
Windows: If you're on Windows and you have a broken installation, the easiest thing to do is to reinstall node from the official installer (see this note about installing the latest stable version).

Random errors

Some strange issues can be resolved by simply running npm cache clean and trying again.
If you are having trouble with npm install, use the -verbose option to see more details.

No compatible version found
You have an outdated npm. Please update to the latest stable npm.
Permissions errors
Please see the discussions in "Downloading and installing Node.js and npm" and "Resolving EACCES permissions errors when installing packages globally" for ways to avoid and resolve permissions errors.
Error: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7
The error Error: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7 is a consequence of joyent/node#8141, and is an issue with the Node installer for Windows. The workaround is to ensure that C:\Users\<user>\AppData\Roaming\npm exists and is writable with your normal user account.
No space
npm ERR! Error: ENOSPC, write
You are trying to install on a drive that either has no space, or has no permission to write.

Free some disk space or
Set the tmp folder somewhere with more space: npm config set tmp /path/to/big/drive/tmp or
Build Node yourself and install it somewhere writable with lots of space.

No git
npm ERR! not found: gitENOGIT
You need to install git. Or, you may need to add your git information to your npm profile. You can do this from the command line or the website. For more information, see "Managing your profile settings".
Running a Vagrant box on Windows fails due to path length issues
@drmyersii went through what sounds like a lot of painful trial and error to come up with a working solution involving Windows long paths and some custom Vagrant configuration:

This is the commit that I implemented it in, but I'll go ahead and post the main snippet of code here:
config.vm.provider "virtualbox" do |v|    v.customize ["sharedfolder", "add", :id, "--name", "www", "--hostpath", (("//?/" + File.dirname(__FILE__) + "/www").gsub("/","\\"))]end
config.vm.provision :shell, inline: "mkdir /home/vagrant/www"config.vm.provision :shell, inline: "mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` > www /home/vagrant/www", run: "always"
In the code above, I am appending \\?\ to the current directory absolute path. This will actually force the Windows API to allow an increase in the MAX_PATH variable (normally capped at 260). Read more about max path. This is happening during the sharedfolder creation which is intentionally handled by VBoxManage and not Vagrant's "synced_folder" method. The last bit is pretty self-explanatory; we create the new shared folder and then make sure it's mounted each time the machine is accessed or touched since Vagrant likes to reload its mounts/shared folders on each load.

npm only uses git: and ssh+git: URLs for GitHub repos, breaking proxies
@LaurentGoderre fixed this with some Git trickery:

I fixed this issue for several of my colleagues by running the following two commands:
git config --global url."https://github.com/".insteadOf git@github.com:git config --global url."https://".insteadOf git://
One thing we noticed is that the .gitconfig used is not always the one expected so if you are on a machine that modified the home path to a shared drive, you need to ensure that your .gitconfig is the same on both your shared drive and in c:\users\[your user]\

SSL Error
npm ERR! Error: 7684:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:openssl l 23_clnt.c:787:
You are trying to talk SSL to an unencrypted endpoint. More often than not, this is due to a proxy configuration error (see also this helpful, if dated, guide). In this case, you do not want to disable strict-ssl – you may need to set up a CA / CA file for use with your proxy, but it's much better to take the time to figure that out than disabling SSL protection.
npm ERR! Error: SSL Error: CERT_UNTRUSTED
npm ERR! Error: SSL Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE
This problem will happen if you're running Node 0.6. Please upgrade to node 0.8 or above. See this post for details.
You could also try these workarounds: npm config set ca "" or npm config set strict-ssl false
npm ERR! Error: SSL Error: SELF_SIGNED_CERT_IN_CHAIN
npm no longer supports its self-signed certificates
Either:

upgrade your version of npm npm install npm -g --ca=""
tell your current version of npm to use known registrars npm config set ca=""

If this does not fix the problem, then you may have an SSL-intercepting proxy. (For example, https://github.com/npm/npm/issues/7439#issuecomment-76024878)
SSL-intercepting proxy
Unsolved. See https://github.com/npm/npm/issues/9282
Not found / Server error
npm http 404 https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgznpm ERR! fetch failed https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgznpm ERR! Error: 404 Not Found
npm http 500 https://registry.npmjs.org/phonegap

It's most likely a temporary npm registry glitch. Check npm server status and try again later.
If the error persists, perhaps the published package is corrupt. Contact the package owner and have them publish a new version of the package.

Invalid JSON
Error: Invalid JSON
npm ERR! SyntaxError: Unexpected token <
npm ERR! registry error parsing json

Possible temporary npm registry glitch, or corrupted local server cache. Run npm cache clean and/or try again later.
This can be caused by corporate proxies that give HTML responses to package.json requests. Check npm's proxy configuration.
Check that it's not a problem with a package you're trying to install (e.g. invalid package.json).

Many ENOENT / ENOTEMPTY errors in output
npm is written to use resources efficiently on install, and part of this is that it tries to do as many things concurrently as is practical. Sometimes this results in race conditions and other synchronization issues. As of npm 2.0.0, a very large number of these issues were addressed. If you see ENOENT lstat, ENOENT chmod, ENOTEMPTY unlink, or something similar in your log output, try updating npm to the latest version. If the problem persists, look at npm/npm#6043 and see if somebody has already discussed your issue.
cb() never called! when using shrinkwrapped dependencies
Take a look at issue #5920. We're working on fixing this one, but it's a fairly subtle race condition and it's taking us a little time. You might try moving your npm-shrinkwrap.json file out of the way until we have this fixed. This has been fixed in versions of npm newer than npm@2.1.5, so update to npm@latest.
npm login errors
Sometimes npm login fails for no obvious reason. The first thing to do is to log in at https://www.npmjs.com/login and check that your e-mail address on npmjs.com matches the email address you are giving to npm login.
If that's not the problem, or if you are seeing the message "may not mix password_sha and pbkdf2", then

Log in at https://npmjs.com/
Change password at https://npmjs.com/password – you can even "change" it to the same password
Clear login-related fields from ~/.npmrc – e.g., by running sed -ie '/registry.npmjs.org/d' ~/.npmrc
npm login

and it generally seems to work.
See https://github.com/npm/npm/issues/6641#issuecomment-72984009 for the history of this issue.
npm hangs on Windows at addRemoteTarball
Check if you have two temp directories set in your .npmrc:
> npm config ls -l
Look for lines defining the tmp config variable. If you find more than one, remove all but one of them.
See https://github.com/npm/npm/issues/7590 for more about this unusual problem.
npm not running the latest version on a Windows machine
See the section about Windows here.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedTroubleshootingTry the latest stable version of nodeTry the latest stable version of nodeSee DetailsTable of contentsSee what version of node you're running:Updating node on LinuxUpdating node on WindowsUpdating node on OSXAn easy way to stay up-to-dateIf you're experiencing issues while using a version of node which is unsupported or unstable (odd numbered versions e.g. 0.7.x, 0.9.x, 0.11.x), it's very possible your issue will be fixed by simply using the LTS version of node.
See what version of node you're running:
node -v
Updating node on Linux
For some Linux distributions (Debian/Ubuntu and RedHat/CentOS), the latest node version provided by the distribution may lag behind the stable version. Here are instructions from NodeSource on getting the latest node.
Updating node on Windows
Install the latest msi from https://nodejs.org/en/download
Updating node on OSX
Install the latest package from https://nodejs.org/en/download
or if you are using homebrew
brew install node
An easy way to stay up-to-date
Node.js has lots of versions, and its development is very active. As a good practice to manage the various versions, we recommend that you use a version manager for your Node.js installation. There are many great options, here are a few:

NVM
nodist
n
nave
nodebrew
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedTroubleshootingTry the latest stable version of npmTry the latest stable version of npmSee DetailsTable of contentsSee what version of npm you're runningUpgrading on *nix (OSX, Linux, etc.)Upgrading on WindowsA brief note on the built-in Windows configurationSee what version of npm you're running
npm -v
Upgrading on *nix (OSX, Linux, etc.)
(You may need to prefix these commands with sudo, especially on Linux, or OS X if you installed Node using its default installer.)
You can upgrade to the latest version of npm using:
npm install -g npm@latest
Upgrading on Windows
By default, npm is installed alongside node in
C:\Program Files (x86)\nodejs
npm's globally installed packages (including, potentially, npm itself) are stored separately in a user-specific directory (which is currently
C:\Users\<username>\AppData\Roaming\npm).
Because the installer puts
C:\Program Files (x86)\nodejs
before
C:\Users\<username>\AppData\Roaming\npm
on your PATH, it will always use the version of npm installed with node instead of the version of npm you installed using npm -g install npm@<version>.
To get around this, you can do one of the following:


Option 1: edit your Windows installation's PATH to put %appdata%\npm before %ProgramFiles%\nodejs. Remember that you'll need to restart cmd.exe (and potentially restart Windows) when you make changes to PATH or how npm is installed.


Option 2: remove both of

%ProgramFiles%\nodejs\npm
%ProgramFiles%\nodejs\npm.cmd



Option 3: Navigate to %ProgramFiles%\nodejs\node_modules\npm and copy the npmrcfile to another folder or the desktop. Then open cmd.exe as an administrator and run the following commands:


cd %ProgramFiles%\nodejsnpm install npm@latest
If you installed npm with the node.js installer, after doing one of the previous steps, do the following.


Option 1 or 2

Go into %ProgramFiles%\nodejs\node_modules\npm and copy the file named npmrc in the new npm folder, which should be %appdata%\npm\node_modules\npm. This will tell the new npm where the global installed packages are.



Option 3

Copy the npmrc file back into %ProgramFiles%\nodejs\node_modules\npm



(See also the point below if you're running Windows 7 and don't have the directory %appdata%\npm.)
A brief note on the built-in Windows configuration
The Node installer installs, directly into the npm folder, a special piece of Windows-specific configuration that tells npm where to install global packages. When npm is used to install itself, it is supposed to copy this special builtin configuration into the new install. There was a bug in some versions of npm that kept this from working, so you may need to go in and fix that up by hand. Run the following command to see where npm will install global packages to verify it is correct.
npm config get prefix -g
If it isn't set to <X>:\Users\<user>\AppData\Roaming\npm, you can run the below command to correct it:
npm config set prefix %APPDATA%\npm -g
Incidentally, if you would prefer that packages not be installed to your roaming profile (because you have a quota on your shared network, or it makes logging in or out from a domain sluggish), you can put it in your local app data instead:
npm config set prefix %LOCALAPPDATA%\npm -g
...as well as copying %APPDATA%\npm to %LOCALAPPDATA%\npm (and updating your %PATH%, of course).
Everyone who works on npm knows that this process is complicated and fraught, and we're working on making it simpler. Stay tuned.Edit this page on GitHub5 contributorslukekarrysMylesBorinsfritzyjoshbmairethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionAbout the public npm registryAbout the public npm registryThe public npm registry is a database of JavaScript packages, each comprised of software and metadata. Open source developers and developers at companies use the npm registry to contribute packages to the entire community or members of their organizations, and download packages to use in their own projects.
To get started with the registry, sign up for an npm account and check out the "Getting started" and CLI documentation.Edit this page on GitHub1 contributorethomsonLast edited by ethomson on September 22, 2020\n\n\n\nPackages and modulesIntroductionAbout packages and modulesAbout packages and modulesSee DetailsTable of contentsAbout packagesAbout package formatsnpm package git URL formatsAbout modulesThe npm registry contains packages, many of which are also Node modules, or contain Node modules. Read on to understand how they differ and how they interact.
About packages
A package is a file or directory that is described by a package.json file. A package must contain a package.json file in order to be published to the npm registry. For more information on creating a package.json file, see "Creating a package.json file".
Packages can be unscoped or scoped to a user or organization, and scoped packages can be private or public. For more information, see

"About scopes"
"About private packages"
"Package scope, access level, and visibility"

About package formats
A package is any of the following:

a) A folder containing a program described by a package.json file.
b) A gzipped tarball containing (a).
c) A URL that resolves to (b).
d) A <name>@<version> that is published on the registry with (c).
e) A <name>@<tag> that points to (d).
f) A <name> that has a latest tag satisfying (e).
g) A git url that, when cloned, results in (a).

npm package git URL formats
Git URLs used for npm packages can be formatted in the following ways:

git://github.com/user/project.git#commit-ish
git+ssh://user@hostname:project.git#commit-ish
git+http://user@hostname/project/blah.git#commit-ish
git+https://user@hostname/project/blah.git#commit-ish

The commit-ish can be any tag, sha, or branch that can be supplied as an argument to git checkout. The default commit-ish is HEAD.
Installing any package directly from git will not install git submodules or workspaces.
About modules
A module is any file or directory in the node_modules directory that can be loaded by the Node.js require() function.
To be loaded by the Node.js require() function, a module must be one of the following:

A folder with a package.json file containing a "main" field.
A JavaScript file.

Note: Since modules are not required to have a package.json file, not all modules are packages. Only modules that have a package.json file are also packages.
In the context of a Node program, the module is also the thing that was loaded from a file. For example, in the following program:
var req = require('request')
The req variable refers to the request module returned by the require() function.Edit this page on GitHub7 contributorsreggiKCarlilelukekarrysseantcoyote0liverjoey-maethomsonLast edited by reggi on September 16, 2024\n\n\n\nPackages and modulesIntroductionAbout scopesAbout scopesSee DetailsTable of contentsScopes and package visibilityNote: You must be using npm version 2 or greater to use scopes. To upgrade to the latest version of npm, on the command line, run npm install npm@latest -g
When you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.
A scope allows you to create a package with the same name as a package created by another user or organization without conflict.
When listed as a dependent in a package.json file, scoped packages are preceded by their scope name. The scope name is everything between the @ and the slash:

"npm" scope:

@npm/package-name

"npmcorp" scope:

@npmcorp/package-name
To create and publish public scoped packages, see "Creating and publishing scoped public packages".
To create and publish private scoped packages, see "Creating and publishing private packages".
Scopes and package visibility

Unscoped packages are always public.
Private packages are always scoped.
Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.

For more information on package scope and visibility, see "Package scope, access level, and visibility".Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionAbout public packagesAbout public packagesSee DetailsTable of contentsNext stepsAs an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects.

Unscoped public packages exist in the global public registry namespace and can be referenced in a package.json file with the package name alone: package-name.
Scoped public packages belong to a user or organization and must be preceded by the user or organization name when included as a dependency in a package.json file:

@username/package-name
@org-name/package-name



Next steps

"Creating and publishing scoped public packages"
"Creating and publishing unscoped public packages"
"Using npm packages in your projects"
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionAbout private packagesAbout private packagesSee DetailsTable of contentsNext stepsResourcesTo use private packages, you must
be using npm version 2.7.0 or greater. To upgrade, on the command line, run npm install npm@latest -g
have a paid user or organization account

With npm private packages, you can use the npm registry to host code that is only visible to you and chosen collaborators, allowing you to manage and use private code alongside public code in your projects.
Private packages always have a scope, and scoped packages are private by default.

User-scoped private packages can only be accessed by you and collaborators to whom you have granted read or read/write access. For more information, see "Adding collaborators to private packages owned by a user account".
Organization-scoped private packages can only be accessed by teams that have been granted read or read/write access. For more information, see "Managing team access to organization packages".

Next steps

"Creating and publishing private packages"
"Using npm packages in your projects"

Resources
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionnpm package scope, access level, and visibilitynpm package scope, access level, and visibilitySee DetailsTable of contentsnpm Package Access MatrixVisibility of npm packages depends on the scope (namespace) in which the package is contained, and the access level (private or public) set for the package.
Note: To create organization-scoped packages, you must first create an organization. For more information, see "Creating an organization".
npm Package Access Matrix
ScopeAccess levelCan view and downloadCan write (publish)OrgPrivateMembers of a team in the organization with read access to the packageMembers of a team in the organization with read and write access to the packageOrgPublicEveryoneMembers of a team in the organization with read and write access to the packageUserPrivateThe package owner and users who have been granted read access to the packageThe package owner and users who have been granted read and write access to the packageUserPublicEveryoneThe package owner and users who have been granted read and write access to the packageUnscopedPublicEveryoneThe package owner and users who have been granted read and write access to the package
Note: Only user accounts can create and manage unscoped packages. Organizations can only manage scoped packages.Edit this page on GitHub4 contributorsandrewnessinjimlukekarrysethomsonMylesBorinsLast edited by andrewnessinjim on June 25, 2024\n\n\n\nPackages and modulesContributingCreating a package.json fileCreating a package.json fileSee DetailsTable of contentspackage.json fieldsRequired name and version fieldsAuthor fieldExampleCreating a new package.json fileRunning a CLI questionnaireCustomizing the package.json questionnaireCreating a default package.json fileExampleDefault values extracted from the current directorySetting config options for the init commandYou can add a package.json file to your package to make it easy for others to manage and install. Packages published to the registry must contain a package.json file.
A package.json file:

lists the packages your project depends on
specifies versions of a package that your project can use using semantic versioning rules
makes your build reproducible, and therefore easier to share with other developers

Note: To make your package easier to find on the npm website, we recommend including a custom description in your package.json file.
package.json fields
Required name and version fields
A package.json file must contain "name" and "version" fields.
The "name" field contains your package's name and must be lowercase without any spaces. May contain hyphens, dots, and underscores.
The "version" field must be in the form x.x.x and follow the semantic versioning guidelines.
Author field
If you want inclusive package author information, in the "author" field use the following format (email and website are both optional):
Your Name <email@example.com> (https://example.com)
Example
{  "name": "my-awesome-package",  "version": "1.0.0",  "author": "Your Name <email@example.com> (https://example.com)"}
Creating a new package.json file
You can create a package.json file by running a CLI questionnaire or creating a default package.json file.
Running a CLI questionnaire
To create a package.json file with values that you supply, use the npm init command.


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command:
npm init


Answer the questions in the command line questionnaire.


Customizing the package.json questionnaire
If you expect to create many package.json files, you can customize the questions asked and fields created during the init process so all the package.json files contain a standard set of information.


In your home directory, create a file called .npm-init.js.


To add custom questions, using a text editor, add questions with the prompt function:
module.exports = prompt("what's your favorite flavor of ice cream, buddy?", "I LIKE THEM ALL");


To add custom fields, using a text editor, add desired fields to the .npm-init.js file:
module.exports = {  customField: 'Example custom field',  otherCustomField: 'This example field is really cool'}


To learn more about creating advanced npm init customizations, see the init-package-json GitHub repository.
Creating a default package.json file
To create a default package.json using information extracted from the current directory, use the npm init command with the --yes or -y flag. For a list of default values, see "Default values extracted from the current directory".


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command:
npm init --yes


Example
> npm init --yesWrote to /home/monatheoctocat/my_package/package.json:
{  "name": "my_package",  "description": "make your package easier to find on the npm website",  "version": "1.0.0",  "scripts": {    "test": "echo \"Error: no test specified\" && exit 1"  },  "repository": {    "type": "git",    "url": "https://github.com/monatheoctocat/my_package.git"  },  "keywords": [],  "author": "",  "license": "ISC",  "bugs": {    "url": "https://github.com/monatheoctocat/my_package/issues"  },  "homepage": "https://github.com/monatheoctocat/my_package"}
Default values extracted from the current directory

name: the current directory name
version: always 1.0.0
description: info about the package, or an empty string ""
scripts: by default creates an empty test script
keywords: empty
author: empty
license: ISC
bugs: information from the current directory, if present
homepage: information from the current directory, if present

Setting config options for the init command
You can set default config options for the npm init command. For example, to set the default author email, author name, and license, on the command line, run the following commands:
> npm set init-author-email "example-user@example.com"> npm set init-author-name "example_user"> npm set init-license "MIT"Edit this page on GitHub7 contributorswraithgarkenshantalukekarrys20shivangiBlizZard-botlgarronethomsonLast edited by wraithgar on October 15, 2024\n\n\n\nPackages and modulesContributingCreating Node.js modulesCreating Node.js modulesSee DetailsTable of contentsOverviewCreate a package.json fileCreate the file that will be loaded when your module is required by another applicationTest your moduleResourcesNode.js modules are a type of package that can be published to npm.
Overview

Create a package.json file
Create the file that will be loaded when your module is required by another application
Test your module

Create a package.json file

To create a package.json file, on the command line, in the root directory of your Node.js module, run npm init:

For scoped modules, run npm init --scope=@scope-name
For unscoped modules, run npm init


Provide responses for the required fields (name and version), as well as the main field:

name: The name of your module.
version: The initial module version. We recommend following semantic versioning guidelines and starting with 1.0.0.



For more information on package.json files, see "Creating a package.json file".
Create the file that will be loaded when your module is required by another application
Create a file with the same name you provided in the main field. In that file, add a function as a property of the exports object. This will make the function available to other code:
exports.printMsg = function() {  console.log("This is a message from the demo package");}
Test your module


Publish your package to npm:

For private packages and unscoped packages, use npm publish.
For scoped public packages, use npm publish --access public



On the command line, create a new test directory outside of your project directory.
mkdir test-directory


Switch to the new directory:
cd /path/to/test-directory


In the test directory, install your module:
npm install <your-module-name>


In the test directory, create a test.js file which requires your module and calls your module as a method.


On the command line, run node test.js. The message sent to the console.log should appear.


Resources
Edit this page on GitHub3 contributorsandrewnessinjimlukekarrysethomsonLast edited by andrewnessinjim on June 24, 2024\n\n\n\nPackages and modulesContributingAbout package README filesAbout package README filesSee DetailsTable of contentsCreating and adding a README.md file to a packageUpdating an existing package README.md fileWe highly recommend including a README.md file in your package directory as it helps developers find your package on npm and have a good experience using your code in their projects. In most cases README.md files include directions for installing, configuring, and using the code in your package; as well as any other information a user may find helpful. Just like in any GitHub repository, the README.md file will be rendered on the package's page.
An npm package README.md file must be in the root-level directory of the package.
Creating and adding a README.md file to a package

In a text editor, in your package root directory, create a file called README.md.
In the README.md file, add useful information about your package.
Save the README.md file.

Note: The file extension .md indicates a Markdown file. For more information about Markdown, see the GitHub Guide "Mastering Markdown".
Updating an existing package README.md file
The README.md file will only be updated on the package page when you publish a new version of your package. To update your README.md file:


In a text editor, update the contents of the README.md file.


Save the README.md file.


On the command line, in the package root directory, run the following commands:
npm version patchnpm publish

Edit this page on GitHub3 contributorskenshantalukekarrysethomsonLast edited by kenshanta on October 9, 2024\n\n\n\nPackages and modulesContributingCreating and publishing unscoped public packagesCreating and publishing unscoped public packagesSee DetailsTable of contentsCreating an unscoped public packageReviewing package contents for sensitive or unnecessary informationTesting your packagePublishing unscoped public packagesAs an npm user, you can create unscoped packages to use in your own projects and publish them to the npm public registry for others to use in theirs. Unscoped packages are always public and are referred to by the package name only:
package-name
For more information on package scope, access, and visibility, see "Package scope, access level, and visibility".
Note: Before you can publish public unscoped npm packages, you must sign up for an npm user account.
Creating an unscoped public package


On the command line, create a directory for your package:
mkdir my-test-package


Navigate to the root directory of your package:
cd my-test-package


If you are using git to manage your package code, in the package root directory, run the following commands, replacing git-remote-url with the git remote URL for your package:
git initgit remote add origin git://git-remote-url


In the package root directory, run the npm init command.


Respond to the prompts to generate a package.json file. For help naming your package, see "Package name guidelines".


Create a README file that explains what your package code is and how to use it.


In your preferred text editor, write the code for your package.


Reviewing package contents for sensitive or unnecessary information
Publishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. We strongly recommend removing sensitive information, such as private keys, passwords, personally identifiable information (PII), and credit card data before publishing your package to the registry.
For less sensitive information, such as testing data, use a .npmignore or .gitignore file to prevent publishing to the registry. For more information, see this article.
Testing your package
To reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run npm install with the full path to your package directory:
npm install path/to/my-package
Publishing unscoped public packages


On the command line, navigate to the root directory of your package.
cd /path/to/package


To publish your public package to the npm registry, run:
npm publish
Note: If you use GitHub Actions to publish your packages, you can generate provenance information for each package you publish. For more information, see "Generating provenance statements."


To see your public package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Public packages will say public below the package name on the npm website.


For more information on the publish command, see the CLI documentation.Edit this page on GitHub4 contributorslukekarrysSiaraMistnick-loginovethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingCreating and publishing scoped public packagesCreating and publishing scoped public packagesSee DetailsTable of contentsCreating a scoped public packageReviewing package contents for sensitive or unnecessary informationTesting your packagePublishing scoped public packagesTo share your code publicly in a user or organization namespace, you can publish public user-scoped or organization-scoped packages to the npm registry.
For more information on scopes, see "About scopes".
Note: Before you can publish user-scoped npm packages, you must sign up for an npm user account.Additionally, to publish organization-scoped packages, you must create an npm user account, then create an npm organization.
Creating a scoped public package


If you are using npmrc to manage accounts on multiple registries, on the command line, switch to the appropriate profile:
npmrc <profile-name>


On the command line, create a directory for your package:
mkdir my-test-package


Navigate to the root directory of your package:
cd my-test-package


If you are using git to manage your package code, in the package root directory, run the following commands, replacing git-remote-url with the git remote URL for your package:
git initgit remote add origin git://git-remote-url


In the package root directory, run the npm init command and pass the scope to the scope flag:


For an organization-scoped package, replace my-org with the name of your organization:
npm init --scope=@my-org


For a user-scoped package, replace my-username with your username:
npm init --scope=@my-username




Respond to the prompts to generate a package.json file. For help naming your package, see "Package name guidelines".


Create a README file that explains what your package code is and how to use it.


In your preferred text editor, write the code for your package.


Reviewing package contents for sensitive or unnecessary information
Publishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. We strongly recommend removing sensitive information, such as private keys, passwords, personally identifiable information (PII), and credit card data before publishing your package to the registry.
For less sensitive information, such as testing data, use a .npmignore or .gitignore file to prevent publishing to the registry. For more information, see this article.
Testing your package
To reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run npm install with the full path to your package directory:
npm install my-package
Publishing scoped public packages
By default, scoped packages are published with private visibility. To publish a scoped package with public visibility, use npm publish --access public.


On the command line, navigate to the root directory of your package.
cd /path/to/package


To publish your scoped public package to the npm registry, run:
npm publish --access public
Note: If you use GitHub Actions to publish your packages, you can generate provenance information for each package you publish. For more information, see "Generating provenance statements."


To see your public package page, visit https://npmjs.com/package/\*package-name\*, replacing *package-name* with the name of your package. Public packages will say public below the package name on the npm website.



For more information on the publish command, see the CLI documentation.Edit this page on GitHub5 contributorslukekarrysmilofultzSiaraMistadambrangenbergethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingCreating and publishing private packagesCreating and publishing private packagesSee DetailsTable of contentsCreating a private packageReviewing package contents for sensitive or unnecessary informationTesting your packagePublishing private packagesTo share your code with a limited set of users or teams, you can publish private user-scoped or organization-scoped packages to the npm registry.
For more information on scopes and private packages, see "About scopes" and "About private packages".
Note: Before you can publish private user-scoped npm packages, you must sign up for a paid npm user account.Additionally, to publish private organization-scoped packages, you must create an npm user account, then  create a paid npm organization.
Creating a private package


If you are using npmrc to manage accounts on multiple registries, on the command line, switch to the appropriate profile:
npmrc <profile-name>


On the command line, create a directory for your package:
mkdir my-test-package


Navigate to the root directory of your package:
cd my-test-package


If you are using git to manage your package code, in the package root directory, run the following commands, replacing git-remote-url with the git remote URL for your package:
git initgit remote add origin git://git-remote-url


In the package root directory, run the npm init command and pass the scope to the scope flag:


For an organization-scoped package, replace my-org with the name of your organization:
npm init --scope=@my-org


For a user-scoped package, replace my-username with your username:
npm init --scope=@my-username




Respond to the prompts to generate a package.json file. For help naming your package, see "Package name guidelines".


Create a README file that explains what your package code is and how to use it.


In your preferred text editor, write the code for your package.


Reviewing package contents for sensitive or unnecessary information
Publishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. We strongly recommend removing sensitive information, such as private keys, passwords, personally identifiable information (PII), and credit card data before publishing your package to the registry. Even if your package is private, sensitive information can be exposed if the package is made public or downloaded to a computer that can be accessed by more users than intended.
For less sensitive information, such as testing data, use a .npmignore or .gitignore file to prevent publishing to the registry. For more information, see this article.
Testing your package
To reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run npm install with the full path to your package directory:
npm install my-package
Publishing private packages
By default, scoped packages are published with private visibility.


On the command line, navigate to the root directory of your package.
cd /path/to/package


To publish your private package to the npm registry, run:
npm publish


To see your private package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Private packages will say private below the package name on the npm website.



For more information on the publish command, see the CLI documentation.Edit this page on GitHub3 contributorslukekarrysericmuttaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingPackage name guidelinesPackage name guidelinesWhen choosing a name for your package, choose a name that

is unique
is descriptive
meets npm policy guidelines. For example, do not give your package an offensive name, and do not use someone else's trademarked name or violate the npm trademark policy.

Additionally, when choosing a name for an unscoped package, also choose a name that

is not already owned by someone else
is not spelled in a similar way to another package name
will not confuse others about authorship
Edit this page on GitHub3 contributorslukekarrysericmuttaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingSpecifying dependencies and devDependencies in a package.json fileSpecifying dependencies and devDependencies in a package.json fileSee DetailsTable of contentsAdding dependencies to a package.json fileAdding dependencies to a package.json file from the command lineManually editing the package.json fileTo specify the packages your project depends on, you must list them as "dependencies" or "devDependencies" in your package's package.json file. When you (or another user) run npm install, npm will download dependencies and devDependencies that are listed in package.json that meet the semantic version requirements listed for each. To see which versions of a package will be installed, use the semver calculator.

"dependencies": Packages required by your application in production.
"devDependencies": Packages that are only needed for local development and testing.

Adding dependencies to a package.json file
You can add dependencies to a package.json file from the command line or by manually editing the package.json file.
Adding dependencies to a package.json file from the command line
To add dependencies and devDependencies to a package.json file from the command line, you can install them in the root directory of your package using the --save-prod flag (also -S) for dependencies (the default behavior of npm install) or the --save-dev flag (also -D) for devDependencies.
To add an entry to the "dependencies" attribute of a package.json file, on the command line, run the following command:
npm install <package-name> [--save-prod]
To add an entry to the "devDependencies" attribute of a package.json file, on the command line, run the following command:
npm install <package-name> --save-dev
Manually editing the package.json file
To add dependencies to a package.json file, in a text editor, add an attribute called "dependencies" that references the name and semantic version of each dependency:
{  "name": "my_package",  "version": "1.0.0",  "dependencies": {    "my_dep": "^1.0.0",    "another_dep": "~2.2.0"  }}
To add devDependencies to a package.json file, in a text editor, add an attribute called "devDependencies" that references the name and semantic version of each devDependency:
"name": "my_package","version": "1.0.0","dependencies": {  "my_dep": "^1.0.0",  "another_dep": "~2.2.0"},"devDependencies" : {  "my_test_framework": "^3.1.0",  "another_dev_dep": "1.0.0 - 1.2.0"}Edit this page on GitHub5 contributorsshallow-beachlukekarrysservel333drylintethomsonLast edited by shallow-beach on August 8, 2024\n\n\n\nPackages and modulesContributingAbout semantic versioningAbout semantic versioningSee DetailsTable of contentsIncrementing semantic versions in published packagesUsing semantic versioning to specify update types your package can acceptExampleResourcesTo keep the JavaScript ecosystem healthy, reliable, and secure, every time you make significant updates to an npm package you own, we recommend publishing a new version of the package with an updated version number in the package.json file that follows the semantic versioning spec. Following the semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.
Note: If you introduce a change that breaks a package dependency, we strongly recommend incrementing the version major number; see below for details.
Incrementing semantic versions in published packages
To help developers who rely on your code, we recommend starting your package version at 1.0.0 and incrementing as follows:
Code statusStageRuleExample versionFirst releaseNew productStart with 1.0.01.0.0Backward compatible bug fixesPatch releaseIncrement the third digit1.0.1Backward compatible new featuresMinor releaseIncrement the middle digit and reset last digit to zero1.1.0Changes that break backward compatibilityMajor releaseIncrement the first digit and reset middle and last digits to zero2.0.0
Using semantic versioning to specify update types your package can accept
You can specify which update types your package can accept from dependencies in your package's package.json file.
For example, to specify acceptable version ranges up to 1.0.4, use the following syntax:

Patch releases: 1.0 or 1.0.x or ~1.0.4
Minor releases: 1 or 1.x or ^1.0.4
Major releases: * or x

For more information on semantic versioning syntax, see the npm semver calculator.
Example
"dependencies": {  "my_dep": "^1.0.0",  "another_dep": "~2.2.0"},
Resources
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingAdding dist-tags to packagesAdding dist-tags to packagesSee DetailsTable of contentsPublishing a package with a dist-tagExampleAdding a dist-tag to a specific version of your packageExampleDistribution tags (dist-tags) are human-readable labels that you can use to organize and label different versions of packages you publish. dist-tags supplement semantic versioning. In addition to being more human-readable than semantic version numbering, tags allow publishers to distribute their packages more effectively.
For more information, see the dist-tag CLI documentation.
Note: Since dist-tags share a namespace with semantic versions, avoid dist-tags that conflict with existing version numbers. We recommend avoiding dist-tags that start with a number or the letter "v".
Publishing a package with a dist-tag
By default, running npm publish will tag your package with the latest dist-tag. To use another dist-tag, use the --tag flag when publishing.


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command, replacing <tag> with the tag you want to use:
npm publish --tag <tag>


Example
To publish a package with the "beta" dist-tag, on the command line, run the following command in the root directory of your package:
npm publish --tag beta
Adding a dist-tag to a specific version of your package


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command, replacing <package_name> with the name of your package, <version> with your package version number, and <tag> with the distribution tag:
npm dist-tag add <package-name>@<version> [<tag>]


Example
To add the "stable" tag to the 1.4.0 version of the "example-package" package, you would run the following command:
npm dist-tag add example-package@1.4.0 stableEdit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingChanging package visibilityChanging package visibilitySee DetailsTable of contentsMaking a public package privateUsing the websiteUsing the command lineMaking a private package publicUsing the websiteUsing the command lineYou can change the visibility of a scoped package from the website or command line.
You must be the owner of the user account or organization that owns the package in order to change package visibility.
For more information about package visibility, see "Package scope, access level, and visibility".
Note: You cannot change the visibility of an unscoped package. Only scoped packages with a paid subscription may be private.
Making a public package private
Note: Making a package private requires a paid user account or organization. To sign up for a paid user or organization, go to https://www.npmjs.com/settings/account-name/billing, replacing account-name with the name of your npm user account or organization.
If you want to restrict access and visibility for a public package you own, you can make the package private. When you make a package private, its access will be updated immediately and it will be removed from the website within a few minutes of the change.
Using the website

On the npm website, go to the package page.
On the package page, click Settings.
Under "Package Access", select "Is Package Private?"
Click Update package settings.

Using the command line
To make a public package private on the command line, run the following command, replacing <package-name> with the name of your package:
npm access restricted <package-name>
For more information, see the npm access documentation.
Making a private package public
Note: When you make a private package public, the package will be visible to and downloadable by all npm users.
Using the website

On the npm website, go to the package page.
On the package page, click Settings.
Under "Package Access", deselect "Is Package Private?"
Click Update package settings.

Using the command line
To make a private package public on the command line, run the following command, replacing <package-name> with the name of your package:
npm access public <package-name>
For more information, see the npm access CLI documentation.Edit this page on GitHub5 contributorslukekarrysZearinnanianlisaodylanatsmithethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingAdding collaborators to private packages owned by a user accountAdding collaborators to private packages owned by a user accountSee DetailsTable of contentsGranting access to a private user package on the webGranting private package access from the command line interfaceGranting access to private organization packagesAs an npm user with a paid user account, you can add another npm user with a paid account as a collaborator on a private package you own.
Note: The user you want to add as a collaborator on your private package must have a paid user account. To sign up for a paid account, they can visit https://www.npmjs.com/settings/username/billing, replacing username with their npm username.
When you add a member to your package, they are sent an email inviting them to the package. The new member has to accept the invitation to gain access to the package.
Granting access to a private user package on the web

On the npm website, go to the package to which you want to add a collaborator: https://www.npmjs.com/package/<your-package-name>.
On the package page, click the "Settings" tab.
Go to the "Invite maintainer" section.
Enter the npm username of the collaborator.
Click Invite.

Granting private package access from the command line interface
To add a collaborator to a package on the command line, run the following command, replacing <user> with the npm username of your collaborator, and <your-package-name> with the name of the private package:
npm owner add <user> <your-package-name>
Granting access to private organization packages
To grant an npm user access to private organization packages, you must have an organization owner add them to your organization, then add them to a team that has access to the private package. For more information, see "Adding members to your organization".Edit this page on GitHub6 contributorsreggiericmuttaMylesBorinsscovettamonishcmethomsonLast edited by reggi on February 13, 2024\n\n\n\nPackages and modulesUpdating and managingUpdating your published package version numberUpdating your published package version numberWhen you make significant changes to a published package, we recommend updating the version number to communicate the extent of the changes to others who rely on your code.
Note: If you have linked a git repository to a package, updating the package version number will also add a tag with the updated release number to the linked git repository.


To change the version number in package.json, on the command line, in the package root directory, run the following command, replacing <update_type> with one of the semantic versioning release types (patch, major, or minor):
npm version <update_type>


Run npm publish.


Go to your package page (https://npmjs.com/package/<package>) to check that the package version has been updated.


For more information on npm version, see the CLI documentation.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingDeprecating and undeprecating packages or package versionsDeprecating and undeprecating packages or package versionsSee DetailsTable of contentsDeprecating an entire packageUsing the websiteUsing the command lineDeprecating a single version of a packageUsing the command lineUndeprecating a package or versionTransferring a deprecated package to npmIf you no longer wish to maintain a package, or if you would like to encourage users to update to a new or different version, you can deprecate it. Deprecating a package or version will print a message to the terminal when a user installs it.
A deprecation warning or message can say anything. You may wish to include a message encouraging users to update to a specific version, or an alternate, supported package.
Note: We strongly recommend deprecating packages or package versions instead of unpublishing them, because unpublishing removes a package from the registry entirely, meaning anyone who relied on it will no longer be able to use it, with no warning.
Deprecating an entire package
Deprecating an entire package will remove it from search results on the npm website and a deprecation message will also be displayed on the package page.

Deprecating a package is an alternative to deleting a package if your package does not meet the unpublishing requirements.
Using the website


On the npm "Sign In" page, enter your account details and click Sign In.



Navigate to the package page for the package you want to deprecate, replacing <your-package-name> with the name of your package: https://www.npmjs.com/package/<your-package-name>.


Click Settings.



Under "deprecate package", click Deprecate package.



If you are sure that you want to continue, enter your package name and click Deprecate package.



Using the command line
To deprecate an entire package, run the following command, replacing <package-name> with the name of your package, and "<message>" with your deprecation message:
npm deprecate <package-name> "<message>"
If you have enabled two-factor authentication, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator app).
Deprecating a single version of a package
When you deprecate a version of a package, a red message will be displayed on that version's package page, similar to deprecating an entire package.

Using the command line
To deprecate a package version, run the following command, replacing <package-name> with the name of your package, <version> with your version number, and "<message>" with your deprecation message:
npm deprecate <package-name>@<version> "<message>"
The CLI will also accept version ranges for <version>.
If you have two-factor auth, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator).
Undeprecating a package or version
To undeprecate a package, replace "<message>" with "" (an empty string) in one of the above commands.
For example, to undeprecate an entire package, run the following command, replacing <package-name> with the name of your package, and <version> with your version number:
npm deprecate <package-name> ""
Or to undeprecate only a single package version, run the following command, replacing <package-name> with the name of your package, and <version> with your version number:
npm deprecate <package-name>@<version> ""
If you have two-factor auth, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator).
Transferring a deprecated package to npm
If you are no longer maintaining a package, but other users depend on it, and you'd like to remove it from your user profile, you can transfer it to the @npm user account, which is owned by the npm registry.
Note: Once you transfer a package to the npm account, you will no longer be able to update it.
To transfer a package to the npm user account, run the following two commands in order, replacing <user> with your npm user name, and <package-name> with the package you want to transfer:
npm owner add npm <package-name>npm owner rm <user> <package-name>
If you have two-factor auth, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator).Edit this page on GitHub6 contributorskarlhorkylukekarrysmountainashethomsonSeryozha95talgat-rubyLast edited by karlhorky on June 3, 2024\n\n\n\nPackages and modulesUpdating and managingTransferring a package from a user account to another user accountTransferring a package from a user account to another user accountSee DetailsTable of contentsTransferring a package from a user account to another user account on the websiteTransferring a package from a user account to another user account on the command lineAs a package owner or maintainer, you can transfer ownership of a package you no longer wish to maintain to another trusted npm user using either the npm website or the command line.
For more information on how npm support handles package name disputes between users, you can refer to npm's package name dispute policy.
Note: You cannot transfer a scoped package to another user account or organization, because a package's scope is the user account or organization name. You will need to create a new package in the new scope.
Transferring a package from a user account to another user account on the website
To transfer a package you own or maintain to another user, follow these steps:


Navigate to the package page for the package you want to transfer, replacing <your-package-name> with the name of your package: https://www.npmjs.com/package/<your-package-name>.


On the package Admin tab, under "Maintainers", enter the npm username of the new maintainer.



Click "Invite."


To remove yourself as a maintainer, under the maintainers list, click the "x" next to your username.



Transferring a package from a user account to another user account on the command line
To transfer a package to another npm user using the CLI, run the npm owner add command replacing <their-username> with the other user's npm username. An email invitation is sent to the other user. After the user has accepted the invitation, run the npm owner rm command replacing <your-username> with your npm username:
npm owner add <their-username> <package-name>
# new maintainer accepts invitation
npm owner rm <your-username> <package-name>
If you have two-factor authentication enabled for writes, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator application).
npm owner add <their-username> <package-name> --otp=123456
# new maintainer accepts invitation
npm owner rm <your-username> <package-name> --otp=123456Edit this page on GitHub5 contributorslukekarrysMylesBorinsmonishcmdemiraclethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingUnpublishing packages from the registryUnpublishing packages from the registrySee DetailsTable of contentsUnpublishing a packageUsing the websiteUsing the command lineUnpublishing a single version of a packageUsing the command lineWhen to unpublishWhen to deprecateAs a package owner or collaborator, if your package has no dependents, you can permanently remove it from the npm registry by using the CLI. You can unpublish within 72 hours of the initial publish; beyond 72 hours, you can still unpublish your package if it meets certain criteria.
These criteria are set to avoid damaging the JavaScript package ecosystem. If you cannot unpublish your package, you can deprecate it instead.
Note: Removing all the collaborators or teams from the package will not unpublish it.
Unpublishing a package
If you want to completely remove all versions of a package from the registry, you can unpublish it completely. This will delete it from the registry and it will be unable to be installed.
To unpublish a package, you must meet the requirements of the package unpublishing rules.
Using the website


On the npm "Sign In" page, enter your account details and click Sign In.



Navigate to the package page for the package you want to unpublish, replacing <your-package-name> with the name of your package: https://www.npmjs.com/package/<your-package-name>.


Click Settings.



Under "delete package", click Delete package.

Note: If you cannot delete the package because it does not meet the unpublishing requirements, then the delete package option will not be available. Instead, you will be prompted to deprecate the package.


If you are sure that you want to continue, enter your package name and click Delete package.



Using the command line
To unpublish an entire package, run the following command, replacing <package-name> with the name of your package:
npm unpublish <package-name> -f
If you have two-factor authentication enabled for writes, you will need to add a one-time password to the unpublish command, --otp=123456 (where 123456 is the code from your authenticator app).
If you need help unpublishing your package, please contact npm Support. If you are an Enterprise customer, please contact Enterprise Support.
Note: If you unpublish an entire package, you may not publish any new versions of that package until 24 hours have passed.
Unpublishing a single version of a package
If you want to remove a single version of a package, you can unpublish one version without affecting the others. This will delete only that version from the registry and it will be unable to be installed. This option is only available via the npm CLI.
Using the command line
To unpublish a single version of a package, run the following command, replacing <package-name> with the name of your package, and <version> with your version number:
npm unpublish <package-name>@<version>
When to unpublish
Unpublishing a package permanently removes the package from the registry so it is no longer available for other users to install. Once a package is unpublished, republishing under the same name is blocked for 24 hours. If you've unpublished a package by mistake, we'd recommend publishing again under a different name, or for unpublished versions, bumping the version number and publishing again.
You might want to unpublish a package because you:

Published something accidentally.
Wanted to test npm.
Published content you didn't intend to be public.
Want to rename a package. (The only way to rename a package is to re-publish it under a new name)

Note: package-name@version is unique, and cannot be reused by unpublishing and re-publishing it. We recommend publishing a minor version update instead.
When to deprecate
If you are no longer interested in maintaining a package, but want it to remain available for users to install, or if your package has dependents, we'd recommend deprecating it. To learn about how to deprecate a package, see "Deprecating and undeprecating packages or package versions".Edit this page on GitHub7 contributorslukekarrysstarkblaze01mrienstraethomsonSeryozha95talgat-rubydemiraclLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesSearching for and choosing packages to downloadSearching for and choosing packages to downloadSee DetailsTable of contentsSearching for a packagePackage provenanceYou can use the npm search bar to find packages to use in your projects. The search is performed using content from the package's title, description, readme, and keywords and is powered by opensearch. Search results are displayed based on keyword matching from the package's title, description, readme, and keywords. No subjective ranking criteria are applied, except for a minimal boost to deprioritize spammy or entirely new packages, aiming to maintain a neutral stance towards all other packages.
Please note that newly published packages may take up to two weeks to appear in the search results. Additionally, deprecated packages are excluded from the search results to enhance the user experience.
Searching for a package


In the search bar, type a search term and press Enter. As you type, possible choices will appear.




The results display an approximate count of packages found, accompanied by a dropdown menu for sorting options. Users can refine their search by choosing from sorting methods such as keyword matching (Default), download counts, most dependents, and last published date.



In the package search results list, click the name of the package.


Package provenance
The package homepage also displays provenance information when available. For details on how to verify this information, check viewing package provenance.Edit this page on GitHub7 contributorsmonishcmleobaltermountainashlukekarrysSiaraMistfeelepxyzethomsonLast edited by monishcm on February 13, 2025\n\n\n\nPackages and modulesGetting packagesDownloading and installing packages locallyDownloading and installing packages locallySee DetailsTable of contentsInstalling an unscoped packageInstalling a scoped public packageInstalling a private packageTesting package installationInstalled package versionInstalling a package with dist-tagsResourcesYou can install a package locally if you want to depend on the package from your own module, using something like Node.js require. This is npm install's default behavior.
Installing an unscoped package
Unscoped packages are always public, which means they can be searched for, downloaded, and installed by anyone. To install a public package, on the command line, run
npm install <package_name>
This will create the node_modules directory in your current directory (if one doesn't exist yet) and will download the package to that directory.
Note: If there is no package.json file in the local directory, the latest version of the package is installed.If there is a package.json file, npm installs the latest version that satisfies the semver rule declared in package.json.
Installing a scoped public package
Scoped public packages can be downloaded and installed by anyone, as long as the scope name is referenced during installation:
npm install @scope/package-name
Installing a private package
Private packages can only be downloaded and installed by those who have been granted read access to the package. Since private packages are always scoped, you must reference the scope name during installation:
npm install @scope/private-package-name
Testing package installation
To confirm that npm install worked correctly, in your module directory, check that a node_modules directory exists and that it contains a directory for the package(s) you installed:
ls node_modules
Installed package version
If there is a package.json file in the directory in which npm install is run, npm installs the latest version of the package that satisfies the semantic versioning rule declared in package.json.
If there is no package.json file, the latest version of the package is installed.
Installing a package with dist-tags
Like npm publish, npm install <package_name> will use the latest tag by default.
To override this behavior, use npm install <package_name>@<tag>. For example, to install the example-package at the version tagged with beta, you would run the following command:
npm install example-package@beta
Resources
Edit this page on GitHub4 contributorslukekarrystaewookim02vokennyethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesDownloading and installing packages globallyDownloading and installing packages globallyTip: If you are using npm 5.2 or higher, we recommend using npx to run packages globally.
Installing a package globally allows you to use the code in the package as a set of tools on your local computer.
To download and install packages globally, on the command line, run the following command:
npm install -g <package_name>
If you get an EACCES permissions error, you may need to reinstall npm with a version manager or manually change npm's default directory. For more information, see "Resolving EACCES permissions errors when installing packages globally".Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesResolving EACCES permissions errors when installing packages globallyResolving EACCES permissions errors when installing packages globallySee DetailsTable of contentsReinstall npm with a node version managerManually change npm's default directoryIf you see an EACCES error when you try to install a package globally, you can either:


Reinstall npm with a node version manager (recommended),
or


Manually change npm's default directory


Reinstall npm with a node version manager
This is the best way to avoid permissions issues. To reinstall npm with a node version manager, follow the steps in "Downloading and installing Node.js and npm". You do not need to remove your current version of npm or Node.js before installing a node version manager.
Manually change npm's default directory
Note: This section does not apply to Microsoft Windows.
To minimize the chance of permissions errors, you can configure npm to use a different directory. In this example, you will create and use hidden directory in your home directory.


Back up your computer.


On the command line, in your home directory, create a directory for global installations:
mkdir -p ~/.npm-global/lib


Configure npm to use the new directory path:
npm config set prefix '~/.npm-global'


In your preferred text editor, open or create a ~/.profile file and add this line:
export PATH=~/.npm-global/bin:$PATH


On the command line, update your system variables:
source ~/.profile


To test your new configuration, install a package globally without using sudo:
npm install -g jshint


Instead of steps 3-5, you can use the corresponding ENV variable (e.g. if you don't want to modify ~/.profile):
NPM_CONFIG_PREFIX=~/.npm-global
npx: an alternative to running global commandsIf you are using npm version 5.2 or greater, you may want to consider npx as an alternative way to run global commands, especially if you only need a command occasionally. For more information, see this article about npx.Edit this page on GitHub5 contributorsmdsadiqlukekarrysmrienstralaurensvalkethomsonLast edited by mdsadiq on September 5, 2024\n\n\n\nPackages and modulesGetting packagesUpdating packages downloaded from the registryUpdating packages downloaded from the registrySee DetailsTable of contentsUpdating local packagesUpdating globally-installed packagesDetermining which global packages need updatingUpdating a single global packageUpdating all globally-installed packagesResourcesCLI commandsUpdating local and global packages you downloaded from the registry helps keep your code and tools stable, usable, and secure.
Updating local packages
We recommend regularly updating the local packages your project depends on to improve your code as improvements to its dependencies are made.


Navigate to the root directory of your project and ensure it contains a package.json file:
cd /path/to/project


In your project root directory, run the update command:
npm update


To test the update, run the outdated command. There should not be any output.
npm outdated


Updating globally-installed packages
Note: If you are using npm version 2.6.0 or less, run this script to update all outdated global packages.However, please consider upgrading to the latest version of npm:npm install npm@latest -g
Determining which global packages need updating
To see which global packages need to be updated, on the command line, run:
npm outdated -g --depth=0
Updating a single global package
To update a single global package, on the command line, run:
npm update -g <package_name>
Updating all globally-installed packages
To update all global packages, on the command line, run:
npm update -g
Resources

CLI commands

npm-update
npm-outdated
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesUsing npm packages in your projectsUsing npm packages in your projectsSee DetailsTable of contentsUsing unscoped packages in your projectsNode.js modulepackage.json fileUsing scoped packages in your projectsNode.js modulepackage.json fileResolving "Cannot find module" errorsOnce you have installed a package in node_modules, you can use it in your code.
Using unscoped packages in your projects
Node.js module
If you are creating a Node.js module, you can use a package in your module by passing it as an argument to the require function.
var lodash = require('lodash');
var output = lodash.without([1, 2, 3], 1);console.log(output);
package.json file
In package.json, list the package under dependencies. You can optionally include a semantic version.
{  "dependencies": {    "package_name": "^1.0.0"  }}
Using scoped packages in your projects
To use a scoped package, simply include the scope wherever you use the package name.
Node.js module
var projectName = require("@scope/package-name")
package.json file
In package.json:
{  "dependencies": {    "@scope/package_name": "^1.0.0"  }}
Resolving "Cannot find module" errors
If you have not properly installed a package, you will receive an error when you try to use it in your code. For example, if you reference the lodash package without installing it, you would see the following error:
module.js:340    throw err;          ^Error: Cannot find module 'lodash'

For scoped packages, run npm install <@scope/package_name>
For unscoped packages, run npm install <package_name>
Edit this page on GitHub3 contributorslukekarryshuzejrovicaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesUsing deprecated packagesUsing deprecated packagesIf you install a package, and it prints a deprecation message, we recommend following the instructions, if possible.
That might mean updating to a new version, or updating your package dependencies.

A deprecation message doesn't always mean the package or version is unusable; it may mean the package is unmaintained and will no longer be updated by the publisher.Edit this page on GitHub1 contributorethomsonLast edited by ethomson on September 22, 2020\n\n\n\nPackages and modulesGetting packagesUninstalling packages and dependenciesUninstalling packages and dependenciesSee DetailsTable of contentsUninstalling local packagesRemoving a local package from your node_modules directoryUnscoped packageScoped packageExampleRemoving a local package without removing it from package.jsonExampleConfirming local package uninstallationUninstalling global packagesUnscoped packageScoped packageExampleResourcesUninstalling local packagesUninstalling global packagesIf you no longer need to use a package in your code, we recommend uninstalling it and removing it from your project's dependencies.
Uninstalling local packages
Removing a local package from your node_modules directory
To remove a package from your node_modules directory, on the command line, use the uninstall command. Include the scope if the package is scoped.
This uninstalls a package, completely removing everything npm installed on its behalf.
It also removes the package from the dependencies, devDependencies, optionalDependencies, and peerDependencies objects in your package.json.
Further, if you have an npm-shrinkwrap.json or package-lock.json, npm will update those files as well.
Unscoped package
npm uninstall <package_name>
Scoped package
npm uninstall <@scope/package_name>
Example
npm uninstall lodash
Removing a local package without removing it from package.json
Using the --no-save will tell npm not to remove the package from your package.json, npm-shrinkwrap.json, or package-lock.json files.
Example
npm uninstall --no-save lodash
--save or -S will tell npm to remove the package from your package.json, npm-shrinkwrap.json, and package-lock.json files. This is the default, but you may need to use this if you have for instance save=false in your .npmrc file.
Confirming local package uninstallation
To confirm that npm uninstall worked correctly, check that the node_modules directory no longer contains a directory for the uninstalled package(s).

Unix system (such as OSX): ls node_modules
Windows systems: dir node_modules

Uninstalling global packages
To uninstall an unscoped global package, on the command line, use the uninstall command with the -g flag. Include the scope if the package is scoped.
Unscoped package
npm uninstall -g <package_name>
Scoped package
npm uninstall -g <@scope/package_name>
Example
For example, to uninstall a package called jshint, run:
npm uninstall -g jshint
Resources
Uninstalling local packages

Uninstalling global packages
Edit this page on GitHub3 contributorslukekarrysericrallenethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeAbout audit reportsAbout audit reportsSee DetailsTable of contentsVulnerability table fieldsSeverityDescriptionPackagePatched inDependency ofPathMore infoAudit reports contain tables of information about security vulnerabilities in your project's dependencies to help you fix the vulnerability or troubleshoot further.

Vulnerability table fields

Severity
Description
Package
Patched in
Dependency of
Path
More info

Severity
The severity of the vulnerability, determined by the impact and exploitability of the vulnerability in its most common use case.
SeverityRecommended actionCriticalAddress immediatelyHighAddress as quickly as possibleModerateAddress as time allowsLowAddress at your discretion
Description
The description of the vulnerability. For example, "Denial of service".
Package
The name of the package that contains the vulnerability.
Patched in
The semantic version range that describes which versions contain a fix for the vulnerability.
Dependency of
The module that the package with the vulnerability depends on.
Path
The path to the code that contains the vulnerability.
More info
A link to the security report.Edit this page on GitHub3 contributorsFlyingCaiChonglukekarrysethomsonLast edited by FlyingCaiChong on April 17, 2024\n\n\n\nPackages and modulesSecuring your codeAuditing package dependencies for security vulnerabilitiesAuditing package dependencies for security vulnerabilitiesSee DetailsTable of contentsAbout security auditsRunning a security audit with npm auditResolving EAUDITNOPJSON and EAUDITNOLOCK errorsReviewing and acting on the security audit reportSecurity vulnerabilities found with suggested updatesSEMVER warningsSecurity vulnerabilities found requiring manual reviewCheck for mitigating factorsUpdate dependent packages if a fix existsFix the vulnerabilityOpen an issue in the package or dependent package issue trackerNo security vulnerabilities foundTurning off npm audit on package installationInstalling a single packageInstalling all packagesAbout security audits
A security audit is an assessment of package dependencies for security vulnerabilities. Security audits help you protect your package's users by enabling you to find and fix known vulnerabilities in dependencies that could cause data loss, service outages, unauthorized access to sensitive information, or other issues.
Running a security audit with npm audit
Note: The npm audit command is available in npm@6. To upgrade, run npm install npm@latest -g.
The npm audit command submits a description of the dependencies configured in your package to your default registry and asks for a report of known vulnerabilities. npm audit checks direct dependencies, devDependencies, bundledDependencies, and optionalDependencies, but does not check peerDependencies.
npm audit automatically runs when you install a package with npm install. You can also run npm audit manually on your locally installed packages to conduct a security audit of the package and produce a report of dependency vulnerabilities and, if available, suggested patches.

On the command line, navigate to your package directory by typing cd path/to/your-package-name and pressing Enter.
Ensure your package contains package.json and package-lock.json files.
Type npm audit and press Enter.
Review the audit report and run recommended commands or investigate further if needed.

Resolving EAUDITNOPJSON and EAUDITNOLOCK errors
npm audit requires packages to have package.json and package-lock.json files.

If you get an EAUDITNOPJSON error, create a package.json file by following the steps in "Creating a package.json file".
If you get an EAUDITNOLOCK error, make sure your package has a package.json file, then create the package lock file by running npm i --package-lock-only.

Reviewing and acting on the security audit report
Running npm audit will produce a report of security vulnerabilities with the affected package name, vulnerability severity and description, path, and other information, and, if available, commands to apply patches to resolve vulnerabilities. For more information on the fields in the audit report, see "About audit reports"
Security vulnerabilities found with suggested updates
If security vulnerabilities are found and updates are available, you can either:

Run the npm audit fix subcommand to automatically install compatible updates to vulnerable dependencies.
Run the recommended commands individually to install updates to vulnerable dependencies. (Some updates may be semver-breaking changes; for more information, see "SEMVER warnings".)


SEMVER warnings
If the recommended action is a potential breaking change (semantic version major change), it will be followed by a SEMVER WARNING that says "SEMVER WARNING: Recommended action is a potentially breaking change". If the package with the vulnerability has changed its API, you may need to make additional changes to your package's code.
Security vulnerabilities found requiring manual review
If security vulnerabilities are found, but no patches are available, the audit report will provide information about the vulnerability so you can investigate further.

To address the vulnerability, you can

Check for mitigating factors
Update dependent packages if a fix exists
Fix the vulnerability
Open an issue in the package or dependent package issue tracker

Check for mitigating factors
Review the security advisory in the "More info" field for mitigating factors that may allow you to continue using the package with the vulnerability in limited cases. For example, the vulnerability may only exist when the code is used on specific operating systems, or when a specific function is called.
Update dependent packages if a fix exists
If a fix exists but packages that depend on the package with the vulnerability have not been updated to include the fixed version, you may want to open a pull or merge request on the dependent package repository to use the fixed version.

To find the package that must be updated, check the "Path" field for the location of the package with the vulnerability, then check for the package that depends on it. For example, if the path to the vulnerability is @package-name > dependent-package > package-with-vulnerability, you will need to update dependent-package.
On the npm public registry, find the dependent package and navigate to its repository. For more information on finding packages, see "Searching for and choosing packages to download".
In the dependent package repository, open a pull or merge request to update the version of the vulnerable package to a version with a fix.
Once the pull or merge request is merged and the package has been updated in the npm public registry, update your copy of the package with npm update.

Fix the vulnerability
If a fix does not exist, you may want to suggest changes that address the vulnerability to the package maintainer in a pull or merge request on the package repository.

Check the "Path" field for the location of the vulnerability.
On the npm public registry, find the package with the vulnerability. For more information on finding packages, see "Searching for and choosing packages to download".
In the package repository, open a pull or merge request to make the fix on the package repository.
Once the fix is merged and the package has been updated in the npm public registry, update your copy of the package that depends on the package with the fix.

Open an issue in the package or dependent package issue tracker
If you do not want to fix the vulnerability or update the dependent package yourself, open an issue in the package or dependent package issue tracker.

On the npm public registry, find the package with the vulnerability or the dependent package that needs an update. For more information on finding packages, see "Searching for and choosing packages to download".
In the package or dependent package issue tracker, open an issue and include information from the audit report, including the vulnerability report from the "More info" field.

No security vulnerabilities found
If no security vulnerabilities are found, this means that packages with known vulnerabilities were not found in your package dependency tree. Since the advisory database can be updated at any time, we recommend regularly running npm audit manually, or adding npm audit to your continuous integration process.

Turning off npm audit on package installation
Installing a single package
To turn off npm audit when installing a single package, use the --no-audit flag:
npm install example-package-name --no-audit
For more information, see the npm-install command.
Installing all packages
To turn off npm audit when installing all packages, set the audit setting to false in your user and global npmrc config files:
npm set audit false
For more information, see the npm-config management command and the npm-config audit setting.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeGenerating provenance statementsGenerating provenance statementsSee DetailsTable of contentsAbout npm provenanceAbout SigstoreProvenance limitationsPrerequisitesPublishing packages with provenance via GitHub ActionsExample GitHub Actions workflowUsing third-party package publishing toolsPublishing packages with provenance via GitLab CI/CDExample GitLab CI jobVerifying provenance attestationsYou can generate provenance statements for the packages you publish. This allows you to publicly establish where a package was built and who published a package, which can increase supply-chain security for your packages.
About npm provenance
npm provenance includes two types of attestations:

Provenance attestation
Publish attestation

The provenance attestation is established by publicly providing a link to a package's source code and build instructions from the build environment. This allows developers to verify where and how your package was built before they download it.
Publish attestations are generated by the registry when a package is published by an authorized user. When an npm package is published with provenance, it is signed by Sigstore public good servers and logged in a public transparency ledger, where users can view this information.
About Sigstore
Sigstore is a collection of tools and services aimed at making it easy to use short-lived, ephemeral certificates to sign software. Its three main components are a CLI tool, a certificate authority, and a time-stamping transparency log.
The certificate authority federates with any OIDC provider that includes verifiable build information. It acts as an intermediary between build systems and package registries by verifying the integrity of the OIDC token, issues a signing certificate that contains that build information, and then logging the signing certificate to an immutable ledger.
The transparency log service provides a public, verifiable, tamper-evident ledger of signed attestations. This ensures transparency of the public service, as well as providing a way to detect attempts to tamper with a package if a package registry were to be compromised.
Provenance limitations

To publish a package with provenance, you must build your package with a supported cloud CI/CD provider using a cloud-hosted runner. Today this includes GitHub Actions and GitLab CI/CD.
When a package in the npm registry has established provenance, it does not guarantee the package has no malicious code. Instead, npm provenance provides a verifiable link to the package's source code and build instructions, which developers can then audit and determine whether to trust it or not. For more information, see "Searching for and choosing packages to download."

Prerequisites
Before you can publish your packages with provenance, you must:


Review the Linux Foundation Immutable Record notice, which applies to the public transparency log.


Install the latest version of the npm CLI (ensure you are on 9.5.0+ as older versions don't support npm provenance). For more information, see "Try the latest stable version of npm."


Ensure your package.json is configured with a public repository that matches (case-sensitive) where you are publishing with provenance from.


Set up automation with a supported CI/CD provider to publish your packages to the npm registry. The following providers are supported:

GitHub Actions. For more information, see "Publishing packages with provenance via GitHub Actions."
GitLab CI/CD. For more information, see "Publishing packages with provenance via GitLab CI/CD."



Publishing packages with provenance via GitHub Actions
In order to establish provenance, you must use a supported cloud CI/CD provider and a cloud-hosted runner to publish your packages. GitHub Actions is a supported CI/CD platform that allows you to automate software development tasks. For more information, see GitHub Actions in the GitHub documentation.
To update your GitHub Actions workflow to publish your packages with provenance, you must:


Give permission to mint an ID-token:
permissions:  id-token: write


Run on a GitHub-hosted runner:
runs-on: ubuntu-latest


Add the --provenance flag to your publish command:
npm publish --provenance


If you are publishing a package for the first time you will also need to explicitly set access to public:
npm publish --provenance --access public


Example GitHub Actions workflow
This example workflow publishes a package to the npm registry with provenance.
name: Publish Package to npmjson:  release:    types: [published]jobs:  build:    runs-on: ubuntu-latest    permissions:      contents: read      id-token: write    steps:      - uses: actions/checkout@v4      - uses: actions/setup-node@v4        with:          node-version: '20.x'          registry-url: 'https://registry.npmjs.org'      - run: npm ci      - run: npm publish --provenance --access public        env:          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
Using third-party package publishing tools
If you publish your packages with tools that do not directly invoke the npm publish command, you can do one of the following in your GitHub Actions workflow to publish your packages with provenance.


Configure environment variables: In your GitHub Actions workflow, you can use an environment variable called NPM_CONFIG_PROVENANCE, and set it to true.


Configure your package.json file: You can add a publishConfig block to your package.json file:
"publishConfig": {  "provenance": true},


Add an .npmrc file: You can add an .npmrc file to your project with the following entry:
provenance=true


Note: To publish packages with provenance using Yarn, v4.9.0 or greater is required.
Publishing packages with provenance via GitLab CI/CD
In order to establish provenance, you must use a supported cloud CI/CD provider and a cloud-hosted runner to publish your packages. GitLab CI/CD is a supported CI/CD platform that allows you to automate software development tasks. For more information, see Generating provenance in GitLab CI/CD in the GitLab documentation.
Example GitLab CI job
This example job publishes a package to the npm registry with provenance when a git tag is pushed. Don't forget to define the NPM_TOKEN variable in your GitLab project settings.
publish:  image: 'node:20'  rules:    - if: $CI_COMMIT_TAG  id_tokens:    SIGSTORE_ID_TOKEN:      aud: sigstore  script:    - npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"    - npm publish --provenance --access public
Verifying provenance attestations
You can verify the provenance attestations of downloaded packages with the following audit command:
npm audit signatures
Example response showing the count of verified registry signatures and verified attestations for all of the packages in a project:
audited 1267 packages in 6s
1267 packages have verified registry signatures
74 packages have verified attestations
Because provenance attestations are such a new feature, security features may be added to (or changed in) the attestation format over time. To ensure that you're always able to verify attestation signatures check that you're running the latest version of the npm CLI. Please note this often means updating npm beyond the version that ships with Node.js.Edit this page on GitHub14 contributorsSerenModz21ts-webkbdharunSantaClaasSiaraMistnhedgerbdehamerlukekarrysmeyfatraviremcohaszingfeelepxyzJamesHenryericcornelissenLast edited by SerenModz21 on April 9, 2025\n\n\n\nPackages and modulesSecuring your codeAbout ECDSA registry signaturesAbout ECDSA registry signaturesSee DetailsTable of contentsMigrating from PGP to ECDSA signaturesSupporting signatures on third-party registriesPackages published to the public npm registry are signed to make it possible to detect if the package content has been tampered with.
Signing and verifying published packages protects against an attacker controlling a registry mirror or proxy where they attempt to intercept and tamper with the package tarball content.
Migrating from PGP to ECDSA signatures
Note: PGP-based registry signatures were deprecated on April 25th 2023 and replaced by ECDSA registry signatures.
The public npm registry is migrating away from the existing PGP signatures to ECDSA signatures that are more compact and can be verified without extra dependencies in the npm CLI.
Signature verification was previously a multi-step process involving the Keybase CLI, as well as manually retrieving and parsing the signature from the package metadata.
Read more about migrating and verifying signatures using the npm CLI.
Supporting signatures on third-party registries
The npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:
1. Signatures are provided in the package's packument in each published version within the dist object:
"dist":{  ..omitted..,  "signatures": [{    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",    "sig": "a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809..."  }],
See this example of a signed package from the public npm registry.
To generate the signature, sign the package name, version and tarball sha integrity: ${package.name}@${package.version}:${package.dist.integrity}.
The current best practice is to use a Key Management System that does the signing operation on a Hardware Security Module (HSM) in order to not directly handle the private key part, which reduces the attack surface.
The keyid must match one of the public signing keys below.
2. Public signing keys are provided at registry-host.tld/-/npm/v1/keys in the following format:
{  "keys": [{    "expires": null,    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",    "keytype": "ecdsa-sha2-nistp256",    "scheme": "ecdsa-sha2-nistp256",    "key": "{{B64_PUBLIC_KEY}}"  }]}
Keys response:

expires: null or a simplified extended ISO 8601 format: YYYY-MM-DDTHH:mm:ss.sssZ
keyid: sha256 fingerprint of the public key
keytype: only ecdsa-sha2-nistp256 is currently supported by the npm CLI
scheme: only ecdsa-sha2-nistp256 is currently supported by the npm CLI
key: base64 encoded public key

See this example key's response from the public npm registry.Edit this page on GitHub3 contributorsvelutlukekarrysfeelepxyzLast edited by velut on April 9, 2024\n\n\n\nPackages and modulesSecuring your codeVerifying ECDSA registry signaturesVerifying ECDSA registry signaturesSee DetailsTable of contentsPrerequisitesVerifying registry signaturesTroubleshootingSome packages are missing registry signaturesTo ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI.
Prerequisites

Install npm CLI version v8.15.0 or later
Install dependencies using npm install or npm ci

Verifying registry signatures
Registry signatures can be verified using the following audit command:
npm audit signatures
Example response if all installed versions have valid registry signatures:
audited 1640 packages in 2s
1640 have verified registry signatures
Troubleshooting
Some packages are missing registry signatures
The CLI will error if packages don't have signatures and if the package registry supports signatures. This could mean an attacker might be trying to circumvent signature verification. You can check if the registry supports signatures by requesting the public signing keys from registry-host.tld/-/npm/v1/keys.
Example response if some versions have missing registry signatures:
audited 1640 packages in 2s
1405 packages have verified registry signatures
235 packages have missing registry signatures but the registry is providing signing keys:
missing-dep@1.0.0 (https://registry.npmjs.org/)...Edit this page on GitHub2 contributorslukekarrysfeelepxyzLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeRequiring 2FA for package publishing and settings modificationRequiring 2FA for package publishing and settings modificationSee DetailsTable of contentsConfiguring two-factor authenticationTo protect your packages, as a package publisher, you can require everyone who has write access to a package to have two-factor authentication (2FA) enabled. This will require that users provide 2FA credentials in addition to their login token when they publish the package. For more information, see "Configuring two-factor authentication".
You may also choose to allow publishing with either two-factor authentication or with automation tokens. This lets you configure automation tokens in a CI/CD workflow, but requires two-factor authentication from interactive publishes.
Configuring two-factor authentication


On the npm "Sign In" page, enter your account details and click Sign In.



Navigate to the package on which you want to require a second factor to publish or modify settings.


Click Settings.



Under "Publishing access", select the requirements to publish a package.


Dont require two-factor authentication
With this option, a maintainer can publish a package or change the package settings whether they have two-factor authentication enabled or not. This is the least secure setting.


Require two-factor authentication or automation tokens or granular access token
With this option, maintainers must have two-factor authentication enabled for their account. If they publish a package interactively, using the npm publish command, they will be required to enter 2FA credentials when they perform the publish. However, maintainers may also create an automation token or a granular access token and use that to publish. A second factor is not required when using a token, making it useful for continuous integration and continuous deployment workflows.


Require two-factor authentication and disallow tokens
With this option, a maintainer must have two-factor authentication enabled for their account, and they must publish interactively. Maintainers will be required to enter 2FA credentials when they perform the publish. Automation tokens and granular access tokens cannot be used to publish packages.





Click Update Package Settings.

Edit this page on GitHub5 contributorslukekarrysericmuttamonishcmb4mbooethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeReporting malware in an npm packageReporting malware in an npm packageSee DetailsTable of contentsHow npm Security handles malwareReporting malwareIf you find malware in an npm package (either yours or someone else's), you can report it to the npm Security team to help keep the Javascript ecosystem safe.
Note: Vulnerabilities in npm packages should be reported directly to the package maintainers. We strongly advise doing this privately. You can find contact information about package maintainers with npm owner ls <package-name>. If the source code is hosted on GitHub please refer to the repository's Security Policy.
How npm Security handles malware
Malware is a major concern for npm Security and we have removed hundreds of malicious packages from the registry. For every malware report we receive, npm Security takes the following actions:

Confirm validity of the report.
Remove the package from the registry.
Publish a security placeholder for the package.
Publish a security advisory alerting the community.

As part of our process we determine whether the user account who uploaded the package should be banned. We also cooperate with 3rd parties when applicable.
Reporting malware

Gather information about the malware.
On the package page, click Report malware.
On the malware report page, provide information about yourself and the malware:

Name: Your name.
Email address: An email address the npm Security team can use to contact you.
Package name: The name of the package that contains the malware.
Package version: The version of the package that contains the malware. Include all affected versions.
Description of the malware: A brief description of the malware and its effects. Include references, commits, and/or code examples that would help our researchers confirm the report.


Click Send Report.
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nIntegrationsIntegrating with external servicesAbout access tokensAbout access tokensSee DetailsTable of contentsAbout legacy tokensAbout granular access tokensNote: You must be using npm version 5.5.1 or greater to use access tokens.
An access token is an alternative to using your username and password for authenticating to npm when using the API or the npm command-line interface (CLI). An access token is a hexadecimal string that you can use to authenticate, and which gives you the right to install and/or publish your modules.
There are two types of access tokens available:

Legacy tokens
Granular access tokens

You can create access tokens to give other tools (such as continuous integration testing environments) access to your npm packages. For example, GitHub Actions provides the ability to store secrets, such as access tokens, that you can then use to authenticate. When your workflow runs, it will be able to complete npm tasks as you, including installing private packages you can access.
You can work with tokens from the web or the CLI, whichever is easiest. What you do in each environment will be reflected in the other environment.
npm token commands let you:

View tokens for easier tracking and management
Create new legacy tokens
Limit access according to IP address ranges (CIDR)
Delete/revoke tokens

For more information on creating and viewing access tokens on the web and CLI, see "Creating and viewing access tokens".
About legacy tokens
Legacy tokens are created with the same permissions as the user who created them. The npm CLI automatically generates and uses a publish token when you run npm login.
There are three different types of legacy tokens:

Read-only: You can use these tokens to download packages from the registry. These tokens are best for automation and workflows where you are installing packages. For greater security, we recommend using granular access tokens instead.
Automation: You can use these tokens to download packages and install new ones. These tokens are best for automation workflows where you are publishing new packages. Automation tokens do not 2FA for executing operations on npm and are suitable for CI/CD workflows. For greater security, we recommend using granular access tokens instead.
Publish: You can use these tokens to download packages, install packages, and update user and package settings. We recommend using them for interactive workflows such as a CLI. If 2FA is enabled on your account, publish tokens will require 2FA to execute sensitive operations on npm.

Legacy tokens do not have an expiration date. It is important to be aware of your tokens and keep them protected for account security. For more information, see "Securing your token."
About granular access tokens
Granular access tokens allow you to restrict access provided to the token based on what you want to use the token for. With granular access tokens, you can:

Restrict which packages and scopes a token has access to
Grant tokens access to specific organizations
Set a token expiration date
Limit token access based on IP address ranges
Select between read-only or read and write access

You can create up to 1000 granular access tokens on your npm account. You can set how long your token is valid for, at least one day in the future. Each token can access up to 50 organizations, and up to either 50 packages, 50 scopes, or a combination of 50 packages and scopes. Access tokens are tied to users’ permission; hence it cannot have more permission than the user at any point in time. If a user has their access revoked from a package or an org., their granular access token also will have its access revoked from those packages or org.
When you give a token access to an organization, the token can only be used for managing organization settings and teams or users associated with the organization. It does not give the token the right to publish packages managed by the organization.Edit this page on GitHub4 contributorslukekarrysfeelepxyzmonishcmethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\n