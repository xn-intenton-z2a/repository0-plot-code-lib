Documentation
  

            

	Documentation
  
	
		

	
  
    
    
    
        
                
                    DOT Language
                
                Abstract grammar for defining Graphviz nodes, edges, graphs, subgraphs, and clusters.
            
        
                
                    Command Line
                
                DOT rendering programs and utilities.
            
        
                
                    Layout Engines
                
                Various algorithms for projecting abstract graphs into a space for visualization.
            
        
                
                    Output Formats
                
                Various graphic and data formats for end user, web, documents and other applications.
            
        
                
                    Attributes
                
                Instructions to customise the layout of Graphviz nodes, edges, graphs, subgraphs, and clusters.
            
        
                
                    Attribute Types
                
                Catalogue of the schemas/types/grammars expected by attributes.
            
        
                
                    Graph Attributes
                
                Attributes you can set on graphs
            
        
                
                    Node Attributes
                
                Attributes you can set on graph nodes
            
        
                
                    Node Shapes
                
                
            
        
                
                    Cluster Attributes
                
                Attributes you can set on subgraph clusters
            
        
                
                    Edge Attributes
                
                Attributes you can set on graph edges
            
        
                
                    Arrow Shapes
                
                
            
        
                
                    Color Names
                
                
            
        
                
                    Character Entities
                
                
            
        
                
                    Library Usage
                
                Using Graphviz as a library
            
        

  Last modified September 17, 2022: Move last contents of documentation to specific places (54b51ec)\n\nDOT Language
                
                Abstract grammar for defining Graphviz nodes, edges, graphs, subgraphs, and clusters.
            
                
                    Command Line
                
                DOT rendering programs and utilities.
            
                
                    Layout Engines
                
                Various algorithms for projecting abstract graphs into a space for visualization.
            
                
                    Output Formats
                
                Various graphic and data formats for end user, web, documents and other applications.
            
                
                    Attributes
                
                Instructions to customise the layout of Graphviz nodes, edges, graphs, subgraphs, and clusters.
            
                
                    Attribute Types
                
                Catalogue of the schemas/types/grammars expected by attributes.
            
                
                    Graph Attributes
                
                Attributes you can set on graphs
            
                
                    Node Attributes
                
                Attributes you can set on graph nodes
            
                
                    Node Shapes
                
                
            
                
                    Cluster Attributes
                
                Attributes you can set on subgraph clusters
            
                
                    Edge Attributes
                
                Attributes you can set on graph edges
            
                
                    Arrow Shapes
                
                
            
                
                    Color Names
                
                
            
                
                    Character Entities
                
                
            
                
                    Library Usage
                
                Using Graphviz as a library\n\n\n\nGraphviz
  

            

	Graphviz
  
	
		

	
Please join the Graphviz forum to ask
questions and discuss Graphviz.
What is Graphviz?
Graphviz is open source graph visualization software. Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. It has important applications in networking, bioinformatics, software engineering, database and web design, machine learning, and in visual interfaces for other technical domains.

Features
The Graphviz layout programs take descriptions of graphs in a simple text language, and make diagrams in useful formats, such as images and SVG for web pages; PDF or Postscript for inclusion in other documents; or display in an interactive graph browser. Graphviz has many useful features for concrete diagrams, such as options for colors, fonts, tabular node layouts, line styles, hyperlinks, and custom shapes.
Download
The current release of Graphviz can be downloaded here: Download
The code base is stored here on
GitLab.
Documentation
Documentation is available in the released package and from here: Documentation
Discussions
You can post questions and comments in the Graphviz forum.
Bug And Issue Tracking
You can report or view Graphviz bugs and issues by visiting the Graphviz Issues page.

  
    
    
    
        
                
                    About
                
                
            
        
                
                    Theory/Publications
                
                
            
        
                
                    License
                
                
            
        
                
                    External Resources
                
                
            
        
                
                    Credits
                
                
            
        
                
                    Contact
                
                
            
        
                
                    Graphviz Wish List
                
                
            
        

  Last modified August 10, 2021: Make pages for each layout engine (8d2a3c0)\n\nAbout
                
                
            
                
                    Theory/Publications
                
                
            
                
                    License
                
                
            
                
                    External Resources
                
                
            
                
                    Credits
                
                
            
                
                    Contact
                
                
            
                
                    Graphviz Wish List\n\n\n\nDownload
  

            

	Download
  
	
		

	Source Code
Source code packages for the latest stable and
development versions of Graphviz are available, along with instructions for anonymous
access to the sources using Git.
Executable Packages
Packages marked with an asterisk(*) are provided by outside parties.
We list them for convenience, but disclaim responsibility for the contents of these packages.
Linux
Precompiled binaries are available attached to releases on Gitlab,
https://gitlab.com/graphviz/graphviz/-/releases.
You may also find it useful to try one of the following third-party sites.


Debian*, Ubuntu*
sudo apt install graphviz


Fedora project*, Rocky Linux, Redhat Enterprise Linux, or CentOS*
sudo dnf install graphviz


Windows


Stable Windows install packages, built with Microsoft Visual Studio 16 2019:

  
    
    graphviz-12.2.1
      
        
        
          graphviz-12.2.1 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.2.1 (32-bit) EXE installer [sha256]
        
        
          graphviz-12.2.1 (64-bit) EXE installer [sha256]
        
        
          graphviz-12.2.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
      
    
    
  
    
    graphviz-12.2.0
      
        
        
          graphviz-12.2.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-12.2.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.2.0 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.2.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-12.1.2
      
        
        
          graphviz-12.1.2 (64-bit) EXE installer [sha256]
        
        
          graphviz-12.1.2 (32-bit) EXE installer [sha256]
        
        
          graphviz-12.1.2 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.1.2 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
      
    
    
  
    
    graphviz-12.1.1
      
        
        
          graphviz-12.1.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.1.1 (32-bit) EXE installer [sha256]
        
        
          graphviz-12.1.1 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.1.1 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-12.1.0
      
        
        
          graphviz-12.1.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.1.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-12.1.0 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.1.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-12.0.0
      
        
        
          graphviz-12.0.0 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-12.0.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-12.0.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-11.0.0
      
        
        
          graphviz-11.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-11.0.0 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-11.0.0 (32-bit) EXE installer [sha256]
        
        
          graphviz-11.0.0 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-10.0.1
      
        
        
          graphviz-10.0.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-10.0.1 (64-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-10.0.1 (32-bit) EXE installer [sha256]
        
        
          graphviz-10.0.1 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-9.0.0
      
        
        
          graphviz-9.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-9.0.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-9.0.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-8.1.0
      
        
        
          graphviz-8.1.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-8.1.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-8.1.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-8.0.5
      
        
        
          graphviz-8.0.5 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-8.0.5 (64-bit) EXE installer [sha256]
        
        
          graphviz-8.0.5 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-8.0.3
      
        
        
          graphviz-8.0.3 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-8.0.3 (64-bit) EXE installer [sha256]
        
        
          graphviz-8.0.3 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-8.0.2
      
        
        
          graphviz-8.0.2 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-8.0.2 (32-bit) EXE installer [sha256]
        
        
          graphviz-8.0.2 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-8.0.1
      
        
        
          graphviz-8.0.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-8.0.1 (64-bit) EXE installer [sha256]
        
        
          graphviz-8.0.1 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.1.0
      
        
        
          graphviz-7.1.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.1.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-7.1.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.6
      
        
        
          graphviz-7.0.6 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.6 (32-bit) EXE installer [sha256]
        
        
          graphviz-7.0.6 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.5
      
        
        
          graphviz-7.0.5 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.5 (32-bit) EXE installer [sha256]
        
        
          graphviz-7.0.5 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.4
      
        
        
          graphviz-7.0.4 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.4 (32-bit) EXE installer [sha256]
        
        
          graphviz-7.0.4 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.3
      
        
        
          graphviz-7.0.3 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.3 (32-bit) EXE installer [sha256]
        
        
          graphviz-7.0.3 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.2
      
        
        
          graphviz-7.0.2 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.2 (32-bit) EXE installer [sha256]
        
        
          graphviz-7.0.2 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.1
      
        
        
          graphviz-7.0.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.1 (64-bit) EXE installer [sha256]
        
        
          graphviz-7.0.1 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-7.0.0
      
        
        
          graphviz-7.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-7.0.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-7.0.0 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-6.0.2
      
        
        
          graphviz-6.0.2 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-6.0.2 (64-bit) EXE installer [sha256]
        
        
          graphviz-6.0.2 (32-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-6.0.1
      
        
        
          graphviz-6.0.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-6.0.1 (32-bit) EXE installer [sha256]
        
        
          graphviz-6.0.1 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-5.0.1
      
        
        
          graphviz-5.0.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-5.0.1 (32-bit) EXE installer [sha256]
        
        
          graphviz-5.0.1 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-5.0.0
      
        
        
          graphviz-5.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
          graphviz-5.0.0 (32-bit) EXE installer [sha256]
        
        
          graphviz-5.0.0 (64-bit) EXE installer [sha256]
        
        
      
    
    
  
    
    graphviz-4.0.0
      
        
        
          graphviz-4.0.0 (32-bit) EXE installer [sha256]
        
        
          graphviz-4.0.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-4.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
      
    
    
  
    
    graphviz-3.0.0
      
        
        
          graphviz-3.0.0 (32-bit) EXE installer [sha256]
        
        
          graphviz-3.0.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-3.0.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
      
    
    
  
    
    graphviz-2.50.0
      
        
        
          graphviz-2.50.0 (32-bit) EXE installer [sha256]
        
        
          graphviz-2.50.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-2.50.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
        Further graphviz-2.50.0 variants available on GitLab
        
      
    
    
  
    
    graphviz-2.49.3
      
        
        
          graphviz-2.49.3 (32-bit) EXE installer [sha256]
        
        
          graphviz-2.49.3 (64-bit) EXE installer [sha256]
        
        
          graphviz-2.49.3 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
        Further graphviz-2.49.3 variants available on GitLab
        
      
    
    
  
    
    graphviz-2.49.2
      
        
        
          graphviz-2.49.2 (32-bit) EXE installer [sha256]
        
        
          graphviz-2.49.2 (64-bit) EXE installer [sha256]
        
        
          graphviz-2.49.2 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
        Further graphviz-2.49.2 variants available on GitLab
        
      
    
    
  
    
    graphviz-2.49.1
      
        
        
          graphviz-2.49.1 (32-bit) EXE installer [sha256]
        
        
          graphviz-2.49.1 (64-bit) EXE installer [sha256]
        
        
          graphviz-2.49.1 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
        Further graphviz-2.49.1 variants available on GitLab
        
      
    
    
  
    
    graphviz-2.49.0
      
        
        
          graphviz-2.49.0 (32-bit) EXE installer [sha256]
        
        
          graphviz-2.49.0 (64-bit) EXE installer [sha256]
        
        
          graphviz-2.49.0 (32-bit) ZIP archive [sha256] (contains all tools and libraries)
        
        
        Further graphviz-2.49.0 variants available on GitLab
        
      
    
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
  


Prior to 2.46 series



Development Windows install packages

2.46.0 and newer
Prior to 2.46.0



Cygwin Ports* provides a port of Graphviz to Cygwin.


WinGraphviz* Win32/COM object (dot/neato library for Visual Basic and ASP).


Chocolatey packages Graphviz for Windows.
choco install graphviz


Windows Package Manager provides
Graphviz Windows packages.
winget install graphviz


Mostly correct notes for building Graphviz on Windows can be found
here.
Mac


MacPorts* provides both stable and development versions of
Graphviz and the Mac GUI Graphviz.app. These can be obtained via the ports
graphviz,
graphviz-devel,
graphviz-gui
and graphviz-gui-devel.
sudo port install graphviz


Homebrew* has a Graphviz port.
brew install graphviz


We need help with macOS, if you would like to volunteer.
We would appreciate if someone donates a script to
run pkgbuild or productbuild to automatically generate macOS installers.
Packaging for Apple Administrators
could be a good reference. Note graphviz needs postinstall actions, at least dot -c; also fc-cache if Graphviz has freetype/cairopango drivers.
Solaris
For Solaris, please use the graphviz stable releases here. These are
maintained by Laurent Blume / John Ellson. Currently available packages are:

     
       graphviz
       Graph Visualization Tools
     
       graphviz_dev
       Graphviz headers etc. for development
     
     
       graphvizdoc
       Graphviz documentation
     
     graphvizgdGraphviz renderers using gd
     graphvizgraphsGraphviz example graphs
     graphvizguileGraphviz language binding for guile
     graphvizperlGraphviz language binding for perl
     graphvizpythonGraphviz language binding for python
     graphvizrubyGraphviz language binding for ruby
     graphvizsharpGraphviz language binding for C#
     graphviztclGraphviz language binding for tcl

Minimally, graphviz and graphvizgd should be installed.
Other Unix

DragonFly BSD*
FreeBSD*
NetBSD*
OpenBSD*


  
    
    
    
        
                
                    Source Code
                
                
            
        

  Last modified May 17, 2024: update Fedora/Rocky/RHEL/CentOS installation instructions to 'dnf' (b6648f9)\n\nSource Code\n\n\n\nGallery
  

            

 
Also see Yifan's gallery of large
graphs, all generated
with the sfdp layout engine, but colorized by postprocessing the
PostScript files.
Please send copyright-free donations of interesting graphs to: Yifan
Hu



  
    
      A Network Map
      
    
  

  
    
      Basic Git Concepts and Operations
      
    
  

  
    
      Bazel Build System
      
    
  

  
    
      Cluster Gradients
      
    
  

  
    
      Cluster relations in a graph highlighted using gvmap
      
    
  

  
    
      Clusters
      
    
  

  
    
      Color wheel, 33 colors. Neato layout
      
    
  

  
    
      Data Structures
      
    
  

  
    
      Entity-Relation Data Model
      
    
  

  
    
      Family Tree
      
    
  

  
    
      Finite Automaton
      
    
  

  
    
      Go Package Imports
      
    
  

  
    
      Gradient Linear Angles
      
    
  

  
    
      Gradient Radial Angles
      
    
  

  
    
      Gradients Applied to Data Struct Example
      
    
  

  
    
      Graph, Cluster and Node Gradients
      
    
  

  
    
      Grid
      
    
  

  
    
      Hello World
      
    
  

  
    
      Intranet Layout
      
    
  

  
    
      Linear and Radial Gradient Angles
      
    
  

  
    
      Linux Kernel Diagram
      
    
  

  
    
      Math Parse Tree
      
    
  

  
    
      Mind map of Happiness
      
    
  

  
    
      Module Dependencies
      
    
  

  
    
      Network Map by Pandora FMS
      
    
  

  
    
      Neural Network (Keras)
      
    
  

  
    
      Ninja Build System
      
    
  

  
    
      Parsing tree
      
    
  

  
    
      Partially Transparent Colors
      
    
  

  
    
      Philosophers dilemma. Neato layout.
      
    
  

  
    
      Polygons
      
    
  

  
    
      pprof CPU Profile
      
    
  

  
    
      Process
      
    
  

  
    
      Program Profile
      
    
  

  
    
      Racehorse Pedigree
      
    
  

  
    
      Sample Gradient Color Schemes
      
    
  

  
    
      Siblings
      
    
  

  
    
      Switch Network
      
    
  

  
    
      Synchronous Digital Hierarchy
      
    
  

  
    
      Table and Cell Gradients
      
    
  

  
    
      Traffic Lights
      
    
  

  
    
      Twelve colors, neato layout
      
    
  

  
    
      UML Class diagram demo
      
    
  

  
    
      Undirected Graph Clusters
      
    
  

  
    
      Undirected Large Graph Layout Using sfdp
      
    
  

  
    
      UNIX Family 'Tree'
      
    
  

  
    
      World Dynamics\n\n\n\nAbout
  

            

	About
	
	
		

	Graph Visualization
Graph visualization is a way of representing structural
information as diagrams of abstract graphs and networks.
Automatic graph drawing has many important applications in
software engineering, database and web design, networking,
and in visual interfaces for many other domains.
Graphviz is open source graph visualization software.
It has several main graph layout programs.
See the Gallery for some sample layouts.
It also has web and interactive graphical interfaces,
and auxiliary tools, libraries, and language bindings.
The Mac OS X edition of Graphviz, by
Glen Low, won two 2004 Apple Design Awards.
The Graphviz layout programs take descriptions of graphs in
a simple text language, and make diagrams in several useful
formats such as images and SVG for web pages, Postscript for
inclusion in PDF or other documents; or display in an interactive
graph browser.  (Graphviz also supports GXL, an XML dialect.)
Graphviz has many useful features for concrete diagrams, such as options for
colors, fonts, tabular node layouts, line styles, hyperlinks, and
custom shapes.
In practice, graphs are usually generated from an external
data sources, but they can also be created and edited manually,
either as raw text files or within a graphical editor.
(Graphviz was not intended to be a Visio replacement, so it
is probably frustrating to try to use it that way.)
Viewers

any web browser can open SVG or PDF generated by Graphviz
gvedit is a simple viewer and editor in Graphviz written in Qt
Mac OS X Graphviz.app (re-release coming soon)
graphviz web sandbox editors like graphviz visual editor and Graphviz Online

Filters

gvpr is a general-purpose graph stream editor, in the spirit
of awk and sed (or think of Perl if you don't know those).

Example applications

Software documentation: Pretty diagrams automatically generated by
doxygen and dot.
WWW Graph Server: For a WWW application of Graphviz, please see Webdot.
Canviz, an HTML5 canvas Javascript library.


	
  Last modified September 11, 2024: Update all Visual Editor links to HTTPS (498321a)\n\n\n\nDownload
  
    Source Code
  

            

	Source Code
	
	
		

	Source Packages
For most cases where you want or need to build from source, you should
download one of the source packages linked below. They contain all of
required generated files. The typical installation process is:
./configure
make
make install
The configure script has many options for further tailoring the build
process to your machine. Run
./configure --help
to see these.
Graphviz
Stable Releases


  graphviz-12.2.1
    
      
      
        graphviz-12.2.1.tar.gz, sha256
      
      
        graphviz-12.2.1.tar.xz, sha256
      
    
  

  graphviz-12.2.0
    
      
      
        graphviz-12.2.0.tar.gz, sha256
      
      
        graphviz-12.2.0.tar.xz, sha256
      
    
  

  graphviz-12.1.2
    
      
      
        graphviz-12.1.2.tar.gz, sha256
      
      
        graphviz-12.1.2.tar.xz, sha256
      
    
  

  graphviz-12.1.1
    
      
      
        graphviz-12.1.1.tar.gz, sha256
      
      
        graphviz-12.1.1.tar.xz, sha256
      
    
  

  graphviz-12.1.0
    
      
      
        graphviz-12.1.0.tar.gz, sha256
      
      
        graphviz-12.1.0.tar.xz, sha256
      
    
  

  graphviz-12.0.0
    
      
      
        graphviz-12.0.0.tar.gz, sha256
      
      
        graphviz-12.0.0.tar.xz, sha256
      
    
  

  graphviz-11.0.0
    
      
      
        graphviz-11.0.0.tar.gz, sha256
      
      
        graphviz-11.0.0.tar.xz, sha256
      
    
  

  graphviz-10.0.1
    
      
      
        graphviz-10.0.1.tar.gz, sha256
      
      
        graphviz-10.0.1.tar.xz, sha256
      
    
  

  graphviz-9.0.0
    
      
      
        graphviz-9.0.0.tar.gz, sha256
      
      
        graphviz-9.0.0.tar.xz, sha256
      
    
  

  graphviz-8.1.0
    
      
      
        graphviz-8.1.0.tar.gz, sha256
      
      
        graphviz-8.1.0.tar.xz, sha256
      
    
  

  graphviz-8.0.5
    
      
      
        graphviz-8.0.5.tar.gz, sha256
      
      
        graphviz-8.0.5.tar.xz, sha256
      
    
  

  graphviz-8.0.3
    
      
      
        graphviz-8.0.3.tar.gz, sha256
      
      
        graphviz-8.0.3.tar.xz, sha256
      
    
  

  graphviz-8.0.2
    
      
      
        graphviz-8.0.2.tar.gz, sha256
      
      
        graphviz-8.0.2.tar.xz, sha256
      
    
  

  graphviz-8.0.1
    
      
      
        graphviz-8.0.1.tar.gz, sha256
      
      
        graphviz-8.0.1.tar.xz, sha256
      
    
  

  graphviz-7.1.0
    
      
      
        graphviz-7.1.0.tar.gz, sha256
      
      
        graphviz-7.1.0.tar.xz, sha256
      
    
  

  graphviz-7.0.6
    
      
      
        graphviz-7.0.6.tar.gz, sha256
      
      
        graphviz-7.0.6.tar.xz, sha256
      
    
  

  graphviz-7.0.5
    
      
      
        graphviz-7.0.5.tar.gz, sha256
      
      
        graphviz-7.0.5.tar.xz, sha256
      
    
  

  graphviz-7.0.4
    
      
      
        graphviz-7.0.4.tar.gz, sha256
      
      
        graphviz-7.0.4.tar.xz, sha256
      
    
  

  graphviz-7.0.3
    
      
      
        graphviz-7.0.3.tar.gz, sha256
      
      
        graphviz-7.0.3.tar.xz, sha256
      
    
  

  graphviz-7.0.2
    
      
      
        graphviz-7.0.2.tar.gz, sha256
      
      
        graphviz-7.0.2.tar.xz, sha256
      
    
  

  graphviz-7.0.1
    
      
      
        graphviz-7.0.1.tar.gz, sha256
      
      
        graphviz-7.0.1.tar.xz, sha256
      
    
  

  graphviz-7.0.0
    
      
      
        graphviz-7.0.0.tar.gz, sha256
      
      
        graphviz-7.0.0.tar.xz, sha256
      
    
  

  graphviz-6.0.2
    
      
      
        graphviz-6.0.2.tar.gz, sha256
      
      
        graphviz-6.0.2.tar.xz, sha256
      
    
  

  graphviz-6.0.1
    
      
      
        graphviz-6.0.1.tar.gz, sha256
      
      
        graphviz-6.0.1.tar.xz, sha256
      
    
  

  graphviz-5.0.1
    
      
      
        graphviz-5.0.1.tar.gz, sha256
      
      
        graphviz-5.0.1.tar.xz, sha256
      
    
  

  graphviz-5.0.0
    
      
      
        graphviz-5.0.0.tar.gz, sha256
      
      
        graphviz-5.0.0.tar.xz, sha256
      
    
  

  graphviz-4.0.0
    
      
      
        graphviz-4.0.0.tar.gz, sha256
      
      
        graphviz-4.0.0.tar.xz, sha256
      
    
  

  graphviz-3.0.0
    
      
      
        graphviz-3.0.0.tar.gz, sha256
      
      
        graphviz-3.0.0.tar.xz, sha256
      
    
  

  graphviz-2.50.0
    
      
      
        graphviz-2.50.0.tar.gz, sha256
      
      
        graphviz-2.50.0.tar.xz, sha256
      
    
  

  graphviz-2.49.3
    
      
      
        graphviz-2.49.3.tar.gz, md5, sha256
      
      
        graphviz-2.49.3.tar.xz, md5, sha256
      
    
  

  graphviz-2.49.2
    
      
      
        graphviz-2.49.2.tar.gz, md5, sha256
      
      
        graphviz-2.49.2.tar.xz, md5, sha256
      
    
  

  graphviz-2.49.1
    
      
      
        graphviz-2.49.1.tar.gz, md5, sha256
      
      
        graphviz-2.49.1.tar.xz, md5, sha256
      
    
  

  graphviz-2.49.0
    
      
      
        graphviz-2.49.0.tar.gz, md5, sha256
      
      
        graphviz-2.49.0.tar.xz, md5, sha256
      
    
  

  graphviz-2.48.0
    
      
      
        graphviz-2.48.0.tar.gz, md5, sha256
      
      
        graphviz-2.48.0.tar.xz, md5, sha256
      
    
  

  graphviz-2.47.3
    
      
      
        graphviz-2.47.3.tar.gz, md5, sha256
      
      
        graphviz-2.47.3.tar.xz, md5, sha256
      
    
  

  graphviz-2.47.2
    
      
      
        graphviz-2.47.2.tar.gz, md5, sha256
      
      
        graphviz-2.47.2.tar.xz, md5, sha256
      
    
  

  graphviz-2.47.1
    
      
      
        graphviz-2.47.1.tar.xz, md5, sha256
      
      
        graphviz-2.47.1.tar.gz, md5, sha256
      
    
  

  graphviz-2.47.0
    
      
      
        graphviz-2.47.0.tar.xz, md5, sha256
      
      
        graphviz-2.47.0.tar.gz, md5, sha256
      
    
  

  graphviz-2.46.1
    
      
      
        graphviz-2.46.1.tar.xz, md5
      
      
        graphviz-2.46.1.tar.gz, md5
      
    
  

  graphviz-2.46.0
    
      
      
        graphviz-2.46.0.tar.gz
      
    
  



Development Snapshots

post-2.46.0
pre-2.46.0

Webdot
Stable Releases

webdot-2.30.tar.gz, md5

Development Snapshots

webdot-2.39.20170725.2013.tar.gz, md5

Git Repos
If you wish to build from the tip-of-tree
source repositories for Graphviz and Webdot, these can be found at:

https://gitlab.com/graphviz/graphviz/
https://gitlab.com/graphviz/webdot/

You can either download the zip file or clone the repository. Instructions
for the latter can be found here.
If you are taking this approach, then you must have recent versions of
"libtool", "libltdl-dev", "automake", "autoconf", and "pkg-config"/"pkgconf".
The build process is
basically the same as above with the addition of one more step:
./autogen.sh
./configure
make
make install
Requirements
Dependencies
Consider these versions as the minimum suitable for Graphviz, but please always use the
latest available version of these packages. If there is any problem with building Graphviz
against a latest version, please generate a bug report as we would very much like to
know about it.
HINT: If you are using a system that is covered by Graphviz’ continuous
integration testing by far the easiest way to determine all the build
dependencies is to browse the
ci/ directory of the
Graphviz Git repository.

cairo-1.10.0.tar.gz [optional (required for libpangocairo), recommended]
http://cairographics.org/
expat-2.0.0.tar.gz [optional (required for HTML-like labels), recommended]
http://expat.sourceforge.net/
freetype-2.1.10.tar.gz [optional (required for libpangocairo and for gd), recommended]
http://www.freetype.org/
gd-2.0.34.tar.gz [optional, deprecated but needed for GIF output]
http://www.boutell.com/gd/
fontconfig-2.3.95.tar.gz [optional (required for libpangocairo and for gd), recommended]
http://www.fontconfig.org/wiki/
urw-fonts.tar.gz [optional, required if fontconfig is unable to find any fonts]
ftp://ftp.gimp.org/pub/gimp/fonts
glib-2.36.0.tar.xz [optional (required for libpangocairo), recommended]
https://wiki.gnome.org/Projects/GLib
libpng-1.2.10.tar.gz [optional (required for cairo, optional for gd), recommended]
http://www.libpng.org/pub/png/
pango-1.22.0.tar.gz provides libpangocairo [optional, recommended]
http://www.pango.org/
zlib-1.2.3.tar.gz [optional (required for libpng), recommended]
http://www.zlib.net/
GTS [optional (required for sfdp, prism, smyrna), recommended]
http://gts.sourceforge.net/
GTK+ [optional (required for smyrna)]
http://www.gtk.org/
GtkGLExt [optional (required for smyrna)]
http://projects.gnome.org/gtkglext/
Glade [optional (required for smyrna)]
http://glade.gnome.org/
Glut [optional (required for smyrna)]
http://www.opengl.org/resources/libraries/glut/

Tools

autoconf-2.61.tar.gz [if building from git]
http://ftp.gnu.org/gnu/autoconf/
automake-1.9.6.tar.gz [if building from git]
http://ftp.gnu.org/gnu/automake/
bison-3.0.tar.gz [if building from git]
http://ftp.gnu.org/gnu/bison/
flex-2.5.4a.tar.gz [if building from git]
http://ftp.gnu.org/non-gnu/flex/
gcc-4.8.1.tar.bz2
http://ftp.gnu.org/gnu/gcc/
gcc-g++-4.8.1.tar.bz2
http://ftp.gnu.org/gnu/gcc/
ghostscript-8.54-gpl.tar.gz
http://pages.cs.wisc.edu/~ghost/
libtool-1.5.22.tar.gz [if building from git]
http://ftp.gnu.org/gnu/libtool/
pkg-config-0.20.tar.gz
http://www.freedesktop.org/wiki/Software/pkg-config/
swig-1.3.29.tar.gz
http://www.swig.org/


	
  Last modified May 23, 2024: include 'pkg-config'/'pkgconf' in the build-from-git-clone dependencies (a96ed05)\n\n\n\nDocumentation
  
    DOT Language
  

            

	DOT Language
	Abstract grammar for defining Graphviz nodes, edges, graphs, subgraphs, and clusters.
	
		

	Terminals are shown in bold font and nonterminals in italics.
Literal characters are given in single quotes.
Parentheses ( and ) indicate grouping when needed.
Square brackets [ and ] enclose optional items.
Vertical bars | separate alternatives.


  graph
  :
  [ strict ] (graph | digraph) [ ID ] '{' stmt_list '}'


  stmt_list
  :
  [ stmt [ ';' ] stmt_list ]


  stmt
  :
  node_stmt


  
  |
  edge_stmt


  
  |
  attr_stmt


  
  |
  ID '=' ID


  
  |
  subgraph


  attr_stmt
  :
  (graph | node | edge) attr_list


  attr_list
  :
  '[' [ a_list ] ']' [ attr_list ]


  a_list
  :
  ID '=' ID [ (';' | ',') ] [ a_list ]


  edge_stmt
  :
  (node_id | subgraph) edgeRHS [ attr_list ]


  edgeRHS
  :
  edgeop (node_id | subgraph) [ edgeRHS ]


  node_stmt
  :
  node_id [ attr_list ]


  node_id
  :
  ID [ port ]


  port
  :
  ':' ID [ ':' compass_pt ]


  
  |
  ':' compass_pt


  subgraph
  :
  [ subgraph [ ID ] ] '{' stmt_list '}'


  compass_pt
  :
  n | ne | e | se | s | sw | w | nw | c | _



The keywords node, edge, graph, digraph, subgraph, and strict are case-independent.
Note also that the allowed compass point values are not keywords, so
these strings can be used elsewhere as ordinary identifiers and, conversely,
the parser will actually accept any identifier.
IDs
An ID is one of the following:

Any string of alphabetic ([a-zA-Z\200-\377]) characters, underscores ('_') or
digits([0-9]), not beginning with a digit;
a numeral [-]?(.[0-9]⁺  | [0-9]⁺(.[0-9]*)? );
any double-quoted string ("...") possibly containing escaped
quotes (\")¹;
an HTML string (<...>).

An ID is just a string; the lack of quote characters in the first two
forms is just for simplicity. There is no semantic difference between
abc_2 and "abc_2", or between 2.34 and "2.34". Obviously, to use a keyword as an ID, it must be quoted.
HTML strings
Note that, in HTML strings, angle brackets must occur in matched pairs,
and newlines and other formatting whitespace characters are allowed.
In addition, the content must be legal XML, so that the special XML
escape sequences for ", &, <, and > may be necessary
in order to embed these characters in attribute values or raw text.
As an ID, an HTML string can be any legal XML string. However, if used
as a label attribute, it is interpreted specially and must follow the syntax
for HTML-like labels.
Both quoted strings and HTML strings are scanned as a unit, so
any embedded comments will be treated as part of the strings.
Edge operations (edgeops)
An edgeop is -> in directed graphs and -- in
undirected graphs.
Comments and optional formatting
The language supports C++-style comments: /* */ and //.
In addition, a line beginning with a '#' character is considered a line
output from a C preprocessor (e.g., #  34 to indicate line 34 ) and discarded.
Semicolons and commas aid readability but are not required.
Also, any amount of whitespace may be inserted between terminals.
As another aid for readability, dot allows double-quoted strings to
span multiple physical lines using the standard C convention of a
backslash immediately preceding a newline character². In addition,
double-quoted strings can be concatenated using a '+' operator.
As HTML strings can contain newline characters, which are used solely for
formatting, the language does not allow escaped newlines or
concatenation operators to be used within them.
Subgraphs and Clusters
Subgraphs play three roles in Graphviz. First, a subgraph can be used to
represent graph structure, indicating that certain nodes and edges should
be grouped together. This is the usual role for subgraphs
and typically specifies semantic information about the graph components.
It can also provide a convenient shorthand for edges. An edge statement allows
a subgraph on both the left and right sides of the edge operator.
When this occurs, an edge is created from every node on the left to every node
on the right. For example, the specification
  A -> {B C}
is equivalent to
  A -> B
  A -> C
In the second role, a subgraph can provide a context for setting attributes.
For example, a subgraph could specify that blue
is the default color for all nodes defined in it.
In the context of
graph drawing, a more interesting example is:
subgraph { 
  rank = same; A; B; C; 
} 
This (anonymous) subgraph specifies that the nodes A, B and C
should all be placed on the same rank if drawn using dot.
The third role for subgraphs directly involves how the graph
will be laid out by certain layout engines. If the name of
the subgraph begins with cluster, Graphviz notes the subgraph as
a special cluster subgraph. If supported, the layout engine will
do the layout so that the nodes belonging to the cluster are drawn together,
with the entire drawing of the cluster contained within a bounding rectangle.
Note that, for good and bad, cluster subgraphs are not part of the
DOT language, but solely a syntactic convention adhered to by
certain layout engines.
Lexical and Semantic Notes
A graph must be specified as either a digraph or a graph.
Semantically, this indicates whether or not there is a natural direction from
one of the edge's nodes to the other.
Lexically, a digraph must specify an edge using the edge operator ->
while a undirected graph must use --.
Operationally, the distinction is used to define different default rendering
attributes. For example, edges in a digraph will be drawn, by default, with
an arrowhead pointing to the head node. For ordinary graphs, edges are drawn
without any arrowheads by default.
A graph may also be described as strict.
This forbids the creation of multi-edges, i.e., there can be at most one
edge with a given tail node and head node in the directed case. For undirected
graphs, there can be at most one
edge connected to the same two nodes. Subsequent edge statements using
the same two nodes will identify the edge with the previously defined one
and apply any attributes given in the edge statement.
For example, the graph
strict graph { 
  a -- b
  a -- b
  b -- a [color=blue]
} 
will have a single edge connecting nodes a and b,
whose color is blue.
If a default attribute is
defined using a node, edge, or graph statement,
or by an attribute assignment not attached to a node or edge, any object of the
appropriate type defined afterwards will inherit this attribute value.
This holds until the default attribute is set to a new value, from which
point the new value is used. Objects defined before a default attribute
is set will have an empty string value attached to the attribute once
the default attribute definition is made.
Note, in particular, that a subgraph receives the attribute settings of
its parent graph at the time of its definition. This can be useful; for
example, one can assign a font to the root graph and all subgraphs will
also use the font. For some attributes, however, this property is
undesirable. If one attaches a label to the root graph, it is probably
not the desired effect to have the label used by all subgraphs. Rather
than listing the graph attribute at the top of the graph, and the
resetting the attribute as needed in the subgraphs, one can simply defer
the attribute definition in the graph until the appropriate subgraphs
have been defined.
If an edge belongs to a cluster, its endpoints belong to that cluster.
Thus, where you put an edge can effect a layout, as clusters are sometimes
laid out recursively.
There are certain restrictions on subgraphs and clusters. First, at
present, the names of a graph and it subgraphs share the same namespace.
Thus, each subgraph must have a unique name. Second, although nodes
can belong to any number of subgraphs, it is assumed clusters form
a strict hierarchy when viewed as subsets of nodes and edges.
Character encodings
The DOT language assumes at least the ASCII character set.
Quoted strings, both ordinary and HTML-like, may contain non-ASCII characters.
In most cases, these strings are uninterpreted: they simply serve as
unique identifiers or values passed through untouched. Labels, however,
are meant to be displayed, which requires that the software be able to
compute the size of the text and determine the appropriate glyphs.
For this, it needs to know what character encoding is used.
By default, DOT assumes the UTF-8 character encoding. It also accepts
the Latin1 (ISO-8859-1) character set, assuming the input graph uses
the charset attribute to
specify this. For graphs using other
character sets, there are usually programs, such as iconv, which
will translate from one character set to another.
Another way to avoid non-ASCII characters in labels is to use HTML entities
for special characters. During label evaluation, these entities are
translated into the underlying character. This
table shows the supported entities, with their Unicode value, a typical
glyph, and the HTML entity name. Thus, to include a lower-case Greek beta
into a string, one can use the ASCII sequence &beta;.
In general, one should only use entities that are allowed in the output
character set, and for which there is a glyph in the font.


In quoted strings in DOT, the only escaped character is double-quote
". That is, in quoted strings, the dyad \" is converted to "; all other
characters are left unchanged. In particular, \\ remains \\. Layout
engines may apply additional escape sequences.
Previous to 2.30, the language allowed escaped newlines to be used anywhere outside
of HTML strings. The new lex-based scanner makes this difficult to implement. Given the
perceived lack of usefulness of this generality, we have restricted this feature to
double-quoted strings, where it can actually be helpful.


	
  Last modified September 28, 2024: Update lang.md grammatical correction (888a216)\n\n\n\nDocumentation
  
    Command Line
  

            

	Command Line
  DOT rendering programs and utilities.
	
		
		
			
				
			
				
			
		
		
	
	All Graphviz programs have a similar invocation:
cmd [ flags ] [ input files ]
For example:
$ dot -Tsvg input.dot
If no input files are supplied, the program reads from stdin. For example:
$ echo 'digraph { a -> b }' | dot -Tsvg > output.svg
Generates:

Flags
-Gname[=value]
Set a graph attribute, with default value = true
For example,
$ echo 'digraph { a -> b }' | dot -Tsvg -Gfontcolor=red -Glabel="My favorite letters"
Overrides the default fontcolor and label attributes of the graph, producing a red legend:

-Nname[=value]
Set a default node attribute, with default value = true.
For example,
$ echo 'digraph { a -> b }' | dot -Tsvg -Nfontcolor=red -Nshape=rect
Overrides the default node fontcolor and shape attributes, producing rectangular nodes with red text:

-Ename[=value]
Set a default edge attribute, with default value = true.
For example,
$ echo 'digraph { a -> b }' | dot -Tsvg -Ecolor=red -Earrowhead=diamond
Overrides the default edge color and arrowhead attributes, producing red edges with a diamond arrowhead:

-Klayout
Specifies which default layout engine to use, overriding the default from the command name. For example, running
dot -Kneato is equivalent to running neato.
-Tformat[:renderer[:formatter]]
Set output language to one of the supported formats.
By default, attributed dot is produced.
Depending on how Graphviz was built, there may be multiple renderers for
generating a particular output format, and multiple formatters for
creating the final output. For example, a typical installation
can produce PNG
output using either the Cairo or GD library. The desired rendering engine
can be specified after a colon. If there are multiple formatting engines
available, the desired one can be specified in a similar fashion after
the rendering engine. Thus, -Tpng:cairo specifies PNG
output produced by Cairo (using the Cairo's default formatter), and
-Tpng:cairo:gd specifies PNG
output produced by Cairo formatted using the GD library.
If no renderer is specified, or a renderer but no formatter, the default one
is invoked. The flag -Tformat: produces a list of all
of the renderers available for the specified format, the first one
listed with a prefix matching format being the default.
Using the -v flag, described below, will print which format,
renderer, and formatter are actually used.
-V
Emit version information and exit. For example:
$ dot -V
dot - graphviz version 2.47.1 (20210417.1919)
-llibrary
User-supplied, device-dependent library text. Multiple flags may
be given. These strings are passed to the code generator at the
beginning of output.
For PostScript output, they are treated as file names
whose content will be included in the preamble after the standard preamble.
If library is the empty string "", the standard preamble
is not emitted.
-n[num]
Sets no-op flag in neato.
If set, neato assumes nodes have already been
positioned and all nodes have a pos
attribute giving
the positions. It then performs an optional adjustment to remove node-node
overlap, depending on the value of the
overlap attribute, computes the edge
layouts, depending on the value of the
splines attribute, and
emits the graph in the appropriate format. If num is supplied,
the following actions occur:

num = 1
Equivalent to -n.
num > 1
Use node positions as specified, with no adjustment to
remove node-node overlaps, and use any edge layouts already specified
by the pos attribute. neato
computes an edge layout for any edge that does not have a pos attribute.
As usual, edge layout is guided by the
splines attribute.

-ooutfile
Write output to file outfile. For example,
$ echo 'digraph { a -> b }' | dot -Tsvg -o output.svg
Generates output.svg:

By default, output goes to stdout.
-O
Automatically generate output file names based on the input
file name and the various output formats specified by the -T
flags.
For example,
$ dot -Tsvg -O ~/family.dot ~/debug.dot
Generates ~/family.dot.svg and ~/debug.dot.svg files.
-P
Automatically generate a graph that shows the plugin configuration of
the current executable. e.g.
$ dot -P -Tsvg -o plugins.svg
-q
Suppress warning messages.
-s[scale]
Set input scale to scale. If this value is omitted,
72.0 is used. This number is used to convert the point coordinate
units used in the pos attribute
into inches, which is what is expected by neato and fdp.
Thus, feeding the output of a graph laid out by one program into
neato or fdp almost always requires this flag.
Ignored if the -n flag is used.
-v
Verbose mode
-x
In neato, on input, prune isolated nodes and peninsulas.
This removes uninteresting graph structure and produces a less cluttered
drawing.
-y
By default, the coordinate system used in generic output formats,
such as attributed dot,
extended dot,
plain and
plain-ext,
is the standard cartesian system with the origin in the lower left corner,
and with increasing y coordinates as points move from bottom to top.
If the -y flag is used, the coordinate system is inverted,
so that increasing values of y correspond to movement from top to bottom.
-?
Print usage information, then exit.
If multiple -T flags are given, drawings of the graph
are emitted in each of the specified formats. Multiple -o
flags can be used to specify the output file for each format. If there
are more formats than files, the remaining formats are written to
stdout.
Note that the -G,
-N and
-E flags override any initial attribute declarations
in the input graph,
i.e., those attribute statements appearing before any node, edge or
subgraph definitions.
In addition, these flags cause the related attributes to be permanently
attached to the graph. Thus, if attributed dot is used for
output, the graph will have these attributes.
Environment Variables
GDFONTPATH
List of pathnames giving directories which a program should search for fonts.
Overridden by DOTFONTPATH.
Used only if Graphviz is not built with the fontconfig library
DOTFONTPATH
List of pathnames giving directories which a program should search for fonts.
Overridden by fontpath.
Used only if Graphviz is not built with the fontconfig library
SERVER_NAME
If defined, this indicates that the software is running as a web application,
which restricts access to image files.
GVBINDIR
Indicates which directory contains the Graphviz config file and
plug-in libraries. If it is defined, the value overrides any other
mechanism for finding this directory. If Graphviz is properly installed,
it should not be needed, though it can be useful for relocation on
platforms not running Linux or Windows.

        
    
    
    
        
                
                    acyclic
                
                Make directed graphs acyclic.
            
        
                
                    bcomps
                
                Biconnected components filter for graphs.
            
        
                
                    ccomps
                
                Connected components filter for graphs.
            
        
                
                    cluster
                
                Find clusters in a graph and augment the graph with this information.
            
        
                
                    diffimg
                
                Calculates intersection between two images.
            
        
                
                    dijkstra
                
                Single-source distance filter.
            
        
                
                    dotty
                
                A customizable graph editor.
            
        
                
                    edgepaint
                
                Edge coloring to disambiguate crossing edges.
            
        
                
                    gc
                
                Count graph components.
            
        
                
                    gml2gv
                
                GML-DOT converters.
            
        
                
                    graphml2gv
                
                GRAPHML-DOT converter.
            
        
                
                    gv2gxl
                
                GXL-GV converters.
            
        
                
                    gvcolor
                
                Flow colors through a ranked digraph.
            
        
                
                    gvedit
                
                Simple graph editor and viewer.
            
        
                
                    gvgen
                
                Generate graphs.
            
        
                
                    gvmap
                
                Find clusters and create a geographical map highlighting clusters.
            
        
                
                    gvpack
                
                Merge and pack disjoint graphs.
            
        
                
                    gvpr
                
                Graph pattern scanning and processing language.
            
        
                
                    gxl2gv
                
                GXL-GV converters.
            
        
                
                    lefty
                
                A programmable graphics editor.
            
        
                
                    lneato
                
                A customizable graph editor.
            
        
                
                    mingle
                
                Fast edge bundling.
            
        
                
                    mm2gv
                
                Matrix Market-DOT converters.
            
        
                
                    nop
                
                Pretty-print graph file.
            
        
                
                    sccmap
                
                Extract strongly connected components of directed graphs.
            
        
                
                    smyrna
                
                Interactive graph viewer.
            
        
                
                    tred
                
                Transitive reduction filter for directed graphs.
            
        
                
                    unflatten
                
                Adjust directed graphs to improve layout aspect ratio.
            
        
                
                    vimdot
                
                Combined text editor and dot viewer.
            
        

	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\nacyclic
                
                Make directed graphs acyclic.
            
                
                    bcomps
                
                Biconnected components filter for graphs.
            
                
                    ccomps
                
                Connected components filter for graphs.
            
                
                    cluster
                
                Find clusters in a graph and augment the graph with this information.
            
                
                    diffimg
                
                Calculates intersection between two images.
            
                
                    dijkstra
                
                Single-source distance filter.
            
                
                    dotty
                
                A customizable graph editor.
            
                
                    edgepaint
                
                Edge coloring to disambiguate crossing edges.
            
                
                    gc
                
                Count graph components.
            
                
                    gml2gv
                
                GML-DOT converters.
            
                
                    graphml2gv
                
                GRAPHML-DOT converter.
            
                
                    gv2gxl
                
                GXL-GV converters.
            
                
                    gvcolor
                
                Flow colors through a ranked digraph.
            
                
                    gvedit
                
                Simple graph editor and viewer.
            
                
                    gvgen
                
                Generate graphs.
            
                
                    gvmap
                
                Find clusters and create a geographical map highlighting clusters.
            
                
                    gvpack
                
                Merge and pack disjoint graphs.
            
                
                    gvpr
                
                Graph pattern scanning and processing language.
            
                
                    gxl2gv
                
                GXL-GV converters.
            
                
                    lefty
                
                A programmable graphics editor.
            
                
                    lneato
                
                A customizable graph editor.
            
                
                    mingle
                
                Fast edge bundling.
            
                
                    mm2gv
                
                Matrix Market-DOT converters.
            
                
                    nop
                
                Pretty-print graph file.
            
                
                    sccmap
                
                Extract strongly connected components of directed graphs.
            
                
                    smyrna
                
                Interactive graph viewer.
            
                
                    tred
                
                Transitive reduction filter for directed graphs.
            
                
                    unflatten
                
                Adjust directed graphs to improve layout aspect ratio.
            
                
                    vimdot
                
                Combined text editor and dot viewer.\n\n\n\nDocumentation
  
    Command Line
  
    acyclic
  

            

	acyclic
	Make directed graphs acyclic.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    bcomps
  

            

	bcomps
	Biconnected components filter for graphs.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    ccomps
  

            

	ccomps
	Connected components filter for graphs.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    cluster
  

            

	cluster
	Find clusters in a graph and augment the graph with this information.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    diffimg
  

            

	diffimg
	Calculates intersection between two images.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    dijkstra
  

            

	dijkstra
	Single-source distance filter.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    dotty
  

            

	dotty
	A customizable graph editor.
		Deprecated.
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		User Guide
		
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Move user guides to the page for their tool (048b7ef)\n\n\n\nDocumentation
  
    Command Line
  
    edgepaint
  

            

	edgepaint
	Edge coloring to disambiguate crossing edges.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gc
  

            

	gc
	Count graph components.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gml2gv
  

            

	gml2gv
	GML-DOT converters.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    graphml2gv
  

            

	graphml2gv
	GRAPHML-DOT converter.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gv2gxl
  

            

	gv2gxl
	GXL-GV converters.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gvcolor
  

            

	gvcolor
	Flow colors through a ranked digraph.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gvedit
  

            

	gvedit
	Simple graph editor and viewer.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gvgen
  

            

	gvgen
	Generate graphs.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gvmap
  

            

	gvmap
	Find clusters and create a geographical map highlighting clusters.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gvpack
  

            

	gvpack
	Merge and pack disjoint graphs.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gvpr
  

            

	gvpr
	Graph pattern scanning and processing language.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    gxl2gv
  

            

	gxl2gv
	GXL-GV converters.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified April 3, 2024: Fix typos (efa0cae)\n\n\n\nDocumentation
  
    Command Line
  
    lefty
  

            

	lefty
	A programmable graphics editor.
		Deprecated.
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		User Guide
		
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Move user guides to the page for their tool (048b7ef)\n\n\n\nDocumentation
  
    Command Line
  
    lneato
  

            

	lneato
	A customizable graph editor.
		Deprecated.
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add separate pages per command-line tool (1f3a345)\n\n\n\nDocumentation
  
    Command Line
  
    mingle
  

            

	mingle
	Fast edge bundling.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    mm2gv
  

            

	mm2gv
	Matrix Market-DOT converters.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    nop
  

            

	nop
	Pretty-print graph file.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    sccmap
  

            

	sccmap
	Extract strongly connected components of directed graphs.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    smyrna
  

            

	smyrna
	Interactive graph viewer.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    tred
  

            

	tred
	Transitive reduction filter for directed graphs.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    unflatten
  

            

	unflatten
	Adjust directed graphs to improve layout aspect ratio.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Command Line
  
    vimdot
  

            

	vimdot
	Combined text editor and dot viewer.
		
	
		
		
			
				
			
				
			
		
		


		
		
		PDF Manual
		
		
		
		Browse code
		
		
	    
	
	
	
	
  Last modified September 17, 2022: Add link to source code for all CLI tools (0361c44)\n\n\n\nDocumentation
  
    Layout Engines
  

            

	Layout Engines
  Various algorithms for projecting abstract graphs into a space for visualization.
	
		

	
  
    
    
    
        
                
                    dot
                
                hierarchical or layered drawings of directed graphs.
            
        
                
                    neato
                
                spring model layouts.
            
        
                
                    fdp
                
                stands for Force-Directed Placement.
            
        
                
                    sfdp
                
                stands for Scalable Force-Directed Placement.
            
        
                
                    circo
                
                circular layout.
            
        
                
                    twopi
                
                radial layout.
            
        
                
                    nop
                
                Pretty-print DOT graph file. Equivalent to nop1.
            
        
                
                    nop2
                
                Pretty-print DOT graph file, assuming positions already known.
            
        
                
                    osage
                
                draws clustered graphs.
            
        
                
                    patchwork
                
                draws map of clustered graph using a squarified treemap layout.
            
        
                
                    Writing Layout Plugins
                
                How to write a custom layout engine.
            
        

  Last modified October 4, 2022: description for Layouts (4109351)\n\ndot
                
                hierarchical or layered drawings of directed graphs.
            
                
                    neato
                
                spring model layouts.
            
                
                    fdp
                
                stands for Force-Directed Placement.
            
                
                    sfdp
                
                stands for Scalable Force-Directed Placement.
            
                
                    circo
                
                circular layout.
            
                
                    twopi
                
                radial layout.
            
                
                    nop
                
                Pretty-print DOT graph file. Equivalent to nop1.
            
                
                    nop2
                
                Pretty-print DOT graph file, assuming positions already known.
            
                
                    osage
                
                draws clustered graphs.
            
                
                    patchwork
                
                draws map of clustered graph using a squarified treemap layout.
            
                
                    Writing Layout Plugins
                
                How to write a custom layout engine.\n\n\n\nDocumentation
  
    Layout Engines
  
    dot
  

            

	dot
	hierarchical or layered drawings of directed graphs.
	
		

	dot is the default tool to use if edges have directionality.
The layout algorithm aims edges in the same direction (top to bottom, or left
to right) and then attempts to avoid edge crossings and reduce edge length.

PDF Manual
User Guide (caveat: not current with latest features of Graphviz)
Browse code


  
    
  

Attributes for dot features


	
	
	
		
	
	
		clusterrank
		–
		Mode used for handling clusters.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		compound
		–
		If true, allow edges between clusters.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		constraint
		–
		If false, the edge is not used in ranking the nodes.
		Valid on:
		Edges.
	




	
	
	
		
	
	
		group
		–
		Name for a group of nodes, for bundling edges avoiding crossings..
		Valid on:
		Nodes.
	




	
	
	
		
	
	
		lhead
		–
		Logical head of an edge.
		Valid on:
		Edges.
	




	
	
	
		
	
	
		ltail
		–
		Logical tail of an edge.
		Valid on:
		Edges.
	




	
	
	
		
	
	
		mclimit
		–
		Scale factor for mincross (mc) edge crossing minimiser parameters.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		minlen
		–
		Minimum edge length (rank difference between head and tail).
		Valid on:
		Edges.
	




	
	
	
		
	
	
		newrank
		–
		Whether to use a single global ranking, ignoring clusters.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		nslimit
		–
		Sets number of iterations in network simplex applications.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		nslimit1
		–
		Sets number of iterations in network simplex applications.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		ordering
		–
		Constrains the left-to-right ordering of node edges..
		Valid on:
		Graphs, Nodes.
	




	
	
	
		
	
	
		rank
		–
		Rank constraints on the nodes in a subgraph.
		Valid on:
		Subgraphs.
	




	
	
	
		
	
	
		rankdir
		–
		Sets direction of graph layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		ranksep
		–
		Specifies separation between ranks.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		remincross
		–
		If there are multiple clusters, whether to run edge crossing minimization a second time..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		samehead
		–
		Edges with the same head and the same samehead value are aimed at the same point on the head.
		Valid on:
		Edges.
	




	
	
	
		
	
	
		sametail
		–
		Edges with the same tail and the same sametail value are aimed at the same point on the tail..
		Valid on:
		Edges.
	




	
	
	
		
	
	
		searchsize
		–
		During network simplex, the maximum number of edges with negative cut values to search when looking for an edge with minimum cut value..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		showboxes
		–
		Print guide boxes for debugging.
		Valid on:
		Edges, Nodes, Graphs.
	




	
	
	
		
	
	
		TBbalance
		–
		Which rank to move floating (loose) nodes to.
		Valid on:
		Graphs.
	






	
  Last modified October 2, 2022: Attributes for dot features (6153a89)\n\n\n\nDocumentation
  
    Layout Engines
  
    neato
  

            

	neato
	spring model layouts.
	
		

	neato is a reasonable default tool to use for undirected graphs that aren't
too large (about 100 nodes), when you don't know anything else about the graph.
neato attempts to minimize a global energy function, which is equivalent to
statistical multi-dimensional scaling.
The solution is achieved using stress majorization1, though the older
Kamada-Kawai algorithm2, using steepest descent, is also available,
by switching mode.

PDF Manual
User Guide (caveat: not current with latest features of Graphviz)
Browse code
Gallery


  
    
  

Attributes for neato features


	
	
	
		
	
	
		Damping
		–
		Factor damping force motions..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		defaultdist
		–
		The distance between nodes in separate connected components.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		dim
		–
		Set the number of dimensions used for the layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		dimen
		–
		Set the number of dimensions used for rendering.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		diredgeconstraints
		–
		Whether to constrain most edges to point downwards.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		epsilon
		–
		Terminating condition.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		esep
		–
		Margin used around polygons for purposes of spline edge routing.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		inputscale
		–
		Scales the input positions to convert between length units.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		len
		–
		Preferred edge length, in inches.
		Valid on:
		Edges.
	




	
	
	
		
	
	
		levelsgap
		–
		strictness of neato level constraints.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		maxiter
		–
		Sets the number of iterations used.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		mode
		–
		Technique for optimizing the layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		model
		–
		Specifies how the distance matrix is computed for the input graph.
		Valid on:
		Graphs.
	




	
	
	
		
	
	




	
	
	
		
	
	
		normalize
		–
		normalizes coordinates of final layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		notranslate
		–
		Whether to avoid translating layout to the origin point.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap
		–
		Determines if and how node overlaps should be removed.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap_scaling
		–
		Scale layout by factor, to reduce node overlap..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		pin
		–
		Keeps the node at the node's given input position.
		Valid on:
		Nodes.
	




	
	
	
		
	
	
		pos
		–
		Position of node, or spline control points.
		Valid on:
		Edges, Nodes.
	




	
	
	
		
	
	
		scale
		–
		Scales layout by the given factor after the initial layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		sep
		–
		Margin to leave around nodes when removing node overlap.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		start
		–
		Parameter used to determine the initial layout of nodes.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		voro_margin
		–
		Tuning margin of Voronoi technique.
		Valid on:
		Graphs.
	









Gansner, E.R., Koren, Y., North, S. (2005). Graph Drawing by Stress Majorization. In: Pach, J. (eds) Graph Drawing. GD 2004. Lecture Notes in Computer Science, vol 3383. Springer, Berlin, Heidelberg. ↩︎


Tomihisa Kamada, Satoru Kawai, An algorithm for drawing general undirected graphs, Information Processing Letters, Volume 31, Issue 1, 1989, Pages 7-15. ↩︎




	
  Last modified October 8, 2023: wiki link for "spring model" (eb04eb8)\n\n\n\nDocumentation
  
    Layout Engines
  
    fdp
  

            

	fdp
	stands for Force-Directed Placement.
	
		

	spring model
layouts similar to those of neato, but
does this by reducing forces rather than working with energy.
fdp implements the Fruchterman-Reingold heuristic1 including a multigrid solver
that handles larger graphs and clustered undirected graphs.

PDF Manual
Browse code


  
    
  

Attributes for fdp features


	
	
	
		
	
	
		dim
		–
		Set the number of dimensions used for the layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		dimen
		–
		Set the number of dimensions used for rendering.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		inputscale
		–
		Scales the input positions to convert between length units.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		K
		–
		Spring constant used in virtual physical model.
		Valid on:
		Graphs, Clusters.
	




	
	
	
		
	
	
		len
		–
		Preferred edge length, in inches.
		Valid on:
		Edges.
	




	
	
	
		
	
	
		maxiter
		–
		Sets the number of iterations used.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		normalize
		–
		normalizes coordinates of final layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap_scaling
		–
		Scale layout by factor, to reduce node overlap..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		pin
		–
		Keeps the node at the node's given input position.
		Valid on:
		Nodes.
	




	
	
	
		
	
	
		pos
		–
		Position of node, or spline control points.
		Valid on:
		Edges, Nodes.
	




	
	
	
		
	
	
		sep
		–
		Margin to leave around nodes when removing node overlap.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		start
		–
		Parameter used to determine the initial layout of nodes.
		Valid on:
		Graphs.
	









Fruchterman, T.M.J. and Reingold, E.M. (1991), Graph drawing by force-directed placement. Softw: Pract. Exper., 21: 1129-1164. ↩︎




	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Layout Engines
  
    sfdp
  

            

	sfdp
	stands for Scalable Force-Directed Placement.
	
		

	sfdp is a fast, multilevel, force-directed algorithm that efficiently layouts large graphs, outlined in "Efficient and High Quality Force-Directed Graph Drawing"1.
Multiscale version of the fdp layout, for the layout of large graphs.

PDF Manual
Browse code


  

Attributes for sfdp features


	
	
	
		
	
	
		beautify
		–
		Whether to draw leaf nodes uniformly in a circle around the root node in sfdp..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		dim
		–
		Set the number of dimensions used for the layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		dimen
		–
		Set the number of dimensions used for rendering.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		K
		–
		Spring constant used in virtual physical model.
		Valid on:
		Graphs, Clusters.
	




	
	
	
		
	
	
		label_scheme
		–
		Whether to treat a node whose name has the form |edgelabel|* as a special node representing an edge label..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		levels
		–
		Number of levels allowed in the multilevel scheme.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		normalize
		–
		normalizes coordinates of final layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap_scaling
		–
		Scale layout by factor, to reduce node overlap..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap_shrink
		–
		Whether the overlap removal algorithm should perform a compression pass to reduce the size of the layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		quadtree
		–
		Quadtree scheme to use.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		repulsiveforce
		–
		The power of the repulsive force used in an extended Fruchterman-Reingold.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		rotation
		–
		Rotates the final layout counter-clockwise by the specified number of degrees.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		smoothing
		–
		Specifies a post-processing step used to smooth out an uneven distribution of nodes..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		start
		–
		Parameter used to determine the initial layout of nodes.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		voro_margin
		–
		Tuning margin of Voronoi technique.
		Valid on:
		Graphs.
	









Hu, Yifan. (2005). Efficient and High Quality Force-Directed Graph Drawing. Mathematica Journal. 10. 37-71. ↩︎




	
  Last modified November 18, 2024: e (58e8310)\n\n\n\nDocumentation
  
    Layout Engines
  
    circo
  

            

	circo
	circular layout.
	
		

	After Six and Tollis 199912, Kauffman and Wiese 20023.
This is suitable for certain diagrams of multiple cyclic structures, such as
certain telecommunications networks.

PDF Manual
Browse code


  

Attributes for circo features


	
	
	
		
	
	
		mindist
		–
		Specifies the minimum separation between all nodes.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		root
		–
		Specifies nodes to be used as the center of the layout.
		Valid on:
		Graphs, Nodes.
	




	
	
	
		
	
	
		normalize
		–
		normalizes coordinates of final layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		oneblock
		–
		Whether to draw circo graphs around one circle..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap_scaling
		–
		Scale layout by factor, to reduce node overlap..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		voro_margin
		–
		Tuning margin of Voronoi technique.
		Valid on:
		Graphs.
	









Six J.M., Tollis I.G. (1999) A Framework for Circular Drawings of Networks. In: Kratochvíyl J. (eds) Graph Drawing. GD 1999. Lecture Notes in Computer Science, vol 1731. Springer, Berlin, Heidelberg. ↩︎


Six J.M., Tollis I.G. (1999) Circular Drawings of Biconnected Graphs. In: Goodrich M.T., McGeoch C.C. (eds) Algorithm Engineering and Experimentation. ALENEX 1999. Lecture Notes in Computer Science, vol 1619. Springer, Berlin, Heidelberg. ↩︎


Michael Kaufmann, Roland Wiese (2002) Embedding Vertices at Points: Few Bends suffice for Planar Graphs. In: Journal of Graph Algorithms and Applications. vol. 6, no. 1, pp. 115–129 ↩︎




	
  Last modified October 2, 2022: update circo attributes (cedcf91)\n\n\n\nDocumentation
  
    Layout Engines
  
    twopi
  

            

	twopi
	radial layout.
	
		

	After Graham Wills 19971.
Nodes are placed on concentric circles depending their distance from a given
root node.
You can set the root node, or let twopi do it.

  
    
  

Attributes for twopi features


	
	
	
		
	
	
		normalize
		–
		normalizes coordinates of final layout.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		overlap_scaling
		–
		Scale layout by factor, to reduce node overlap..
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		ranksep
		–
		Specifies separation between ranks.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		root
		–
		Specifies nodes to be used as the center of the layout.
		Valid on:
		Graphs, Nodes.
	




	
	
	
		
	
	
		voro_margin
		–
		Tuning margin of Voronoi technique.
		Valid on:
		Graphs.
	




	
	
	
		
	
	
		weight
		–
		Weight of edge.
		Valid on:
		Edges.
	






Gallery
Browse code
PDF Manual





Graham J. Wills (1999) NicheWorks—Interactive Visualization of Very Large Graphs, Journal of Computational and Graphical Statistics, 8:2, 190-212 ↩︎




	
  Last modified October 2, 2022: update twopi attributed (601bc23)\n\n\n\nDocumentation
  
    Layout Engines
  
    nop
  

            

	nop
	Pretty-print DOT graph file. Equivalent to nop1.
	
		

	Prints input graphs in pretty-printed (canonical) form.

PDF Manual
Browse code

Example, indenting the input:
$ echo 'digraph { a -> b; c->d; }' | nop
digraph {
        a -> b;
        c -> d;
}
nop also deduplicates node specifications:
$ echo 'digraph { a; a [label="A"]; a [color=blue]; }' | nop
digraph {
        a       [color=blue,
                label=A];
}
nop -p produces no output, just checks the input for valid DOT language.
For example, this valid graph produces no output:
$ echo 'digraph {}' | nop -p
But this syntax error (missing }) exits with status code 1 and prints error
message:
$ echo 'digraph {' | nop -p
Error: <stdin>: syntax error in line 2

	
  Last modified February 3, 2023: Update nop.md: `nop -p` produces no output (a2792cd)\n\n\n\nDocumentation
  
    Layout Engines
  
    nop2
  

            

	nop2
	Pretty-print DOT graph file, assuming positions already known.
	
		

	Invoke equivalently as:

neato -n2
dot -Knop2

Assumes positions already specified in the input with the pos attribute.
This performs an optional adjustment to remove node-node overlap, computes edge layouts, and emites the graphs.

PDF Manual (-n section of neato)
Browse code


	
  Last modified September 16, 2022: Add (short) docs for nop layout engines (e0d003e)\n\n\n\nDocumentation
  
    Layout Engines
  
    osage
  

            

	osage
	draws clustered graphs.
	
		

	As input, osage takes any graph in the dot format.
osage draws the graph recursively.  At each level, there will be a collection of
nodes and a collection of cluster subgraphs. The internals of each cluster
subgraph are laid out, then the cluster subgraphs and nodes at the current
level are positioned relative to each other, treating each cluster subgraph as
a node.
At each level, the nodes and cluster subgraphs are viewed as rectangles to be
packed together. At present, edges are ignored during packing. Packing is done
using the standard packing functions. In particular, the graph attributes
pack and packmode control the layout. Each graph and cluster can
specify its own values for these attributes. Remember also that a cluster
inherits its attribute values from its parent graph.
After all nodes and clusters, edges are routed based on the value of the
splines attribute.
Example:



Source of the example:




  
  
    
    graph {
	layout=osage
		subgraph cluster_0 {
			label="composite cluster";
			subgraph cluster_1 {
			    label="the first cluster";
				C
				L
				U
				S
				T
				E
				R
			}
			subgraph cluster_2 {
			    label="the second\ncluster";
				a
				b
				c
				d
			}
			1
			2
		}
	3
	4
	5
}
  
     Edit in Playground
    
  




PDF Manual
Browse code


	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Layout Engines
  
    patchwork
  

            

	patchwork
	draws map of clustered graph using a squarified treemap layout.
	
		

	Each cluster is given an area based on the areas specified by the clusters and
nodes it contains. The areas of nodes and empty clusters can be specified by
the area attribute. The default area
is 1.
The root graph is laid out as a square. Then, recursively, the region of a
cluster or graph is partitioned among its top-level nodes and clusters, with
each given a roughly square subregion with its specified area.
Example: Australian Coins, area proportional to value

	

Source of the example:




  
  
    
    graph {
	layout=patchwork
	node [style=filled]
	"$2"  [area=200 fillcolor=gold]
	"$1"  [area=100 fillcolor=gold]
	"50c" [area= 50 fillcolor=silver]
	"20c" [area= 20 fillcolor=silver]
	"10c" [area= 10 fillcolor=silver]
	"5c"  [area=  5 fillcolor=silver]
}
  
     Edit in Playground
    
  



Attributes for patchwork features


	
	
	
		
	
	
		area
		–
		Indicates the preferred area for a node or empty cluster.
		Valid on:
		Nodes, Clusters.
	






PDF Manual
Browse code


	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Layout Engines
  
    Writing Layout Plugins
  

            

	Writing Layout Plugins
	How to write a custom layout engine.
	
		

	To create a new layout plugin called xxx, you first need
to provide two functions: xxx_layout and xxx_cleanup. The
semantics of these are described below.
Layout
void xxx_layout(Agraph_t * g)
Initialize the graph.


If the algorithm will use the common edge routing code, it should
call setEdgeType (g, ...);.


For each node, call common_init_node and gv_nodesize.


If the algorithm will use spline_edges() to route the edges, the
node coordinates need to be stored in ND_pos, so this should be
allocated here. This, and the two calls mentioned above, are all
handled by a call to neato_init_node().


For each edge, call common_init_edge.


The algorithm should allocate whatever other data structures it
needs. This can involve fields in the A*info_t fields. In addition,
each of these fields contains a void* alg; subfield that the algorithm
can use the store additional data.  Once we move to cgraph, this will all be
replaced with algorithm specific records.


Layout the graph. When finished, each node should have its coordinates
stored in points in ND_coord_i(n), each edge should have its layout
described in ED_spl(e).
(N.B. As of version 2.21, ND_coord_i has been replaced by ND_coord,
which are now floating point coordinates.)


To add edges, there are 3 functions available:

spline_edges1 (Agraph_t*, int edgeType)
Assumes the node coordinates are stored in ND_coord_i, and that
GD_bb is set. For each edge, this function constructs the appropriate
data and stores it in ED_spl.
spline_edges0 (Agraph_t*)
Assumes the node coordinates are stored in ND_pos, and that
GD_bb is set. This function uses the ratio attribute if set,
copies the values in ND_pos to ND_coord_i (converting from
inches to points); and calls spline_edges1 using the edge type
specified by setEdgeType().
spline_edges (Agraph_t*)
Assumes the node coordinates are stored in ND_pos. This
function calculates the bounding box of g and stores it in GD_bb,
then calls spline_edges0().

If the algorithm only works with connected components, the code can
use the pack library to get components, lay them out individually, and
pack them together based on user specifications. A typical schema is
given below. One can look at the code for twopi, circo, neato or fdp
for more detailed examples.
int ncc;

Agraph_t **ccs = ccomps(g, &ncc, 0);
if (ncc == 1) {
    /* layout nodes of g */
    adjustNodes(g);  /* if you need to remove overlaps */
    spline_edges(g); /* generic edge routing code */

} else {
    pack_info pinfo;
    pack_mode pmode = getPackMode(g, l_node);

    for (int i = 0; i < ncc; i++) {
        Agraph_t *const sg = ccs[i];
        /* layout sg */
        adjustNodes(sg);  /* if you need to remove overlaps */
    }
    spline_edges(g);  /* generic edge routing */

    /* initialize packing info, e.g. */
    pinfo.margin = getPack(g, CL_OFFSET, CL_OFFSET);
    pinfo.doSplines = 1;
    pinfo.mode = pmode;
    pinfo.fixed = 0;
    packSubgraphs(ncc, ccs, g, &pinfo);
}
for (int i = 0; i < ncc; i++) {
    agdelete(g, ccs[i]);
}

free(ccs);
Be careful in laying out subgraphs if you rely on attributes that have
only been set in the root graph. With connected components, edges can
be added with each component, before packing (as above) or after the
components have been packed (see circo).
It is good to check for trivial cases where the graph has 0 or 1 nodes,
or no edges.
At the end of xxx_layout, call
dotneato_postprocess(g);
The following template will work in most cases, ignoring the problems of
handling disconnected graphs and removing node overlaps:
static void
xxx_init_node(node_t * n)
{
  neato_init_node(n);
  /* add algorithm-specific data, if desired */
}

static void
xxx_init_edge(edge_t * e)
{
  common_init_edge(e);
  /* add algorithm-specific data, if desired */
}

static void
xxx_init_node_edge(graph_t * g)
{
  for (node_t *n = agfstnode(g); n; n = agnxtnode(g, n)) {
      xxx_init_node(n);
  }
  for (node_t *n = agfstnode(g); n; n = agnxtnode(g, n)) {
      for (edge_t *e = agfstout(g, n); e; e = agnxtout(g, e)){
          xxx_init_edge(e);
      }
  }
}

void
xxx_layout (Agraph_t* g)
{
  xxx_init_node_edge(g);
  /* Set ND_pos(n) for each node n */
  spline_edges(g);
  dotneato_postprocess(g);
}  
Cleanup
void xxx_cleanup(Agraph_t * g)
Free up any resources allocated in the layout.
Finish with calls to gv_cleanup_node and gv_cleanup_edge for
each node and edge. This cleans up splines labels, ND_pos, shapes
and 0's out the A*info_t, so these have to occur last, but could be
part of explicit xxx_cleanup_node and xxx_cleanup_edge, if desired.
At the end, you should do:
if (g != g->root) memset(&g->u, 0, sizeof(Agraphinfo_t));
This is necessary for the graph to be laid out again, as the layout
code assumes this structure is clean.
libgvc does a final cleanup to the root graph, freeing any drawing,
freeing its label, and zeroing out Agraphinfo_t of the root graph.
The following template will work in most cases:
static void xxx_cleanup_graph(Agraph_t * g)
{
  /* Free any algorithm-specific data attached to the graph */
  if (g != g->root) memset(&g->u, 0, sizeof(Agraphinfo_t));
}

static void xxx_cleanup_edge (Agedge_t* e)
{
  /* Free any algorithm-specific data attached to the edge */
  gv_cleanup_edge(e);
}

static void xxx_cleanup_node (Agnode_t* n)
{
  /* Free any algorithm-specific data attached to the node */
  gv_cleanup_node(e);
}

void xxx_cleanup(Agraph_t * g)
{
  for (Agnode_t *n = agfstnode(g); n; n = agnxtnode(g, n)) {
      for (Agedge_t *e = agfstout(g, n); e; e = agnxtout(g, e)) {
          xxx_cleanup_edge(e);
      }
      xxx_cleanup_node(n);
  }
  xxx_cleanup_graph(g);
}   
Most layouts use auxiliary routines similar to neato, so
the entry points can be added in plugin/neato_layout.
Add to gvlayout_neato_layout.c:
gvlayout_engine_t xxxgen_engine = {
    xxx_layout,
    xxx_cleanup,
};
and the line
{LAYOUT_XXX, "xxx", 0, &xxxgen_engine, &neatogen_features},
to gvlayout_neato_types and a new emum LAYOUT_XXX to layout_type in that file.
The above allows the new layout to piggyback on top of the neato
plugin, but requires rebuilding the plugin. In general, a user
can (and probably should) build a layout plugin totally separately.
To do this, after writing xxx_layout and xxx_cleanup, it is necessary to:


Add the types and data structures:
typedef enum { LAYOUT_XXX } layout_type;

static gvlayout_features_t xxxgen_features = {
    0
};
gvlayout_engine_t xxxgen_engine = {
    xxx_layout,
    xxx_cleanup,
};
static gvplugin_installed_t gvlayout_xxx_types[] = {
    {LAYOUT_XXX, "xxx", 0, &xxxgen_engine, &xxxgen_features},
    {0}
};
static gvplugin_api_t apis[] = {
    {API_layout, &gvlayout_xxx_types},
    {0},
};
gvplugin_library_t gvplugin_xxx_layout_LTX_library = { "xxx_layout", apis };


Combine all of this into a dynamic library whose name contains the
string gvplugin_ and install the library in the same directory as the
other Graphviz plugins. For example, on Linux systems, the dot layout
plugin is in the library libgvplugin_dot_layout.so.


Run dot -c to regenerate the config file.


NOTES:

Additional layouts can be added as extra lines in gvlayout_xxx_types.
Obviously, most of the names and strings can be arbitrary. One
constraint is that external identifier for the gvplugin_library_t
type must end in _LTX_library. In addition, the string xxx in
each entry of gvlayout_xxx_types is the name used to identify the
layout algorithm, so needs to be distinct from any other layout name.
The features of a layout algorithm are currently limited to a
flag of bits, and the only flag supported is LAYOUT_USES_RANKDIR,
which enables the layout to the rankdir attribute.

Changes need to be made to any applications that
statically know about layout algorithms.
Automake Configuration
If you want to integrate your code into the Graphviz software
and use its build system, follow the instructions below.
You can certainly build and install your plugin using your own
build software.

Put your software in lib/xxxgen, and added the hooks describe above
into gvlayout_neato_layout.c
In lib/xxxgen, provide a Makefile.am (based on a simple example
like lib/fdpgen/Makefile.am)
In lib/Makefile.am, add xxxgen to SUBDIRS
In configure.ac, add lib/xxxgen/Makefile to AC_CONFIG_FILES.
In lib/plugin/neato_layout/Makefile.am, insert
$(top_builddir)/lib/xxxgen/libxxxgen_C.la
in libgvplugin_neato_layout_C_la_LIBADD.
Remember to run autogen.sh because on its own configure can guess wrong.

This also assumes you have a good version of the various automake tools
on your system.

	
  Last modified December 30, 2024: fix “laying of” typo (197a4c5)\n\n\n\nDocumentation
  
    Output Formats
  

            

	Output Formats
        Various graphic and data formats for end user, web, documents and other applications.
	
  




  Format
  Command-line parameter
  Description


    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            ASCII
          
          
            
            
            ascii
            
          
          
            ASCII art imagery
          
        
    

    

    

    

    

    
        
        
          
            BMP
          
          
            
            
            bmp
            
          
          
            Windows Bitmap
          
        
    

    

    

    

    
        
        
          
            CGImage
          
          
            
            
            cgimage
            
          
          
            Apple Core Graphics
          
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            DOT
          
          
            
            
            canon
            
            
            dot
            
            
            gv
            
            
            xdot
            
            
            xdot1.2
            
            
            xdot1.4
            
          
          
            Graphviz Language
          
        
    

    

    

    

    

    

    

    

    

    

    
        
        
          
            EPS
          
          
            
            
            eps
            
          
          
            Encapsulated PostScript
          
        
    

    

    

    

    
        
        
          
            EXR
          
          
            
            
            exr
            
          
          
            OpenEXR
          
        
    

    
        
        
          
            FIG
          
          
            
            
            fig
            
          
          
            Xfig
          
        
    

    

    

    

    

    

    

    

    

    

    
        
        
          
            GD/GD2
          
          
            
            
            gd
            
            
            gd2
            
          
          
            LibGD
          
        
    

    
        
        
          
            GIF
          
          
            
            
            gif
            
          
          
            Graphics Interchange Format
          
        
    

    

    

    

    

    
        
        
          
            GTK
          
          
            
            
            gtk
            
          
          
            Formerly GTK+ / GIMP ToolKit
          
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            ICO
          
          
            
            
            ico
            
          
          
            Windows Icon
          
        
    

    

    

    
        
        
          
            Imagemap
          
          
            
            
            imap
            
            
            imap_np
            
            
            ismap
            
            
            cmap
            
            
            cmapx
            
            
            cmapx_np
            
          
          
            Image Map: Server-side and client-side
          
        
    

    

    

    

    

    

    
        
        
          
            JPEG
          
          
            
            
            jpg
            
            
            jpeg
            
            
            jpe
            
          
          
            Joint Photographic Experts Group
          
        
    

    
        
        
          
            JPEG 2000
          
          
            
            
            jp2
            
          
          
            
          
        
    

    
        
        
          
            JSON
          
          
            
            
            json
            
            
            json0
            
            
            dot_json
            
            
            xdot_json
            
          
          
            JavaScript Object Notation
          
        
    

    

    
        
        
          
            Kitty
          
          
            
            
            kitty
            
            
            kittyz
            
          
          
            Kitty graphics protocol output
          
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            PDF
          
          
            
            
            pdf
            
          
          
            Portable Document Format
          
        
    

    

    

    

    
        
        
          
            PIC
          
          
            
            
            pic
            
          
          
            Brian Kernighan's Diagram Language
          
        
    

    
        
        
          
            PICT
          
          
            
            
            pct
            
            
            pict
            
          
          
            Apple PICT
          
        
    

    

    
        
        
          
            Plain Text
          
          
            
            
            plain
            
            
            plain-ext
            
          
          
            Simple, line-based language
          
        
    

    
        
        
          
            PNG
          
          
            
            
            png
            
          
          
            Portable Network Graphics
          
        
    

    

    

    

    

    
        
        
          
            POV-Ray
          
          
            
            
            pov
            
          
          
            Persistence of Vision Raytracer (prototype)
          
        
    

    
        
        
          
            PS
          
          
            
            
            ps
            
          
          
            Adobe PostScript
          
        
    

    
        
        
          
            PS/PDF
          
          
            
            
            ps2
            
          
          
            Adobe PostScript for Portable Document Format
          
        
    

    
        
        
          
            PSD
          
          
            
            
            psd
            
          
          
            Photoshop
          
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            SGI
          
          
            
            
            sgi
            
          
          
            Silicon Graphics Image
          
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            SVG
          
          
            
            
            svg
            
            
            svgz
            
            
            svg_inline
            
          
          
            Scalable Vector Graphics
          
        
    

    

    

    

    

    

    

    

    

    

    

    
        
        
          
            TGA
          
          
            
            
            tga
            
          
          
            Truevision TARGA
          
        
    

    
        
        
          
            TIFF
          
          
            
            
            tif
            
            
            tiff
            
          
          
            Tag Image File Format
          
        
    

    
        
        
          
            Tk
          
          
            
            
            tk
            
          
          
            Tcl/Tk
          
        
    

    

    

    

    

    

    

    

    

    

    
        
        
          
            VML
          
          
            
            
            vml
            
            
            vmlz
            
          
          
            Vector Markup Language.
          
        
    

    

    
        
        
          
            VRML
          
          
            
            
            vrml
            
          
          
            Virtual Reality Modeling Language
          
        
    

    
        
        
          
            VT100
          
          
            
            
            vt
            
            
            vt-24bit
            
            
            vt-4up
            
            
            vt-6up
            
            
            vt-8up
            
          
          
            Terminal-based graph output
          
        
    

    
        
        
          
            WBMP
          
          
            
            
            wbmp
            
          
          
            Wireless Bitmap
          
        
    

    
        
        
          
            WebP
          
          
            
            
            webp
            
          
          
            WebP
          
        
    

    

    

    

    
        
        
          
            X11
          
          
            
            
            xlib
            
            
            x11
            
          
          
            X11 Window
          
        
    

    

    

    

    

    



	The output format is specified with the -Tlang
flag on the command line, where lang
is one of the parameters listed above.
The formats actually available in a given Graphviz system depend on
how the system was built and the presence of additional libraries.
To see what formats dot supports, run dot -T?.
See the description of the -T
flag for additional information.
Note that the internal coordinate system has the origin
in the lower left corner.
Thus, positions in the
canon,
dot,
xdot,
plain, and
plain-ext
formats need to be interpreted in this manner.

Image Formats
The image and shapefile attributes specify an image file to be included
as part of the final diagram. Not all image formats can be read. In addition,
even if read, not all image formats can necessarily be used in a given
output format.
The graph below shows what image formats can be used in which output formats,
and the required plugins. On the left are the supported image formats.
On the right are the supported output formats.
In the middle are the plugins: image loaders, renderers, drivers, arranged by
plugin library.
This presents the most general case. A given installation may not provide
one of the plugins, in which case, that transformation is not possible.


ID Output Note
In the formats: -Tcmap, -Tcmapx, -Tsvg, -Tvml, the output generates
id="node#" properties for nodes, id="edge#" properties for edges, and id="cluster#" properties for clusters, with the # replaced by an internally assigned integer. These strings can be provided instead by an externally provided id=xxx attribute on the object.
Normal \N \E \G substitutions are applied.
Externally provided id values are not used internally, and it is the user's responsibility to ensure
that they are sufficiently unique for their intended downstream use.
Note, in particular, that \E is not a unique id for multiedges.

	
	
	
  Last modified January 12, 2025: fix “reponsibilty” typo (642f996)\n\n\n\nDocumentation
  
    Output Formats
  
    ASCII
  

            

Usage:


$ dot -Tascii input.dot



	ASCII
	ASCII art imagery
	
		

	Since Graphviz 13.0.0, if Graphviz was built with
AAlib support, the output format ascii
will produce an ASCII art
representation of the input graph.

	
  Last modified January 12, 2025: document '-Tascii' (50b85f1)\n\n\n\nDocumentation
  
    Output Formats
  
    BMP
  

            

Usage:


$ dot -Tbmp input.dot



	BMP
	Windows Bitmap
	
		

	Outputs images in the Windows BMP format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    CGImage
  

            

Usage:


$ dot -Tcgimage input.dot



	CGImage
	Apple Core Graphics
	
		

	Output using the Apple's Core Graphics Image format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    DOT
  

            

Usage:


$ dot -Tcanon input.dot
$ dot -Tdot input.dot
$ dot -Tgv input.dot
$ dot -Txdot input.dot
$ dot -Txdot1.2 input.dot
$ dot -Txdot1.4 input.dot



	DOT
	Graphviz Language
	
		

	These formats produce output in the
dot language.
canon
Using canon produces a pretty printed version of the input,
with no layout performed.

    

      Example: simple graph, canonicalized formatting with -Tcanon
    

    
$ echo 'digraph { a->b }' | dot -Tcanon
digraph {
        node [label="\N"];
        a -> b;
}

  

dot / gv
The dot (and gv alias) options correspond to attributed dot output,
and is the default output format.
It reproduces the input, along with layout information for the graph.
In particular, a bb attribute is
attached to the graph, specifying the bounding box of the drawing.
If the graph has a label, its position is specified by the
lp attribute.
Each node gets pos,
width and
the record rectangles are given in the
rects attribute.
If the node is a polygon and the
vertices attribute is defined, this
attribute contains the vertices of the node.
Every edge is
assigned a pos attribute,
and if the edge has a label, the label position
is given in lp.

    

      Example: simple graph, outputting layout positioning with -Tdot
    

    
$ echo 'digraph { a->b }' | dot -Tdot
digraph {
        graph [bb="0,0,54,108"];
        node [label="\N"];
        a    [height=0.5,
             pos="27,90",
             width=0.75];
        b    [height=0.5,
             pos="27,18",
             width=0.75];
        a -> b  [pos="e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112"];
}

  

xdot
The xdot format extends the
dot format by providing much more detailed information about
how graph components are drawn. It relies on additional attributes
for nodes, edges and graphs.
See also xdot attribute type docs
The format is fluid; comments and
suggestions for better representations are welcome.
To allow for changes in the format, Graphviz attaches the attribute
xdotversion to the graph.
If the xdotversion attribute is set in the input graph, the renderer
will only output features supported by that version. Note that the formats xdot1.2
and xdot1.4 are equivalent to setting xdotversion=1.2 and xdotversion=1.4,
respectively.
Additional drawing attributes can appear on nodes, edges, clusters and
on the graph itself. There are six new attributes:

  
      
          Attribute
          Description
          Limitations
      
  
  
      
          draw
          General drawing without labels
          
      
      
          ldraw
          Label drawing
          
      
      
          hdraw
          Head arrowhead
          Edge only
      
      
          tdraw
          Tail arrowhead
          Edge only
      
      
          hldraw
          Head label
          Edge only
      
      
          tldraw
          Tail label
          Edge only
      
  

For a given graph object, one will typically issue a draw directive before the
label directive. For example, for a node, one would first use the commands
in draw followed by the commands in ldraw.
The value of these attributes consists of the concatenation of some
(multi-)set of the following 14 rendering or attribute operations.
(The number is parentheses gives the xdot version when the operation
was added to the format. If no version number is given, the operation
was in the original specification.)

E x₀ y₀ w h
Filled ellipse ((x - x₀) ÷ w)² + ((y - y₀) ÷ h)² = 1
e x₀ y₀ w h
Unfilled ellipse ((x - x₀) ÷ w)² + ((y - y₀) ÷ h)² = 1
P n x₁ y₁ ... xₙ yₙ
Filled polygon using the given n points
p n x₁ y₁ ... xₙ yₙ
Unfilled polygon using the given n points
L n x₁ y₁ ... xₙ yₙ
Polyline using the given n points
B n x₁ y₁ ... xₙ yₙ
B-spline using the given n control points
b n x₁ y₁ ... xₙ yₙ
Filled B-spline using the given n control points (1.1)
T x y j w n -b₁b₂...bₙ
Text drawn using the baseline point (x,y). The text consists of the
n bytes following -. The text should be left-aligned (centered,
right-aligned) on the point if j is -1 (0, 1), respectively. The value
w gives the width of the text as computed by the library.
t f
Set font characteristics. The integer f is the OR of:

  
      
          Flag
          Value
          Min-Version
      
  
  
      
          BOLD
          1
          
      
      
          ITALIC
          2
          
      
      
          UNDERLINE
          4
          
      
      
          SUPERSCRIPT
          8
          
      
      
          SUBSCRIPT
          16
          (1.5)
      
      
          STRIKE_THROUGH
          32
          (1.6)
      
      
          OVERLINE
          64
          (1.7)
      
  


C n -b₁b₂...bₙ
Set fill color. The color value consists of the
n bytes following -. (1.1)
c n -b₁b₂...bₙ
Set pen color. The color value consists of the
n bytes following -. (1.1)
F s n -b₁b₂...bₙ
Set font. The font size is s points. The font name consists of the
n bytes following -. (1.1)
S n -b₁b₂...bₙ
Set style attribute. The style value consists of the
n bytes following -. The syntax of the value is the same as
specified for a styleItem in style. (1.1)
I x y w h n -b₁b₂...bₙ
Externally-specified image drawn in the box with lower left
corner (x,y) and upper right corner (x+w,y+h). The name of the image
consists of the n bytes following -. This is usually a bitmap
image. Note that the image size, even when converted from pixels to
points, might be different from the required size (w,h). It is
assumed the renderer will perform the necessary scaling. (1.2)

Note that the filled figures (ellipses, polygons and B-Splines)
imply two operations: first, drawing the filled figure with the
current fill color; second, drawing an unfilled figure with the
current pen color, pen width and pen style.
Within the context of a single drawing attribute, e.g., draw, there is
an implicit state for the graphical attributes. That is, once a color, style, font, or
font characteristic is set, it remains valid for all relevant drawing operations
until the value is reset by another xdot cmd.
Style values which can be incorporated in the graphics model do not
appear in xdot output. In particular, the style values
filled, rounded, diagonals, and invis
will not appear. Indeed, if style contains invis,
there will not be any xdot output at all.
With version 1.4 of xdot, color strings may now encode linear and radial gradients. Linear
gradients have the form 
    '[' x₀ y₀ x₁ y₁ n [color-stop]⁺ ']'
where (x₀,y₀) and (x₁,y₁) define the starting and
ending points of the gradient line segment, and n gives the number of color-stops. Each
color-stop has the form
    v m -b₁b₂...bₘ
where v is a number in the range [0,1] defining a position on the gradient line segment, with
color specified by the m byte string b₁b₂...bₘ,
the same format as used for colors in the 'c' and 'C' operations.
Radial gradients have the form
    '(' x₀ y₀ r₀ x₁ y₁ r₁ n [color-stop]⁺ ')' 
where xⱼ yⱼ rⱼ, for j=0,1, specify
the center and radius of the start and ending circle, and n gives the number of color-stops.
A color-stop has the same format as defined for linear gradients, again given the fractional
offset and its associated color.
In handling text alignment, the application may want to recompute the
string width using its own rendering primitives.
The text operation is only used in the label attributes. Normally,
the non-text operations are only used in the non-label attributes.
If, however, the decorate
attribute is set on an edge, its label
attribute will also contain a polyline operation.
In addition, if a label is a complex, HTML-like label, it will also
contain non-text operations.
All coordinates and sizes are in points.
Note though that if
an edge or node is invisible, no drawing operations are attached to it.
Version info:

  
      
          Xdot version
          Graphviz version
          Modification
      
  
  
      
          >1.0
          1.9
          
      
      
          >1.1
          2.8
          First plug-in version
      
      
          >1.2
          2.13
          Support image operator I
      
      
          >1.3
          2.31
          Add numerical precision
      
      
          >1.4
          2.32
          Add gradient colors
      
      
          >1.5
          2.34
          Fix text layout problem; fix inverted vector in gradient; support version-specific output; new t op for text characteristics
      
      
          >1.6
          2.35
          Add STRIKE-THROUGH bit fort
      
      
          >1.7
          2.37
          Add OVERLINE for t
      
  


    

      Example: simple graph, outputting layout positioning & drawing information with -Txdot
    

    
$ echo 'digraph { a->b }' | dot -Txdot
digraph {
        graph [_draw_="c 9 -#fffffe00 C 7 -#ffffff P 4 0 0 0 108 54 108 54 0 ",
             bb="0,0,54,108",
             xdotversion=1.7
        ];
        node [label="\N"];
        a    [_draw_="c 7 -#000000 e 27 90 27 18 ",
             _ldraw_="F 14 11 -Times-Roman c 7 -#000000 T 27 86.3 0 7 1 -a ",
             height=0.5,
             pos="27,90",
             width=0.75];
        b    [_draw_="c 7 -#000000 e 27 18 27 18 ",
             _ldraw_="F 14 11 -Times-Roman c 7 -#000000 T 27 14.3 0 7 1 -b ",
             height=0.5,
             pos="27,18",
             width=0.75];
        a -> b  [_draw_="c 7 -#000000 B 4 27 71.7 27 63.98 27 54.71 27 46.11 ",
             _hdraw_="S 5 -solid c 7 -#000000 C 7 -#000000 P 3 30.5 46.1 27 36.1 23.5 46.1 ",
             pos="e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112"];
}

  


	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    EPS
  

            

Usage:


$ dot -Teps input.dot



	EPS
	Encapsulated PostScript
	
		

	Produces Encapsulated PostScript output.
At present, this is only guaranteed to be correct for a single
input graph since the Bounding Box information has to appear
at the beginning of the output, and this will be based on the first graph.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    EXR
  

            

Usage:


$ dot -Texr input.dot



	EXR
	OpenEXR
	
		

	Output in the OpenEXR format

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    FIG
  

            

Usage:


$ dot -Tfig input.dot



	FIG
	Xfig
	
		

	Outputs graphs in the FIG graphics language.

    

      Example outputs of a simple graph with two nodes connected with an edge:
    

    
$ echo 'digraph { a->b }' | dot -Tfig
#FIG 3.2
# Generated by graphviz version 2.47.1 (20210417.1919)
# Title: %3
# Pages: 1
Portrait
Center
Inches
Letter
100.00
Single
-2
1200 2
0 32 #d3d3d3
0 33 #fffffe
2 3 0 1 33 7 2 0 20 0.0 0 0 0 0 0 5
 0 2320 0 0 1240 0 1240 2320 0 2320
# a
1 1 0 1 0 7 1 0 -1 0.000 0 0.0000 620 440 540 -360 620 440 1160 80
4 1 0 1 0 0 14.0 0.0000 6 14.0 4.7 620 498 a\001
# b
1 1 0 1 0 7 1 0 -1 0.000 0 0.0000 620 1880 540 -360 620 1880 1160 1520
4 1 0 1 0 0 14.0 0.0000 6 14.0 4.7 620 1938 b\001
# a->b
3 4 0 1 0 0 0 0 -1 0.0 0 0 0 7
  620 806 620 886 620 969 620 1055 620 1143 620 1231 620 1318
 0 1 1 1 1 1 0
2 3 0 1 0 0 0 0 20 0.0 0 0 0 0 0 4
 690 1318 620 1518 550 1318 690 1318
# end of FIG file

  


	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    GD/GD2
  

            

Usage:


$ dot -Tgd input.dot
$ dot -Tgd2 input.dot



	GD/GD2
	LibGD
	
		

	Output images in the GD and GD2 format. These are the internal
formats used by the gd library. gd2 is compressed.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    GIF
  

            

Usage:


$ dot -Tgif input.dot



	GIF
	Graphics Interchange Format
	
		

	Outputs images in GIF format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    GTK
  

            

Usage:


$ dot -Tgtk input.dot



	GTK
	Formerly GTK+ / GIMP ToolKit
	
		

	Creates a GTK window and displays the output there.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    ICO
  

            

Usage:


$ dot -Tico input.dot



	ICO
	Windows Icon
	
		

	Outputs images in the Windows ICO format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    Imagemap
  

            

Usage:


$ dot -Timap input.dot
$ dot -Timap_np input.dot
$ dot -Tismap input.dot
$ dot -Tcmap input.dot
$ dot -Tcmapx input.dot
$ dot -Tcmapx_np input.dot



	Imagemap
	Image Map: Server-side and client-side
	
		

	imap and cmapx produce map files for server-side and client-side image maps.
These can be used in a web page with
a graphical form of the output, e.g. in JPEG, GIF or PNG format, to attach
links to nodes and edges.
Graphviz generates an object's map information only if the object has a non-trival
URL or href
attribute, or if it has an explicit tooltip attribute.
cmap produces map files for client-side image maps. It's
mostly identical to cmapx, but the latter is well-formed XML amenable
to processing by XML tools. In particular, the cmapx output is wrapped in
<map></map>.
imap_np and cmapx_np are identical to the imap and cmapx formats,
except they rely solely on rectangles as active areas.
ismap is a predecessor (circa 1994)
of the imap format.  Most servers now use the latter.
For example, to create a server-side map
given the dot file:




  
  
    
    /* x.gv */
digraph mainmap {
  URL="http://www.research.att.com/base.html";
  command [URL="http://www.research.att.com/command.html"];
  command -> output [URL="colors.html"];
}
  
     Edit in Playground
    
  



one would process the graph and generate two output files:
dot -Timap -ox.map -Tgif -ox.gif x.gv
and then refer to it in a web page:
<A HREF="x.map"><IMG SRC="x.gif" ismap="ismap" /></A>
For client-side maps, one again generates two output files:
dot -Tcmapx -ox.map -Tgif -ox.gif x.gv
and uses the HTML
<IMG SRC="x.gif" USEMAP="#mainmap" />
... [content of x.map] ...
Note that the name given in the USEMAP attribute must be the same
as the ID attribute of the MAP element. The Graphviz renderer
uses the name of the graph as the ID. Thus, in the example above,
where the graph's name is mainmap, we have USEMAP="#mainmap"
in the IMG attribute, and x.map will look like
<map id="mainmap" name="mainmap">
... 
</map>
URLs can be attached to the root
graph, nodes and edges. If a node has a URL, clicking in the node
will activate the link.
If an edge has a URL, various
points along the edge (but not necessarily the head or tail)
will link to it. In addition, if the edge has a
label, that will link
to the URL.
As for the head of the edge, this is linked to the
headURL, if set.
Otherwise, it is linked to the edge's URL if that is defined.
The analogous description holds for the tail and the
tailURL.
A URL associated with the graph is used as a default link.
If the URL
of a node contains the escape sequence \N, it will be replaced by
the node's name.
If the headURL is defined and contains the escape sequence \N,
it will be replaced by
the headlabel, if defined.
The analogous result holds for the tailURL and the
taillabel.
See ID Output Note.

	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    JPEG
  

            

Usage:


$ dot -Tjpg input.dot
$ dot -Tjpeg input.dot
$ dot -Tjpe input.dot



	JPEG
	Joint Photographic Experts Group
	
		

	Output JPEG-compressed image files.
JPEG's image compression can blur fine image details like text & lines, so
consider using a lossless format (say, PNG or
WebP) instead.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    JPEG 2000
  

            

Usage:


$ dot -Tjp2 input.dot



	JPEG 2000
	
	
		

	Output using the JPEG 2000 format.
JPEG's image compression can blur fine image details like text & lines, so
consider using a lossless format (say, PNG or
WebP) instead.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    JSON
  

            

Usage:


$ dot -Tjson input.dot
$ dot -Tjson0 input.dot
$ dot -Tdot_json input.dot
$ dot -Txdot_json input.dot



	JSON
	JavaScript Object Notation
	
		

	These formats produce a JSON output encoding the DOT language.

json0 produces output in JSON format that contains the
same information produced by -Tdot.
json produces output in JSON format that contains the
same information produced by -Txdot.

Both of these assume the graph has been processed by one of the layout
algorithms.
dot_json and xdot_json also produce JSON output similar to
to json0 and json, respectively, except they only use the
content of the graph on input. In particular, they do not assume that the
graph has been processed by any layout algorithm, and the only xdot information
appearing in the output was in the original input file.
The output produced by these follows the json schema shown below.
Note that the objects array has all of the subgraphs first,
followed by all of the nodes. The _gvid value is the index of
the subgraph or node in the objects array. This also holds
true for the edges in the objects array. Note that this format
allows clustered graphs, where edges can connect clusters as well as nodes.

    

      Example: simple graph rendered with -Tdot_json
    

    
$ echo 'digraph { a->b }' | dot -Tdot_json
{
  "name": "%3",
  "directed": true,
  "strict": false,
  "_subgraph_cnt": 0,
  "objects": [
    {
      "_gvid": 0,
      "name": "a",
      "label": "\\N"
    },
    {
      "_gvid": 1,
      "name": "b",
      "label": "\\N"
    }
  ],
  "edges": [
    {
      "_gvid": 0,
      "tail": 0,
      "head": 1
    }
  ]
}

  


    

      Example: simple graph rendered with -Txdot_json
    

    
$ echo 'digraph { a->b }' | dot -Txdot_json
{
  "name": "%3",
  "directed": true,
  "strict": false,
  "_subgraph_cnt": 0,
  "objects": [
    {
      "_gvid": 0,
      "name": "a",
      "label": "\\N"
    },
    {
      "_gvid": 1,
      "name": "b",
      "label": "\\N"
    }
  ],
  "edges": [
    {
      "_gvid": 0,
      "tail": 0,
      "head": 1
    }
  ]
}

  


    

      Example: simple graph rendered with -Tjson0
    

    
$ echo 'digraph { a->b }' | dot -Tjson0
{
  "name": "%3",
  "directed": true,
  "strict": false,
  "bb": "0,0,54,108",
  "_subgraph_cnt": 0,
  "objects": [
    {
      "_gvid": 0,
      "name": "a",
      "height": "0.5",
      "label": "\\N",
      "pos": "27,90",
      "width": "0.75"
    },
    {
      "_gvid": 1,
      "name": "b",
      "height": "0.5",
      "label": "\\N",
      "pos": "27,18",
      "width": "0.75"
    }
  ],
  "edges": [
    {
      "_gvid": 0,
      "tail": 0,
      "head": 1,
      "pos": "e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112"
    }
  ]
}

  


    

      Example: simple graph rendered with -Tjson
    

    
echo 'digraph { a->b }' | dot -Tjson
{
  "name": "%3",
  "directed": true,
  "strict": false,
  "_draw_": 
  [
    {
      "op": "c",
      "grad": "none",
      "color": "#fffffe00"
    },
    {
      "op": "C",
      "grad": "none",
      "color": "#ffffff"
    },
    {
      "op": "P",
      "points": [[0.000,0.000],[0.000,108.000],[54.000,108.000],[54.000,0.000]]
    }
  ],
  "bb": "0,0,54,108",
  "xdotversion": "1.7",
  "_subgraph_cnt": 0,
  "objects": [
    {
      "_gvid": 0,
      "name": "a",
      "_draw_": 
      [
        {
          "op": "c",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "e",
          "rect": [27.000,90.000,27.000,18.000]
        }
      ],
      "_ldraw_": 
      [
        {
          "op": "F",
          "size": 14.000,
          "face": "Times-Roman"
        },
        {
          "op": "c",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "T",
          "pt": [27.000,86.300],
          "align": "c",
          "width": 7.000,
          "text": "a"
        }
      ],
      "height": "0.5",
      "label": "\\N",
      "pos": "27,90",
      "width": "0.75"
    },
    {
      "_gvid": 1,
      "name": "b",
      "_draw_": 
      [
        {
          "op": "c",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "e",
          "rect": [27.000,18.000,27.000,18.000]
        }
      ],
      "_ldraw_": 
      [
        {
          "op": "F",
          "size": 14.000,
          "face": "Times-Roman"
        },
        {
          "op": "c",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "T",
          "pt": [27.000,14.300],
          "align": "c",
          "width": 7.000,
          "text": "b"
        }
      ],
      "height": "0.5",
      "label": "\\N",
      "pos": "27,18",
      "width": "0.75"
    }
  ],
  "edges": [
    {
      "_gvid": 0,
      "tail": 0,
      "head": 1,
      "_draw_": 
      [
        {
          "op": "c",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "b",
          "points": [[27.000,71.700],[27.000,63.980],[27.000,54.710],[27.000,46.110]]
        }
      ],
      "_hdraw_": 
      [
        {
          "op": "S",
          "style": "solid"
        },
        {
          "op": "c",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "C",
          "grad": "none",
          "color": "#000000"
        },
        {
          "op": "P",
          "points": [[30.500,46.100],[27.000,36.100],[23.500,46.100]]
        }
      ],
      "pos": "e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112"
    }
  ]
}

  


descriptionJSON representation of a graph encoding xdot attributestitleGraphviz JSONrequirednamedirectedstrict_subgraph_cntdefinitionsdrawopsitemsoneOf$ref#/definitions/ellipse#/definitions/polygon#/definitions/polyline#/definitions/bspline#/definitions/text#/definitions/font_style#/definitions/drawcolor#/definitions/font#/definitions/styletypearraystylerequiredopstyletypeobjectpropertiesstyletypestringoppatternStypestringfont_stylerequiredopfontchartypeobjectpropertiesoppatternttypestringfontcharminimum0typeintegermaximum127polygonrequiredoppointstypeobjectpropertiespoints$ref#/definitions/pointlistoppattern[pP]typestringmetanoderequired_gvidnametypeobjectproperties_draw_$ref#/definitions/drawopsnametypestringdescriptionThe node or subgraph name_ldraw_$ref#/definitions/drawops_gvidtypeintegersubgraphsitemstypeintegertypearraydescriptionindex of a child subgraphedgesitemstypeintegertypearraydescriptionindex of an edge in this subgraphadditionalPropertiestypestringnodesitemstypeintegertypearraydescriptionindex of a node in this subgraphtitlenode or subgraphcolorpattern(#[0-9a-f]*)|(#[0-9a-f]{8})typestringtextrequiredopptaligntextwidthtypeobjectpropertiestexttypestringalignpattern[lcr]typestringoppatternTtypestringpt$ref#/definitions/pointwidthtypenumberpointminItems2itemstypenumbertypearraymaxItems2stoprequiredfraccolortypeobjectpropertiescolor$ref#/definitions/colorfractypenumberdrawcolorrequiredopgradtypeobjectpropertiesp0oneOf$ref#/definitions/point#/definitions/point3p1oneOf$ref#/definitions/point#/definitions/point3color$ref#/definitions/colorstopsitems$ref#/definitions/stoptypearraygradenumnonelinearradialtypestringoppattern[cC]typestringellipserequiredoprecttypeobjectpropertiesrect$ref#/definitions/rectangleoppattern[eE]typestringbsplinerequiredoppointstypeobjectpropertiespoints$ref#/definitions/pointlistoppattern[bB]typestringedgerequired_gvidtailheadtypeobjectproperties_hldraw_$ref#/definitions/drawops_tdraw_$ref#/definitions/drawops_draw_$ref#/definitions/drawops_ldraw_$ref#/definitions/drawops_gvidtypeintegertailtypeintegerdescription_gvid of tail node_tldraw_$ref#/definitions/drawops_hdraw_$ref#/definitions/drawopsadditionalPropertiestypestringheadtypeintegerdescription_gvid of tail headtitleedgepolylinerequiredoppointstypeobjectpropertiespoints$ref#/definitions/pointlistoppatternLtypestringfontrequiredopsizefacetypeobjectpropertiessizeminimum0typenumberoppatternFtypestringfacetypestringpoint3minItems3itemstypenumbertypearraymaxItems3rectangleminItems4itemstypenumbertypearraymaxItems4pointlistitems$ref#/definitions/pointtypearraytypeobjectpropertiesdirectedtypebooleandescriptionTrue if the graph is directed_draw_$ref#/definitions/drawopsnametypestringdescriptionThe graph nameobjectsitems$ref#/definitions/metanodetypearraydescriptionThe graph's subgraphs followed by the graph's nodes_ldraw_$ref#/definitions/drawopsstricttypebooleandescriptionTrue if the graph is strictedgesitems$ref#/definitions/edgetypearrayadditionalPropertiestypestring_subgraph_cnttypeintegerdescriptionNumber of subgraphs in the graph

	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    Kitty
  

            

Usage:


$ dot -Tkitty input.dot
$ dot -Tkittyz input.dot



	Kitty
	Kitty graphics protocol output
	
		

	Since Graphviz 9.0.0, an output format for speaking the
Kitty terminal emulator’s graphics protocol
is available.

kitty: uncompressed Kitty graphics protocol output
kittyz: compressed Kitty graphics protocol output

These formats assume your terminal is either Kitty or something that understands
Kitty’s protocol.

	
  Last modified April 18, 2025: add documentation of '-Tkitty' (e0e2f38)\n\n\n\nDocumentation
  
    Output Formats
  
    PDF
  

            

Usage:


$ dot -Tpdf input.dot



	PDF
	Portable Document Format
	
		

	Produces PDF output.
(This option assumes Graphviz includes the Cairo renderer.)
Alternatively, one can use the ps2 option to
produce PDF-compatible PostScript, and then use a ps-to-pdf converter.

	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    PIC
  

            

Usage:


$ dot -Tpic input.dot



	PIC
	Brian Kernighan's Diagram Language
	
		

	Output is given in the text-based PIC language developed for troff.
See PIC language.

    

      Example outputs of a simple graph with two nodes connected with an edge:
    

    
$ echo 'digraph { a->b }' | dot -Tpic
#  Creator: graphviz version 2.47.1 (20210417.1919)
#  Title: %3
#  save point size and font
.nr .S \n(.s
.nr DF \n(.f
.PS 0.86111 1.61111
#  to change drawing size, multiply the width and height on the .PS line above and the number on the two lines below (rounded to the nearest integer) by a scale factor
.nr SF 861
scalethickness = 861
#  don't change anything below this line in this drawing
#  non-fatal run-time pic version determination, version 2
boxrad=2.0 #  will be reset to 0.0 by gpic only
scale=1.0 #  required for comparisons
#  boxrad is now 0.0 in gpic, else it remains 2.0
#  dashwid is 0.1 in 10th Edition, 0.05 in DWB 2 and in gpic
#  fillval is 0.3 in 10th Edition (fill 0 means black), 0.5 in gpic (fill 0 means white), undefined in DWB 2
#  fill has no meaning in DWB 2, gpic can use fill or filled, 10th Edition uses fill only
#  DWB 2 doesn't use fill and doesn't define fillval
#  reset works in gpic and 10th edition, but isn't defined in DWB 2
#  DWB 2 compatibility definitions
if boxrad > 1.0 && dashwid < 0.075 then X
        fillval = 1;
        define fill Y Y;
        define solid Y Y;
        define reset Y scale=1.0 Y;
X
reset #  set to known state
#  GNU pic vs. 10th Edition d\(e'tente
if fillval > 0.4 then X
        define setfillval Y fillval = 1 - Y;
        define bold Y thickness 2 Y;
        #  if you use gpic and it barfs on encountering "solid",
        #       install a more recent version of gpic or switch to DWB or 10th Edition pic;
        #       sorry, the groff folks changed gpic; send any complaint to them;
X else Z
        define setfillval Y fillval = Y;
        define bold Y Y;
        define filled Y fill Y;
Z
#  arrowhead has no meaning in DWB 2, arrowhead = 7 makes filled arrowheads in gpic and in 10th Edition
#  arrowhead is undefined in DWB 2, initially 1 in gpic, 2 in 10th Edition
arrowhead = 7 #  not used by graphviz
#  GNU pic supports a boxrad variable to draw boxes with rounded corners; DWB and 10th Ed. do not
boxrad = 0 #  no rounded corners in graphviz
#  GNU pic supports a linethick variable to set line thickness; DWB and 10th Ed. do not
linethick = 0; oldlinethick = linethick
#  .PS w/o args causes GNU pic to scale drawing to fit 8.5x11 paper; DWB does not
#  maxpsht and maxpswid have no meaning in DWB 2.0, set page boundaries in gpic and in 10th Edition
#  maxpsht and maxpswid are predefined to 11.0 and 8.5 in gpic
maxpsht = 1.611111
maxpswid = 0.861111
Dot: [
define attrs0 % %; define unfilled % %; define rounded % %; define diagonals % %
move to (0, 0); line to (0, 116); line to (62, 116); line to (62, 0); line to (0, 0)
#  a
ellipse attrs0 wid 0.75000 ht 0.50000 at (0.43056,1.30556);
.ft R 
.ps 14*\n(SFu/861u
"a" at (27.54861,87.56481);
#  b
ellipse attrs0 wid 0.75000 ht 0.50000 at (0.43056,0.30556);
"b" at (27.54861,15.56481);
#  a->b
move to (31, 76); spline to (31, 72); spline to (31, 68); spline to (31, 63); spline to (31, 59); spline to (31, 54); spline to (31, 50)
move to (35, 50); line to (31, 40); line to (28, 50); line to (35, 50)
]
.PE
#  restore point size and font
.ps \n(.S
.ft \n(DF

  


	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    PICT
  

            

Usage:


$ dot -Tpct input.dot
$ dot -Tpict input.dot



	PICT
	Apple PICT
	
		

	Output in the Apple PICT file format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    Plain Text
  

            

Usage:


$ dot -Tplain input.dot
$ dot -Tplain-ext input.dot



	Plain Text
	Simple, line-based language
	
		

	The plain and plain-ext formats produce output using
a simple, line-based language.
The latter format differs in that, on edges, it provides port names
on head and tail nodes when applicable.
Example outputs of a simple graph with two nodes connected with an edge:

    

      -Tplain
    

    
$ echo 'digraph { a->b }' | dot -Tplain
graph 1 0.75 1.5
node a 0.375 1.25 0.75 0.5 a solid ellipse black lightgrey
node b 0.375 0.25 0.75 0.5 b solid ellipse black lightgrey
edge a b 4 0.375 0.99579 0.375 0.88865 0.375 0.7599 0.375 0.64045 solid black
stop

  


    

      -Tplain-ext
    

    
$ echo 'digraph { a->b }' | dot -Tplain-ext
graph 1 0.75 1.5
node a 0.375 1.25 0.75 0.5 a solid ellipse black lightgrey
node b 0.375 0.25 0.75 0.5 b solid ellipse black lightgrey
edge a b 4 0.375 0.99579 0.375 0.88865 0.375 0.7599 0.375 0.64045 solid black
stop

  

There are four types of statements.
 graph scale width height
 node name x y width height label style shape color fillcolor
 edge tail head n x₁ y₁ .. xₙ yₙ [label xl yl] style color
 stop


graph
The width and height values give the width and height
of the drawing. The lower left corner of the drawing is at the origin.
The scale value indicates how the drawing should be scaled
if a size attribute was given and the drawing
needs to be scaled to conform to that size. If no scaling is necessary,
it will be set to 1.0. Note that all graph, node and edge
coordinates and lengths are given unscaled.
node
The name value is the name of the node, and x and y
give the node's position. The width and height are the
width and height of the node.
The label,
style, shape, color and fillcolor give the
node's label,
style, shape,
color and
fillcolor,
respectively, using attribute default values where necessary. If the
node does not have a style attribute, "solid" is used.
edge
The tail and head values give the names of the head and
tail nodes. In plain-ext format, the head or tail name will be appended
with a colon and a portname if the edge connects to the node at a port.
n is the number of control points defining the
B-spline forming the edge. This is followed by 2*n numbers giving
the x and y coordinates of the control points in order from tail to head.
If the edge has a label, this comes next
followed by the x and y coordinates of the label's position.
The edge description is completed by the edge's
style and color.
As with nodes, if a style is not defined, "solid" is used.
Note: The control points given in an edge statement define the
body of the edge. In particular, if the edge has an arrowhead to the
head or tail node,
there will be a gap between the last or first control points and the
boundary of the associated node. There are at least 3 possible ways
of handling this gap:

Arrange that the input graph uses dir=none,
arrowhead=none, or arrowtail=none for all edges.
In this case, the terminating control points will always touch the node.
Consider the line segment joining the control point and the center
of the node, and determine the point where the segment intersects the
node's boundary. Then use the control point and the intersection point
as the main axis of an arrowhead. The problem with this approach is
that, if the edge has a port, the edge will not be pointing to the
center of the node. In this case, rather than use the control point
and center point, one can use the control point and its tangent.
Arrange that the input graph uses headclip=false or
tailclip=false. In this case, the edge will terminate at
the node's center rather than its boundary. If arrowheads are used,
there will still be a gap, but normally this will occur within the
node. The application will still need to clip the spline to the node
boundary. Also, as with the previous item, if the edge points to
a node port, this technique will fail.



The output consists of one graph line, a sequence of
node lines, one per node, a sequence of
edge lines, one per edge, and a final stop
line. All units are in inches, represented by a floating point number.
Note that the plain formats provide minimal information, really giving not
much more than node positions and sizes, and edge spline control points.
These formats are usually most useful to applications wanting just this
geometric information, and willing to fill in all of the graphical details.
The only real advantages to these formats is their terseness and their
ease of parsing. In general, the dot and
xdot are preferable in terms of the quantity of
information provided.

	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    PNG
  

            

Usage:


$ dot -Tpng input.dot



	PNG
	Portable Network Graphics
	
		

	Produces output in the PNG (Portable Network Graphics) format.
(25 November 2014) A standard Graphviz installation will render using both
the Cairo and GD library.
By mixing the rendering and formatting of these
libraries, one can achieve different variations in the output.

-Tpng:gd (or -Tpng:gd:gd)
Indexed color, no antialiasing
-Tpng:cairo:gd
Indexed color, with antialiasing
-Tpng (or -Tpng:cairo)
True color, with antialiasing

These options are listed in increasing order of image quality and output size.

	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    POV-Ray
  

            

Usage:


$ dot -Tpov input.dot



	POV-Ray
	Persistence of Vision Raytracer (prototype)
	
		

	Scene-description language for 3D modelling for the
Persistence of Vision Raytracer.

    

      Example: simple graph, rendered with -Tpov
    

    
$ echo 'digraph { a->b }' | dot -Tpov
#version 3.6;
global_settings { assumed_gamma 1.0 }
#default { finish { ambient 0.1 diffuse 0.9 } }
#include "colors.inc"
#include "textures.inc"
#include "shapes.inc"
#declare black = Black;
#declare white = White;
//*** begin_graph %3
camera { location <31.000 , 58.000 , -500.000>
         look_at  <31.000 , 58.000 , 0.000>
         right x * image_width / image_height
         angle 15.880
}
//sky
plane { <0, 1, 0>, 1 hollow
    texture {
        pigment { bozo turbulence 0.95
            color_map {
                [0.00 rgb <0.05, 0.20, 0.50>]
                [0.50 rgb <0.05, 0.20, 0.50>]
                [0.75 rgb <1.00, 1.00, 1.00>]
                [0.75 rgb <0.25, 0.25, 0.25>]
                [1.00 rgb <0.50, 0.50, 0.50>]
            }
            scale <1.00, 1.00, 1.50> * 2.50
            translate <0.00, 0.00, 0.00>
        }
        finish { ambient 1 diffuse 0 }
    }
    scale 10000
}
//mist
fog { fog_type 2
    distance 50
    color rgb <1.00, 1.00, 1.00> * 0.75
    fog_offset 0.10
    fog_alt 1.50
    turbulence 1.75
}
//gnd
plane { <0.00, 1.00, 0.00>, 0
    texture {
        pigment{ color rgb <0.25, 0.45, 0.00> }
        normal { bumps 0.75 scale 0.01 }
        finish { phong 0.10 }
    }
}
light_source { <1500,3000,-2500> color White }
//*** begin_page
//*** comment: a
//*** begin_node: a
//*** ellipse
torus { 1.000, 0.056
    scale    <   27.000,    11.250,    18.000>
    rotate   <   90.000,     0.000,     0.000>
    translate<   31.000,    94.000,    -6.000>
    pigment { color black transmit 0.000 }
}
//*** textspan: a, fontsize = 14.000, fontname = Times-Roman
text {
    ttf "Times-Roman",
    "a", 0.250, 0.000
        no_shadow
    scale 14.000
    rotate   <    0.000,     0.000,     0.000>
    translate<   27.500,    87.500,    -9.000>
    pigment { color black transmit 0.000 }
}
//*** end_node
//*** comment: b
//*** begin_node: b
//*** ellipse
torus { 1.000, 0.056
    scale    <   27.000,    11.250,    18.000>
    rotate   <   90.000,     0.000,     0.000>
    translate<   31.000,    22.000,    -6.000>
    pigment { color black transmit 0.000 }
}
//*** textspan: b, fontsize = 14.000, fontname = Times-Roman
text {
    ttf "Times-Roman",
    "b", 0.250, 0.000
        no_shadow
    scale 14.000
    rotate   <    0.000,     0.000,     0.000>
    translate<   27.500,    15.500,    -9.000>
    pigment { color black transmit 0.000 }
}
//*** end_node
//*** comment: a->b
//*** begin_edge
//*** bezier
sphere_sweep {
    b_spline
    6,
    <   31.000,    75.697,     0.000>, 1.000
    <   31.000,    75.697,     0.000>, 1.000
    <   31.000,    67.983,     0.000>, 1.000
    <   31.000,    58.712,     0.000>, 1.000
    <   31.000,    50.112,     0.000>, 1.000
    <   31.000,    50.112,     0.000>, 1.000
        tolerance 0.01
    scale    <    1.000,     1.000,     1.000>
    rotate   <    0.000,     0.000,     0.000>
    translate<    0.000,     0.000,   -11.000>
    pigment { color black transmit 0.000 }
}
//*** polygon
sphere_sweep {
    linear_spline
    4,
    <   34.500,    50.104,     0.000>, 1.000
    <   31.000,    40.104,     0.000>, 1.000
    <   27.500,    50.104,     0.000>, 1.000
    <   34.500,    50.104,     0.000>, 1.000
    tolerance 0.1
    scale    <    1.000,     1.000,     1.000>
    rotate   <    0.000,     0.000,     0.000>
    translate<    0.000,     0.000,    -9.000>
    pigment { color black transmit 0.000 }
}
polygon { 3,

    <   34.500,    50.104,     0.000>
    <   31.000,    40.104,     0.000>
    <   27.500,    50.104,     0.000>
    scale    <    1.000,     1.000,     1.000>
    rotate   <    0.000,     0.000,     0.000>
    translate<    0.000,     0.000,    -9.000>
    pigment { color black transmit 0.250 }
}
//*** end_edge
//*** end_page
//*** end_graph

  


	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    PS
  

            

Usage:


$ dot -Tps input.dot



	PS
	Adobe PostScript
	
		

	Produces Adobe PostScript format output.
Note: The default PostScript renderer can only handle the Latin-1
character set. To get non-Latin-1 characters into PostScript output,
use -Tps:cairo, assuming your version was built with the
Cairo renderer.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    PS/PDF
  

            

Usage:


$ dot -Tps2 input.dot



	PS/PDF
	Adobe PostScript for Portable Document Format
	
		

	Produces PostScript output with PDF notations.
It is assumed the output
will be directly converted into PDF format. The notations include PDF
bounding box information, so that the resulting PDF file can be correctly
used with pdf tools, such as pdflatex.
In addition, if a node has a URL
attribute, this gets translated into PDF code such that the node,
when viewed in a PDF-viewer, e.g.,
Adobe Acrobat,
is a link to the given URL. If a URL is attached to the graph, this serves
as a base, such that relative URLs on nodes are derived from it.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    PSD
  

            

Usage:


$ dot -Tpsd input.dot



	PSD
	Photoshop
	
		

	Output in the Adobe PhotoShop PSD file format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    SGI
  

            

Usage:


$ dot -Tsgi input.dot



	SGI
	Silicon Graphics Image
	
		

	Output in the SGI (Silicon Graphics Image) file format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    SVG
  

            

Usage:


$ dot -Tsvg input.dot
$ dot -Tsvgz input.dot
$ dot -Tsvg_inline input.dot



	SVG
	Scalable Vector Graphics
	
		

	svg produces SVG output.
svgz produces compressed SVGs.
svg_inline, available since Graphviz 10.0.1, produces header-less SVG suitable
for inlining into HTML.
See ID Output Note. Using Cairo as a renderer instead of
the built-in SVG support via -Tsvg:cairo may produce a better looking image at
the cost of a less readable/transformable SVG XML.

    

      Example: simple graph rendered with -Tsvg
    

    
$ echo 'digraph { a->b }' | dot -Tsvg
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.47.1 (20210417.1919)
 -->
<!-- Pages: 1 -->
<svg width="62pt" height="116pt"
 viewBox="0.00 0.00 62.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-112 58,-112 58,4 -4,4"/>
<!-- a -->
<g id="node1" class="node">
<title>a</title>
<ellipse fill="none" stroke="black" cx="27" cy="-90" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-86.3" font-family="Times,serif" font-size="14.00">a</text>
</g>
<!-- b -->
<g id="node2" class="node">
<title>b</title>
<ellipse fill="none" stroke="black" cx="27" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-14.3" font-family="Times,serif" font-size="14.00">b</text>
</g>
<!-- a&#45;&gt;b -->
<g id="edge1" class="edge">
<title>a&#45;&gt;b</title>
<path fill="none" stroke="black" d="M27,-71.7C27,-63.98 27,-54.71 27,-46.11"/>
<polygon fill="black" stroke="black" points="30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1"/>
</g>
</g>
</svg>

  


	
  Last modified January 12, 2025: document '-Tsvg_inline' (6d17c18)\n\n\n\nDocumentation
  
    Output Formats
  
    TGA
  

            

Usage:


$ dot -Ttga input.dot



	TGA
	Truevision TARGA
	
		

	Output in the Truevision TGA or TARGA format.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    TIFF
  

            

Usage:


$ dot -Ttif input.dot
$ dot -Ttiff input.dot



	TIFF
	Tag Image File Format
	
		

	Produces TIFF output.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    Tk
  

            

Usage:


$ dot -Ttk input.dot



	Tk
	Tcl/Tk
	
		

	Output using the text-based Tcl/Tk graphics primitives.
Example outputs of a simple graph with two nodes connected with an edge:

    

      Example: simple graph rendered with -Ttk
    

    
$ echo 'digraph { a->b }' | dot -Ttk
# Generated by graphviz version 2.47.1 (20210417.1919)
# Title: %3 Pages: 1
# a
$c create oval 5.3333 53.3333 77.3333 5.3333 -fill white -width 1 -outline black -tags {1node0x75509df0}
$c create text 41.3333 30.3 -text {a} -fill black -font {"Times" 14} -tags {0node0x75509df0}
# b
$c create oval 5.3333 149.3333 77.3333 101.3333 -fill white -width 1 -outline black -tags {1node0x75509f10}
$c create text 41.3333 126.3 -text {b} -fill black -font {"Times" 14} -tags {0node0x75509f10}
# a->b
$c create line 41.3333 53.7378 41.3333 64.023 41.3333 76.3834 41.3333 87.8501 -fill black -width 1 -smooth bezier  -tags {1edge0x5}
$c create polygon 46.0001 87.8609 41.3333 101.1942 36.6668 87.8608 -fill black -width 1 -outline black -tags {1edge0x5}

  


	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    VML
  

            

Usage:


$ dot -Tvml input.dot
$ dot -Tvmlz input.dot



	VML
	Vector Markup Language.
	
		

	Deprecated: Removed in Graphviz 8.0.1.
Produces VML output,
the latter in compressed format.
VML is obsolete, superseded by SVG.
See ID Output Note.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    VRML
  

            

Usage:


$ dot -Tvrml input.dot



	VRML
	Virtual Reality Modeling Language
	
		

	Outputs graphs in the VRML format.
To get a 3D embedding, nodes must have a z
attribute. These can either be supplied as part of the input graph, or
be generated by neato provided dim=3
and at least one node has a z value.
Line segments are drawn as cylinders.
In general, VRML output relies on having the PNG library to produce images
used to texture-fill the node shapes. However, if
shape=point,
a node is drawn as a 3D sphere.

    

      Example: simple graph, rendered with -Tvrml
    

    
$ echo 'digraph { a->b }' | dot -Tvrml
#VRML V2.0 utf8
Group { children [
  Transform {
    scale 0.028 0.028 0.028
    children [
 Background { skyColor 1.000 1.000 1.000 }
# node a
Transform {
  translation 27.000 90.000 0.000
  scale 27.000 18.000 1
  children [
    Transform {
      rotation 1 0 0   1.57
      children [
        Shape {
          geometry Cylinder { side FALSE }
          appearance Appearance {
            material Material {
              ambientIntensity 0.33
              diffuseColor 1 1 1
            }
            texture ImageTexture { url "node1.png" }
          }
        }
      ]
    }
  ]
}
# node b
Transform {
  translation 27.000 18.000 0.000
  scale 27.000 18.000 1
  children [
    Transform {
      rotation 1 0 0   1.57
      children [
        Shape {
          geometry Cylinder { side FALSE }
          appearance Appearance {
            material Material {
              ambientIntensity 0.33
              diffuseColor 1 1 1
            }
            texture ImageTexture { url "node2.png" }
          }
        }
      ]
    }
  ]
}
# edge a -> b
 Group { children [
Transform {
  children [
    Shape {
      geometry Cylinder {
        bottom FALSE top FALSE
        height 25.584 radius 1.000 }
      appearance Appearance {
        material Material {
          ambientIntensity 0.33
          diffuseColor 0.000 0.000 0.000
        }
      }
    }
Transform {
  translation 0 17.792 0
  children [
    Shape {
      geometry Cone {bottomRadius 3.500 height 10.000 }
      appearance Appearance {
        material Material {
          ambientIntensity 0.33
          diffuseColor 0.000 0.000 0.000
        }
      }
    }
  ]
}
      ]
      center 0 5.000 0
      rotation -0.000 0 1.000 -3.142
      translation 27.000 49.000 0.000
    }
] }
  ] }
  Viewpoint {position 1.000 2.000 6.438}
] }

  


	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Output Formats
  
    VT100
  

            

Usage:


$ dot -Tvt input.dot
$ dot -Tvt-24bit input.dot
$ dot -Tvt-4up input.dot
$ dot -Tvt-6up input.dot
$ dot -Tvt-8up input.dot



	VT100
	Terminal-based graph output
	
		

	Since Graphviz 9.0.0, on non-Windows platforms the VT100 formats are available
to generate output in a style for consumption by a
VT100-like terminal:

vt: 2-pixels-per-terminal-cell in 3-bit color
vt-24bit: 2-pixels-per-terminal-cell in 24-bit color
vt-4up: 4-pixels-per-terminal-cell in monochrome
vt-6up: 6-pixels-per-terminal-cell in monochrome
vt-8up: 8-pixels-per-terminal-cell in monochrome

These formats use UTF-8 characters for representing pixels, and thus assume a
UTF-8-capable terminal and locale.

	
  Last modified January 12, 2025: document '-Tvt…' (85c9b23)\n\n\n\nDocumentation
  
    Output Formats
  
    WBMP
  

            

Usage:


$ dot -Twbmp input.dot



	WBMP
	Wireless Bitmap
	
		

	Produces output in the monochrome Wireless BitMap (WBMP)
format,
optimized for mobile computing.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    WebP
  

            

Usage:


$ dot -Twebp input.dot



	WebP
	WebP
	
		

	Produces output in the image format for the Web (WEBP) format, optimized for
web devices such as tablets.
See Wikipedia's WebP
or Google's WebP pages.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Output Formats
  
    X11
  

            

Usage:


$ dot -Txlib input.dot
$ dot -Tx11 input.dot



	X11
	X11 Window
	
		

	Creates an Xlib (X11) window and displays the output there.
xlib is an alias for x11.

	
  Last modified March 9, 2024: Rename output 'params' field so it works with latest Hugo (1cdaa8c)\n\n\n\nDocumentation
  
    Attributes
  

            

	Attributes
        Instructions to customise the layout of Graphviz nodes, edges, graphs, subgraphs, and clusters.
	



The table below describes the attributes used by various Graphviz tools.
The table gives the name of the attribute, the graph components (node,
edge, etc.) which use the attribute and the type of the attribute
(strings representing legal values of that type). Where applicable, the table
also gives a default value for the attribute, a minimum allowed setting
for numeric attributes, and certain restrictions on the use of the attribute.
Note that attribute names are case-sensitive.
This is usually true for attribute values as well, unless noted.
All Graphviz attributes are specified by name-value pairs. Thus, to
set the color of a node abc, one would use




  
  
    
    digraph {
  abc [color = red]
}
  
     Edit in Playground
    
  



Similarly, to set the arrowhead style of an edge abc -> def,
one would use:




  
  
    
    digraph {
  abc -> def [arrowhead = diamond]
}
  
     Edit in Playground
    
  



Further details concerning the setting of attributes can be found
in the description of the DOT language.
At present, most device-independent units are either inches or
points,
which we take as 72 points per inch.

Note: Some attributes, such as
dir or arrowtail, are ambiguous when used in
DOT with an undirected graph since the head and tail of an edge
are meaningless. As a convention, the first time an undirected edge appears,
the DOT
parser will assign the left node as the tail node and the right node as
the head. For example, the edge A -- B will have tail A
and head B. It is the user's responsibility to handle such
edges consistently. If the edge appears later, in the format




  
  
    
    graph {
  B -- A [taillabel = "tail"]
}
  
     Edit in Playground
    
  



the drawing will attach the tail label to node A.
To avoid possible confusion when such attributes are required, the user
is encouraged to use a directed graph.
If it is important to make the graph appear undirected, this can be
done using the dir, arrowtail or
arrowhead attributes.

The tools accept standard C representations for int and
double types.
For the bool type, TRUE values are
represented by true or yes (case-insensitive)
and any non-zero integer, and FALSE values by false or no (case-insensitive)
and zero.
In addition, there are a variety of specialized types such as
arrowType, color,
point and rankdir. Legal values for these types are given
at the end.

The Used By column field indicates which graph component(s) the attribute applies to.
In the Notes field, an annotation of write only
indicates that the attribute is used for output, and is not used or read by any
of the layout programs.




  Name
  Used By
  Type
  Default
  Minimum
  Description, notes



  _background
  Graphs
  xdot
  <none>
  
  
  A string in the xdot format specifying an arbitrary background. 
  
  



  area
  Nodes, Clusters
  double
  1.0
  >0
  
  Indicates the preferred area for a node or empty cluster. 
  patchwork only.
  



  arrowhead
  Edges
  arrowType
  normal
  
  
  Style of arrowhead on the head node of an edge. 
  
  



  arrowsize
  Edges
  double
  1.0
  0.0
  
  Multiplicative scale factor for arrowheads. 
  
  



  arrowtail
  Edges
  arrowType
  normal
  
  
  Style of arrowhead on the tail node of an edge. 
  
  



  bb
  Clusters, Graphs
  rect
  
  
  
  Bounding box of drawing in points. 
  write only.
  



  beautify
  Graphs
  bool
  false
  
  
  Whether to draw leaf nodes uniformly in a circle around the root node in sfdp.. 
  sfdp only.
  



  bgcolor
  Graphs, Clusters
  color, colorList
  <none>
  
  
  Canvas background color. 
  
  



  center
  Graphs
  bool
  false
  
  
  Whether to center the drawing in the output canvas. 
  
  



  charset
  Graphs
  string
  "UTF-8"
  
  
  Character encoding used when interpreting string input as a text label.. 
  
  



  class
  Edges, Nodes, Clusters, Graphs
  string
  ""
  
  
  Classnames to attach to the node, edge, graph, or cluster's SVG element. 
  svg only.
  



  cluster
  Clusters, Subgraphs
  bool
  false
  
  
  Whether the subgraph is a cluster. 
  
  



  clusterrank
  Graphs
  clusterMode
  local
  
  
  Mode used for handling clusters. 
  dot only.
  



  color
  Edges, Nodes, Clusters
  color, colorList
  black
  
  
  Basic drawing color for graphics, not text. 
  
  



  colorscheme
  Edges, Nodes, Clusters, Graphs
  string
  ""
  
  
  A color scheme namespace: the context for interpreting color names. 
  
  



  comment
  Edges, Nodes, Graphs
  string
  ""
  
  
  Comments are inserted into output. 
  
  



  compound
  Graphs
  bool
  false
  
  
  If true, allow edges between clusters. 
  dot only.
  



  concentrate
  Graphs
  bool
  false
  
  
  If true, use edge concentrators. 
  
  



  constraint
  Edges
  bool
  true
  
  
  If false, the edge is not used in ranking the nodes. 
  dot only.
  



  Damping
  Graphs
  double
  0.99
  0.0
  
  Factor damping force motions.. 
  neato only.
  



  decorate
  Edges
  bool
  false
  
  
  Whether to connect the edge label to the edge with a line. 
  
  



  defaultdist
  Graphs
  double
  1+(avg. len)*sqrt(|V|)
  epsilon
  
  The distance between nodes in separate connected components. 
  neato only.
  



  dim
  Graphs
  int
  2
  2
  
  Set the number of dimensions used for the layout. 
  neato, fdp, sfdp only.
  



  dimen
  Graphs
  int
  2
  2
  
  Set the number of dimensions used for rendering. 
  neato, fdp, sfdp only.
  



  dir
  Edges
  dirType
  forward (directed) none (undirected) 
  
  
  Edge type for drawing arrowheads. 
  
  



  diredgeconstraints
  Graphs
  string, bool
  false
  
  
  Whether to constrain most edges to point downwards. 
  neato only.
  



  distortion
  Nodes
  double
  0.0
  -100.0
  
  Distortion factor for shape=polygon. 
  
  



  dpi
  Graphs
  double
  96.0
  0.0
  
  Specifies the expected number of pixels per inch on a display device. 
  bitmap output, svg only.
  



  edgehref
  Edges
  escString
  ""
  
  
  Synonym for edgeURL. 
  map, svg only.
  



  edgetarget
  Edges
  escString
  <none>
  
  
  Browser window to use for the edgeURL link. 
  map, svg only.
  



  edgetooltip
  Edges
  escString
  ""
  
  
  Tooltip annotation attached to the non-label part of an edge. 
  cmap, svg only.
  



  edgeURL
  Edges
  escString
  ""
  
  
  The link for the non-label parts of an edge. 
  map, svg only.
  



  epsilon
  Graphs
  double
  .0001 * # nodes (mode == KK) .0001 (mode == major) .01 (mode == sgd) 
  
  
  Terminating condition. 
  neato only.
  



  esep
  Graphs
  addDouble, addPoint
  +3
  
  
  Margin used around polygons for purposes of spline edge routing. 
  neato, fdp, sfdp, osage, circo, twopi only.
  



  fillcolor
  Nodes, Edges, Clusters
  color, colorList
  lightgrey (nodes) black (clusters) 
  
  
  Color used to fill the background of a node or cluster. 
  
  



  fixedsize
  Nodes
  bool, string
  false
  
  
  Whether to use the specified width and height attributes to choose node size (rather than sizing to fit the node contents). 
  
  



  fontcolor
  Edges, Nodes, Graphs, Clusters
  color
  black
  
  
  Color used for text. 
  
  



  fontname
  Edges, Nodes, Graphs, Clusters
  string
  "Times-Roman"
  
  
  Font used for text. 
  
  



  fontnames
  Graphs
  string
  ""
  
  
  Allows user control of how basic fontnames are represented in SVG output. 
  svg only.
  



  fontpath
  Graphs
  string
  <system-dependent>
  
  
  Directory list used by libgd to search for bitmap fonts. 
  
  



  fontsize
  Edges, Nodes, Graphs, Clusters
  double
  14.0
  1.0
  
  Font size, in points, used for text. 
  
  



  forcelabels
  Graphs
  bool
  true
  
  
  Whether to force placement of all xlabels, even if overlapping. 
  
  



  gradientangle
  Nodes, Clusters, Graphs
  int
  0
  0
  
  If a gradient fill is being used, this determines the angle of the fill. 
  
  



  group
  Nodes
  string
  ""
  
  
  Name for a group of nodes, for bundling edges avoiding crossings.. 
  dot only.
  



  head_lp
  Edges
  point
  
  
  
  Center position of an edge's head label. 
  write only.
  



  headclip
  Edges
  bool
  true
  
  
  If true, the head of an edge is clipped to the boundary of the head node. 
  
  



  headhref
  Edges
  escString
  ""
  
  
  Synonym for headURL. 
  map, svg only.
  



  headlabel
  Edges
  lblString
  ""
  
  
  Text label to be placed near head of edge. 
  
  



  headport
  Edges
  portPos
  center
  
  
  Indicates where on the head node to attach the head of the edge. 
  
  



  headtarget
  Edges
  escString
  <none>
  
  
  Browser window to use for the headURL link. 
  map, svg only.
  



  headtooltip
  Edges
  escString
  ""
  
  
  Tooltip annotation attached to the head of an edge. 
  cmap, svg only.
  



  headURL
  Edges
  escString
  ""
  
  
  If defined, headURL is output as part of the head label of the edge. 
  map, svg only.
  



  height
  Nodes
  double
  0.5
  0.02
  
  Height of node, in inches. 
  
  



  href
  Graphs, Clusters, Nodes, Edges
  escString
  ""
  
  
  Synonym for URL. 
  map, postscript, svg only.
  



  id
  Graphs, Clusters, Nodes, Edges
  escString
  ""
  
  
  Identifier for graph objects. 
  map, postscript, svg only.
  



  image
  Nodes
  string
  ""
  
  
  Gives the name of a file containing an image to be displayed inside a node. 
  
  



  imagepath
  Graphs
  string
  ""
  
  
  A list of directories in which to look for image files. 
  
  



  imagepos
  Nodes
  string
  "mc"
  
  
  Controls how an image is positioned within its containing node. 
  
  



  imagescale
  Nodes
  bool, string
  false
  
  
  Controls how an image fills its containing node. 
  
  



  inputscale
  Graphs
  double
  <none>
  
  
  Scales the input positions to convert between length units. 
  neato, fdp only.
  



  K
  Graphs, Clusters
  double
  0.3
  0
  
  Spring constant used in virtual physical model. 
  fdp, sfdp only.
  



  label
  Edges, Nodes, Graphs, Clusters
  lblString
  "\N" (nodes) "" (otherwise) 
  
  
  Text label attached to objects. 
  
  



  label_scheme
  Graphs
  int
  0
  0
  
  Whether to treat a node whose name has the form |edgelabel|* as a special node representing an edge label.. 
  sfdp only.
  



  labelangle
  Edges
  double
  -25.0
  -180.0
  
  The angle (in degrees) in polar coordinates of the head & tail edge labels.. 
  
  



  labeldistance
  Edges
  double
  1.0
  0.0
  
  Scaling factor for the distance of headlabel / taillabel from the head / tail nodes.. 
  
  



  labelfloat
  Edges
  bool
  false
  
  
  If true, allows edge labels to be less constrained in position. 
  
  



  labelfontcolor
  Edges
  color
  black
  
  
  Color used for headlabel and taillabel.. 
  
  



  labelfontname
  Edges
  string
  "Times-Roman"
  
  
  Font for headlabel and taillabel. 
  
  



  labelfontsize
  Edges
  double
  14.0
  1.0
  
  Font size of headlabel and taillabel. 
  
  



  labelhref
  Edges
  escString
  ""
  
  
  Synonym for labelURL. 
  map, svg only.
  



  labeljust
  Graphs, Clusters
  string
  "c"
  
  
  Justification for graph & cluster labels. 
  
  



  labelloc
  Nodes, Graphs, Clusters
  string
  "t" (clusters) "b" (root graphs) "c" (nodes) 
  
  
  Vertical placement of labels for nodes, root graphs and clusters. 
  
  



  labeltarget
  Edges
  escString
  <none>
  
  
  Browser window to open labelURL links in. 
  map, svg only.
  



  labeltooltip
  Edges
  escString
  ""
  
  
  Tooltip annotation attached to label of an edge. 
  cmap, svg only.
  



  labelURL
  Edges
  escString
  ""
  
  
  If defined, labelURL is the link used for the label of an edge. 
  map, svg only.
  



  landscape
  Graphs
  bool
  false
  
  
  If true, the graph is rendered in landscape mode. 
  
  



  layer
  Edges, Nodes, Clusters
  layerRange
  ""
  
  
  Specifies layers in which the node, edge or cluster is present. 
  
  



  layerlistsep
  Graphs
  string
  ","
  
  
  The separator characters used to split attributes of type layerRange into a list of ranges.. 
  
  



  layers
  Graphs
  layerList
  ""
  
  
  A linearly ordered list of layer names attached to the graph. 
  
  



  layerselect
  Graphs
  layerRange
  ""
  
  
  Selects a list of layers to be emitted. 
  
  



  layersep
  Graphs
  string
  ":\t "
  
  
  The separator characters for splitting the layers attribute into a list of layer names.. 
  
  



  layout
  Graphs
  string
  ""
  
  
  Which layout engine to use. 
  
  



  len
  Edges
  double
  1.0 (neato) 0.3 (fdp) 
  
  
  Preferred edge length, in inches. 
  neato, fdp only.
  



  levels
  Graphs
  int
  INT_MAX
  0.0
  
  Number of levels allowed in the multilevel scheme. 
  sfdp only.
  



  levelsgap
  Graphs
  double
  0.0
  
  
  strictness of neato level constraints. 
  neato only.
  



  lhead
  Edges
  string
  ""
  
  
  Logical head of an edge. 
  dot only.
  



  lheight
  Graphs, Clusters
  double
  
  
  
  Height of graph or cluster label, in inches. 
  write only.
  



  linelength
  Graphs
  int
  128
  60
  
  How long strings should get before overflowing to next line, for text output.. 
  
  



  lp
  Edges, Graphs, Clusters
  point
  
  
  
  Label center position. 
  write only.
  



  ltail
  Edges
  string
  ""
  
  
  Logical tail of an edge. 
  dot only.
  



  lwidth
  Graphs, Clusters
  double
  
  
  
  Width of graph or cluster label, in inches. 
  write only.
  



  margin
  Nodes, Clusters, Graphs
  double, point
  <device-dependent>
  
  
  For graphs, this sets x and y margins of canvas, in inches. 
  
  



  maxiter
  Graphs
  int
  100 * # nodes (mode == KK) 200 (mode == major) 30 (mode == sgd) 600 (fdp) 
  
  
  Sets the number of iterations used. 
  neato, fdp only.
  



  mclimit
  Graphs
  double
  1.0
  
  
  Scale factor for mincross (mc) edge crossing minimiser parameters. 
  dot only.
  



  mindist
  Graphs
  double
  1.0
  0.0
  
  Specifies the minimum separation between all nodes. 
  circo only.
  



  minlen
  Edges
  int
  1
  0
  
  Minimum edge length (rank difference between head and tail). 
  dot only.
  



  mode
  Graphs
  string
  major
  
  
  Technique for optimizing the layout. 
  neato only.
  



  model
  Graphs
  string
  shortpath
  
  
  Specifies how the distance matrix is computed for the input graph. 
  neato only.
  



  newrank
  Graphs
  bool
  false
  
  
  Whether to use a single global ranking, ignoring clusters. 
  dot only.
  



  nodesep
  Graphs
  double
  0.25
  0.02
  
  In dot, nodesep specifies the minimum space between two adjacent nodes in the same rank, in inches. 
  
  



  nojustify
  Graphs, Clusters, Nodes, Edges
  bool
  false
  
  
  Whether to justify multiline text vs the previous text line (rather than the side of the container).. 
  
  



  normalize
  Graphs
  double, bool
  false
  
  
  normalizes coordinates of final layout. 
  neato, fdp, sfdp, twopi, circo only.
  



  notranslate
  Graphs
  bool
  false
  
  
  Whether to avoid translating layout to the origin point. 
  neato only.
  



  nslimit
  Graphs
  double
  
  
  
  Sets number of iterations in network simplex applications. 
  dot only.
  



  nslimit1
  Graphs
  double
  
  
  
  Sets number of iterations in network simplex applications. 
  dot only.
  



  oneblock
  Graphs
  bool
  false
  
  
  Whether to draw circo graphs around one circle.. 
  circo only.
  



  ordering
  Graphs, Nodes
  string
  ""
  
  
  Constrains the left-to-right ordering of node edges.. 
  dot only.
  



  orientation
  Nodes, Graphs
  double, string
  0.0""
  -360.0
  
  node shape rotation angle, or graph orientation. 
  
  



  outputorder
  Graphs
  outputMode
  breadthfirst
  
  
  Specify order in which nodes and edges are drawn. 
  
  



  overlap
  Graphs
  string, bool
  true
  
  
  Determines if and how node overlaps should be removed. 
  fdp, neato, sfdp, circo, twopi only.
  



  overlap_scaling
  Graphs
  double
  -4
  -1e+10
  
  Scale layout by factor, to reduce node overlap.. 
  prism, neato, sfdp, fdp, circo, twopi only.
  



  overlap_shrink
  Graphs
  bool
  true
  
  
  Whether the overlap removal algorithm should perform a compression pass to reduce the size of the layout. 
  prism only.
  



  pack
  Graphs
  bool, int
  false
  
  
  Whether each connected component of the graph should be laid out separately, and then the graphs packed together.. 
  
  



  packmode
  Graphs
  packMode
  node
  
  
  How connected components should be packed. 
  
  



  pad
  Graphs
  double, point
  0.0555  (4 points)
  
  
  Inches to extend the drawing area around the minimal area needed to draw the graph. 
  
  



  page
  Graphs
  double, point
  
  
  
  Width and height of output pages, in inches. 
  
  



  pagedir
  Graphs
  pagedir
  BL
  
  
  The order in which pages are emitted. 
  
  



  pencolor
  Clusters
  color
  black
  
  
  Color used to draw the bounding box around a cluster. 
  
  



  penwidth
  Clusters, Nodes, Edges
  double
  1.0
  0.0
  
  Specifies the width of the pen, in points, used to draw lines and curves. 
  
  



  peripheries
  Nodes, Clusters
  int
  <shape default> (nodes) 1 (clusters) 
  0
  
  Set number of peripheries used in polygonal shapes and cluster boundaries. 
  
  



  pin
  Nodes
  bool
  false
  
  
  Keeps the node at the node's given input position. 
  neato, fdp only.
  



  pos
  Edges, Nodes
  point, splineType
  
  
  
  Position of node, or spline control points. 
  neato, fdp only.
  



  quadtree
  Graphs
  quadType, bool
  normal
  
  
  Quadtree scheme to use. 
  sfdp only.
  



  quantum
  Graphs
  double
  0.0
  0.0
  
  If quantum > 0.0, node label dimensions will be rounded to integral multiples of the quantum. 
  
  



  rank
  Subgraphs
  rankType
  
  
  
  Rank constraints on the nodes in a subgraph. 
  dot only.
  



  rankdir
  Graphs
  rankdir
  TB
  
  
  Sets direction of graph layout. 
  dot only.
  



  ranksep
  Graphs
  double, doubleList
  0.5 (dot) 1.0 (twopi) 
  0.02
  
  Specifies separation between ranks. 
  dot, twopi only.
  



  ratio
  Graphs
  double, string
  
  
  
  Sets the aspect ratio (drawing height/drawing width) for the drawing. 
  
  



  rects
  Nodes
  rect
  
  
  
  Rectangles for fields of records, in points. 
  write only.
  



  regular
  Nodes
  bool
  false
  
  
  If true, force polygon to be regular.. 
  
  



  remincross
  Graphs
  bool
  true
  
  
  If there are multiple clusters, whether to run edge crossing minimization a second time.. 
  dot only.
  



  repulsiveforce
  Graphs
  double
  1.0
  0.0
  
  The power of the repulsive force used in an extended Fruchterman-Reingold. 
  sfdp only.
  



  resolution
  Graphs
  double
  96.0
  0.0
  
  Synonym for dpi.. 
  bitmap output, svg only.
  



  root
  Graphs, Nodes
  string, bool
  <none> (graphs) false (nodes) 
  
  
  Specifies nodes to be used as the center of the layout. 
  twopi, circo only.
  



  rotate
  Graphs
  int
  0
  
  
  If rotate=90, sets drawing orientation to landscape. 
  
  



  rotation
  Graphs
  double
  0
  
  
  Rotates the final layout counter-clockwise by the specified number of degrees. 
  sfdp only.
  



  samehead
  Edges
  string
  ""
  
  
  Edges with the same head and the same samehead value are aimed at the same point on the head. 
  dot only.
  



  sametail
  Edges
  string
  ""
  
  
  Edges with the same tail and the same sametail value are aimed at the same point on the tail.. 
  dot only.
  



  samplepoints
  Nodes
  int
  8 (output) 20 (overlap and image maps) 
  
  
  Gives the number of points used for a circle/ellipse node. 
  
  



  scale
  Graphs
  double, point
  
  
  
  Scales layout by the given factor after the initial layout. 
  neato, twopi only.
  



  searchsize
  Graphs
  int
  30
  
  
  During network simplex, the maximum number of edges with negative cut values to search when looking for an edge with minimum cut value.. 
  dot only.
  



  sep
  Graphs
  addDouble, addPoint
  +4
  
  
  Margin to leave around nodes when removing node overlap. 
  fdp, neato, sfdp, osage, circo, twopi only.
  



  shape
  Nodes
  shape
  ellipse
  
  
  Sets the shape of a node. 
  
  



  shapefile
  Nodes
  string
  ""
  
  
  A file containing user-supplied node content. 
  
  



  showboxes
  Edges, Nodes, Graphs
  int
  0
  0
  
  Print guide boxes for debugging. 
  dot only.
  



  sides
  Nodes
  int
  4
  0
  
  Number of sides when shape=polygon. 
  
  



  size
  Graphs
  double, point
  
  
  
  Maximum width and height of drawing, in inches. 
  
  



  skew
  Nodes
  double
  0.0
  -100.0
  
  Skew factor for shape=polygon. 
  
  



  smoothing
  Graphs
  smoothType
  "none"
  
  
  Specifies a post-processing step used to smooth out an uneven distribution of nodes.. 
  sfdp only.
  



  sortv
  Graphs, Clusters, Nodes
  int
  0
  0
  
  Sort order of graph components for ordering packmode packing.. 
  
  



  splines
  Graphs
  bool, string
  
  
  
  Controls how, and if, edges are represented. 
  
  



  start
  Graphs
  startType
  ""
  
  
  Parameter used to determine the initial layout of nodes. 
  neato, fdp, sfdp only.
  



  style
  Edges, Nodes, Clusters, Graphs
  style
  ""
  
  
  Set style information for components of the graph. 
  
  



  stylesheet
  Graphs
  string
  ""
  
  
  A URL or pathname specifying an XML style sheet, used in SVG output. 
  svg only.
  



  tail_lp
  Edges
  point
  
  
  
  Position of an edge's tail label, in points.. 
  write only.
  



  tailclip
  Edges
  bool
  true
  
  
  If true, the tail of an edge is clipped to the boundary of the tail node. 
  
  



  tailhref
  Edges
  escString
  ""
  
  
  Synonym for tailURL.. 
  map, svg only.
  



  taillabel
  Edges
  lblString
  ""
  
  
  Text label to be placed near tail of edge. 
  
  



  tailport
  Edges
  portPos
  center
  
  
  Indicates where on the tail node to attach the tail of the edge. 
  
  



  tailtarget
  Edges
  escString
  <none>
  
  
  Browser window to use for the tailURL link. 
  map, svg only.
  



  tailtooltip
  Edges
  escString
  ""
  
  
  Tooltip annotation attached to the tail of an edge. 
  cmap, svg only.
  



  tailURL
  Edges
  escString
  ""
  
  
  If defined, tailURL is output as part of the tail label of the edge. 
  map, svg only.
  



  target
  Edges, Nodes, Graphs, Clusters
  escString, string
  <none>
  
  
  If the object has a URL, this attribute determines which window of the browser is used for the URL.. 
  map, svg only.
  



  TBbalance
  Graphs
  string
  ''
  
  
  Which rank to move floating (loose) nodes to. 
  dot only.
  



  tooltip
  Nodes, Edges, Clusters, Graphs
  escString
  ""
  
  
  Tooltip (mouse hover text) attached to the node, edge, cluster, or graph. 
  cmap, svg only.
  



  truecolor
  Graphs
  bool
  
  
  
  Whether internal bitmap rendering relies on a truecolor color model or uses. 
  bitmap output only.
  



  URL
  Edges, Nodes, Graphs, Clusters
  escString
  <none>
  
  
  Hyperlinks incorporated into device-dependent output. 
  map, postscript, svg only.
  



  vertices
  Nodes
  pointList
  
  
  
  Sets the coordinates of the vertices of the node's polygon, in inches. 
  write only.
  



  viewport
  Graphs
  viewPort
  ""
  
  
  Clipping window on final drawing. 
  
  



  voro_margin
  Graphs
  double
  0.05
  0.0
  
  Tuning margin of Voronoi technique. 
  neato, fdp, sfdp, twopi, circo only.
  



  weight
  Edges
  int, double
  1
  0(dot,twopi)1(neato,fdp)
  
  Weight of edge. 
  
  



  width
  Nodes
  double
  0.75
  0.01
  
  Width of node, in inches. 
  
  



  xdotversion
  Graphs
  string
  
  
  
  Determines the version of xdot used in output. 
  xdot only.
  



  xlabel
  Edges, Nodes
  lblString
  ""
  
  
  External label for a node or edge. 
  
  



  xlp
  Nodes, Edges
  point
  
  
  
  Position of an exterior label, in points. 
  write only.
  



  z
  Nodes
  double
  0.0
  -MAXFLOAT-1000
  
  Z-coordinate value for 3D layouts and displays. 
  
  






  _background


A string in the xdot format specifying an arbitrary background

type: xdot, default: <none>


During rendering, the canvas is first filled as described in the
bgcolor attribute.
Then, if _background is defined, the graphics
operations described in the string are performed on the canvas.
See xdot format page for more information.




  
    
      
        Render a red square in the background
      
    
  
  
    
    digraph G {
  _background="c 7 -#ff0000 p 4 4 4 36 4 36 36 4 36";
  a -> b
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "_background"
  






  area


Indicates the preferred area for a node or empty cluster

type: double, default: 1.0, minimum: >0






  
    
      
        Example: Australian Coins, area proportional to value
      
    
  
  
    
    graph {
  layout="patchwork"
  node [style=filled]
  "5c"  [area=  5 fillcolor=silver]
  "10c" [area= 10 fillcolor=silver]
  "20c" [area= 20 fillcolor=silver]
  "50c" [area= 50 fillcolor=silver]
  "$1"  [area=100 fillcolor=gold]
  "$2"  [area=200 fillcolor=gold]
}
  
     Edit in Playground
    
  





Valid on:
NodesClusters

  Note:
  patchwork only.



  Search the Graphviz codebase for "area"
  






  arrowhead


Style of arrowhead on the head node of an edge

type: arrowType, default: normal


This will only appear if the dir attribute
is forward or both.
See the limitation.
See also:

arrowtail



Valid on:
Edges

  Search the Graphviz codebase for "arrowhead"
  






  arrowsize


Multiplicative scale factor for arrowheads

type: double, default: 1.0, minimum: 0.0






  
    
      
        Example
      
    
  
  
    
    digraph {
  quiver -> "0.5" [arrowsize=0.5]
  quiver -> "1"
  quiver -> "2" [arrowsize=2]
  quiver -> "3" [arrowsize=3]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "arrowsize"
  






  arrowtail


Style of arrowhead on the tail node of an edge

type: arrowType, default: normal


This will only appear if the dir attribute
is back or both.
See the limitation.
See also:

arrowhead



Valid on:
Edges

  Search the Graphviz codebase for "arrowtail"
  






  bb


Bounding box of drawing in points

type: rect




Valid on:
ClustersGraphs

  Note:
  write only.



  Search the Graphviz codebase for "bb"
  






  beautify


Whether to draw leaf nodes uniformly in a circle around the root node in sfdp.

type: bool, default: false


Whether to try to draw leaf nodes uniformly on a circle
around the root node.
Prior to Graphviz 8.0.1, this is affected by
Issue 2283: rendering one
fewer sector than necessary, overlapping the first and last nodes.
Examples:




  
    
      
        Beautify
      
    
  
  
    
    digraph G {
    layout="sfdp"
    beautify=true

    N0 -> {N1; N2; N3; N4; N5; N6}
}
  
     Edit in Playground
    
  







  
    
      
        No beautify
      
    
  
  
    
    digraph G {
    layout="sfdp"
    beautify=false

    N0 -> {N1; N2; N3; N4; N5; N6}
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "beautify"
  






  bgcolor


Canvas background color

type: color | colorList, default: <none>


When attached to the root graph, this color is used as the background for
entire canvas.
When a cluster attribute, it is used as the initial background
for the cluster. If a cluster has a filled style, the cluster's
fillcolor will overlay the background color.
If the value is a colorList, a gradient fill is used. By
default, this is a linear fill; setting style=radial will
cause a radial fill. Only two colors are used. If the second color (after a
colon) is missing, the default color is used for it. See also the
gradientangle attribute for setting the gradient angle.
For certain output formats, such as PostScript, no fill is done for the root
graph unless bgcolor is explicitly set.
For bitmap formats, however, the bits need to be initialized to something, so
the canvas is filled with white by default. This means that if the bitmap
output is included in some other document, all of the bits within the
bitmap's bounding box will be set, overwriting whatever color or graphics
were already on the page. If this effect is not desired, and you only want to
set bits explicitly assigned in drawing the graph, set
bgcolor="transparent".




  
    
      
        Example
      
    
  
  
    
    graph {
  bgcolor="lightblue"
  label="Home"
  subgraph cluster_ground_floor {
    bgcolor="lightgreen"
    label="Ground Floor"
    Lounge
    Kitchen
  }
  subgraph cluster_top_floor {
    bgcolor="lightyellow"
    label="Top Floor"
    Bedroom
    Bathroom
  }
}
  
     Edit in Playground
    
  





Valid on:
GraphsClusters

  Search the Graphviz codebase for "bgcolor"
  






  center


Whether to center the drawing in the output canvas

type: bool, default: false


Can be true or false.


Valid on:
Graphs

  Search the Graphviz codebase for "center"
  






  charset


Character encoding used when interpreting string input as a text label.

type: string, default: "UTF-8"


The default value is "UTF-8". The other legal values are:

"utf-8" / "utf8" (default value)
"iso-8859-1" / "ISO_8859-1" / "ISO8859-1" / "ISO-IR-100" / "Latin1" / "l1" / "latin-1"
"big-5" / "big5": the Big-5 Chinese encoding

The charset attribute is case-insensitive.
Note that if the character encoding used in the input does not match the
charset value, the resulting output may be very strange.
It is not possible to use HTML-like labels in
combination with Big-5 encoding.




  
    
      
        Example
      
    
  
  
    
    digraph G {
  charset="UTF-8"
  "🍔" -> "💩"
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "charset"
  






  class


Classnames to attach to the node, edge, graph, or cluster's SVG element

type: string, default: ""


Combine with stylesheet for styling SVG output
using CSS classnames.
Multiple space-separated classes are supported.
See also:

stylesheet
id

Example:




  
  
    
    digraph G {
  graph [class="cats"];

  subgraph cluster_big {
    graph [class="big_cats"];

    "Lion" [class="yellow social"];
    "Snow Leopard" [class="white solitary"];
  }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesClustersGraphs

  Note:
  svg only.



  Search the Graphviz codebase for "class"
  






  cluster


Whether the subgraph is a cluster

type: bool, default: false


Subgraph clusters are rendered differently, e.g. dot renders a box around subgraph clusters, but doesn't draw a box around non-subgraph clusters.
Example:




  
  
    
    digraph cats {
  subgraph cluster_big_cats {
    // This subgraph is a cluster, because the name begins with "cluster"
    
    "Lion";
    "Snow Leopard";
  }

  subgraph domestic_cats {
    // This subgraph is also a cluster, because cluster=true.
    cluster=true;

    "Siamese";
    "Persian";
  }

  subgraph not_a_cluster {
    // This subgraph is not a cluster, because it doesn't start with "cluster",
    // nor sets cluster=true.
    
    "Wildcat";
  }
}
  
     Edit in Playground
    
  





Valid on:
ClustersSubgraphs

  Search the Graphviz codebase for "cluster"
  






  clusterrank


Mode used for handling clusters

type: clusterMode, default: local


If clusterrank=local, a
subgraph whose name begins with cluster is given special treatment.
The subgraph is laid out separately, and then integrated as a unit into
its parent graph, with a bounding rectangle drawn about it.
If the cluster has a label parameter, this label
is displayed within the rectangle.
Note also that there can be clusters within clusters.
The modes clusterrank=global and clusterrank=none appear to
be identical, both turning off the special cluster processing.


Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "clusterrank"
  






  color


Basic drawing color for graphics, not text

type: color | colorList, default: black


For the latter, use the
fontcolor attribute.
For edges, the value can either be a single color or a
colorList.
In the latter case, if colorList has no fractions,
the edge is drawn using parallel splines or lines,
one for each color in the list, in the order given.
The head arrow, if any, is drawn using the first color in the list,
and the tail arrow, if any, the second color. This supports the common
case of drawing opposing edges, but using parallel splines instead of
separately routed multiedges.
If any fraction is used, the colors are drawn in series, with each color
being given roughly its specified fraction of the edge.
For example, the graph:




  
    
      
        Edge Color Example
      
    
  
  
    
    digraph G {
  a -> b [dir=both color="red:blue"]
  c -> d [dir=none color="green:red;0.25:blue"]
}
  
     Edit in Playground
    
  



yields:





  
    
      
        Subgraph & Node Color Example
      
    
  
  
    
    digraph G {
  subgraph cluster_yellow {
    color="yellow"
    a [color="red"]
    b [color="green"]
  }
}
  
     Edit in Playground
    
  



yields:

See also:

colorscheme



Valid on:
EdgesNodesClusters

  Search the Graphviz codebase for "color"
  






  colorscheme


A color scheme namespace: the context for interpreting color names

type: string, default: ""


In particular, if a color value has form "xxx" or "//xxx",
then the color xxx will be evaluated according to the current color scheme.
If no color scheme is set, the standard X11 naming is used.
For example, if colorscheme=oranges9 (from Brewer color schemes), then color=7 is interpreted as
color="/oranges9/7", the 7th color in the oranges9 colorscheme.




  
    
      
        Orange Colorscheme
      
    
  
  
    
    graph {
  node [colorscheme=oranges9] # Apply colorscheme to all nodes
  1 [color=1]
  2 [color=2]
  3 [color=3]
  4 [color=4]
  5 [color=5]
  6 [color=6]
  7 [color=7]
  8 [color=8]
  9 [color=9]
}
  
     Edit in Playground
    
  







  
    
      
        Green Colorscheme
      
    
  
  
    
    graph {
  node [colorscheme=greens9] # Apply colorscheme to all nodes
  1 [color=1]
  2 [color=2]
  3 [color=3]
  4 [color=4]
  5 [color=5]
  6 [color=6]
  7 [color=7]
  8 [color=8]
  9 [color=9]
}
  
     Edit in Playground
    
  



See also:

color



Valid on:
EdgesNodesClustersGraphs

  Search the Graphviz codebase for "colorscheme"
  






  comment


Comments are inserted into output

type: string, default: ""


Device-dependent.




  
    
      
        Example
      
    
  
  
    
    digraph {
  comment="I am a graph"
  A [comment="I am node A"]
  B [comment="I am node B"]
  A->B [comment="I am an edge"]
}
  
     Edit in Playground
    
  



Outputs SVG with comments:
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.47.1 (20210417.1919)
 -->
<!-- This is a graph -->
<!-- Pages: 1 -->
<svg width="62pt" height="116pt"
 viewBox="0.00 0.00 62.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-112 58,-112 58,4 -4,4"/>
<!-- A -->
<!-- I am node A -->
<g id="node1" class="node">
<title>A</title>
<ellipse fill="none" stroke="black" cx="27" cy="-90" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-86.3" font-family="Times,serif" font-size="14.00">A</text>
</g>
<!-- B -->
<!-- I am node B -->
<g id="node2" class="node">
<title>B</title>
<ellipse fill="none" stroke="black" cx="27" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-14.3" font-family="Times,serif" font-size="14.00">B</text>
</g>
<!-- A&#45;&gt;B -->
<!-- I am an edge -->
<g id="edge1" class="edge">
<title>A&#45;&gt;B</title>
<path fill="none" stroke="black" d="M27,-71.7C27,-63.98 27,-54.71 27,-46.11"/>
<polygon fill="black" stroke="black" points="30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1"/>
</g>
</g>
</svg>


Valid on:
EdgesNodesGraphs

  Search the Graphviz codebase for "comment"
  






  compound


If true, allow edges between clusters

type: bool, default: false


See lhead and ltail.




  
  
    
    digraph {
  compound=true;

  subgraph cluster_a {
    label="Cluster A";
    node1; node3; node5; node7;
  }
  subgraph cluster_b {
    label="Cluster B";
    node2; node4; node6; node8;
  }

  node1 -> node2 [label="1"];
  node3 -> node4 [label="2" ltail="cluster_a"];
  
  node5 -> node6 [label="3" lhead="cluster_b"];
  node7 -> node8 [label="4" ltail="cluster_a" lhead="cluster_b"];
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "compound"
  






  concentrate


If true, use edge concentrators

type: bool, default: false


This merges multiedges into a single edge and causes partially parallel
edges to share part of their paths. The latter feature is not yet available
outside of dot.
Only works for non-contiguous nodes.




  
    
      
        Example
      
    
  
  
    
    digraph {
    concentrate=true
    a -> b [label="1"]
    c -> b
    d -> b
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "concentrate"
  






  constraint


If false, the edge is not used in ranking the nodes

type: bool, default: true


For example in the graph:




  
  
    
    digraph G {
  a -> c;
  a -> b;
  b -> c [constraint=false];
}
  
     Edit in Playground
    
  



the edge b -> c does not add a constraint during rank
assignment, so the only constraints are that a be above b and c,
yielding the graph:



Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "constraint"
  






  Damping


Factor damping force motions.

type: double, default: 0.99, minimum: 0.0


On each iteration, a node's movement
is limited to this factor of its potential motion. By being less than
1.0, the system tends to "cool", thereby preventing cycling.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "Damping"
  






  decorate


Whether to connect the edge label to the edge with a line

type: bool, default: false


If true, attach edge label to edge by a 2-segment polyline,
underlining the label, then going to the closest point of spline.




  
    
      
        Example
      
    
  
  
    
    digraph {
  a -> a [label="AA" decorate=true]
  a -> b [label="AB" decorate=true]
  b -> b [label="BB" decorate=false]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "decorate"
  






  defaultdist


The distance between nodes in separate connected components

type: double, default: 1+(avg. len)*sqrt(|V|), minimum: epsilon


If set too small, connected components may overlap.
Only applicable if pack=false.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "defaultdist"
  






  dim


Set the number of dimensions used for the layout

type: int, default: 2, minimum: 2


The maximum value allowed is 10.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp only.



  Search the Graphviz codebase for "dim"
  






  dimen


Set the number of dimensions used for rendering

type: int, default: 2, minimum: 2


The maximum value allowed is 10.
If both dimen and dim are set, the latter specifies
the dimension used for layout, and the former for rendering.
If only dimen is set, this is used for both layout and rendering
dimensions.
Note that, at present, all aspects of rendering are 2D. This includes
the shape and size of nodes, overlap removal, and edge routing. Thus,
for dimen > 2, the only valid information is the pos
attribute of the nodes.
All other coordinates will be 2D and, at best, will reflect a projection
of a higher-dimensional point onto the plane.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp only.



  Search the Graphviz codebase for "dimen"
  






  dir


Edge type for drawing arrowheads

type: dirType, default: forward (directed) , none (undirected) 


Indicates which ends of the edge should be decorated with an arrowhead.
The actual style of the arrowhead can be specified using the
arrowhead and arrowtail attributes.
See limitation.




  
    
      
        Example
      
    
  
  
    
    digraph {
  A->B [dir=forward]
  C->D [dir=back]
  E->F [dir=both]
  G->H [dir=none]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "dir"
  






  diredgeconstraints


Whether to constrain most edges to point downwards

type: string | bool, default: false


If true, constraints are generated for each edge in the largest (heuristic)
directed acyclic subgraph such that the edge must point downwards.
Only valid when mode="ipsep".
If hier, generates level constraints similar to those used with
mode="hier". The main difference is that, in the latter
case, only these constraints are involved, so a faster solver can be used.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "diredgeconstraints"
  






  distortion


Distortion factor for shape=polygon

type: double, default: 0.0, minimum: -100.0


Positive values cause top part to be larger than bottom; negative values do
the opposite.
See also skew.




  
    
      
        Example
      
    
  
  
    
    graph {
  LargeBottom [shape=polygon sides=4 distortion=-.5]
  LargeTop    [shape=polygon sides=4 distortion=.5]
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "distortion"
  






  dpi


Specifies the expected number of pixels per inch on a display device

type: double, default: 96.0, minimum: 0.0


For bitmap output, dpi guarantees that text rendering will be done more
accurately, both in size and in placement.
For SVG output, dpi guarantees the dimensions in the output correspond to
the correct number of points or inches.


Valid on:
Graphs

  Note:
  bitmap output, svg only.



  Search the Graphviz codebase for "dpi"
  






  edgehref


Synonym for edgeURL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "edgehref"
  






  edgetarget


Browser window to use for the edgeURL link

type: escString, default: <none>


If the edge has a URL or edgeURL
attribute, edgetarget determines which window of the
browser is used
for the URL attached to the non-label part of the edge.
Setting edgetarget=_graphviz will open a new window if it
doesn't already exist, or reuse it if it does.
If undefined, the value of the target is used instead.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "edgetarget"
  






  edgetooltip


Tooltip annotation attached to the non-label part of an edge

type: escString, default: ""



headtooltip.
labeltooltip.
tailtooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "edgetooltip"
  






  edgeURL


The link for the non-label parts of an edge

type: escString, default: ""


edgeURL overrides any URL defined for the edge.
Also, edgeURL is used near the head or tail node unless overridden
by headURL or tailURL, respectively.
See limitation.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "edgeURL"
  






  epsilon


Terminating condition

type: double, default: .0001 * # nodes (mode == KK) , .0001 (mode == major) , .01 (mode == sgd) 


If the length squared of all energy gradients are
less than epsilon, the algorithm stops.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "epsilon"
  






  esep


Margin used around polygons for purposes of spline edge routing

type: addDouble | addPoint, default: +3


The interpretation is the same as given for sep. esep should
normally be strictly less than sep.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp, osage, circo, twopi only.



  Search the Graphviz codebase for "esep"
  






  fillcolor


Color used to fill the background of a node or cluster

type: color | colorList, default: lightgrey (nodes) , black (clusters) 


Assuming style=filled, or a filled arrowhead.
If fillcolor is not defined, color is
used. (For clusters, if color is not defined,
bgcolor is used.) If this is not defined,
the default is used, except for
shape=point or when the output
format is MIF,
which use black by default.
If the value is a colorList, a gradient fill is
used. By default, this is a linear fill; setting style=radial will
cause a radial fill. At present, only two colors are used. If the second
color (after a colon) is missing, the default color is used for it.
See also the gradientangle attribute
for setting the gradient angle.
Note that a cluster inherits the root graph's attributes if defined.
Thus, if the root graph has defined a fillcolor, this will override a
color or bgcolor attribute set for the cluster.


Valid on:
NodesEdgesClusters

  Search the Graphviz codebase for "fillcolor"
  






  fixedsize


Whether to use the specified width and height attributes to choose node size (rather than sizing to fit the node contents)

type: bool | string, default: false


If false, the size of a node is determined by smallest width and height
needed to contain its label and image, if any, with a margin specified by
the margin attribute.
The width and height must also be at least as large as the sizes specified by
the width and height attributes, which specify
the minimum values for these parameters.
If true, the node size is specified by the values of the width
and height attributes only and is not expanded to contain the
text label. There will be a warning if the label (with margin) cannot fit
within these limits.
If the fixedsize attribute is set to shape, the
width and height attributes also determine the size
of the node shape, but the label can be much larger. Both the label and shape
sizes are used when avoiding node overlap, but all edges to the node ignore
the label and only contact the node shape. No warning is given if the label
is too large.


Valid on:
Nodes

  Search the Graphviz codebase for "fixedsize"
  






  fontcolor


Color used for text

type: color, default: black




Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "fontcolor"
  






  fontname


Font used for text

type: string, default: "Times-Roman"


This very much depends on the output format and, for
non-bitmap output such as PostScript or SVG, the availability of the font
when the graph is displayed or printed. As such, it is best to rely on font
faces that are generally available, such as Times-Roman, Helvetica or
Courier.
How font names are resolved also depends on the underlying library that
handles font name resolution. If Graphviz was built using the fontconfig
library, the
latter library will be used to search for the font. See the commands
fc-list, fc-match and the other fontconfig commands for how names are
resolved and which fonts are available. Other systems may provide their own
font package, such as Quartz for OS X.
Note that various font attributes, such as weight and slant, can be built
into the font name. Unfortunately, the syntax varies depending on which font
system is dominant. Thus, using fontname="times bold italic" will produce a
bold, slanted Times font using Pango, the usual main font library.
Alternatively, fontname="times:italic" will produce a slanted Times font from
fontconfig, while fontname="times-bold" will resolve to a bold Times using
Quartz. You will need to ascertain which package is used by your Graphviz
system and refer to the relevant documentation.
If Graphviz is not built with a high-level font library, fontname will be
considered the name of a Type 1 or True Type font file. If you specify
fontname=schlbk, the tool will look for a file named schlbk.ttf or schlbk.pfa
or schlbk.pfb in one of the directories specified by the
fontpath attribute. The lookup does support various aliases
for the common fonts.




  
  
    
    digraph {
    label="Comic Sans MS"
    fontname="Comic Sans MS"
    subgraph cluster_a {
      label="Courier New"
      fontname="Courier New"
      Arial [fontname="Arial"];
      Arial -> Arial [label="Impact" fontname="Impact"]
    }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "fontname"
  






  fontnames


Allows user control of how basic fontnames are represented in SVG output

type: string, default: ""


If fontnames is undefined or hd, fontconfig font conventions are used.
The default Times-Roman font will be mapped to an equivalent available
system font, such as Times New Roman (Windows) or Times (some Linux).
If fontnames is set to svg, the output will use known SVG fontnames.
If fontnames is set to ps, PostScript font names like Times-Roman are
used directly.
In all cases, the basic SVG font serif is used as a fallback for the
named font. (So, a diagram containing text in Times-Roman might have
that text represented in the SVG output by a <text> tag with the
attribute font-family="Times-Roman,serif".)


Valid on:
Graphs

  Note:
  svg only.



  Search the Graphviz codebase for "fontnames"
  






  fontpath


Directory list used by libgd to search for bitmap fonts

type: string, default: <system-dependent>


Used if Graphviz was not built with the fontconfig
library.
If fontpath is not set, the environment
variable DOTFONTPATH is checked.
If DOTFONTPATH is not set, GDFONTPATH is checked.
If GDFONTPATH not set, libgd uses its compiled-in font path.
Note that fontpath is an attribute of the root graph.


Valid on:
Graphs

  Search the Graphviz codebase for "fontpath"
  






  fontsize


Font size, in points, used for text

type: double, default: 14.0, minimum: 1.0






  
  
    
    digraph {
    label="40pt Graph Label"
    fontsize="40"
    subgraph cluster_a {
      label="30pt Cluster Label"
      fontsize="30pt"
      "20pt Node" [fontsize="20pt"];
      "20pt Node"-> "20pt Node" [label="10pt Edge" fontsize="10"]
    }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "fontsize"
  






  forcelabels


Whether to force placement of all xlabels, even if overlapping

type: bool, default: true


If true, all xlabel attributes are placed, even if there is some overlap with nodes or other labels.


Valid on:
Graphs

  Search the Graphviz codebase for "forcelabels"
  






  gradientangle


If a gradient fill is being used, this determines the angle of the fill

type: int, default: 0, minimum: 0


For linear fills, the colors transform along a line specified by the angle
and the center of the object. For radial fills, a value of zero causes the
colors to transform radially from the center; for non-zero values, the colors
transform from a point near the object's periphery as specified by the value.
If unset, the default angle is 0.


Valid on:
NodesClustersGraphs

  Search the Graphviz codebase for "gradientangle"
  






  group


Name for a group of nodes, for bundling edges avoiding crossings.

type: string, default: ""


If the end points of an edge belong to the same group, i.e., have the
same group attribute, parameters are set to avoid crossings and keep
the edges straight.


Valid on:
Nodes

  Note:
  dot only.



  Search the Graphviz codebase for "group"
  






  head_lp


Center position of an edge's head label

type: point


In points.


Valid on:
Edges

  Note:
  write only.



  Search the Graphviz codebase for "head_lp"
  






  headclip


If true, the head of an edge is clipped to the boundary of the head node

type: bool, default: true


Otherwise, the end of the edge goes to the center of the node, or the
center of a port, if applicable.


Valid on:
Edges

  Search the Graphviz codebase for "headclip"
  






  headhref


Synonym for headURL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "headhref"
  






  headlabel


Text label to be placed near head of edge

type: lblString, default: ""


See limitation.


Valid on:
Edges

  Search the Graphviz codebase for "headlabel"
  






  headport


Indicates where on the head node to attach the head of the edge

type: portPos, default: center


In the default case, the edge is aimed towards the center of the node,
and then clipped at the node boundary.
See limitation.


Valid on:
Edges

  Search the Graphviz codebase for "headport"
  






  headtarget


Browser window to use for the headURL link

type: escString, default: <none>


If the edge has a headURL,
headtarget determines which window of the
browser is used
for the URL. Setting headURL=_graphviz will open a new window if the window
doesn't already exist, or reuse the window if it does.
If undefined, the value of the target is used.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "headtarget"
  






  headtooltip


Tooltip annotation attached to the head of an edge

type: escString, default: ""


Used only if the edge has a headURL attribute.
See also:

edgetooltip.
labeltooltip.
tailtooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "headtooltip"
  






  headURL


If defined, headURL is output as part of the head label of the edge

type: escString, default: ""


Also, this value is used near the head node, overriding any URL value.
See limitation.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "headURL"
  






  height


Height of node, in inches

type: double, default: 0.5, minimum: 0.02


This is taken as the initial, minimum height of the node. If
fixedsize is true, this will be the final height of the
node. Otherwise, if the node label requires more height to fit, the node's height
will be increased to contain the label.
If the output format is dot, the value given to height will be the final
value.
If the node shape is regular, the width and height are made identical:

If both the width and the height are set explicitly, the maximum of the
two values is used.
If one of width or height is set explicitly, that value is
used for both width and height.
If neither is set explicitly, the minimum of the two default values
is used.





  
    
      
        Height Example
      
    
  
  
    
    digraph G {
  "default"
  "1in" [height=1]
  "2in" [height=2]
}
  
     Edit in Playground
    
  



See also:

width



Valid on:
Nodes

  Search the Graphviz codebase for "height"
  






  href


Synonym for URL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
GraphsClustersNodesEdges

  Note:
  map, postscript, svg only.



  Search the Graphviz codebase for "href"
  






  id


Identifier for graph objects

type: escString, default: ""


Allows the graph author to provide an identifier for graph objects which is
to be included in the output.
Normal \N, \E, \G substitutions are applied.
If provided, it is the responsibility of the provider to keep
id values unique for its intended downstream use.
Note, in particular, that \E does not provide a unique id for multi-edges.
If no id attribute is provided, then a unique internal id is used. However,
this value is unpredictable by the graph writer.
If the graph provides an id attribute, this will be used as a prefix for
internally generated attributes. By making internally-used attributes
distinct, the user can include multiple image maps in the same document.


Valid on:
GraphsClustersNodesEdges

  Note:
  map, postscript, svg only.



  Search the Graphviz codebase for "id"
  






  image


Gives the name of a file containing an image to be displayed inside a node

type: string, default: ""


The image file must be in one of the recognized
formats, typically JPEG, PNG, GIF, BMP, SVG, or
Postscript, and be able to be converted into the desired output format.
The file must contain the image size information:

Bitmap formats usually already contain image size.
PostScript files must contain a line starting with %%BoundingBox: followed
by four integers specifying the lower left x and y coordinates and the upper
right x and y coordinates of the bounding box for the image, the coordinates
being in points.
An SVG image file must contain width and height attributes, typically as part
of the svg element. The values for these should have the form of a floating
point number, followed by optional units, e.g., width="76pt". Recognized
units are in, px, pc, pt, cm and mm for inches, pixels, picas, points,
centimeters and millimeters, respectively. The default unit is points.

Unlike with the shapefile attribute, the image is treated
as node content rather than the entire node. In particular, an image can be
contained in a node of any shape, not just a rectangle.
Only paths to local resources are supported. If you want to use a URL to a
remote resource, see the
dot_url_resolve.py
script.


Valid on:
Nodes

  Search the Graphviz codebase for "image"
  






  imagepath


A list of directories in which to look for image files

type: string, default: ""


When specified
by the image attribute or using the IMG element in HTML-like
labels.
imagepath should be a list of (absolute or
relative) pathnames, each separated by a semicolon ; (for Windows) or a colon :
(all other OS).
The first directory in which a file of the given name is
found will be used to load the image.
If imagepath is not set, relative pathnames for the image file will be
interpreted with respect to the current working directory.


Valid on:
Graphs

  Search the Graphviz codebase for "imagepath"
  






  imagepos


Controls how an image is positioned within its containing node

type: string, default: "mc"


imagepos only has an effect when the image is smaller than the containing node.
The default is to be centered both horizontally and vertically.
Valid values:

tl - Top Left
tc - Top Centered
tr - Top Right
ml - Middle Left
mc - Middle Centered (the default)
mr - Middle Right
bl - Bottom Left
bc - Bottom Centered
br - Bottom Right



Valid on:
Nodes

  Search the Graphviz codebase for "imagepos"
  






  imagescale


Controls how an image fills its containing node

type: bool | string, default: false


In general, the image is given its natural size,
(cf. dpi),
and the node size is made large enough to contain its image, its
label, its margin, and its peripheries.
Its width and height will also be at least as large as its
minimum width and height.
If, however, fixedsize=true,
the width and height attributes specify the exact size of the node.

During rendering, in the default case (imagescale=false),
the image retains its natural size.
If imagescale=true,
the image is uniformly scaled (i.e., its aspect ratio is
preserved) to fit inside the node.
At least one dimension of the image will be as large as possible
given the size of the node.
When imagescale=width,
the width of the image is scaled to fill the node width.
The corresponding property holds when imagescale=height.
When imagescale=both,
both the height and the width are scaled separately to fill the node.

In all cases, if a dimension of the image is larger than the
corresponding dimension of the node, that dimension of the
image is scaled down to fit the node.
As with the case of expansion, if imagescale=true, width and height are
scaled uniformly.


Valid on:
Nodes

  Search the Graphviz codebase for "imagescale"
  






  inputscale


Scales the input positions to convert between length units

type: double, default: <none>


For layout algorithms that support initial input positions (specified by the pos attribute),
this attribute can be used to appropriately scale the values.
By default, fdp and neato interpret
the x and y values of pos as being in inches. (NOTE: neato -n(2) treats the coordinates as
being in points, being the unit used by the layout algorithms for the pos attribute.) Thus, if
the graph has pos attributes in points, one should set inputscale=72.
This can also be set on the command line using the -s flag.
If unset, no scaling is done and the units on input are treated as inches.
inputscale=0 is equivalent to inputscale=72.


Valid on:
Graphs

  Note:
  neato, fdp only.



  Search the Graphviz codebase for "inputscale"
  






  K


Spring constant used in virtual physical model

type: double, default: 0.3, minimum: 0


It roughly corresponds to an ideal edge length (in inches), in that increasing K tends to
increase the distance between nodes.
Note that the edge attribute len can be used to
override this value for adjacent nodes.


Valid on:
GraphsClusters

  Note:
  fdp, sfdp only.



  Search the Graphviz codebase for "K"
  






  label


Text label attached to objects

type: lblString, default: "\N" (nodes) , "" (otherwise) 


If a node's shape is record, then the label can
have a special format
which describes the record layout.
Note that a node's default label is "\N", so the node's name or ID becomes
its label.
Technically, a node's name can be an HTML string but this will not mean that
the node's label will be interpreted as an HTML-like
label. This is because the node's actual label is an
ordinary string, which will be replaced by the raw bytes stored in the node's
name.
To get an HTML-like label, the label attribute value itself must be an HTML
string.




  
    
      
        Example: Van Gogh Paintings
      
    
  
  
    
    graph {
  label="Vincent van Gogh Paintings"

  subgraph cluster_self_portraits {
    label="Self-portraits"

    spwgfh [label="Self-Portrait with Grey Felt Hat"]
    spaap [label="Self-Portrait as a Painter"]
  }
  
  subgraph cluster_flowers {
    label="Flowers"

    sf [label="Sunflowers"]
    ab [label="Almond Blossom"]
  }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "label"
  






  label_scheme


Whether to treat a node whose name has the form |edgelabel|* as a special node representing an edge label.

type: int, default: 0, minimum: 0



The default, label_scheme=0, produces no effect.
If label_scheme=1, sfdp uses a penalty-based method to make that kind of node close to the
center of its neighbor.
With label_scheme=2, sfdp uses a penalty-based method to make that kind of node
close to the old center of its neighbor.
Finally, label_scheme=3 invokes a two-step process of overlap
removal and straightening.



Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "label_scheme"
  






  labelangle


The angle (in degrees) in polar coordinates of the head & tail edge labels.

type: double, default: -25.0, minimum: -180.0


Determines, along with labeldistance,
where the headlabel / taillabel are
placed with respect to the head / tail in polar coordinates.
The origin in the coordinate system is the point where the edge touches the
node. The ray of 0 degrees goes from the origin back along the edge, parallel
to the edge at the origin.
The angle, in degrees, specifies the rotation from the 0 degree ray,
with positive angles moving counterclockwise and negative angles
moving clockwise.


Valid on:
Edges

  Search the Graphviz codebase for "labelangle"
  






  labeldistance


Scaling factor for the distance of headlabel / taillabel from the head / tail nodes.

type: double, default: 1.0, minimum: 0.0


The default distance is 10 points.
labeldistance multiplies that default.
See labelangle for more details.


Valid on:
Edges

  Search the Graphviz codebase for "labeldistance"
  






  labelfloat


If true, allows edge labels to be less constrained in position

type: bool, default: false


In particular, it may appear on top of other edges.


Valid on:
Edges

  Search the Graphviz codebase for "labelfloat"
  






  labelfontcolor


Color used for headlabel and taillabel.

type: color, default: black


If not set, defaults to edge's fontcolor.


Valid on:
Edges

  Search the Graphviz codebase for "labelfontcolor"
  






  labelfontname


Font for headlabel and taillabel

type: string, default: "Times-Roman"


Font used for headlabel and taillabel.
If not set, defaults to edge's fontname.


Valid on:
Edges

  Search the Graphviz codebase for "labelfontname"
  






  labelfontsize


Font size of headlabel and taillabel

type: double, default: 14.0, minimum: 1.0


Font size, in points, used for headlabel and
taillabel.
If not set, defaults to edge's fontsize.


Valid on:
Edges

  Search the Graphviz codebase for "labelfontsize"
  






  labelhref


Synonym for labelURL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "labelhref"
  






  labeljust


Justification for graph & cluster labels

type: string, default: "c"



If labeljust=r, the label is right-justified within bounding rectangle
If labeljust=l, left-justified
Else the label is centered.

Note that a subgraph inherits attributes from its parent. Thus, if
the root graph sets labeljust=l, the subgraph inherits
this value.




  
    
      
        Graph label justifications
      
    
  
  
    
    digraph {
  label="l"
  labeljust=l
  a
}
  
     Edit in Playground
    
  







  
    
      
        Graph label justifications
      
    
  
  
    
    digraph {
  label="r"
  labeljust=r
  b
}
  
     Edit in Playground
    
  







  
    
      
        Cluster label justifications
      
    
  
  
    
    digraph {
  subgraph cluster_l {
    label="l"
    labeljust=l
    a
  }
  subgraph cluster_c {
    label="c"
    labeljust=c
    b
  }
  subgraph cluster_r {
    label="r"
    labeljust=r
    c
  }
}
  
     Edit in Playground
    
  





Valid on:
GraphsClusters

  Search the Graphviz codebase for "labeljust"
  






  labelloc


Vertical placement of labels for nodes, root graphs and clusters

type: string, default: "t" (clusters) , "b" (root graphs) , "c" (nodes) 


For graphs and clusters, only labelloc=t and labelloc=b are allowed, corresponding
to placement at the top and bottom, respectively.
By default, root graph labels go on the bottom and cluster labels go on the
top.
Note that a subgraph inherits attributes from its parent. Thus, if
the root graph sets labelloc=b, the subgraph inherits
this value.
For nodes, this attribute is used only when the height of the node
is larger than the height of its label.
If labelloc=t, labelloc=c, labelloc=b, the label is aligned
with the top, centered, or aligned with the bottom of the node, respectively.
By default, the label is vertically centered.




  
    
      
        Label at top of graph
      
    
  
  
    
    digraph {
  labelloc="t"
  label="Title"
  a -> b
}
  
     Edit in Playground
    
  







  
    
      
        Label at bottom of graph
      
    
  
  
    
    digraph {
  labelloc="b"
  label="Title"
  a -> b
}
  
     Edit in Playground
    
  







  
    
      
        Cluster Label Locations
      
    
  
  
    
    digraph {
  label="Graph Title"
  subgraph cluster_t {
    labelloc="t"
    label="Cluster Top"
    a -> b
  }
  subgraph cluster_b {
    labelloc="b"
    label="Cluster Bottom"
    c -> d
  }
}
  
     Edit in Playground
    
  







  
    
      
        Node label positions
      
    
  
  
    
    digraph {
  t [labelloc=t]
  c [labelloc=c]
  b [labelloc=b]
}
  
     Edit in Playground
    
  





Valid on:
NodesGraphsClusters

  Search the Graphviz codebase for "labelloc"
  






  labeltarget


Browser window to open labelURL links in

type: escString, default: <none>


If the edge has a URL or labelURL attribute, this
attribute determines which window of the browser is used for the URL attached
to the label.
Setting labeltarget=_graphviz will open a new window if it doesn't
already exist, or reuse it if it does.
If undefined, the value of the target is used.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "labeltarget"
  






  labeltooltip


Tooltip annotation attached to label of an edge

type: escString, default: ""



edgetooltip.
headtooltip.
tailtooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "labeltooltip"
  






  labelURL


If defined, labelURL is the link used for the label of an edge

type: escString, default: ""


labelURL overrides any URL defined for the edge.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "labelURL"
  






  landscape


If true, the graph is rendered in landscape mode

type: bool, default: false


Synonymous with
rotate=90 or orientation=landscape.




  
    
      
        Rotations
      
    
  
  
    
    digraph {
  landscape=true
  a -> b
}
  
     Edit in Playground
    
  



See also:

rotate
orientation



Valid on:
Graphs

  Search the Graphviz codebase for "landscape"
  






  layer


Specifies layers in which the node, edge or cluster is present

type: layerRange, default: ""




Valid on:
EdgesNodesClusters

  Search the Graphviz codebase for "layer"
  






  layerlistsep


The separator characters used to split attributes of type layerRange into a list of ranges.

type: string, default: ","




Valid on:
Graphs

  Search the Graphviz codebase for "layerlistsep"
  






  layers


A linearly ordered list of layer names attached to the graph

type: layerList, default: ""


The graph is then output in separate layers. Only those components belonging to
the current output layer appear.
See How to use drawing layers (overlays).


Valid on:
Graphs

  Search the Graphviz codebase for "layers"
  






  layerselect


Selects a list of layers to be emitted

type: layerRange, default: ""




Valid on:
Graphs

  Search the Graphviz codebase for "layerselect"
  






  layersep


The separator characters for splitting the layers attribute into a list of layer names.

type: string, default: ":\t "




Valid on:
Graphs

  Search the Graphviz codebase for "layersep"
  






  layout


Which layout engine to use

type: string, default: ""


Specifies the name of the layout engine to
use, such as dot or neato.
Normally, graphs should be kept independent of a type of layout. In some
cases, however, it can be convenient to embed the type of layout desired
within the graph.
For example, a graph containing position information from a layout might want
to record what the associated layout engine was.
This attribute takes precedence over the -K flag or
the actual command name used.


Valid on:
Graphs

  Search the Graphviz codebase for "layout"
  






  len


Preferred edge length, in inches

type: double, default: 1.0 (neato) , 0.3 (fdp) 


See also:

minlen



Valid on:
Edges

  Note:
  neato, fdp only.



  Search the Graphviz codebase for "len"
  






  levels


Number of levels allowed in the multilevel scheme

type: int, default: INT_MAX, minimum: 0.0




Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "levels"
  






  levelsgap


strictness of neato level constraints

type: double, default: 0.0


Specifies strictness of level constraints in neato when
mode="ipsep" or mode=hier.
Larger positive values mean stricter constraints, which demand more
separation between levels. On the other hand, negative values will relax the
constraints by allowing some overlap between the levels.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "levelsgap"
  






  lhead


Logical head of an edge

type: string, default: ""


When compound is true, if lhead is defined and is the name
of a cluster containing the real head, the edge is clipped to the boundary of
the cluster.




  
  
    
    digraph {
  compound=true;

  subgraph cluster_a {
    label="Cluster A";
    node1; node3; node5; node7;
  }
  subgraph cluster_b {
    label="Cluster B";
    node2; node4; node6; node8;
  }

  node1 -> node2 [label="1"];
  node3 -> node4 [label="2" ltail="cluster_a"];
  
  node5 -> node6 [label="3" lhead="cluster_b"];
  node7 -> node8 [label="4" ltail="cluster_a" lhead="cluster_b"];
}
  
     Edit in Playground
    
  



See limitation.


Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "lhead"
  






  lheight


Height of graph or cluster label, in inches

type: double




Valid on:
GraphsClusters

  Note:
  write only.



  Search the Graphviz codebase for "lheight"
  






  linelength


How long strings should get before overflowing to next line, for text output.

type: int, default: 128, minimum: 60


Example, where an 80-character long string ("a " * 40) is broken up onto two
lines, when printed as canonical output:
$ echo 'digraph G { linelength=60; N0 [label="a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a "]; }' | dot -Tcanon
digraph G {
        graph [linelength=60];
        node [label="\N"];
        N0      [label="a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a \
a a a a a a a a a a "];
}
The text overflows when the label reaches the given size.
Despite the linelength name, this is the length of the attribute string, not the length of the overall line (which includes the node ID and attribute key).


Valid on:
Graphs

  Search the Graphviz codebase for "linelength"
  






  lp


Label center position

type: point


Label center position, in points.


Valid on:
EdgesGraphsClusters

  Note:
  write only.



  Search the Graphviz codebase for "lp"
  






  ltail


Logical tail of an edge

type: string, default: ""


When compound=true, if ltail is defined and is the name
of a cluster containing the real tail, the edge is clipped to the boundary of
the cluster.




  
  
    
    digraph {
  compound=true;

  subgraph cluster_a {
    label="Cluster A";
    node1; node3; node5; node7;
  }
  subgraph cluster_b {
    label="Cluster B";
    node2; node4; node6; node8;
  }

  node1 -> node2 [label="1"];
  node3 -> node4 [label="2" ltail="cluster_a"];
  
  node5 -> node6 [label="3" lhead="cluster_b"];
  node7 -> node8 [label="4" ltail="cluster_a" lhead="cluster_b"];
}
  
     Edit in Playground
    
  



See limitation.


Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "ltail"
  






  lwidth


Width of graph or cluster label, in inches

type: double




Valid on:
GraphsClusters

  Note:
  write only.



  Search the Graphviz codebase for "lwidth"
  






  margin


For graphs, this sets x and y margins of canvas, in inches

type: double | point, default: <device-dependent>


If the margin is a single double, both margins are set equal to the given
value.
Note that the margin is not part of the drawing but just empty space left
around the drawing. The margin basically corresponds to a translation of
drawing, as would be necessary to center a drawing on a page. Nothing is
actually drawn in the margin. To actually extend the background of a drawing,
see the pad attribute.
For clusters, margin specifies the space between the nodes in the cluster
and the cluster bounding box. By default, this is 8 points.
For nodes, this attribute specifies space left around the node's label. By
default, the value is 0.11,0.055.




  
    
      
        Nodes Example: Tall Margins, Wide Margins, and Equal Margins
      
    
  
  
    
    graph {
  "1.5x0.5" [shape=rect margin="1.5,0.5"] # in inches
  "0.5x1.5" [shape=rect margin="0.5,1.5"] # in inches
  "1.5x1.5" [shape=rect margin="1.5"]     # in inches
}
  
     Edit in Playground
    
  







  
    
      
        Example: Cluster and Graph Margins
      
    
  
  
    
    graph {
    bgcolor=lightgray
    margin=0 # in inches
    
    subgraph cluster_one {
      margin=8 # in points
      a
      b
    }
    subgraph cluster_two {
      margin=16 # in points
      c
      d
    }
}
  
     Edit in Playground
    
  





Valid on:
NodesClustersGraphs

  Search the Graphviz codebase for "margin"
  






  maxiter


Sets the number of iterations used

type: int, default: 100 * # nodes (mode == KK) , 200 (mode == major) , 30 (mode == sgd) , 600 (fdp) 




Valid on:
Graphs

  Note:
  neato, fdp only.



  Search the Graphviz codebase for "maxiter"
  






  mclimit


Scale factor for mincross (mc) edge crossing minimiser parameters

type: double, default: 1.0


Multiplicative scale factor used to alter the MinQuit (default = 8)
and MaxIter (default = 24) parameters used during crossing
minimization.
These correspond to the number of tries without improvement before quitting
and the maximum number of iterations in each pass.


Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "mclimit"
  






  mindist


Specifies the minimum separation between all nodes

type: double, default: 1.0, minimum: 0.0




Valid on:
Graphs

  Note:
  circo only.



  Search the Graphviz codebase for "mindist"
  






  minlen


Minimum edge length (rank difference between head and tail)

type: int, default: 1, minimum: 0


See also:

len



Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "minlen"
  






  mode


Technique for optimizing the layout

type: string, default: major


neato supports modes:

mode="major": neato uses stress majorization1.
mode="KK": neato uses the Kamada-Kawai2 version of the gradient descent method.
KK is sometimes appreciably faster for small (number of nodes < 100) graphs.
A significant disadvantage is that KK may cycle.
mode="sgd": neato uses a version of the Stochastic Gradient Descent3 method.
sgd's advantage is faster and more reliable convergence than both the previous methods,
while sgd's disadvantage is that it runs in a fixed number of iterations and
may require larger values of maxiter in some graphs.

There are two experimental modes in neato:

mode="hier", which adds a top-down directionality similar to the layout used in dot, and
mode="ipsep", which allows the graph to specify minimum vertical and horizontal distances between nodes.
(See the sep attribute.)





Gansner, E.R., Koren, Y., North, S. (2005). Graph Drawing by Stress Majorization. In: Pach, J. (eds) Graph Drawing. GD 2004. Lecture Notes in Computer Science, vol 3383. Springer, Berlin, Heidelberg. ↩︎


Tomihisa Kamada, Satoru Kawai, An algorithm for drawing general undirected graphs, Information Processing Letters, Volume 31, Issue 1, 1989, Pages 7-15. ↩︎


J. X. Zheng, S. Pawar and D. F. M. Goodman, "Graph Drawing by Stochastic Gradient Descent," in IEEE Transactions on Visualization and Computer Graphics, vol. 25, no. 9, pp. 2738-2748, 1 Sept. 2019, doi: 10.1109/TVCG.2018.2859997. ↩︎





Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "mode"
  






  model


Specifies how the distance matrix is computed for the input graph

type: string, default: shortpath


The distance matrix specifies the ideal distance between every pair of nodes.
neato attempts to find a layout which best achieves these distances. By
default, it uses the length of the shortest path, where the length of each
edge is given by its len attribute.

If model="circuit", neato uses the circuit resistance model to compute the
distances. This tends to emphasize clusters.
If model="subset", neato uses the subset model. This sets the edge length
to be the number of nodes that are neighbors of exactly one of the end
points, and then calculates the shortest paths. This helps to separate
nodes with high degree.

For more control of distances, one can use model=mds. In this case, the
len of an edge is used as the ideal distance between its vertices.
A shortest path calculation is only used for pairs of nodes not connected by
an edge. Thus, by supplying a complete graph, the input can specify all of
the relevant distances.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "model"
  






  newrank


Whether to use a single global ranking, ignoring clusters

type: bool, default: false


The original ranking algorithm in dot is recursive on clusters. This can
produce fewer ranks and a more compact layout, but sometimes at the cost of a
head node being place on a higher rank than the tail node. It also assumes
that a node is not constrained in separate, incompatible subgraphs. For
example, a node cannot be in a cluster and also be constrained by rank=same
with a node not in the cluster.
This allows nodes to be subject to multiple constraints. Rank
constraints will usually take precedence over edge constraints.


Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "newrank"
  






  nodesep


In dot, nodesep specifies the minimum space between two adjacent nodes in the same rank, in inches

type: double, default: 0.25, minimum: 0.02


For other layouts, nodesep affects the spacing between loops on a single node, or multiedges between
a pair of nodes.




  
    
      
        Small node separation
      
    
  
  
    
    digraph {
    nodesep=0.1;
    node1; node2; node3;
}
  
     Edit in Playground
    
  







  
    
      
        Large node separation
      
    
  
  
    
    digraph {
    nodesep=0.5;
    node1; node2; node3;
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "nodesep"
  






  nojustify


Whether to justify multiline text vs the previous text line (rather than the side of the container).

type: bool, default: false


By default, the justification of multi-line labels is done within the largest
context that makes sense. Thus, in the label of a polygonal node, a
left-justified line will align with the left side of the node (shifted by the
prescribed margin). In record nodes, left-justified line will
line up with the left side of the enclosing column of fields. If
nojustify=true, multi-line labels will be justified in the context
of itself.
For example, if nojustify is set, the first label line is long, and the
second is shorter and left-justified, the second will align with the
left-most character in the first line, regardless of how large the node might
be.
See this example containing the \l (left-justify) escape-string:




  
    
      
        Nojustify causes text to align with previous text line, not left side of box
      
    
  
  
    
    digraph G {
  node [width=3 shape=box]
  a [nojustify=false label="The first line is longer\nnojustify=false\l"]
  b [nojustify=true label="The first line is longer\nnojustify=true\l"]
  a -> b
}
  
     Edit in Playground
    
  







  
    
      
        Nojustify causes text to align with previous text line, not record column
      
    
  
  
    
    digraph G{
  c [nojustify=false shape=record label="{Records Example - Long Line\n | Title - Shorter Line\nnojustify=false\l}"]
  d [nojustify=true shape=record label="{Records Example - Long Line\n | Title - Shorter Line\nnojustify=true\l}"]
  c -> d
}
  
     Edit in Playground
    
  





Valid on:
GraphsClustersNodesEdges

  Search the Graphviz codebase for "nojustify"
  






  normalize


normalizes coordinates of final layout

type: double | bool, default: false


So that the first point is at the
origin, and then rotates the layout so that the angle of the first edge is
specified by the value of normalize in degrees.
If normalize is not a number, it is evaluated as a bool, with true
corresponding to 0 degrees.
NOTE: Since the attribute is evaluated first as a number, 0 and 1
cannot be used for false and true.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp, twopi, circo only.



  Search the Graphviz codebase for "normalize"
  






  notranslate


Whether to avoid translating layout to the origin point

type: bool, default: false


By default, the final layout is translated so that the lower-left corner of
the bounding box is at the origin.
This can be annoying if some nodes are pinned or if the user runs neato -n.
To avoid this translation, set notranslate=true.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "notranslate"
  






  nslimit


Sets number of iterations in network simplex applications

type: double


nslimit is used in computing node x coordinates.
If defined, # iterations = nslimit * # nodes; otherwise, # iterations = INT_MAX.


Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "nslimit"
  






  nslimit1


Sets number of iterations in network simplex applications

type: double


nslimit1 is used for ranking nodes.
If defined, # iterations = nslimit * # nodes; otherwise, # iterations = INT_MAX.


Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "nslimit1"
  






  oneblock


Whether to draw circo graphs around one circle.

type: bool, default: false


Observe two examples of rendering the same graph:




  
    
      
        Example: Multiple Blocks
      
    
  
  
    
    digraph G {
    layout="circo"
    oneblock=false

    N0 -> N1
    N1 -> N2
    N2 -> N3
    N3 -> N4
    N4 -> N0
    
    N4 -> N5
    N5 -> N6
    N6 -> N7
    N7 -> N8
    N8 -> N5
}
  
     Edit in Playground
    
  







  
    
      
        Example: One Block
      
    
  
  
    
    digraph G {
    layout="circo"
    oneblock=true

    N0 -> N1
    N1 -> N2
    N2 -> N3
    N3 -> N4
    N4 -> N0
    
    N4 -> N5
    N5 -> N6
    N6 -> N7
    N7 -> N8
    N8 -> N5
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  circo only.



  Search the Graphviz codebase for "oneblock"
  






  ordering


Constrains the left-to-right ordering of node edges.

type: string, default: ""


If ordering="out", then the outedges of a node, that is, edges with the
node as its tail node, must appear left-to-right in the same order in which
they are defined in the input.
If ordering="in", then the inedges of a node must appear
left-to-right in the same order in which they are defined in the input.
If defined as a graph or subgraph attribute, the value is applied to all
nodes in the graph or subgraph.
Note that the graph attribute takes precedence over the node attribute.


Valid on:
GraphsNodes

  Note:
  dot only.



  Search the Graphviz codebase for "ordering"
  






  orientation


node shape rotation angle, or graph orientation

type: double | string, default: 0.0, "", minimum: -360.0


When used on nodes: Angle, in degrees, to rotate polygon node shapes. For any number of polygon sides, 0 degrees rotation results in a flat base.
When used on graphs: If "[lL]*", sets graph orientation to landscape.
Used only if rotate is not defined.




  
    
      
        Node Orientations
      
    
  
  
    
    digraph {
  layout=neato       # Render in a circular layout
  node [shape=house] # Make all nodes have 'house' shape

    0 [orientation=0]
   45 [orientation=45]
   90 [orientation=90]
  135 [orientation=135]
  180 [orientation=180]
  225 [orientation=225]
  270 [orientation=270]
  315 [orientation=315]
  0 -> 45 -> 90 -> 135 -> 180 -> 225 -> 270 -> 315 -> 0
}
  
     Edit in Playground
    
  







  
    
      
        Landscape Graph Orientation
      
    
  
  
    
    digraph {
  orientation=L
  a -> b
}
  
     Edit in Playground
    
  



See also:

orientation
rotate



Valid on:
NodesGraphs

  Search the Graphviz codebase for "orientation"
  






  outputorder


Specify order in which nodes and edges are drawn

type: outputMode, default: breadthfirst




Valid on:
Graphs

  Search the Graphviz codebase for "outputorder"
  






  overlap


Determines if and how node overlaps should be removed

type: string | bool, default: true


Nodes are first
enlarged using the sep attribute. If true , overlaps are
retained. If the value is "scale", overlaps are removed by uniformly scaling
in x and y. If the value converts to "false", and it is available, Prism, a
proximity graph-based algorithm, is used to remove node overlaps. This can
also be invoked explicitly with overlap=prism. This technique starts with a
small scaling up, controlled by the overlap_scaling
attribute, which can remove a significant portion of the overlap. The prism
option also accepts an optional non-negative integer suffix. This can be used
to control the number of attempts made at overlap removal. By default,
overlap="prism" is equivalent to overlap="prism1000". Setting
overlap="prism0" causes only the scaling phase to be run.
If Prism is not available, or the version of Graphviz is earlier than 2.28,
"overlap=false" uses a Voronoi-based technique. This can always be invoked
explicitly with "overlap=voronoi".
If overlap="scalexy", x and y are separately scaled to remove overlaps.
If overlap="compress", the layout will be scaled down as much as
possible without introducing any overlaps, obviously assuming there are none
to begin with.
N.B. The remaining allowed values of overlap correspond to algorithms which, at present, can produce bad aspect ratios. In addition, we deprecate the use of the "ortho*" and "portho*".
If the value is "vpsc", overlap removal is done as a quadratic optimization
to minimize node displacement while removing node overlaps.
If the value is "orthoxy" or "orthoyx", overlaps are moved by optimizing two
constraint problems, one for the x axis and one for the y. The suffix
indicates which axis is processed first. If the value is "ortho", the
technique is similar to "orthoxy" except a heuristic is used to reduce the
bias between the two passes. If the value is "ortho_yx", the technique is
the same as "ortho", except the roles of x and y are reversed. The values
"portho", "porthoxy", "porthoxy", and "portho_yx" are similar to the
previous four, except only pseudo-orthogonal ordering is enforced.
If the layout is done by neato with mode="ipsep", then one can use
overlap=ipsep. In this case, the overlap removal constraints are
incorporated into the layout algorithm itself. N.B. At present, this only
supports one level of clustering.
Except for fdp and sfdp, the layouts assume overlap="true" as the default.
Fdp first uses a number of passes using a built-in, force-directed technique
to try to remove overlaps. Thus, fdp accepts overlap with an integer
prefix followed by a colon, specifying the number of tries. If there is no
prefix, no initial tries will be performed. If there is nothing following a
colon, none of the above methods will be attempted. By default, fdp uses
overlap="9:prism". Note that overlap="true", overlap="0:true" and
overlap="0:" all turn off all overlap removal.
By default, sfdp uses overlap="prism0".
Except for the Voronoi and prism methods, all of these transforms preserve
the orthogonal ordering of the original layout. That is, if the x coordinates
of two nodes are originally the same, they will remain the same, and if the x
coordinate of one node is originally less than the x coordinate of another,
this relation will still hold in the transformed layout. The similar
properties hold for the y coordinates. This is not quite true for the
"porth*" cases. For these, orthogonal ordering is only preserved among nodes
related by an edge.


Valid on:
Graphs

  Note:
  fdp, neato, sfdp, circo, twopi only.



  Search the Graphviz codebase for "overlap"
  






  overlap_scaling


Scale layout by factor, to reduce node overlap.

type: double, default: -4, minimum: -1e+10


When overlap=prism, the layout is scaled by this factor, thereby
removing a fair amount of node overlap, and making node overlap removal
faster and better able to retain the graph's shape.


If overlap_scaling is negative, the layout is scaled by
-1*overlap_scaling times the average label size.


If overlap_scaling is positive, the layout is scaled by
overlap_scaling.


If overlap_scaling is zero, no scaling is done.




Valid on:
Graphs

  Note:
  prism, neato, sfdp, fdp, circo, twopi only.



  Search the Graphviz codebase for "overlap_scaling"
  






  overlap_shrink


Whether the overlap removal algorithm should perform a compression pass to reduce the size of the layout

type: bool, default: true




Valid on:
Graphs

  Note:
  prism only.



  Search the Graphviz codebase for "overlap_shrink"
  






  pack


Whether each connected component of the graph should be laid out separately, and then the graphs packed together.

type: bool | int, default: false


If pack has an integral value, this is used as the size,
in points,of a margin around each part; otherwise, a default
margin of 8 is used.
If pack is interpreted as false, the entire graph is laid out together.
The granularity and method of packing is influenced by the
packmode attribute.
For layouts which always do packing, such as twopi, the pack
attribute is just used to set the margin.
pack is treated as true if the value of pack is true (case-insensitive)
or a non-negative integer.


Valid on:
Graphs

  Search the Graphviz codebase for "pack"
  






  packmode


How connected components should be packed

type: packMode, default: node


(cf packMode). Note that defining packmode will automatically
turn on packing as though one had set pack=true.


Valid on:
Graphs

  Search the Graphviz codebase for "packmode"
  






  pad


Inches to extend the drawing area around the minimal area needed to draw the graph

type: double | point, default: 0.0555  (4 points)


If pad is a single double, both the x and y pad values are set
equal to the given value. This area is part of the
drawing and will be filled with the background color, if appropriate.
Normally, a small pad is used for aesthetic reasons, especially when
a background color is used, to avoid having nodes and edges abutting
the boundary of the drawn region.


Valid on:
Graphs

  Search the Graphviz codebase for "pad"
  






  page


Width and height of output pages, in inches

type: double | point


If only a single value is given, this is used for both the width and height.
If page is set and is smaller than the size of the layout, a rectangular
array of pages of the specified page size is overlaid on the layout, with
origins aligned in the lower-left corner, thereby partitioning the layout
into pages. The pages are then produced one at a time, in
pagedir order.
At present, page only works for PostScript output. For other types of output,
use another tool to split the output into multiple output files,
or use viewport to generate multiple files.


Valid on:
Graphs

  Search the Graphviz codebase for "page"
  






  pagedir


The order in which pages are emitted

type: pagedir, default: BL


Used only if page is set and applicable.
Limited to one of the 8 row or column major orders.


Valid on:
Graphs

  Search the Graphviz codebase for "pagedir"
  






  pencolor


Color used to draw the bounding box around a cluster

type: color, default: black


If pencolor is not defined, color is used.
If color is not defined, bgcolor is used.
If bgcolor is not defined, the default is used.
Note that a cluster inherits the root graph's attributes if defined. Thus, if
the root graph has defined a pencolor, this will override a color or
bgcolor attribute set for the cluster.


Valid on:
Clusters

  Search the Graphviz codebase for "pencolor"
  






  penwidth


Specifies the width of the pen, in points, used to draw lines and curves

type: double, default: 1.0, minimum: 0.0


including the boundaries of edges and clusters.
penwidth value is inherited by subclusters, and has no effect on text.
Previous to 31 January 2008, the effect of penwidth=W was achieved by
including setlinewidth(W) as part of a style specification.
If both attributes are set, penwidth will be used.


Valid on:
ClustersNodesEdges

  Search the Graphviz codebase for "penwidth"
  






  peripheries


Set number of peripheries used in polygonal shapes and cluster boundaries

type: int, default: <shape default> (nodes) , 1 (clusters) , minimum: 0


Note that user-defined shapes are treated as a form of
box shape, so the default peripheries value is 1 and the user-defined shape
will be drawn in a bounding rectangle. Setting peripheries=0 will turn this
off.
peripheries=1 is the maximum value for clusters.


Valid on:
NodesClusters

  Search the Graphviz codebase for "peripheries"
  






  pin


Keeps the node at the node's given input position

type: bool, default: false


If true and the node has a pos attribute on input, neato or
fdp prevents the node from moving from the input position. This property
can also be specified in the pos attribute itself (cf. the point
type).
Note: Due to an artifact of the implementation, previous to 27 Feb 2014,
final coordinates are translated to the origin. Thus, if you look at the
output coordinates given in the (x)dot or plain format, pinned nodes will not
have the same output coordinates as were given on input. If this is
important, a simple workaround is to maintain the coordinates of a pinned
node. The vector difference between the old and new coordinates will give the
translation, which can then be subtracted from all of the appropriate
coordinates.
After 27 Feb 2014, this translation can be avoided in neato by setting
notranslate=true. However, if the graph specifies node
overlap removal or a change in aspect ratio, node
coordinates may still change.


Valid on:
Nodes

  Note:
  neato, fdp only.



  Search the Graphviz codebase for "pin"
  






  pos


Position of node, or spline control points

type: point | splineType


For nodes, the position indicates the center of the node. On output, the
coordinates are in points.
In neato and fdp, pos can be used to set the initial position of a
node. By default, the coordinates are assumed to be in inches. However, the
-s command line flag can be used to specify different
units. As the output coordinates are in points, feeding the output of a graph
laid out by a Graphviz program into neato or fdp will almost always
require the -s flag.
When the -n command line flag is used with neato, it
is assumed the positions have been set by one of the layout programs, and are
therefore in points. Thus, neato -n can accept input correctly without
requiring a -s flag and, in fact, ignores any such flag.


Valid on:
EdgesNodes

  Note:
  neato, fdp only.



  Search the Graphviz codebase for "pos"
  






  quadtree


Quadtree scheme to use

type: quadType | bool, default: normal



quadtree=true aliases quadtree=normal
quadtree=false aliases quadtree=none
quadtree=2 aliases quadtree=fast



Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "quadtree"
  






  quantum


If quantum > 0.0, node label dimensions will be rounded to integral multiples of the quantum

type: double, default: 0.0, minimum: 0.0




Valid on:
Graphs

  Search the Graphviz codebase for "quantum"
  






  rank


Rank constraints on the nodes in a subgraph

type: rankType



If rank="same", all nodes are placed on the same rank.
If rank="min", all nodes are placed on the minimum rank.
If rank="source", all nodes are placed on the minimum rank, and
the only nodes on the minimum rank belong to some subgraph with
rank="source" or rank="min".

Analogous criteria hold for rank="max" and rank="sink".
(Note: the minimum rank is topmost or leftmost, and the maximum rank is
bottommost or rightmost.)
For more information check this answer in Stack Overflow


Valid on:
Subgraphs

  Note:
  dot only.



  Search the Graphviz codebase for "rank"
  






  rankdir


Sets direction of graph layout

type: rankdir, default: TB


For example, if rankdir="LR", and barring cycles, an edge T -> H; will go
from left to right. By default, graphs are laid out from top to bottom.
This attribute also has a side-effect in determining how record nodes are
interpreted. See record shapes.




  
    
      
        Top to bottom (default)
      
    
  
  
    
    digraph {
    rankdir="TB"
    a -> b -> c;
}
  
     Edit in Playground
    
  







  
    
      
        Bottom to top
      
    
  
  
    
    digraph {
    rankdir="BT"
    a -> b -> c;
}
  
     Edit in Playground
    
  







  
    
      
        Left to right
      
    
  
  
    
    digraph {
    rankdir="LR"
    a -> b -> c;
}
  
     Edit in Playground
    
  







  
    
      
        Right to left
      
    
  
  
    
    digraph {
    rankdir="RL"
    a -> b -> c;
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "rankdir"
  






  ranksep


Specifies separation between ranks

type: double | doubleList, default: 0.5 (dot) , 1.0 (twopi) , minimum: 0.02


In dot, sets the desired rank separation, in inches.
This is the minimum vertical distance between the bottom of the nodes in one
rank and the tops of nodes in the next. If the value contains equally, the
centers of all ranks are spaced equally apart. Note that both
settings are possible, e.g., ranksep="1.2 equally".
In twopi, this attribute specifies the radial separation of concentric circles.
For twopi, ranksep can also be a list of doubles. The first double specifies
the radius of the inner circle; the second double specifies the increase in
radius from the first circle to the second; etc. If there are more circles than
numbers, the last number is used as the increment for the remainder.


Valid on:
Graphs

  Note:
  dot, twopi only.



  Search the Graphviz codebase for "ranksep"
  






  ratio


Sets the aspect ratio (drawing height/drawing width) for the drawing

type: double | string


Note that this is adjusted before the size attribute constraints
are enforced.
In addition, the calculations usually ignore the node sizes, so the
final drawing size may only approximate what is desired.
If ratio is numeric, ratio is taken as the desired aspect ratio.
Then, if the actual aspect ratio is less than the desired ratio,
the drawing height is scaled up to achieve the
desired ratio; if the actual ratio is greater than that desired ratio,
the drawing width is scaled up.
If ratio="fill" and the size
attribute is set, node positions are scaled, separately in both x
and y, so that the final drawing exactly fills the specified size.
If both size values exceed the width
and height of the drawing, then both coordinate values of each
node are scaled up accordingly. However, if either size dimension
is smaller than the corresponding dimension in the drawing, one
dimension is scaled up so that the final drawing has the same aspect
ratio as specified by size.
Then, when rendered, the layout will be
scaled down uniformly in both dimensions to fit the given
size, which may cause nodes and text
to shrink as well. This may not be what the user
wants, but it avoids the hard problem of how to reposition the
nodes in an acceptable fashion to reduce the drawing size.
If ratio="compress" and the size
attribute is set, dot attempts to compress the initial layout to fit
in the given size. This achieves a tighter packing of nodes but
reduces the balance and symmetry. This feature only works in dot.
If ratio="expand", the size attribute is set, and both the
width and the height of the graph are less than the value in
size, node positions are scaled uniformly until at least one
dimension fits size exactly. Note that this is distinct from
using size as the desired size, as here the drawing is expanded
before edges are generated and all node and text sizes remain unchanged.
If ratio="auto", the page attribute is set and the graph
cannot be drawn on a single page, then size is set to an
"ideal" value.
In particular, the size in a given dimension will be the smallest integral
multiple of the page size in that dimension which is at least half the
current size. The two dimensions are then scaled independently to the
new size. This feature only works in dot.


Valid on:
Graphs

  Search the Graphviz codebase for "ratio"
  






  rects


Rectangles for fields of records, in points

type: rect




Valid on:
Nodes

  Note:
  write only.



  Search the Graphviz codebase for "rects"
  






  regular


If true, force polygon to be regular.

type: bool, default: false


If true, the vertices of the polygon will lie on a circle whose center is the
center of the node.




  
  
    
    digraph {
    "pentagon1" [shape="pentagon"];
    "pentagon2" [shape="pentagon" regular=true]
    "hexagon1" [shape="hexagon"];
    "hexagon2" [shape="hexagon" regular=true];
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "regular"
  






  remincross


If there are multiple clusters, whether to run edge crossing minimization a second time.

type: bool, default: true




Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "remincross"
  






  repulsiveforce


The power of the repulsive force used in an extended Fruchterman-Reingold

type: double, default: 1.0, minimum: 0.0


force directed model. Values larger than 1 tend to reduce
the warping effect at the expense of less clustering.


Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "repulsiveforce"
  






  resolution


Synonym for dpi.

type: double, default: 96.0, minimum: 0.0




Valid on:
Graphs

  Note:
  bitmap output, svg only.



  Search the Graphviz codebase for "resolution"
  






  root


Specifies nodes to be used as the center of the layout

type: string | bool, default: <none> (graphs) , false (nodes) 


The center of the layout will be the root of the generated spanning tree.

As a graph attribute, this gives the name of the node.
As a node attribute, it specifies that the node should be used as a
central node.

In twopi, root will actually be the central node. In circo, the
block containing the node will be central in the drawing of its connected
component. If not defined, twopi will pick a most central node, and circo
will pick a random node.
If the root attribute is defined as the empty string, twopi will reset it to
name of the node picked as the root node.
For twopi, it is possible to have multiple roots, presumably one for each
component. If more than one node in a component is marked as the root,
twopi will pick one.


Valid on:
GraphsNodes

  Note:
  twopi, circo only.



  Search the Graphviz codebase for "root"
  






  rotate


If rotate=90, sets drawing orientation to landscape

type: int, default: 0






  
    
      
        Rotations
      
    
  
  
    
    digraph {
  rotate=90
  a -> b
}
  
     Edit in Playground
    
  



See also:

landscape
orientation



Valid on:
Graphs

  Search the Graphviz codebase for "rotate"
  






  rotation


Rotates the final layout counter-clockwise by the specified number of degrees

type: double, default: 0




Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "rotation"
  






  samehead


Edges with the same head and the same samehead value are aimed at the same point on the head

type: string, default: ""


This has no effect on loops.
Prior to Graphviz 8.0.1, each node can have at most 5 unique samehead values.
See limitation.
See also sametail.


Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "samehead"
  






  sametail


Edges with the same tail and the same sametail value are aimed at the same point on the tail.

type: string, default: ""


This has no effect on loops.
Prior to Graphviz 8.0.1, each node can have at most 5 unique sametail values.
See limitation.
See also samehead.


Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "sametail"
  






  samplepoints


Gives the number of points used for a circle/ellipse node

type: int, default: 8 (output) , 20 (overlap and image maps) 


Used if the input graph defines the vertices attribute, and
output is dot or xdot.
It plays the same role in neato, when adjusting the layout to avoid
overlapping nodes, and in image maps.


Valid on:
Nodes

  Search the Graphviz codebase for "samplepoints"
  






  scale


Scales layout by the given factor after the initial layout

type: double | point


If only a single number is given, that number scales both width and height.


Valid on:
Graphs

  Note:
  neato, twopi only.



  Search the Graphviz codebase for "scale"
  






  searchsize


During network simplex, the maximum number of edges with negative cut values to search when looking for an edge with minimum cut value.

type: int, default: 30




Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "searchsize"
  






  sep


Margin to leave around nodes when removing node overlap

type: addDouble | addPoint, default: +4


This guarantees a minimal non-zero distance between nodes.
If the attribute begins with a plus sign '+', an additive margin is
specified. That is, "+w,h" causes the node's bounding box to be increased by
w points on the left and right sides, and by h points on the top and bottom.
Without a plus sign, the node is scaled by 1 + w in the x coordinate and
1 + h in the y coordinate.
If only a single number is given, this is used for both dimensions.
If unset but esep is defined, the sep values will be set to the
esep values divided by 0.8. If esep is unset, the
default value is used.




  
    
      
        Example: No separation
      
    
  
  
    
    graph {
    layout="fdp"
    sep="0"
    A -- B
    B -- C
    C -- D
    D -- A
}
  
     Edit in Playground
    
  







  
    
      
        Example: separation of 3
      
    
  
  
    
    graph {
    layout="fdp"
    sep="3"
    A -- B
    B -- C
    C -- D
    D -- A
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  fdp, neato, sfdp, osage, circo, twopi only.



  Search the Graphviz codebase for "sep"
  






  shape


Sets the shape of a node

type: shape, default: ellipse






  
  
    
    digraph {
    "pentagon" [shape="pentagon"];
    "hexagon" [shape="hexagon"];
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "shape"
  






  shapefile


A file containing user-supplied node content

type: string, default: ""


(Deprecated).
Sets the node's shape="box". The image in the shapefile must be
rectangular. The image formats supported as well as the precise semantics of
how the file is used depends on the output format. For further
details, see Image Formats and External
PostScript files.
There is one exception to this usage: If shape="epsf",
shapefile gives a filename containing a definition of the node in
PostScript. The graphics defined must be contain all of the node content,
including any desired boundaries. For further details, see External
PostScript files.
Only paths to local resources are supported. If you want to use a URL to a
remote resource, see the
dot_url_resolve.py
script.


Valid on:
Nodes

  Search the Graphviz codebase for "shapefile"
  






  showboxes


Print guide boxes for debugging

type: int, default: 0, minimum: 0


Print guide boxes in PostScript at the beginning of
routesplines if showboxes=1, or at the end if showboxes=2. (Debugging, TB mode only!)


Valid on:
EdgesNodesGraphs

  Note:
  dot only.



  Search the Graphviz codebase for "showboxes"
  






  sides


Number of sides when shape=polygon

type: int, default: 4, minimum: 0






  
    
      
        Example: Polygons with 3-6 sides
      
    
  
  
    
    graph {
  Triangle  [shape=polygon sides=3]
  Rectangle [shape=polygon sides=4]
  Pentagon  [shape=polygon sides=5]
  Hexagon   [shape=polygon sides=6]
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "sides"
  






  size


Maximum width and height of drawing, in inches

type: double | point


If only a single number is given, this is used for both the width
and the height.
If defined and the drawing is larger than the given size,
the drawing is uniformly scaled down so that it fits within the given size.
If size ends in an exclamation point "!", then size is taken to be the
desired minimum size. In this case, if both dimensions of the drawing are
less than size, the drawing is scaled up uniformly until at least one
dimension equals its dimension in size.
There is some interaction between the size and ratio
attributes.


Valid on:
Graphs

  Search the Graphviz codebase for "size"
  






  skew


Skew factor for shape=polygon

type: double, default: 0.0, minimum: -100.0


Positive values skew top of polygon to right; negative to left.
See also distortion.




  
    
      
        Example
      
    
  
  
    
    graph {
  SkewLeft  [shape=polygon sides=4 skew=-.5]
  SkewRight [shape=polygon sides=4 skew=.5]
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "skew"
  






  smoothing


Specifies a post-processing step used to smooth out an uneven distribution of nodes.

type: smoothType, default: "none"




Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "smoothing"
  






  sortv


Sort order of graph components for ordering packmode packing.

type: int, default: 0, minimum: 0


If packmode indicates an array packing, sortv specifies an
insertion order among the components, with smaller values inserted first.


Valid on:
GraphsClustersNodes

  Search the Graphviz codebase for "sortv"
  






  splines


Controls how, and if, edges are represented

type: bool | string


If splines=true, edges are drawn as splines routed around nodes; if
splines=false, edges are drawn as line segments. If splines=none or
splines="", no edges are drawn at all.
(1 March 2007) splines=line and splines=spline can be
used as synonyms for splines=false and splines=true, respectively.
In addition, splines=polyline specifies that edges should be drawn as
polylines.
(28 Sep 2010) splines=ortho specifies edges should be
routed as polylines of axis-aligned segments. Currently, the routing
does not handle ports or, in dot, edge labels.
(25 Sep 2012) splines=curved specifies edges should be drawn as curved
arcs.


    
    


    splines=nonesplines=""
    splines=linesplines=false


    
    


    splines=polyline
    splines=curved


    
    


    splines=ortho
    splines=splinesplines=true


By default, splines is unset. How this is interpreted depends on
the layout engine. For dot, the default is to draw edges as splines. For all
other layouts, the default is to draw edges as line segments.
Note that for these latter layouts, if splines="true", this
requires non-overlapping nodes (cf. overlap).
If fdp is used for layout and splines="compound", then the edges are
drawn to avoid clusters as well as nodes.


Valid on:
Graphs

  Search the Graphviz codebase for "splines"
  






  start


Parameter used to determine the initial layout of nodes

type: startType, default: ""


If unset, the nodes are randomly placed in a unit square with the same seed
is always used for the random number generator, so the initial placement is
repeatable.
The following examples have the same graph, but render differently due to their start values:




  
    
      
        Set random seed to 1
      
    
  
  
    
    graph {
    layout="fdp"
    start=1
    A -- B; B -- C; C -- D; D -- A
}
  
     Edit in Playground
    
  







  
    
      
        Set random seed to 2, graph looks different
      
    
  
  
    
    graph {
    layout="fdp"
    start=2
    A -- B; B -- C; C -- D; D -- A
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  neato, fdp, sfdp only.



  Search the Graphviz codebase for "start"
  






  style


Set style information for components of the graph

type: style, default: ""


For cluster subgraphs, if style="filled", the cluster box's background is
filled.
If the default style attribute has been set for a component, an individual
component can use style="" to revert to the normal default. For example, if
the graph has




  
  
    
    digraph {
  edge [style="invis"]
  a -> b
}
  
     Edit in Playground
    
  



making all edges invisible, the b->c edge can override this via:




  
  
    
    digraph {
  edge [style="invis"]
  a -> b
  b -> c [style=""]
}
  
     Edit in Playground
    
  



Of course, the component can also explicitly set its style attribute to the desired value.


Valid on:
EdgesNodesClustersGraphs

  Search the Graphviz codebase for "style"
  






  stylesheet


A URL or pathname specifying an XML style sheet, used in SVG output

type: string, default: ""


Combine with class to style elements using CSS selectors.
See also:

class
id



Valid on:
Graphs

  Note:
  svg only.



  Search the Graphviz codebase for "stylesheet"
  






  tail_lp


Position of an edge's tail label, in points.

type: point


The position indicates the center of the label.


Valid on:
Edges

  Note:
  write only.



  Search the Graphviz codebase for "tail_lp"
  






  tailclip


If true, the tail of an edge is clipped to the boundary of the tail node

type: bool, default: true


otherwise, the end of the edge goes to the center of the node, or the
center of a port, if applicable.


Valid on:
Edges

  Search the Graphviz codebase for "tailclip"
  






  tailhref


Synonym for tailURL.

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "tailhref"
  






  taillabel


Text label to be placed near tail of edge

type: lblString, default: ""


See limitation.


Valid on:
Edges

  Search the Graphviz codebase for "taillabel"
  






  tailport


Indicates where on the tail node to attach the tail of the edge

type: portPos, default: center


See limitation.


Valid on:
Edges

  Search the Graphviz codebase for "tailport"
  






  tailtarget


Browser window to use for the tailURL link

type: escString, default: <none>


If the edge has a tailURL, tailtarget determines which
window of the browser is used for the URL.
Setting tailtarget=_graphviz will open a new window if it doesn't already
exist, or reuse it if it does.
If undefined, the value of the target is used.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "tailtarget"
  






  tailtooltip


Tooltip annotation attached to the tail of an edge

type: escString, default: ""


Used only if the edge has a tailURL attribute.

edgetooltip.
headtooltip.
labeltooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "tailtooltip"
  






  tailURL


If defined, tailURL is output as part of the tail label of the edge

type: escString, default: ""


Also, this value is used near the tail node, overriding any
URL value.
See limitation.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "tailURL"
  






  target


If the object has a URL, this attribute determines which window of the browser is used for the URL.

type: escString | string, default: <none>


See W3C documentation.


Valid on:
EdgesNodesGraphsClusters

  Note:
  map, svg only.



  Search the Graphviz codebase for "target"
  






  TBbalance


Which rank to move floating (loose) nodes to

type: string, default: ''


Valid options:

"min": Move floating (loose) nodes to minimum rank.
"max": Move floating (loose) nodes to maximum rank.
Otherwise, floating nodes are placed anywhere.

Despite the name TBbalance ("Top-Bottom Balance"), this also works with
left-right ranks, e.g. rankdir=LR.
Examples:




  
    
      
        Default Behaviour
      
    
  
  
    
    digraph {
    layout="dot"

    { rank="min"; "min" }
    { rank="max"; "max" }
    "min" -> "middle" -> "max"
    
    "Floater 1"
    "Floater 2"
}
  
     Edit in Playground
    
  







  
    
      
        Floating nodes moved to min rank
      
    
  
  
    
    digraph {
    layout="dot"
    TBbalance="min"

    { rank="min"; "min" }
    { rank="max"; "max" }
    "min" -> "middle" -> "max"
    
    "Floater 1"
    "Floater 2"
}
  
     Edit in Playground
    
  







  
    
      
        Floating nodes moved to max rank
      
    
  
  
    
    digraph {
    layout="dot"
    TBbalance="max"

    { rank="min"; "min" }
    { rank="max"; "max" }
    "min" -> "middle" -> "max"
    
    "Floater 1"
    "Floater 2"
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "TBbalance"
  






  tooltip


Tooltip (mouse hover text) attached to the node, edge, cluster, or graph

type: escString, default: ""


If tooltip is unset, Graphviz will use the object's label if defined.
Note
that if the label is a record specification or an HTML-like label, the
resulting tooltip may be unhelpful. In this case, if tooltips will be
generated, the user should set a tooltip attribute explicitly.




  
    
      
        Tooltips
      
    
  
  
    
    digraph {
  label="Graph Label"
  tooltip="Graph Tooltip"
  subgraph cluster_a {
    label="Cluster Label"
    tooltip="Cluster Tooltip"
    Node1 [tooltip="Node1 Tooltip"]
    Node1 -> Node2 [label="Edge" tooltip="Edge Tooltip"]
  }
}
  
     Edit in Playground
    
  



See also:

edgetooltip.
headtooltip.
labeltooltip.
tailtooltip.



Valid on:
NodesEdgesClustersGraphs

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "tooltip"
  






  truecolor


Whether internal bitmap rendering relies on a truecolor color model or uses

type: bool


color palette.
If truecolor is unset, truecolor is not used
unless there is a shapefile property
for some node in the graph.
The output model will use the input model when possible.
Use of color palettes results in less memory usage during creation of the
bitmaps and smaller output files.
Usually, the only time it is necessary to specify the truecolor model
is if the graph uses more than 256 colors.
However, if one uses bgcolor=transparent with
a color palette, font
antialiasing can show up as a fuzzy white area around characters.
Using truecolor=true avoids this problem.


Valid on:
Graphs

  Note:
  bitmap output only.



  Search the Graphviz codebase for "truecolor"
  






  URL


Hyperlinks incorporated into device-dependent output

type: escString, default: <none>


At present, used in ps2, cmap, i*map and svg formats.
For all these formats, URLs can be attached to nodes, edges and
clusters. URL attributes can also be attached to the root graph in ps2,
cmap and i*map formats. This serves as the base URL for relative URLs in the
former, and as the default image map file in the latter.
For svg, cmapx and imap output, the active area for a node is its
visible image.
For example, an unfilled
node with no drawn boundary will only be active on its label.
For other output, the active area is its bounding box.
The active area for a cluster is its bounding box.
For edges, the active areas are small circles where the edge contacts its head
and tail nodes. In addition, for svg, cmapx and imap, the active area
includes a thin polygon approximating the edge. The circles may
overlap the related node, and the edge URL dominates.
If the edge has a label, this will also be active.
Finally, if the edge has a head or tail label, this will also be active.
For edges, the attributes headURL,
tailURL, labelURL and
edgeURL allow control of various parts of an
edge.
if active areas of two edges overlap, it is unspecified which area dominates.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL





  
    
      
        Example: Van Gogh Paintings with Links
      
    
  
  
    
    graph {
  label="Vincent van Gogh Paintings"
  URL="https://en.wikipedia.org/wiki/Vincent_van_Gogh"

  subgraph cluster_self_portraits {
    URL="https://en.wikipedia.org/wiki/Portraits_of_Vincent_van_Gogh"
    label="Self-portraits"

    "Self-Portrait with Grey Felt Hat" [URL="https://www.vangoghmuseum.nl/en/collection/s0016V1962"]
    "Self-Portrait as a Painter" [URL="https://www.vangoghmuseum.nl/en/collection/s0022V1962"]
  }
  
  subgraph cluster_flowers {
    URL="https://en.wikipedia.org/wiki/Sunflowers_(Van_Gogh_series)"
    label="Flowers"

    "Sunflowers" [URL="https://www.nationalgallery.org.uk/paintings/vincent-van-gogh-sunflowers"]
    "Almond Blossom" [URL="https://www.vangoghmuseum.nl/en/collection/s0176V1962"]
  }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Note:
  map, postscript, svg only.



  Search the Graphviz codebase for "URL"
  






  vertices


Sets the coordinates of the vertices of the node's polygon, in inches

type: pointList


Used if the node is polygonal, and output is dot or xdot.
If the node is an ellipse or circle, the samplepoints
attribute affects the output.


Valid on:
Nodes

  Note:
  write only.



  Search the Graphviz codebase for "vertices"
  






  viewport


Clipping window on final drawing

type: viewPort, default: ""


viewport supersedes any size attribute. The width and height
of the viewport specify precisely the final size of the output.


Valid on:
Graphs

  Search the Graphviz codebase for "viewport"
  






  voro_margin


Tuning margin of Voronoi technique

type: double, default: 0.05, minimum: 0.0


Factor to scale up drawing to allow margin for expansion in
Voronoi technique.
dim' = (1+2*margin)*dim.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp, twopi, circo only.



  Search the Graphviz codebase for "voro_margin"
  






  weight


Weight of edge

type: int | double, default: 1, minimum: 0(dot,twopi), 1(neato,fdp)


In dot, the heavier the weight, the shorter, straighter and more vertical the edge is.
For twopi, weight=0 indicates the edge should not be used in
constructing a spanning tree from the root.
For other layouts, a larger weight encourages the layout to make the edge
length closer to that specified by the len attribute.
Weights in dot must be integers.




  
    
      
        Edge Weights
      
    
  
  
    
    digraph {
  root -> a
  root -> b [weight=2]
  root -> c [weight=3]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "weight"
  






  width


Width of node, in inches

type: double, default: 0.75, minimum: 0.01


This is taken as the initial, minimum width of the node. If
fixedsize is true, this will be the final width of the
node. Otherwise, if the node label requires more width to fit, the node's
width will be increased to contain the label.
If the output format is dot, the value given to width will be the final
value.
If the node shape is regular, the width and height are made identical:

If either the width or the height is set explicitly, that value is used.
If both the width or the height are set explicitly, the maximum of the two values is used.
If neither is set explicitly, the minimum of the two default values is used.





  
    
      
        Width Example
      
    
  
  
    
    digraph {
  "d" # default
  "1in" [width=1]
  "2in" [width=2]
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "width"
  






  xdotversion


Determines the version of xdot used in output

type: string


Only used for xdot output.
If unset, graphviz will set this attribute to the xdot version used for output.


Valid on:
Graphs

  Note:
  xdot only.



  Search the Graphviz codebase for "xdotversion"
  






  xlabel


External label for a node or edge

type: lblString, default: ""



For nodes, the label will be placed outside of the node but near it.
For edges, the label will be placed near the center of the edge. This can be
useful in dot to avoid the occasional problem when the use of edge labels
distorts the layout.
For other layouts, the
xlabel attribute can be viewed as a synonym for the label
attribute.

These labels are added after all nodes and edges have been placed.
The labels will be placed so that they do not overlap any node or label. This
means it may not be possible to place all of them. To force placing all of
them, set forcelabels=true.




  
    
      
        External Labels on Nodes and Edges
      
    
  
  
    
    digraph {
  "⚡" [xlabel="Sparks"]
  "🔥" [xlabel="Fires"]
  "⚡"->"🔥" [xlabel="Sometimes" label="Cause"]
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodes

  Search the Graphviz codebase for "xlabel"
  






  xlp


Position of an exterior label, in points

type: point


The position indicates the center of the label.


Valid on:
NodesEdges

  Note:
  write only.



  Search the Graphviz codebase for "xlp"
  






  z


Z-coordinate value for 3D layouts and displays

type: double, default: 0.0, minimum: -MAXFLOAT, -1000


Deprecated: Use pos attribute, along with
dimen and/or dim to specify dimensions.
If the graph has
dim set to 3 (or more), neato will use a node's z value for
the z coordinate of its initial position if its pos attribute
is also defined.
Even if no z values are specified in the input, it is necessary to
declare a z attribute for nodes, e.g, using node[z=""] in order to get
z values on output. Thus, setting dim=3 but not declaring z will cause
neato -Tvrml to layout the graph in 3D but project the layout onto the
xy-plane for the rendering. If the z attribute is declared, the final
rendering will be in 3D.


Valid on:
Nodes

  Search the Graphviz codebase for "z"
  






	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    _background
  

            

	_background
  A string in the xdot format specifying an arbitrary background

type: xdot, default: <none>


During rendering, the canvas is first filled as described in the
bgcolor attribute.
Then, if _background is defined, the graphics
operations described in the string are performed on the canvas.
See xdot format page for more information.




  
    
      
        Render a red square in the background
      
    
  
  
    
    digraph G {
  _background="c 7 -#ff0000 p 4 4 4 36 4 36 36 4 36";
  a -> b
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "_background"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    area
  

            

	area
  Indicates the preferred area for a node or empty cluster

type: double, default: 1.0, minimum: >0






  
    
      
        Example: Australian Coins, area proportional to value
      
    
  
  
    
    graph {
  layout="patchwork"
  node [style=filled]
  "5c"  [area=  5 fillcolor=silver]
  "10c" [area= 10 fillcolor=silver]
  "20c" [area= 20 fillcolor=silver]
  "50c" [area= 50 fillcolor=silver]
  "$1"  [area=100 fillcolor=gold]
  "$2"  [area=200 fillcolor=gold]
}
  
     Edit in Playground
    
  





Valid on:
NodesClusters

  Note:
  patchwork only.



  Search the Graphviz codebase for "area"
  



	
	
	
  Last modified October 2, 2022: area: shorten description (ae570f0)\n\n\n\nDocumentation
  
    Attributes
  
    arrowhead
  

            

	arrowhead
  Style of arrowhead on the head node of an edge

type: arrowType, default: normal


This will only appear if the dir attribute
is forward or both.
See the limitation.
See also:

arrowtail



Valid on:
Edges

  Search the Graphviz codebase for "arrowhead"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    arrowsize
  

            

	arrowsize
  Multiplicative scale factor for arrowheads

type: double, default: 1.0, minimum: 0.0






  
    
      
        Example
      
    
  
  
    
    digraph {
  quiver -> "0.5" [arrowsize=0.5]
  quiver -> "1"
  quiver -> "2" [arrowsize=2]
  quiver -> "3" [arrowsize=3]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "arrowsize"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    arrowtail
  

            

	arrowtail
  Style of arrowhead on the tail node of an edge

type: arrowType, default: normal


This will only appear if the dir attribute
is back or both.
See the limitation.
See also:

arrowhead



Valid on:
Edges

  Search the Graphviz codebase for "arrowtail"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    bb
  

            

	bb
  Bounding box of drawing in points

type: rect




Valid on:
ClustersGraphs

  Note:
  write only.



  Search the Graphviz codebase for "bb"
  



	
	
	
  Last modified January 4, 2024: Document that 'bb' attribute supports clusters (a2e7af1)\n\n\n\nDocumentation
  
    Attributes
  
    beautify
  

            

	beautify
  Whether to draw leaf nodes uniformly in a circle around the root node in sfdp.

type: bool, default: false


Whether to try to draw leaf nodes uniformly on a circle
around the root node.
Prior to Graphviz 8.0.1, this is affected by
Issue 2283: rendering one
fewer sector than necessary, overlapping the first and last nodes.
Examples:




  
    
      
        Beautify
      
    
  
  
    
    digraph G {
    layout="sfdp"
    beautify=true

    N0 -> {N1; N2; N3; N4; N5; N6}
}
  
     Edit in Playground
    
  







  
    
      
        No beautify
      
    
  
  
    
    digraph G {
    layout="sfdp"
    beautify=false

    N0 -> {N1; N2; N3; N4; N5; N6}
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "beautify"
  



	
	
	
  Last modified March 27, 2023: note 'beautify=true' issue is now fixed (0aa9a49)\n\n\n\nDocumentation
  
    Attributes
  
    bgcolor
  

            

	bgcolor
  Canvas background color

type: color | colorList, default: <none>


When attached to the root graph, this color is used as the background for
entire canvas.
When a cluster attribute, it is used as the initial background
for the cluster. If a cluster has a filled style, the cluster's
fillcolor will overlay the background color.
If the value is a colorList, a gradient fill is used. By
default, this is a linear fill; setting style=radial will
cause a radial fill. Only two colors are used. If the second color (after a
colon) is missing, the default color is used for it. See also the
gradientangle attribute for setting the gradient angle.
For certain output formats, such as PostScript, no fill is done for the root
graph unless bgcolor is explicitly set.
For bitmap formats, however, the bits need to be initialized to something, so
the canvas is filled with white by default. This means that if the bitmap
output is included in some other document, all of the bits within the
bitmap's bounding box will be set, overwriting whatever color or graphics
were already on the page. If this effect is not desired, and you only want to
set bits explicitly assigned in drawing the graph, set
bgcolor="transparent".




  
    
      
        Example
      
    
  
  
    
    graph {
  bgcolor="lightblue"
  label="Home"
  subgraph cluster_ground_floor {
    bgcolor="lightgreen"
    label="Ground Floor"
    Lounge
    Kitchen
  }
  subgraph cluster_top_floor {
    bgcolor="lightyellow"
    label="Top Floor"
    Bedroom
    Bathroom
  }
}
  
     Edit in Playground
    
  





Valid on:
GraphsClusters

  Search the Graphviz codebase for "bgcolor"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    center
  

            

	center
  Whether to center the drawing in the output canvas

type: bool, default: false


Can be true or false.


Valid on:
Graphs

  Search the Graphviz codebase for "center"
  



	
	
	
  Last modified September 14, 2022: Update center.md: use 'whether' (shorter description). (ce5ce41)\n\n\n\nDocumentation
  
    Attributes
  
    charset
  

            

	charset
  Character encoding used when interpreting string input as a text label.

type: string, default: "UTF-8"


The default value is "UTF-8". The other legal values are:

"utf-8" / "utf8" (default value)
"iso-8859-1" / "ISO_8859-1" / "ISO8859-1" / "ISO-IR-100" / "Latin1" / "l1" / "latin-1"
"big-5" / "big5": the Big-5 Chinese encoding

The charset attribute is case-insensitive.
Note that if the character encoding used in the input does not match the
charset value, the resulting output may be very strange.
It is not possible to use HTML-like labels in
combination with Big-5 encoding.




  
    
      
        Example
      
    
  
  
    
    digraph G {
  charset="UTF-8"
  "🍔" -> "💩"
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "charset"
  



	
	
	
  Last modified March 10, 2024: note that Big-5 and HTML-like labels do not play together (ac33e79)\n\n\n\nDocumentation
  
    Attributes
  
    class
  

            

	class
  Classnames to attach to the node, edge, graph, or cluster's SVG element

type: string, default: ""


Combine with stylesheet for styling SVG output
using CSS classnames.
Multiple space-separated classes are supported.
See also:

stylesheet
id

Example:




  
  
    
    digraph G {
  graph [class="cats"];

  subgraph cluster_big {
    graph [class="big_cats"];

    "Lion" [class="yellow social"];
    "Snow Leopard" [class="white solitary"];
  }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesClustersGraphs

  Note:
  svg only.



  Search the Graphviz codebase for "class"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    cluster
  

            

	cluster
  Whether the subgraph is a cluster

type: bool, default: false


Subgraph clusters are rendered differently, e.g. dot renders a box around subgraph clusters, but doesn't draw a box around non-subgraph clusters.
Example:




  
  
    
    digraph cats {
  subgraph cluster_big_cats {
    // This subgraph is a cluster, because the name begins with "cluster"
    
    "Lion";
    "Snow Leopard";
  }

  subgraph domestic_cats {
    // This subgraph is also a cluster, because cluster=true.
    cluster=true;

    "Siamese";
    "Persian";
  }

  subgraph not_a_cluster {
    // This subgraph is not a cluster, because it doesn't start with "cluster",
    // nor sets cluster=true.
    
    "Wildcat";
  }
}
  
     Edit in Playground
    
  





Valid on:
ClustersSubgraphs

  Search the Graphviz codebase for "cluster"
  



	
	
	
  Last modified September 17, 2022: Update cluster.md: remove duplicate dot (f227bc5)\n\n\n\nDocumentation
  
    Attributes
  
    clusterrank
  

            

	clusterrank
  Mode used for handling clusters

type: clusterMode, default: local


If clusterrank=local, a
subgraph whose name begins with cluster is given special treatment.
The subgraph is laid out separately, and then integrated as a unit into
its parent graph, with a bounding rectangle drawn about it.
If the cluster has a label parameter, this label
is displayed within the rectangle.
Note also that there can be clusters within clusters.
The modes clusterrank=global and clusterrank=none appear to
be identical, both turning off the special cluster processing.


Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "clusterrank"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    color
  

            

	color
  Basic drawing color for graphics, not text

type: color | colorList, default: black


For the latter, use the
fontcolor attribute.
For edges, the value can either be a single color or a
colorList.
In the latter case, if colorList has no fractions,
the edge is drawn using parallel splines or lines,
one for each color in the list, in the order given.
The head arrow, if any, is drawn using the first color in the list,
and the tail arrow, if any, the second color. This supports the common
case of drawing opposing edges, but using parallel splines instead of
separately routed multiedges.
If any fraction is used, the colors are drawn in series, with each color
being given roughly its specified fraction of the edge.
For example, the graph:




  
    
      
        Edge Color Example
      
    
  
  
    
    digraph G {
  a -> b [dir=both color="red:blue"]
  c -> d [dir=none color="green:red;0.25:blue"]
}
  
     Edit in Playground
    
  



yields:





  
    
      
        Subgraph & Node Color Example
      
    
  
  
    
    digraph G {
  subgraph cluster_yellow {
    color="yellow"
    a [color="red"]
    b [color="green"]
  }
}
  
     Edit in Playground
    
  



yields:

See also:

colorscheme



Valid on:
EdgesNodesClusters

  Search the Graphviz codebase for "color"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    colorscheme
  

            

	colorscheme
  A color scheme namespace: the context for interpreting color names

type: string, default: ""


In particular, if a color value has form "xxx" or "//xxx",
then the color xxx will be evaluated according to the current color scheme.
If no color scheme is set, the standard X11 naming is used.
For example, if colorscheme=oranges9 (from Brewer color schemes), then color=7 is interpreted as
color="/oranges9/7", the 7th color in the oranges9 colorscheme.




  
    
      
        Orange Colorscheme
      
    
  
  
    
    graph {
  node [colorscheme=oranges9] # Apply colorscheme to all nodes
  1 [color=1]
  2 [color=2]
  3 [color=3]
  4 [color=4]
  5 [color=5]
  6 [color=6]
  7 [color=7]
  8 [color=8]
  9 [color=9]
}
  
     Edit in Playground
    
  







  
    
      
        Green Colorscheme
      
    
  
  
    
    graph {
  node [colorscheme=greens9] # Apply colorscheme to all nodes
  1 [color=1]
  2 [color=2]
  3 [color=3]
  4 [color=4]
  5 [color=5]
  6 [color=6]
  7 [color=7]
  8 [color=8]
  9 [color=9]
}
  
     Edit in Playground
    
  



See also:

color



Valid on:
EdgesNodesClustersGraphs

  Search the Graphviz codebase for "colorscheme"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    comment
  

            

	comment
  Comments are inserted into output

type: string, default: ""


Device-dependent.




  
    
      
        Example
      
    
  
  
    
    digraph {
  comment="I am a graph"
  A [comment="I am node A"]
  B [comment="I am node B"]
  A->B [comment="I am an edge"]
}
  
     Edit in Playground
    
  



Outputs SVG with comments:
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.47.1 (20210417.1919)
 -->
<!-- This is a graph -->
<!-- Pages: 1 -->
<svg width="62pt" height="116pt"
 viewBox="0.00 0.00 62.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-112 58,-112 58,4 -4,4"/>
<!-- A -->
<!-- I am node A -->
<g id="node1" class="node">
<title>A</title>
<ellipse fill="none" stroke="black" cx="27" cy="-90" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-86.3" font-family="Times,serif" font-size="14.00">A</text>
</g>
<!-- B -->
<!-- I am node B -->
<g id="node2" class="node">
<title>B</title>
<ellipse fill="none" stroke="black" cx="27" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-14.3" font-family="Times,serif" font-size="14.00">B</text>
</g>
<!-- A&#45;&gt;B -->
<!-- I am an edge -->
<g id="edge1" class="edge">
<title>A&#45;&gt;B</title>
<path fill="none" stroke="black" d="M27,-71.7C27,-63.98 27,-54.71 27,-46.11"/>
<polygon fill="black" stroke="black" points="30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1"/>
</g>
</g>
</svg>


Valid on:
EdgesNodesGraphs

  Search the Graphviz codebase for "comment"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    compound
  

            

	compound
  If true, allow edges between clusters

type: bool, default: false


See lhead and ltail.




  
  
    
    digraph {
  compound=true;

  subgraph cluster_a {
    label="Cluster A";
    node1; node3; node5; node7;
  }
  subgraph cluster_b {
    label="Cluster B";
    node2; node4; node6; node8;
  }

  node1 -> node2 [label="1"];
  node3 -> node4 [label="2" ltail="cluster_a"];
  
  node5 -> node6 [label="3" lhead="cluster_b"];
  node7 -> node8 [label="4" ltail="cluster_a" lhead="cluster_b"];
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Note:
  dot only.



  Search the Graphviz codebase for "compound"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    concentrate
  

            

	concentrate
  If true, use edge concentrators

type: bool, default: false


This merges multiedges into a single edge and causes partially parallel
edges to share part of their paths. The latter feature is not yet available
outside of dot.
Only works for non-contiguous nodes.




  
    
      
        Example
      
    
  
  
    
    digraph {
    concentrate=true
    a -> b [label="1"]
    c -> b
    d -> b
}
  
     Edit in Playground
    
  





Valid on:
Graphs

  Search the Graphviz codebase for "concentrate"
  



	
	
	
  Last modified December 15, 2024: Update concentrate.md (8f0cf3b)\n\n\n\nDocumentation
  
    Attributes
  
    constraint
  

            

	constraint
  If false, the edge is not used in ranking the nodes

type: bool, default: true


For example in the graph:




  
  
    
    digraph G {
  a -> c;
  a -> b;
  b -> c [constraint=false];
}
  
     Edit in Playground
    
  



the edge b -> c does not add a constraint during rank
assignment, so the only constraints are that a be above b and c,
yielding the graph:



Valid on:
Edges

  Note:
  dot only.



  Search the Graphviz codebase for "constraint"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    Damping
  

            

	Damping
  Factor damping force motions.

type: double, default: 0.99, minimum: 0.0


On each iteration, a node's movement
is limited to this factor of its potential motion. By being less than
1.0, the system tends to "cool", thereby preventing cycling.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "Damping"
  



	
	
	
  Last modified November 26, 2022: Update Damping.md: Fix description by moving half-sentence to body (1f5548d)\n\n\n\nDocumentation
  
    Attributes
  
    decorate
  

            

	decorate
  Whether to connect the edge label to the edge with a line

type: bool, default: false


If true, attach edge label to edge by a 2-segment polyline,
underlining the label, then going to the closest point of spline.




  
    
      
        Example
      
    
  
  
    
    digraph {
  a -> a [label="AA" decorate=true]
  a -> b [label="AB" decorate=true]
  b -> b [label="BB" decorate=false]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "decorate"
  



	
	
	
  Last modified September 17, 2022: Update decorate.md: add another example (91744c7)\n\n\n\nDocumentation
  
    Attributes
  
    defaultdist
  

            

	defaultdist
  The distance between nodes in separate connected components

type: double, default: 1+(avg. len)*sqrt(|V|), minimum: epsilon


If set too small, connected components may overlap.
Only applicable if pack=false.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "defaultdist"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    dim
  

            

	dim
  Set the number of dimensions used for the layout

type: int, default: 2, minimum: 2


The maximum value allowed is 10.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp only.



  Search the Graphviz codebase for "dim"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    dimen
  

            

	dimen
  Set the number of dimensions used for rendering

type: int, default: 2, minimum: 2


The maximum value allowed is 10.
If both dimen and dim are set, the latter specifies
the dimension used for layout, and the former for rendering.
If only dimen is set, this is used for both layout and rendering
dimensions.
Note that, at present, all aspects of rendering are 2D. This includes
the shape and size of nodes, overlap removal, and edge routing. Thus,
for dimen > 2, the only valid information is the pos
attribute of the nodes.
All other coordinates will be 2D and, at best, will reflect a projection
of a higher-dimensional point onto the plane.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp only.



  Search the Graphviz codebase for "dimen"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    dir
  

            

	dir
  Edge type for drawing arrowheads

type: dirType, default: forward (directed) , none (undirected) 


Indicates which ends of the edge should be decorated with an arrowhead.
The actual style of the arrowhead can be specified using the
arrowhead and arrowtail attributes.
See limitation.




  
    
      
        Example
      
    
  
  
    
    digraph {
  A->B [dir=forward]
  C->D [dir=back]
  E->F [dir=both]
  G->H [dir=none]
}
  
     Edit in Playground
    
  





Valid on:
Edges

  Search the Graphviz codebase for "dir"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    diredgeconstraints
  

            

	diredgeconstraints
  Whether to constrain most edges to point downwards

type: string | bool, default: false


If true, constraints are generated for each edge in the largest (heuristic)
directed acyclic subgraph such that the edge must point downwards.
Only valid when mode="ipsep".
If hier, generates level constraints similar to those used with
mode="hier". The main difference is that, in the latter
case, only these constraints are involved, so a faster solver can be used.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "diredgeconstraints"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    distortion
  

            

	distortion
  Distortion factor for shape=polygon

type: double, default: 0.0, minimum: -100.0


Positive values cause top part to be larger than bottom; negative values do
the opposite.
See also skew.




  
    
      
        Example
      
    
  
  
    
    graph {
  LargeBottom [shape=polygon sides=4 distortion=-.5]
  LargeTop    [shape=polygon sides=4 distortion=.5]
}
  
     Edit in Playground
    
  





Valid on:
Nodes

  Search the Graphviz codebase for "distortion"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    dpi
  

            

	dpi
  Specifies the expected number of pixels per inch on a display device

type: double, default: 96.0, minimum: 0.0


For bitmap output, dpi guarantees that text rendering will be done more
accurately, both in size and in placement.
For SVG output, dpi guarantees the dimensions in the output correspond to
the correct number of points or inches.


Valid on:
Graphs

  Note:
  bitmap output, svg only.



  Search the Graphviz codebase for "dpi"
  



	
	
	
  Last modified November 4, 2024: Fix 'dpi' default/minimum values (4d353d8)\n\n\n\nDocumentation
  
    Attributes
  
    edgehref
  

            

	edgehref
  Synonym for edgeURL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "edgehref"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    edgetarget
  

            

	edgetarget
  Browser window to use for the edgeURL link

type: escString, default: <none>


If the edge has a URL or edgeURL
attribute, edgetarget determines which window of the
browser is used
for the URL attached to the non-label part of the edge.
Setting edgetarget=_graphviz will open a new window if it
doesn't already exist, or reuse it if it does.
If undefined, the value of the target is used instead.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "edgetarget"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    edgetooltip
  

            

	edgetooltip
  Tooltip annotation attached to the non-label part of an edge

type: escString, default: ""



headtooltip.
labeltooltip.
tailtooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "edgetooltip"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    edgeURL
  

            

	edgeURL
  The link for the non-label parts of an edge

type: escString, default: ""


edgeURL overrides any URL defined for the edge.
Also, edgeURL is used near the head or tail node unless overridden
by headURL or tailURL, respectively.
See limitation.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "edgeURL"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    epsilon
  

            

	epsilon
  Terminating condition

type: double, default: .0001 * # nodes (mode == KK) , .0001 (mode == major) , .01 (mode == sgd) 


If the length squared of all energy gradients are
less than epsilon, the algorithm stops.


Valid on:
Graphs

  Note:
  neato only.



  Search the Graphviz codebase for "epsilon"
  



	
	
	
  Last modified September 17, 2022: Update epsilon.md: remove stray apostrophe (cb7ab46)\n\n\n\nDocumentation
  
    Attributes
  
    esep
  

            

	esep
  Margin used around polygons for purposes of spline edge routing

type: addDouble | addPoint, default: +3


The interpretation is the same as given for sep. esep should
normally be strictly less than sep.


Valid on:
Graphs

  Note:
  neato, fdp, sfdp, osage, circo, twopi only.



  Search the Graphviz codebase for "esep"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    fillcolor
  

            

	fillcolor
  Color used to fill the background of a node or cluster

type: color | colorList, default: lightgrey (nodes) , black (clusters) 


Assuming style=filled, or a filled arrowhead.
If fillcolor is not defined, color is
used. (For clusters, if color is not defined,
bgcolor is used.) If this is not defined,
the default is used, except for
shape=point or when the output
format is MIF,
which use black by default.
If the value is a colorList, a gradient fill is
used. By default, this is a linear fill; setting style=radial will
cause a radial fill. At present, only two colors are used. If the second
color (after a colon) is missing, the default color is used for it.
See also the gradientangle attribute
for setting the gradient angle.
Note that a cluster inherits the root graph's attributes if defined.
Thus, if the root graph has defined a fillcolor, this will override a
color or bgcolor attribute set for the cluster.


Valid on:
NodesEdgesClusters

  Search the Graphviz codebase for "fillcolor"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    fixedsize
  

            

	fixedsize
  Whether to use the specified width and height attributes to choose node size (rather than sizing to fit the node contents)

type: bool | string, default: false


If false, the size of a node is determined by smallest width and height
needed to contain its label and image, if any, with a margin specified by
the margin attribute.
The width and height must also be at least as large as the sizes specified by
the width and height attributes, which specify
the minimum values for these parameters.
If true, the node size is specified by the values of the width
and height attributes only and is not expanded to contain the
text label. There will be a warning if the label (with margin) cannot fit
within these limits.
If the fixedsize attribute is set to shape, the
width and height attributes also determine the size
of the node shape, but the label can be much larger. Both the label and shape
sizes are used when avoiding node overlap, but all edges to the node ignore
the label and only contact the node shape. No warning is given if the label
is too large.


Valid on:
Nodes

  Search the Graphviz codebase for "fixedsize"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    fontcolor
  

            

	fontcolor
  Color used for text

type: color, default: black




Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "fontcolor"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    fontname
  

            

	fontname
  Font used for text

type: string, default: "Times-Roman"


This very much depends on the output format and, for
non-bitmap output such as PostScript or SVG, the availability of the font
when the graph is displayed or printed. As such, it is best to rely on font
faces that are generally available, such as Times-Roman, Helvetica or
Courier.
How font names are resolved also depends on the underlying library that
handles font name resolution. If Graphviz was built using the fontconfig
library, the
latter library will be used to search for the font. See the commands
fc-list, fc-match and the other fontconfig commands for how names are
resolved and which fonts are available. Other systems may provide their own
font package, such as Quartz for OS X.
Note that various font attributes, such as weight and slant, can be built
into the font name. Unfortunately, the syntax varies depending on which font
system is dominant. Thus, using fontname="times bold italic" will produce a
bold, slanted Times font using Pango, the usual main font library.
Alternatively, fontname="times:italic" will produce a slanted Times font from
fontconfig, while fontname="times-bold" will resolve to a bold Times using
Quartz. You will need to ascertain which package is used by your Graphviz
system and refer to the relevant documentation.
If Graphviz is not built with a high-level font library, fontname will be
considered the name of a Type 1 or True Type font file. If you specify
fontname=schlbk, the tool will look for a file named schlbk.ttf or schlbk.pfa
or schlbk.pfb in one of the directories specified by the
fontpath attribute. The lookup does support various aliases
for the common fonts.




  
  
    
    digraph {
    label="Comic Sans MS"
    fontname="Comic Sans MS"
    subgraph cluster_a {
      label="Courier New"
      fontname="Courier New"
      Arial [fontname="Arial"];
      Arial -> Arial [label="Impact" fontname="Impact"]
    }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "fontname"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    fontnames
  

            

	fontnames
  Allows user control of how basic fontnames are represented in SVG output

type: string, default: ""


If fontnames is undefined or hd, fontconfig font conventions are used.
The default Times-Roman font will be mapped to an equivalent available
system font, such as Times New Roman (Windows) or Times (some Linux).
If fontnames is set to svg, the output will use known SVG fontnames.
If fontnames is set to ps, PostScript font names like Times-Roman are
used directly.
In all cases, the basic SVG font serif is used as a fallback for the
named font. (So, a diagram containing text in Times-Roman might have
that text represented in the SVG output by a <text> tag with the
attribute font-family="Times-Roman,serif".)


Valid on:
Graphs

  Note:
  svg only.



  Search the Graphviz codebase for "fontnames"
  



	
	
	
  Last modified February 1, 2025: attributes: Update 'fontnames' docs (0f77df9)\n\n\n\nDocumentation
  
    Attributes
  
    fontpath
  

            

	fontpath
  Directory list used by libgd to search for bitmap fonts

type: string, default: <system-dependent>


Used if Graphviz was not built with the fontconfig
library.
If fontpath is not set, the environment
variable DOTFONTPATH is checked.
If DOTFONTPATH is not set, GDFONTPATH is checked.
If GDFONTPATH not set, libgd uses its compiled-in font path.
Note that fontpath is an attribute of the root graph.


Valid on:
Graphs

  Search the Graphviz codebase for "fontpath"
  



	
	
	
  Last modified September 17, 2022: Update fontpath.md: add description (41116ab)\n\n\n\nDocumentation
  
    Attributes
  
    fontsize
  

            

	fontsize
  Font size, in points, used for text

type: double, default: 14.0, minimum: 1.0






  
  
    
    digraph {
    label="40pt Graph Label"
    fontsize="40"
    subgraph cluster_a {
      label="30pt Cluster Label"
      fontsize="30pt"
      "20pt Node" [fontsize="20pt"];
      "20pt Node"-> "20pt Node" [label="10pt Edge" fontsize="10"]
    }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "fontsize"
  



	
	
	
  Last modified June 18, 2022: attributes descriptions with links (25b13ac)\n\n\n\nDocumentation
  
    Attributes
  
    forcelabels
  

            

	forcelabels
  Whether to force placement of all xlabels, even if overlapping

type: bool, default: true


If true, all xlabel attributes are placed, even if there is some overlap with nodes or other labels.


Valid on:
Graphs

  Search the Graphviz codebase for "forcelabels"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    gradientangle
  

            

	gradientangle
  If a gradient fill is being used, this determines the angle of the fill

type: int, default: 0, minimum: 0


For linear fills, the colors transform along a line specified by the angle
and the center of the object. For radial fills, a value of zero causes the
colors to transform radially from the center; for non-zero values, the colors
transform from a point near the object's periphery as specified by the value.
If unset, the default angle is 0.


Valid on:
NodesClustersGraphs

  Search the Graphviz codebase for "gradientangle"
  



	
	
	
  Last modified November 14, 2022: Update gradientangle.md: Set default to 0, consistent with body (99e3d5a)\n\n\n\nDocumentation
  
    Attributes
  
    group
  

            

	group
  Name for a group of nodes, for bundling edges avoiding crossings.

type: string, default: ""


If the end points of an edge belong to the same group, i.e., have the
same group attribute, parameters are set to avoid crossings and keep
the edges straight.


Valid on:
Nodes

  Note:
  dot only.



  Search the Graphviz codebase for "group"
  



	
	
	
  Last modified September 18, 2022: Update group.md: add descriptoin (42f29b7)\n\n\n\nDocumentation
  
    Attributes
  
    head_lp
  

            

	head_lp
  Center position of an edge's head label

type: point


In points.


Valid on:
Edges

  Note:
  write only.



  Search the Graphviz codebase for "head_lp"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    headclip
  

            

	headclip
  If true, the head of an edge is clipped to the boundary of the head node

type: bool, default: true


Otherwise, the end of the edge goes to the center of the node, or the
center of a port, if applicable.


Valid on:
Edges

  Search the Graphviz codebase for "headclip"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    headhref
  

            

	headhref
  Synonym for headURL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "headhref"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    headlabel
  

            

	headlabel
  Text label to be placed near head of edge

type: lblString, default: ""


See limitation.


Valid on:
Edges

  Search the Graphviz codebase for "headlabel"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    headport
  

            

	headport
  Indicates where on the head node to attach the head of the edge

type: portPos, default: center


In the default case, the edge is aimed towards the center of the node,
and then clipped at the node boundary.
See limitation.


Valid on:
Edges

  Search the Graphviz codebase for "headport"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    headtarget
  

            

	headtarget
  Browser window to use for the headURL link

type: escString, default: <none>


If the edge has a headURL,
headtarget determines which window of the
browser is used
for the URL. Setting headURL=_graphviz will open a new window if the window
doesn't already exist, or reuse the window if it does.
If undefined, the value of the target is used.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "headtarget"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    headtooltip
  

            

	headtooltip
  Tooltip annotation attached to the head of an edge

type: escString, default: ""


Used only if the edge has a headURL attribute.
See also:

edgetooltip.
labeltooltip.
tailtooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "headtooltip"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    headURL
  

            

	headURL
  If defined, headURL is output as part of the head label of the edge

type: escString, default: ""


Also, this value is used near the head node, overriding any URL value.
See limitation.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "headURL"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    height
  

            

	height
  Height of node, in inches

type: double, default: 0.5, minimum: 0.02


This is taken as the initial, minimum height of the node. If
fixedsize is true, this will be the final height of the
node. Otherwise, if the node label requires more height to fit, the node's height
will be increased to contain the label.
If the output format is dot, the value given to height will be the final
value.
If the node shape is regular, the width and height are made identical:

If both the width and the height are set explicitly, the maximum of the
two values is used.
If one of width or height is set explicitly, that value is
used for both width and height.
If neither is set explicitly, the minimum of the two default values
is used.





  
    
      
        Height Example
      
    
  
  
    
    digraph G {
  "default"
  "1in" [height=1]
  "2in" [height=2]
}
  
     Edit in Playground
    
  



See also:

width



Valid on:
Nodes

  Search the Graphviz codebase for "height"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    href
  

            

	href
  Synonym for URL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
GraphsClustersNodesEdges

  Note:
  map, postscript, svg only.



  Search the Graphviz codebase for "href"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    id
  

            

	id
  Identifier for graph objects

type: escString, default: ""


Allows the graph author to provide an identifier for graph objects which is
to be included in the output.
Normal \N, \E, \G substitutions are applied.
If provided, it is the responsibility of the provider to keep
id values unique for its intended downstream use.
Note, in particular, that \E does not provide a unique id for multi-edges.
If no id attribute is provided, then a unique internal id is used. However,
this value is unpredictable by the graph writer.
If the graph provides an id attribute, this will be used as a prefix for
internally generated attributes. By making internally-used attributes
distinct, the user can include multiple image maps in the same document.


Valid on:
GraphsClustersNodesEdges

  Note:
  map, postscript, svg only.



  Search the Graphviz codebase for "id"
  



	
	
	
  Last modified September 14, 2022: Update id.md: remove extra dot (970795a)\n\n\n\nDocumentation
  
    Attributes
  
    image
  

            

	image
  Gives the name of a file containing an image to be displayed inside a node

type: string, default: ""


The image file must be in one of the recognized
formats, typically JPEG, PNG, GIF, BMP, SVG, or
Postscript, and be able to be converted into the desired output format.
The file must contain the image size information:

Bitmap formats usually already contain image size.
PostScript files must contain a line starting with %%BoundingBox: followed
by four integers specifying the lower left x and y coordinates and the upper
right x and y coordinates of the bounding box for the image, the coordinates
being in points.
An SVG image file must contain width and height attributes, typically as part
of the svg element. The values for these should have the form of a floating
point number, followed by optional units, e.g., width="76pt". Recognized
units are in, px, pc, pt, cm and mm for inches, pixels, picas, points,
centimeters and millimeters, respectively. The default unit is points.

Unlike with the shapefile attribute, the image is treated
as node content rather than the entire node. In particular, an image can be
contained in a node of any shape, not just a rectangle.
Only paths to local resources are supported. If you want to use a URL to a
remote resource, see the
dot_url_resolve.py
script.


Valid on:
Nodes

  Search the Graphviz codebase for "image"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    imagepath
  

            

	imagepath
  A list of directories in which to look for image files

type: string, default: ""


When specified
by the image attribute or using the IMG element in HTML-like
labels.
imagepath should be a list of (absolute or
relative) pathnames, each separated by a semicolon ; (for Windows) or a colon :
(all other OS).
The first directory in which a file of the given name is
found will be used to load the image.
If imagepath is not set, relative pathnames for the image file will be
interpreted with respect to the current working directory.


Valid on:
Graphs

  Search the Graphviz codebase for "imagepath"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    imagepos
  

            

	imagepos
  Controls how an image is positioned within its containing node

type: string, default: "mc"


imagepos only has an effect when the image is smaller than the containing node.
The default is to be centered both horizontally and vertically.
Valid values:

tl - Top Left
tc - Top Centered
tr - Top Right
ml - Middle Left
mc - Middle Centered (the default)
mr - Middle Right
bl - Bottom Left
bc - Bottom Centered
br - Bottom Right



Valid on:
Nodes

  Search the Graphviz codebase for "imagepos"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    imagescale
  

            

	imagescale
  Controls how an image fills its containing node

type: bool | string, default: false


In general, the image is given its natural size,
(cf. dpi),
and the node size is made large enough to contain its image, its
label, its margin, and its peripheries.
Its width and height will also be at least as large as its
minimum width and height.
If, however, fixedsize=true,
the width and height attributes specify the exact size of the node.

During rendering, in the default case (imagescale=false),
the image retains its natural size.
If imagescale=true,
the image is uniformly scaled (i.e., its aspect ratio is
preserved) to fit inside the node.
At least one dimension of the image will be as large as possible
given the size of the node.
When imagescale=width,
the width of the image is scaled to fill the node width.
The corresponding property holds when imagescale=height.
When imagescale=both,
both the height and the width are scaled separately to fill the node.

In all cases, if a dimension of the image is larger than the
corresponding dimension of the node, that dimension of the
image is scaled down to fit the node.
As with the case of expansion, if imagescale=true, width and height are
scaled uniformly.


Valid on:
Nodes

  Search the Graphviz codebase for "imagescale"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    inputscale
  

            

	inputscale
  Scales the input positions to convert between length units

type: double, default: <none>


For layout algorithms that support initial input positions (specified by the pos attribute),
this attribute can be used to appropriately scale the values.
By default, fdp and neato interpret
the x and y values of pos as being in inches. (NOTE: neato -n(2) treats the coordinates as
being in points, being the unit used by the layout algorithms for the pos attribute.) Thus, if
the graph has pos attributes in points, one should set inputscale=72.
This can also be set on the command line using the -s flag.
If unset, no scaling is done and the units on input are treated as inches.
inputscale=0 is equivalent to inputscale=72.


Valid on:
Graphs

  Note:
  neato, fdp only.



  Search the Graphviz codebase for "inputscale"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    K
  

            

	K
  Spring constant used in virtual physical model

type: double, default: 0.3, minimum: 0


It roughly corresponds to an ideal edge length (in inches), in that increasing K tends to
increase the distance between nodes.
Note that the edge attribute len can be used to
override this value for adjacent nodes.


Valid on:
GraphsClusters

  Note:
  fdp, sfdp only.



  Search the Graphviz codebase for "K"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    label
  

            

	label
  Text label attached to objects

type: lblString, default: "\N" (nodes) , "" (otherwise) 


If a node's shape is record, then the label can
have a special format
which describes the record layout.
Note that a node's default label is "\N", so the node's name or ID becomes
its label.
Technically, a node's name can be an HTML string but this will not mean that
the node's label will be interpreted as an HTML-like
label. This is because the node's actual label is an
ordinary string, which will be replaced by the raw bytes stored in the node's
name.
To get an HTML-like label, the label attribute value itself must be an HTML
string.




  
    
      
        Example: Van Gogh Paintings
      
    
  
  
    
    graph {
  label="Vincent van Gogh Paintings"

  subgraph cluster_self_portraits {
    label="Self-portraits"

    spwgfh [label="Self-Portrait with Grey Felt Hat"]
    spaap [label="Self-Portrait as a Painter"]
  }
  
  subgraph cluster_flowers {
    label="Flowers"

    sf [label="Sunflowers"]
    ab [label="Almond Blossom"]
  }
}
  
     Edit in Playground
    
  





Valid on:
EdgesNodesGraphsClusters

  Search the Graphviz codebase for "label"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    label_scheme
  

            

	label_scheme
  Whether to treat a node whose name has the form |edgelabel|* as a special node representing an edge label.

type: int, default: 0, minimum: 0



The default, label_scheme=0, produces no effect.
If label_scheme=1, sfdp uses a penalty-based method to make that kind of node close to the
center of its neighbor.
With label_scheme=2, sfdp uses a penalty-based method to make that kind of node
close to the old center of its neighbor.
Finally, label_scheme=3 invokes a two-step process of overlap
removal and straightening.



Valid on:
Graphs

  Note:
  sfdp only.



  Search the Graphviz codebase for "label_scheme"
  



	
	
	
  Last modified September 18, 2022: Update label_scheme.md: add description (423725d)\n\n\n\nDocumentation
  
    Attributes
  
    labelangle
  

            

	labelangle
  The angle (in degrees) in polar coordinates of the head & tail edge labels.

type: double, default: -25.0, minimum: -180.0


Determines, along with labeldistance,
where the headlabel / taillabel are
placed with respect to the head / tail in polar coordinates.
The origin in the coordinate system is the point where the edge touches the
node. The ray of 0 degrees goes from the origin back along the edge, parallel
to the edge at the origin.
The angle, in degrees, specifies the rotation from the 0 degree ray,
with positive angles moving counterclockwise and negative angles
moving clockwise.


Valid on:
Edges

  Search the Graphviz codebase for "labelangle"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labeldistance
  

            

	labeldistance
  Scaling factor for the distance of headlabel / taillabel from the head / tail nodes.

type: double, default: 1.0, minimum: 0.0


The default distance is 10 points.
labeldistance multiplies that default.
See labelangle for more details.


Valid on:
Edges

  Search the Graphviz codebase for "labeldistance"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labelfloat
  

            

	labelfloat
  If true, allows edge labels to be less constrained in position

type: bool, default: false


In particular, it may appear on top of other edges.


Valid on:
Edges

  Search the Graphviz codebase for "labelfloat"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    labelfontcolor
  

            

	labelfontcolor
  Color used for headlabel and taillabel.

type: color, default: black


If not set, defaults to edge's fontcolor.


Valid on:
Edges

  Search the Graphviz codebase for "labelfontcolor"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labelfontname
  

            

	labelfontname
  Font for headlabel and taillabel

type: string, default: "Times-Roman"


Font used for headlabel and taillabel.
If not set, defaults to edge's fontname.


Valid on:
Edges

  Search the Graphviz codebase for "labelfontname"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labelfontsize
  

            

	labelfontsize
  Font size of headlabel and taillabel

type: double, default: 14.0, minimum: 1.0


Font size, in points, used for headlabel and
taillabel.
If not set, defaults to edge's fontsize.


Valid on:
Edges

  Search the Graphviz codebase for "labelfontsize"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labelhref
  

            

	labelhref
  Synonym for labelURL

type: escString, default: ""


See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "labelhref"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labeljust
  

            

	labeljust
  Justification for graph & cluster labels

type: string, default: "c"



If labeljust=r, the label is right-justified within bounding rectangle
If labeljust=l, left-justified
Else the label is centered.

Note that a subgraph inherits attributes from its parent. Thus, if
the root graph sets labeljust=l, the subgraph inherits
this value.




  
    
      
        Graph label justifications
      
    
  
  
    
    digraph {
  label="l"
  labeljust=l
  a
}
  
     Edit in Playground
    
  







  
    
      
        Graph label justifications
      
    
  
  
    
    digraph {
  label="r"
  labeljust=r
  b
}
  
     Edit in Playground
    
  







  
    
      
        Cluster label justifications
      
    
  
  
    
    digraph {
  subgraph cluster_l {
    label="l"
    labeljust=l
    a
  }
  subgraph cluster_c {
    label="c"
    labeljust=c
    b
  }
  subgraph cluster_r {
    label="r"
    labeljust=r
    c
  }
}
  
     Edit in Playground
    
  





Valid on:
GraphsClusters

  Search the Graphviz codebase for "labeljust"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    labelloc
  

            

	labelloc
  Vertical placement of labels for nodes, root graphs and clusters

type: string, default: "t" (clusters) , "b" (root graphs) , "c" (nodes) 


For graphs and clusters, only labelloc=t and labelloc=b are allowed, corresponding
to placement at the top and bottom, respectively.
By default, root graph labels go on the bottom and cluster labels go on the
top.
Note that a subgraph inherits attributes from its parent. Thus, if
the root graph sets labelloc=b, the subgraph inherits
this value.
For nodes, this attribute is used only when the height of the node
is larger than the height of its label.
If labelloc=t, labelloc=c, labelloc=b, the label is aligned
with the top, centered, or aligned with the bottom of the node, respectively.
By default, the label is vertically centered.




  
    
      
        Label at top of graph
      
    
  
  
    
    digraph {
  labelloc="t"
  label="Title"
  a -> b
}
  
     Edit in Playground
    
  







  
    
      
        Label at bottom of graph
      
    
  
  
    
    digraph {
  labelloc="b"
  label="Title"
  a -> b
}
  
     Edit in Playground
    
  







  
    
      
        Cluster Label Locations
      
    
  
  
    
    digraph {
  label="Graph Title"
  subgraph cluster_t {
    labelloc="t"
    label="Cluster Top"
    a -> b
  }
  subgraph cluster_b {
    labelloc="b"
    label="Cluster Bottom"
    c -> d
  }
}
  
     Edit in Playground
    
  







  
    
      
        Node label positions
      
    
  
  
    
    digraph {
  t [labelloc=t]
  c [labelloc=c]
  b [labelloc=b]
}
  
     Edit in Playground
    
  





Valid on:
NodesGraphsClusters

  Search the Graphviz codebase for "labelloc"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    labeltarget
  

            

	labeltarget
  Browser window to open labelURL links in

type: escString, default: <none>


If the edge has a URL or labelURL attribute, this
attribute determines which window of the browser is used for the URL attached
to the label.
Setting labeltarget=_graphviz will open a new window if it doesn't
already exist, or reuse it if it does.
If undefined, the value of the target is used.


Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "labeltarget"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labeltooltip
  

            

	labeltooltip
  Tooltip annotation attached to label of an edge

type: escString, default: ""



edgetooltip.
headtooltip.
tailtooltip.
tooltip.



Valid on:
Edges

  Note:
  cmap, svg only.



  Search the Graphviz codebase for "labeltooltip"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    labelURL
  

            

	labelURL
  If defined, labelURL is the link used for the label of an edge

type: escString, default: ""


labelURL overrides any URL defined for the edge.
See also:

edgehref, edgeURL
headhref, headURL
labelhref, labelURL
tailhref, tailURL
href, URL



Valid on:
Edges

  Note:
  map, svg only.



  Search the Graphviz codebase for "labelURL"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    landscape
  

            

	landscape
  If true, the graph is rendered in landscape mode

type: bool, default: false


Synonymous with
rotate=90 or orientation=landscape.




  
    
      
        Rotations
      
    
  
  
    
    digraph {
  landscape=true
  a -> b
}
  
     Edit in Playground
    
  



See also:

rotate
orientation



Valid on:
Graphs

  Search the Graphviz codebase for "landscape"
  



	
	
	
  Last modified July 28, 2024: Replace all Hugo 'ref's with 'relref's (bbef86a)\n\n\n\nDocumentation
  
    Attributes
  
    layer
  

            

	layer
  Specifies layers in which the node, edge or cluster is present

type: layerRange, default: ""




Valid on:
EdgesNodesClusters

  Search the Graphviz codebase for "layer"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\nDocumentation
  
    Attributes
  
    layerlistsep
  

            

	layerlistsep
  The separator characters used to split attributes of type layerRange into a list of ranges.

type: string, default: ","




Valid on:
Graphs

  Search the Graphviz codebase for "layerlistsep"
  



	
	
	
  Last modified September 17, 2022: Update layerlistsep.md: add description (040e925)\n\n\n\nDocumentation
  
    Attributes
  
    layers
  

            

	layers
  A linearly ordered list of layer names attached to the graph

type: layerList, default: ""


The graph is then output in separate layers. Only those components belonging to
the current output layer appear.
See How to use drawing layers (overlays).


Valid on:
Graphs

  Search the Graphviz codebase for "layers"
  



	
	
	
  Last modified September 18, 2022: Update layers.md: add description (7eb5dff)\n\n\n\nDocumentation
  
    Attributes
  
    layerselect
  

            

	layerselect
  Selects a list of layers to be emitted

type: layerRange, default: ""




Valid on:
Graphs

  Search the Graphviz codebase for "layerselect"
  



	
	
	
  Last modified June 12, 2022: add simple descriptions for attributes (b2a18ac)\n\n\n\n