
You are providing updates to the README.md file and other documentation files to ensure they accurately reflect the current state of the codebase and emphasize content that delivers substantial user value and addresses core implementation needs.

The README is the primary focus, but other documentation files can be updated as well if needed. Source files (srcFiles) and test files (testFiles) should NOT be updated.

When updating the README:
1. Preserve existing README content that delivers substantial user value, even if it describes features not yet implemented
2. Update the README if it conflicts with current source code, tests, or documentation, prioritizing content that directly enhances the product's primary purpose
3. If documentation files are out of date compared to the source code or tests, update them to be consistent, focusing on high-impact information that enables immediate application rather than superficial descriptions
4. Ensure documentation clearly communicates the core functionality and value proposition of the product, prioritizing content that helps users solve real problems

Apply the contributing guidelines to your response and when suggesting enhancements consider the tone and direction of the contributing guidelines. Focus on documentation improvements that deliver measurable value to users rather than cosmetic changes or excessive detail on edge cases.

You may only change the files provided in the prompt context. You can update multiple files by specifying their paths and contents in the updatedFiles object. Each file will be checked against the allowedFilepathPatterns before being written.

Consider the following when refining your response:
  * Current feature names and specifications in the repository
  * Source file content (for context only)
  * Test file content (for context only)
  * Documentation file content
  * README file content
  * MISSION file content
  * Contributing file content
  * Dependencies file content
  * Dependency install output
  * Issue details (if any)
  * Build output
  * Test output
  * Main execution output
  * Agent configuration file content

Current feature names and specifications (for context, read only):
CURRENT_FEATURES_START
features/PLOT_GENERATION.md
# features/PLOT_GENERATION.md
# Overview
This feature enhances the CLI plot generation capabilities and adds an HTTP API for on-demand plot and time series generation.

# CLI Arguments
- Add or extend flag --plot with values svg or png to specify the output image format
- Add or extend flag --output with a file path for CLI image generation
- Add new flag --serve to start an HTTP server instead of executing a CLI task
- Add flags --port and --host to configure the server binding, defaulting to port 3000 and host 127.0.0.1
- Validate that when --serve is provided, CLI output flags (--plot and --output) are ignored

# Plot Generation
- For CLI mode, invoke chartjs-node-canvas as before to generate line charts from time series data
- Support svg and png render modes based on --plot value
- Write image buffer to the specified --output file

# HTTP API
- Implement an Express HTTP server that listens on the configured host and port
- HTTP GET /plot endpoint:
  - Query parameters: expression, range, format(svg or png)
  - Generate time series data (reuse existing expression parsing logic)
  - Render the plot and respond with image buffer and Content-Type image/svg+xml or image/png
  - Return status 400 with JSON {error: message} for missing or invalid parameters
- HTTP GET /series endpoint:
  - Query parameters: expression, range, format(json or jsonl)
  - Generate time series data and respond with JSON or JSON Lines
  - Set Content-Type application/json or application/jsonl
  - Return status 400 with JSON {error: message} for missing or invalid parameters

# Testing
- Unit tests for the Express server routes to verify correct status codes, headers, and payloads
- Integration tests using supertest to start the server, perform GET requests to /plot and /series, and assert responses

# Documentation
- Update README.md to include HTTP API usage examples with curl commands for /plot and /series
- Add HTTP API reference section in USAGE.md with parameter descriptions and sample responses

# Dependencies
- Add supertest to devDependencies for HTTP endpoint integration tests
- Ensure express is declared as a dependency for HTTP server
features/EXPRESSION_TIME_SERIES.md
# features/EXPRESSION_TIME_SERIES.md
# Overview

This feature extends the CLI entry point to accept a mathematical expression and a numeric range, generate a time series of data points, and optionally persist the result in JSON, JSON Lines, or CSV format.

# CLI Arguments

- Support a flag `--expression` that takes a string defining y as a function of x (for example `sin(x)`).
- Support a flag `--range` that takes a string in the format x=start:end:step (for example `x=-1:1:0.1`).
- Add an optional flag `--output-file` that takes a file path where the time series data will be written.
- Extend the flag `--output-format` to accept values `json`, `jsonl`, or `csv`, defaulting to `json`.
- Validate that when `--output-file` is provided, `--output-format` is one of the supported values.

# Time Series Generation

- Parse the `--range` parameter into numeric start, end, and step values.
- Use mathjs to parse, compile, and evaluate the expression for each x value in the range.
- Collect an array of objects `{ x, y }` representing the series.

# Persistence

- If `--output-file` is provided:
  - For format `json`, write the entire array as a JSON string to the specified file.
  - For format `jsonl`, write each data point as a JSON value on its own line following the JSON Lines standard.
  - For format `csv`, write a header row `x,y`, followed by each data point as comma-separated values, ensuring UTF-8 encoding.
  - Ensure CSV output uses LF line endings and properly escapes values if needed.

# Testing

- Add unit tests for the persistence utility to verify correct output in JSON, JSON Lines, and CSV formats.
- Add CLI integration tests by simulating process arguments with `--expression`, `--range`, `--output-file`, and `--output-format csv`, then asserting that the output file exists and its contents match the expected CSV structure.

# Documentation

- Update README.md to include example commands for writing time series data to `output.csv` using the `--output-format csv` flag.
- Update USAGE.md to include a CSV persistence section with sample output and notes on interoperability with spreadsheet tools and data pipelines.
CURRENT_FEATURES_END

Source files (for context only, DO NOT UPDATE):
SOURCE_FILES_START
File: src/lib/main.js
#!/usr/bin/env node
// src/lib/main.js

import { fileURLToPath } from "url";

export function main(args) {
  console.log(`Run with: ${JSON.stringify(args)}`);
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  const args = process.argv.slice(2);
  main(args);
}


SOURCE_FILES_END

Test files (for context only, DO NOT UPDATE):
TEST_FILES_START
File: tests/unit/plot-generation.test.js
import { describe, test, expect } from "vitest";
import * as mainModule from "@src/lib/main.js";
import { main } from "@src/lib/main.js";

describe("Main Module Import", () => {
  test("should be non-null", () => {
    expect(mainModule).not.toBeNull();
  });
});

describe("Default main", () => {
  test("should terminate without error", () => {
    process.argv = ["node", "src/lib/main.js"];
    main();
  });
});


File: tests/unit/main.test.js
import { describe, test, expect } from "vitest";
import * as mainModule from "@src/lib/main.js";
import { main } from "@src/lib/main.js";

describe("Main Module Import", () => {
  test("should be non-null", () => {
    expect(mainModule).not.toBeNull();
  });
});

describe("Default main", () => {
  test("should terminate without error", () => {
    process.argv = ["node", "src/lib/main.js"];
    main();
  });
});


TEST_FILES_END

Documentation files (to be updated if necessary):
DOCS_FILES_START
File: USAGE.md


DOCS_FILES_END

README file (primary focus, to be updated): README.md
README_FILE_START
# repository0-plot-code-lib

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

---

## License

MIT

---


README_FILE_END

MISSION file (for context, read only): MISSION.md
MISSION_FILE_START
# Mission Statement

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

**plot-code-lib** is a JavaScript library and CLI tool designed to:
- Transform and given range and a simple expression syntax for (pick an existing open standard) to time series data.
- Read and write the time series data in a standard format (pick an existing open standard).
- Make use of libraries for formula parsing, time series generation, plotting, and persistence in image formats.
- Generate SVG and PNG plots from the time series data and save these as files.
- Variations on this example: `node run start -- --expression "y=sin(x)" --range "x=-1:-1,y=-1:-1" --file output.svg` .
- Showcase all the features of the library via a CLI by dry running tp generate example commands and output in the README.md file.

`plot-code-lib` facilitate the creation of plots from mathematical expressions and time series data. It will take a
mathematical expression and a range of values and generate a plot in SVG or PNG format.

MISSION_FILE_END

Contributing file (for context, read only): CONTRIBUTING.md
CONTRIBUTING_FILE_START
# repository0-plot-code-lib

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

## How to Contribute

The guidelines below apply to human or automated contributions:

1. **Report Issues or Ideas:**
    - Open an issue on GitHub to share bug reports, feature requests, or any improvements you envision.
    - Clear descriptions and reproducible steps are highly appreciated.

2. **Submit Pull Requests:**
    - Fork the repository and create a feature branch.
    - Implement your changes, ensuring you follow the existing coding style and standards.
    - Add tests to cover any new functionality.
    - Update documentation if your changes affect usage or workflow behavior.
    - Submit your pull request for review.

## Guidelines

- **Code Quality:**
    - Ensure there are tests that cover your changes and any likely new cases they introduce.
    - When making a change remain consistent with the existing code style and structure.
    - When adding new functionality, consider if some unused or superseded code should be removed.

- **Compatibility:**
    - Ensure your code runs on Node 20 and adheres to ECMAScript Module (ESM) standards.
    - Tests use vitest and competing test frameworks should not be added.
    - Mocks in tests must not interfere with other tests.

- **Testing:**
    - The command `npm test` should invoke the tests added for the new functionality (and pass).
    - If you add new functionality, ensure it is covered by tests.

- **Documentation:**
    - When making a change to the main source file, review the readme to see if it needs to be updated and if so, update it.
    - Where the source exports a function, consider that part of the API of the library and document it in the readme.
    - Where the source stands-up an HTTP endpoint, consider that part of the API of the library and document it in the readme.
    - Include usage examples including inline code usage and CLI and HTTP invocation, API references.

CONTRIBUTING_FILE_END

Dependencies file (for context, read only): package.json
DEPENDENCIES_FILE_START
{
  "name": "@xn-intenton-z2a/repository0-plot-code-lib",
  "version": "1.2.0-0",
  "description": "Be a go-to plot library with a CLI, be the jq of formulae visualisations.",
  "type": "module",
  "main": "src/lib/main.js",
  "bin": {
    "repository0-plot-code-lib": "src/lib/main.js"
  },
  "scripts": {
    "build": "echo 'Nothing to build'",
    "formatting": "prettier --check .",
    "formatting-fix": "prettier --write .",
    "linting": "eslint .",
    "linting-json": "eslint --format=@microsoft/eslint-formatter-sarif .",
    "linting-fix": "eslint --fix .",
    "update-to-minor": "npx npm-check-updates --upgrade --enginesNode --target minor --verbose --install always",
    "update-to-greatest": "npx npm-check-updates --upgrade --enginesNode --target greatest --verbose --install always --reject 'alpha'",
    "test": "vitest tests/unit/*.test.js",
    "test:unit": "vitest --coverage tests/unit/*.test.js",
    "start": "node src/lib/main.js"
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "dotenv": "^16.5.0",
    "openai": "^4.95.1",
    "ejs": "^3.1.10",
    "js-yaml": "^4.1.0",
    "minimatch": "^10.0.1",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@vitest/coverage-v8": "^3.1.3",
    "eslint": "^9.25.1",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "express": "^4.21.2",
    "js-yaml": "^4.1.0",
    "markdown-it-github": "^0.5.0",
    "markdown-it": "^14.1.0",
    "npm-check-updates": "^17.1.18",
    "prettier": "^3.5.3",
    "vitest": "^3.1.3"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "files": ["src/"],
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  }
}

DEPENDENCIES_FILE_END   

Dependencies install from command: npm install
DEPENDENCIES_INSTALL_START
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated @humanwhocodes/config-array@0.13.0: Use @eslint/config-array instead
npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
npm warn deprecated @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated node-domexception@1.0.0: Use your platform's native DOMException instead
npm warn deprecated eslint@8.57.1: This version is no longer supported. Please see https://eslint.org/version-support for other options.

added 478 packages, and audited 479 packages in 4s

159 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
DEPENDENCIES_INSTALL_END    

Build output from command: npm run build
BUILD_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 build
> echo 'Nothing to build'

Nothing to build
BUILD_OUTPUT_END      

Test output from command: npm test
TEST_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 test
> vitest tests/unit/*.test.js


[1m[46m RUN [49m[22m [36mv3.1.3 [39m[90m/home/runner/work/repository0-plot-code-lib/repository0-plot-code-lib[39m

[90mstdout[2m | tests/unit/main.test.js[2m > [22m[2mDefault main[2m > [22m[2mshould terminate without error
[22m[39mRun with: undefined

 [32m✓[39m tests/unit/main.test.js [2m([22m[2m2 tests[22m[2m)[22m[32m 6[2mms[22m[39m
[90mstdout[2m | tests/unit/plot-generation.test.js[2m > [22m[2mDefault main[2m > [22m[2mshould terminate without error
[22m[39mRun with: undefined

 [32m✓[39m tests/unit/plot-generation.test.js [2m([22m[2m2 tests[22m[2m)[22m[32m 7[2mms[22m[39m
 [32m✓[39m tests/unit/module-index.test.js [2m([22m[2m1 test[22m[2m)[22m[32m 6[2mms[22m[39m

[2m Test Files [22m [1m[32m3 passed[39m[22m[90m (3)[39m
[2m      Tests [22m [1m[32m5 passed[39m[22m[90m (5)[39m
[2m   Start at [22m 08:52:52
[2m   Duration [22m 431ms[2m (transform 82ms, setup 0ms, collect 87ms, tests 20ms, environment 1ms, prepare 431ms)[22m
TEST_OUTPUT_END            

Main execution output from command: npm run start
MAIN_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 start
> node src/lib/main.js

Run with: []
MAIN_OUTPUT_END    

Agent configuration file:
AGENT_CONFIG_FILE_START
# Which agentic-lib workflow schedule should be used?
schedule: schedule-2

# Mapping for from symbolic keys to filepaths for access by agentic-lib workflows with limits and access permissions
paths:
  # Filepaths for elaborator workflows
  missionFilepath:
    path: 'MISSION.md'
  librarySourcesFilepath:
    path: 'SOURCES.md'
    permissions: [ 'write' ]
    limit: 16
  libraryDocumentsPath:
    path: 'library/'
    permissions: [ 'write' ]
    limit: 32
  featuresPath:
    path: 'features/'
    permissions: [ 'write' ]
    limit: 2

  # Filepaths for engineer workflows
  contributingFilepath:
    path: 'CONTRIBUTING.md'
  targetTestsPath:
    path: 'tests/unit/plot-generation.test.js'
    permissions: [ 'write' ]
  otherTestsPaths:
    paths: [ 'tests/unit/main.test.js' ]
  targetSourcePath:
    path: 'src/lib/main.js'
    permissions: [ 'write' ]
  otherSourcePaths:
    paths: [ 'src/lib/' ]
  dependenciesFilepath:
    path: 'package.json'
    permissions: [ 'write' ]
  documentationPath:
    path: 'USAGE.md'
    permissions: [ 'write' ]

  # Filepaths for maintainer workflows
  formattingFilepath:
    path: '.prettierrc'
  lintingFilepath:
    path: 'eslint.config.js'
  readmeFilepath:
    path: 'README.md'
    permissions: [ 'write' ]

# Execution commands
buildScript: "npm run build"
testScript: "npm test"
mainScript: "npm run start"

# How many issues should be open to be picked up?
featureDevelopmentIssuesWipLimit: 2
maintenanceIssuesWipLimit: 1

# How many attempts should be made to work on an issue?
attemptsPerBranch: 2
attemptsPerIssue: 2

# Web publishing
docRoot: 'public'

# Repository seeding
seeding:
  repositoryReseed: 'true'
  missionFilepath: 'seeds/zero-MISSION.md'
  sourcePath: 'seeds/zero-main.js'
  testsPath: 'seeds/zero-tests.js'
  dependenciesFilepath: 'seeds/zero-package.json'
  readmeFilepath: 'seeds/zero-README.md'

# The intention is associated with the bot's discussion thread.
intentionBot:
  intentionFilepath: 'intentïon.md'

AGENT_CONFIG_FILE_END

Please produce updated versions of the README and documentation files to ensure they accurately reflect the current state of the codebase.
Remember:
1. The README is the primary focus, but other documentation files can be updated as well if needed
2. Source files (srcFiles) and test files (testFiles) should NOT be updated
3. Preserve existing README content even if it describes features not yet implemented
4. Update the README if it conflicts with current source code, tests, or documentation
5. If documentation files are out of date compared to the source code or tests, update them to be consistent

If there are no changes required, please provide the original content and state that no changes are necessary in the message.

Paths in (updatedFile01Filepath, updatedFile02Filepath, etc...) must begin with one of: SOURCES.md;library/;features/;tests/unit/plot-generation.test.js;src/lib/main.js;package.json;USAGE.md;README.md

Answer strictly with a JSON object following this schema:
{
  "message": "A short sentence explaining the changes applied (or why no changes were applied) suitable for a commit message or PR text.",
  "updatedFile01Filepath": "README.md",
  "updatedFile01Contents": "The entire new content of the README file, with all necessary changes applied, if any.",
  "updatedFile02Filepath":  "USAGE.md/USAGE.md",
  "updatedFile02Contents": "The entire new content of the file, with all necessary changes applied, if any.",
  "updatedFile03Filepath": "unused",
  "updatedFile03Contents": "unused",
  "updatedFile04Filepath": "unused",
  "updatedFile04Contents": "unused",
  "updatedFile05Filepath": "unused",
  "updatedFile05Contents": "unused",
  "updatedFile06Filepath": "unused",
  "updatedFile06Contents": "unused",
  "updatedFile07Filepath": "unused",
  "updatedFile07Contents": "unused",
  "updatedFile08Filepath": "unused",
  "updatedFile08Contents": "unused",
  "updatedFile09Filepath": "unused",
  "updatedFile09Contents": "unused",
  "updatedFile10Filepath": "unused",
  "updatedFile10Contents": "unused",
  "updatedFile11Filepath": "unused",
  "updatedFile11Contents": "unused",
  "updatedFile12Filepath": "unused",
  "updatedFile12Contents": "unused",
  "updatedFile13Filepath": "unused",
  "updatedFile13Contents": "unused",
  "updatedFile14Filepath": "unused",
  "updatedFile14Contents": "unused",
  "updatedFile15Filepath": "unused",
  "updatedFile15Contents": "unused",
  "updatedFile16Filepath": "unused",
  "updatedFile16Contents": "unused"
}

You can include up to 16 files using the updatedFileXXName and updatedFileXXContents pairs (where XX is a number from 01 to 16)
Where a file name and contents slot is not used, populate tha name with "unused" and the contents with "unused".
Never truncate the files, when returning a file, always return the entire file content.

Ensure valid JSON.
