
You are providing the entire new content of source files, test files, documentation files, and other necessary
files with all necessary changes applied to deliver the resolution to an issue. Focus on high-impact, 
functional solutions that address core issues rather than superficial changes or excessive code polishing.
Implement as much as you can and refer to the projects features and mission statement when expanding the code
beyond the scope of the original issue. Implement whole features and do not leave stubbed out or pretended code.

Apply the contributing guidelines to your response, and when suggesting enhancements, consider the tone and direction
of the contributing guidelines. Prioritize changes that deliver user value and maintain the integrity
of the codebase's primary purpose.

Do as much as you can all at once.

Follow the linting guidelines and the formatting guidelines from the included config.


You must only add, remove, or change the files in the target writable locations. You can update multiple
files by specifying their paths and contents in the enumerated updatedFile01Filepath updatedFile02Contents response
attribute, a second file would use updatedFile01Filepath updatedFile02Contents and so on to 16. Each file will
be checked against the write permission in the Agent configuration file before being written. Feel free to
add new files as long as they are in the target writable locations. You can also remove files, but only if
they are in the target writable locations. To delete a file, set the updated file contents to "delete".

The target writable locations for your output are: SOURCES.md;library/;features/;tests/unit/plot-generation.test.js;src/lib/main.js;package.json;USAGE.md;README.md
Other file will be supplied in the context but only the paths above should be written to.

Only provide new or updated content for the target source files in src/lib/main.js.
Only delete or update the target source files in src/lib/main.js.
Only provide new or updated content for the target test files in tests/unit/plot-generation.test.js.
Only delete or update the target test files in tests/unit/plot-generation.test.js.
Only update dependency file package.json.
Only update the target documentation files in USAGE.md.

Follow the attached Formatting file content and Linting file content.

Consider the following when refining your response:
* Current feature names and specifications in the repository
* Source file content
* Test file content
* Documentation file content
* README file content
* MISSION file content
* Contributing file content
* Dependencies file content
* Formatting file content
* Linting file content
* Agent configuration file content
* Issue details
* Dependency list
* Build output
* Test output
* Main execution output

Current feature names and specifications (for context, read only):
CURRENT_FEATURES_START
features/OUTPUT_FORMATS.md
# features/OUTPUT_FORMATS.md
# Overview

Extend the CLI and library to support multiple output formats including SVG, PNG, JSON and CSV. Provide consistent behavior in both CLI and HTTP server modes and enable users to export raw data as comma separated values for integration with external tools.

# CLI Integration

- Add flag --format <format>    : one of svg png json csv. Default svg.
- Retain existing flags --width --height --margin --x-label --y-label --title --serve --port and their defaults.
- When format is csv:
  - Generate a text output with a header row x,y and one line per data point.
  - Write the CSV string to stdout or to the file specified by --output.

# Implementation

- In src/lib/main.js:
  - Extend argsSchema to accept format as an enum of svg png json csv and validate default to svg.
  - After parsing args and generating data, branch on format:
    - svg: use existing generateSVG to produce SVG output.
    - png: convert SVG to PNG as before.
    - json: serialize data object { xValues yValues } to JSON.
    - csv: implement a new function generateCSV(data) that returns a string starting with header x,y then each x,y pair on its own line.
  - For serve mode, set Content-Type text/csv when format=csv and send the CSV string.
  - Ensure exit codes and error messages remain consistent across formats.

# HTTP API

- Support format=csv in addition to svg png json:
  - GET /plot accepts format csv.
  - Respond with Content-Type text/csv and the CSV data.
  - Validate query parameters and return error JSON if invalid.

# Tests

- Update parseArgs tests to cover csv as a valid format and default behavior.
- Add unit tests for generateCSV:
  - Verify header row and correct comma separation for a sample data set.
  - Test error handling for empty or mismatched data.
- Extend HTTP API tests with supertest:
  - GET /plot?expression=x&range=x=0:2&format=csv returns status 200 text/csv and expected CSV body.
  - Test invalid format values report 400 with error JSON.

# Documentation

- Update README.md and USAGE.md to include csv as an output format:
  npx repository0-plot-code-lib --expression sin(x) --range x=0:3:1 --format csv --output data.csv

- Provide CURL example for HTTP API:
  curl http://localhost:3000/plot?expression=x&range=x=0:5&format=csv > data.csv
features/DATA_INPUT.md
# features/DATA_INPUT.md
# Overview

Add support for importing time series data from external files (JSON or CSV) to generate plots without requiring an expression and range on the command line. This enables users to visualize arbitrary datasets and integrate seamlessly with downstream workflows.

# CLI Integration

- Introduce a new flag --input <file> to specify a path to a JSON or CSV file containing time series data.
- When --input is provided:
  - expression and range flags become optional and ignored.
  - Validate file extension: .json or .csv. Report an error for unsupported formats.
  - Provide an example usage:
    npx repository0-plot-code-lib --input data.json --output plot.svg
    npx repository0-plot-code-lib --input data.csv --format png --output plot.png

# Implementation

- Extend parseArgs in src/lib/main.js to accept input (string) in the args schema.
- In main:
  - If parsed.input exists, read the file from disk with fs.readFileSync.
  - If .json:
    - JSON.parse to obtain an object with xValues (number[]) and yValues (number[]). Validate array lengths match.
  - If .csv:
    - Parse lines by splitting on newlines. Expect header row, e.g., x,y. Use built-in string methods to parse numbers.
    - Convert columns into xValues and yValues arrays. Throw an error on parse failure or mismatched lengths.
  - After data is loaded, reuse generateSVG or format logic (with --format) to produce the plot or raw data output.
  - Honor --format and --output flags as in existing flow.
  - Print clear error messages for file I/O or parsing issues and exit with non-zero status.

# Tests

- Add unit tests in tests/unit/plot-generation.test.js to cover:
  - parseArgs correctly parsing --input alongside other flags.
  - Loading JSON input: create a temporary JSON file with known arrays and verify generateSVG called with correct data.
  - Loading CSV input: create a temporary CSV file, parse it, and verify data arrays.
  - Error handling: unsupported extension, invalid JSON, malformed CSV, mismatched array lengths.
- Ensure the test suite cleans up any temp files and does not interfere with other tests.

# Documentation

- Update README.md and USAGE.md to document the new --input flag, supported formats, examples, and error conditions.
CURRENT_FEATURES_END

Source files (write new files or update files in src/lib/main.js as necessary):
(Multiple files from both in writable locations and not.)
SOURCE_FILE_START Filepath: src/lib/main.js
#!/usr/bin/env node
// src/lib/main.js

import fs from "fs";
import { fileURLToPath } from "url";
import path from "path";
import { z } from "zod";
import { create, all } from "mathjs";

const math = create(all);

export function parseArgs(args) {
  const argsSchema = z.object({
    expression: z.string(),
    range: z.string(),
    output: z.string().optional(),
  });
  const parsed = {};
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith("--")) {
      const key = arg.substring(2);
      const value = args[i + 1];
      parsed[key] = value;
      i++;
    }
  }
  return argsSchema.parse(parsed);
}

export function parseRange(rangeStr) {
  const [varName, rangePart] = rangeStr.split("=");
  if (!varName || !rangePart) {
    throw new Error(`Invalid range format: ${rangeStr}`);
  }
  const parts = rangePart.split(":").map((p) => parseFloat(p));
  const min = parts[0];
  const max = parts[1];
  const step = parts.length >= 3 && !isNaN(parts[2]) ? parts[2] : 1;
  if (isNaN(min) || isNaN(max) || isNaN(step)) {
    throw new Error(`Invalid range numbers in: ${rangeStr}`);
  }
  return { varName, min, max, step };
}

export function generateData(expression, { varName, min, max, step }) {
  const expr = math.parse(expression).compile();
  const xValues = math.range(min, max, step, true).toArray();
  const yValues = xValues.map((x) => expr.evaluate({ [varName]: x }));
  return { xValues, yValues };
}

export function generateSVG({ xValues, yValues }, options = {}) {
  const width = options.width || 800;
  const height = options.height || 600;
  const margin = options.margin || 40;

  const minX = Math.min(...xValues);
  const maxX = Math.max(...xValues);
  const minY = Math.min(...yValues);
  const maxY = Math.max(...yValues);
  const xScale = (width - 2 * margin) / (maxX - minX || 1);
  const yScale = (height - 2 * margin) / (maxY - minY || 1);

  const points = xValues
    .map((x, i) => {
      const y = yValues[i];
      const px = margin + (x - minX) * xScale;
      const py = height - margin - (y - minY) * yScale;
      return `${px},${py}`;
    })
    .join(" ");

  const axes = [
    `<line x1="${margin}" y1="${margin}" x2="${margin}" y2="${height - margin}" stroke="black"/>`,
    `<line x1="${margin}" y1="${height - margin}" x2="${width - margin}" y2="${height - margin}" stroke="black"/>`,
  ];

  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
  ${axes.join("\n  ")}
  <polyline fill="none" stroke="black" stroke-width="2" points="${points}"/>
</svg>`;
}

export function main(argsParam) {
  const args = argsParam ?? process.argv.slice(2);
  if (!args || args.length === 0) {
    console.log(`Run with: ${JSON.stringify(args)}`);
    return;
  }
  let parsed;
  try {
    parsed = parseArgs(args);
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
  let rangeObj;
  try {
    rangeObj = parseRange(parsed.range);
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
  let data;
  try {
    data = generateData(parsed.expression, rangeObj);
  } catch (err) {
    console.error(`Error evaluating expression: ${err.message}`);
    process.exit(1);
  }
  const svg = generateSVG(data);
  if (parsed.output) {
    try {
      const outPath = path.isAbsolute(parsed.output)
        ? parsed.output
        : path.resolve(process.cwd(), parsed.output);
      fs.writeFileSync(outPath, svg, "utf8");
    } catch (err) {
      console.error(`Error writing file: ${err.message}`);
      process.exit(1);
    }
  } else {
    console.log(svg);
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main();
}

SOURCE_FILE_END



Test files (write new files or update files in tests/unit/plot-generation.test.js as necessary):
(Multiple files from both in writable locations and not.)
TEST_FILE_START File: tests/unit/plot-generation.test.js
import { describe, test, expect } from "vitest";
import {
  parseArgs,
  parseRange,
  generateData,
  generateSVG,
  main,
} from "@src/lib/main.js";

describe("Main Module Import", () => {
  test("should be non-null", () => {
    expect({ parseArgs, parseRange, generateData, generateSVG, main }).not.toBeNull();
  });
});

describe("parseArgs", () => {
  test("should parse valid CLI args", () => {
    const args = [
      "--expression",
      "x*2",
      "--range",
      "x=0:5:2",
      "--output",
      "out.svg",
    ];
    const parsed = parseArgs(args);
    expect(parsed).toEqual({
      expression: "x*2",
      range: "x=0:5:2",
      output: "out.svg",
    });
  });
});

describe("parseRange", () => {
  test("should parse range string", () => {
    const range = "x=0:5:2";
    const result = parseRange(range);
    expect(result).toEqual({ varName: "x", min: 0, max: 5, step: 2 });
  });
  test("should default step to 1", () => {
    const range = "x=1:3";
    const result = parseRange(range);
    expect(result).toEqual({ varName: "x", min: 1, max: 3, step: 1 });
  });
});

describe("generateData", () => {
  test("should generate data points", () => {
    const exp = "x*2";
    const rangeObj = { varName: "x", min: 0, max: 4, step: 2 };
    const data = generateData(exp, rangeObj);
    expect(data.xValues).toEqual([0, 2, 4]);
    expect(data.yValues).toEqual([0, 4, 8]);
  });
});

describe("generateSVG", () => {
  test("should generate SVG with expected tags and points", () => {
    const data = { xValues: [0, 1], yValues: [0, 2] };
    const svg = generateSVG(data, { width: 100, height: 50, margin: 5 });
    expect(svg).toContain('<svg');
    expect(svg).toContain('xmlns="http://www.w3.org/2000/svg"');
    expect(svg).toContain('<polyline');
    expect(svg).toMatch(/points="[^"]+"/);
  });
});

describe("Default main", () => {
  test("should terminate without error on no args", () => {
    process.argv = ["node", "src/lib/main.js"];
    expect(() => main()).not.toThrow();
  });
});

TEST_FILE_END


TEST_FILE_START File: tests/unit/main.test.js
import { describe, test, expect } from "vitest";
import * as mainModule from "@src/lib/main.js";
import { main } from "@src/lib/main.js";

describe("Main Module Import", () => {
  test("should be non-null", () => {
    expect(mainModule).not.toBeNull();
  });
});

describe("Default main", () => {
  test("should terminate without error", () => {
    process.argv = ["node", "src/lib/main.js"];
    main();
  });
});

TEST_FILE_END



Documentation files (write new files or update files in USAGE.md as necessary):
(Multiple files from both in writable locations and not.)
DOCUMENTATION_FILE_START File: USAGE.md
# Usage

To generate an SVG plot from a mathematical expression:

```bash
npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:6.28:0.1" --output output.svg
```

Options:

- `--expression <expr>`: A mathematical expression in variable `x`. Required.
- `--range <range>`: Range for `x` in the format `x=min:max[:step]`. Required. `step` defaults to `1`.
- `--output <file>`: Output file path for the SVG. Optional. Defaults to stdout.

Example:

```bash
npx repository0-plot-code-lib --expression "x^2" --range "x=0:10:0.5"
```

This prints an SVG to stdout. Redirect to a file to save:

```bash
npx repository0-plot-code-lib --expression "x^2" --range "x=0:10:0.5" > plot.svg
```

DOCUMENTATION_FILE_END



README file (for context, read only): README.md
README_FILE_START
# repository0-plot-code-lib

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

## Installation

Install the library via npm:

```bash
npm install @xn-intenton-z2a/repository0-plot-code-lib
```

Or run directly without installing using npx:

```bash
npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:6.28:0.1"
```

## Usage

Run the CLI with the following syntax:

```bash
npx repository0-plot-code-lib --expression "<expr>" --range "<range>" [--output "<file>"]
```

### Options

- `--expression <expr>` (required):
  - A mathematical expression in variable `x` to plot (e.g., `sin(x)`, `x^2 + 3`).
- `--range <range>` (required):
  - Defines the range for `x` in the format `x=min:max[:step]`.
  - `min` and `max` are required. `step` is optional and defaults to `1` if omitted.
  - Example: `x=0:10:0.5` generates points from 0 to 10 in increments of 0.5.
- `--output <file>` (optional):
  - Path to save the generated SVG file.
  - If not provided, the SVG is printed to standard output (stdout).

## Examples

Generate an SVG plot and save it to `output.svg`:

```bash
npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:6.28:0.1" --output output.svg
```

Generate an SVG plot and redirect the output to a file:

```bash
npx repository0-plot-code-lib --expression "x^2" --range "x=0:10:0.5" > plot.svg
```

## License

MIT

README_FILE_END

MISSION file (for context, read only): MISSION.md
MISSION_FILE_START
# Mission Statement

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

**plot-code-lib** is a JavaScript library and CLI tool designed to:
- Transform and given range and a simple expression syntax for (pick an existing open standard) to time series data.
- Read and write the time series data in a standard format (pick an existing open standard).
- Make use of libraries for formula parsing, time series generation, plotting, and persistence in image formats.
- Generate SVG and PNG plots from the time series data and save these as files.
- Variations on this example: `node run start -- --expression "y=sin(x)" --range "x=-1:-1,y=-1:-1" --file output.svg` .
- Showcase all the features of the library via a CLI by dry running tp generate example commands and output in the README.md file.

`plot-code-lib` facilitate the creation of plots from mathematical expressions and time series data. It will take a
mathematical expression and a range of values and generate a plot in SVG or PNG format.

MISSION_FILE_END

Contributing file (for context, read only): CONTRIBUTING.md
CONTRIBUTING_FILE_START
# repository0-plot-code-lib

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

## How to Contribute

The guidelines below apply to human or automated contributions:

1. **Report Issues or Ideas:**
    - Open an issue on GitHub to share bug reports, feature requests, or any improvements you envision.
    - Clear descriptions and reproducible steps are highly appreciated.

2. **Submit Pull Requests:**
    - Fork the repository and create a feature branch.
    - Implement your changes, ensuring you follow the existing coding style and standards.
    - Add tests to cover any new functionality.
    - Update documentation if your changes affect usage or workflow behavior.
    - Submit your pull request for review.

## Guidelines

- **Code Quality:**
    - Ensure there are tests that cover your changes and any likely new cases they introduce.
    - When making a change remain consistent with the existing code style and structure.
    - When adding new functionality, consider if some unused or superseded code should be removed.

- **Compatibility:**
    - Ensure your code runs on Node 20 and adheres to ECMAScript Module (ESM) standards.
    - Tests use vitest and competing test frameworks should not be added.
    - Mocks in tests must not interfere with other tests.

- **Testing:**
    - The command `npm test` should invoke the tests added for the new functionality (and pass).
    - If you add new functionality, ensure it is covered by tests.

- **Documentation:**
    - When making a change to the main source file, review the readme to see if it needs to be updated and if so, update it.
    - Where the source exports a function, consider that part of the API of the library and document it in the readme.
    - Where the source stands-up an HTTP endpoint, consider that part of the API of the library and document it in the readme.
    - Include usage examples including inline code usage and CLI and HTTP invocation, API references.

CONTRIBUTING_FILE_END

Dependencies file (for context, read only): package.json
DEPENDENCIES_FILE_START
{
  "name": "@xn-intenton-z2a/repository0-plot-code-lib",
  "version": "1.2.0-0",
  "description": "Be a go-to plot library with a CLI, be the jq of formulae visualisations.",
  "type": "module",
  "main": "src/lib/main.js",
  "bin": {
    "repository0-plot-code-lib": "src/lib/main.js"
  },
  "scripts": {
    "build": "echo 'Nothing to build'",
    "formatting": "prettier --check .",
    "formatting-fix": "prettier --write .",
    "linting": "eslint .",
    "linting-json": "eslint --format=@microsoft/eslint-formatter-sarif .",
    "linting-fix": "eslint --fix .",
    "update-to-minor": "npx npm-check-updates --upgrade --enginesNode --target minor --verbose --install always",
    "update-to-greatest": "npx npm-check-updates --upgrade --enginesNode --target greatest --verbose --install always --reject 'alpha'",
    "test": "vitest tests/unit/*.test.js",
    "test:unit": "vitest --coverage tests/unit/*.test.js",
    "start": "node src/lib/main.js"
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "dotenv": "^16.5.0",
    "ejs": "^3.1.10",
    "js-yaml": "^4.1.0",
    "mathjs": "^11.8.2",
    "minimatch": "^10.0.1",
    "openai": "^4.95.1",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@vitest/coverage-v8": "^3.1.3",
    "eslint": "^9.25.1",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "express": "^4.21.2",
    "js-yaml": "^4.1.0",
    "markdown-it-github": "^0.5.0",
    "markdown-it": "^14.1.0",
    "npm-check-updates": "^17.1.18",
    "prettier": "^3.5.3",
    "vitest": "^3.1.3"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "files": [
    "src/"
  ],
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  }
}

DEPENDENCIES_FILE_END

Formatting file (for context, read only): .prettierrc
FORMATTING_FILE_START
{
  "singleQuote": false,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "quoteProps": "consistent",
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}

FORMATTING_FILE_END

Linting file (for context, read only): eslint.config.js
LINTING_FILE_START
import js from "@eslint/js";
import google from "eslint-config-google";
import eslintPluginPrettierRecommended from "eslint-plugin-prettier/recommended";
import globals from "globals";
import promise from "eslint-plugin-promise";
import security from "eslint-plugin-security";
import sonarjs from "eslint-plugin-sonarjs";
import react from "eslint-plugin-react";
import importPlugin from "eslint-plugin-import";

const modifiedGoogleConfig = { ...google, rules: { ...google.rules } };
delete modifiedGoogleConfig.rules["valid-jsdoc"];
delete modifiedGoogleConfig.rules["require-jsdoc"];

/** @type {import('eslint').Linter.FlatConfig[]} */
export default [
  js.configs.recommended,
  modifiedGoogleConfig,
  eslintPluginPrettierRecommended,
  {
    plugins: {
      promise,
      security,
      sonarjs,
      react,
      import: importPlugin,
    },
    languageOptions: {
      ecmaVersion: 2023,
      sourceType: "module",
      globals: {
        ...globals.node,
      },
    },
    rules: {
      "prettier/prettier": "error",
      ...promise.configs.recommended.rules,
      ...sonarjs.configs.recommended.rules,
      "sonarjs/os-command": "off",

      // Formatting and organisation
      "no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
      "no-extra-semi": 2,
      "object-curly-newline": ["error", { consistent: true }],
      "array-element-newline": ["error", "consistent", { multiline: true, minItems: 10 }],
      "import/newline-after-import": ["error", { count: 1 }],
      "camelcase": "off",

      // ESM import rules
      "import/no-amd": "error",
      "import/no-commonjs": "error",
      "import/no-import-module-exports": "error",
      "import/no-cycle": "error",
      "import/no-dynamic-require": "error",
      "import/no-self-import": "off",
      "import/no-unresolved": "off",
      "import/no-useless-path-segments": "error",
      "import/no-duplicates": "error",
      "sonarjs/fixme-tag": "warn",
    },
  },
  {
    files: ["**/*.js"],
    ignores: ["**/tests/**/*.js", "**/*.test.js", "eslint.config.js"],
    rules: {
      ...security.configs.recommended.rules,
      "security/detect-non-literal-fs-filename": "off",
      "security/detect-non-literal-regexp": "off",
      "security/detect-object-injection": "off",
    },
  },
  {
    settings: {
      react: {
        version: "18",
      },
    },
  },
  {
    ignores: ["build/", "coverage/", "dist/", "exports/", "node_modules/", "eslint.config.js"],
  },
];

LINTING_FILE_END

Agent configuration file (for context, read only):
AGENT_CONFIG_FILE_START
# Which agentic-lib workflow schedule should be used?
schedule: schedule-2

# Mapping for from symbolic keys to filepaths for access by agentic-lib workflows with limits and access permissions
paths:
  # Filepaths for elaborator workflows
  missionFilepath:
    path: 'MISSION.md'
  librarySourcesFilepath:
    path: 'SOURCES.md'
    permissions: [ 'write' ]
    limit: 16
  libraryDocumentsPath:
    path: 'library/'
    permissions: [ 'write' ]
    limit: 32
  featuresPath:
    path: 'features/'
    permissions: [ 'write' ]
    limit: 2

  # Filepaths for engineer workflows
  contributingFilepath:
    path: 'CONTRIBUTING.md'
  targetTestsPath:
    path: 'tests/unit/plot-generation.test.js'
    permissions: [ 'write' ]
  otherTestsPaths:
    paths: [ 'tests/unit/main.test.js' ]
  targetSourcePath:
    path: 'src/lib/main.js'
    permissions: [ 'write' ]
  otherSourcePaths:
    paths: [ 'src/lib/' ]
  dependenciesFilepath:
    path: 'package.json'
    permissions: [ 'write' ]
  documentationPath:
    path: 'USAGE.md'
    permissions: [ 'write' ]

  # Filepaths for maintainer workflows
  formattingFilepath:
    path: '.prettierrc'
  lintingFilepath:
    path: 'eslint.config.js'
  readmeFilepath:
    path: 'README.md'
    permissions: [ 'write' ]

# Execution commands
buildScript: "npm run build"
testScript: "npm test"
mainScript: "npm run start"

# How many issues should be open to be picked up?
featureDevelopmentIssuesWipLimit: 2
maintenanceIssuesWipLimit: 1

# How many attempts should be made to work on an issue?
attemptsPerBranch: 2
attemptsPerIssue: 2

# Web publishing
docRoot: 'public'

# Repository seeding
seeding:
  repositoryReseed: 'true'
  missionFilepath: 'seeds/zero-MISSION.md'
  sourcePath: 'seeds/zero-main.js'
  testsPath: 'seeds/zero-tests.js'
  dependenciesFilepath: 'seeds/zero-package.json'
  readmeFilepath: 'seeds/zero-README.md'

# The intention is associated with the bot's discussion thread.
intentionBot:
  intentionFilepath: 'intentïon.md'

AGENT_CONFIG_FILE_END

Issue details:
ISSUE_START
title: Add time series data import (CSV/JSON) and PNG export
description:
## Summary

Extend the CLI to import existing time series data in CSV or JSON format and to export plots as PNG in addition to SVG. This aligns with our mission to read/write standard time series formats and provide both SVG and PNG outputs.

## Changes Required

1. **CLI Flags & Parsing**
   - Add new flags in `src/lib/main.js`:
     - `--input <file>`: path to a CSV or JSON file containing time series data.
     - `--input-format <csv|json>`: optional override to specify format (auto-detect by extension if omitted).
     - `--png`: boolean flag to output a PNG instead of SVG.
   - Implement `parseInputFile(filePath, format)` that:
     - Reads the file with `fs.readFileSync`.
     - Parses CSV (e.g., with `csv-parse`) or JSON into `{ xValues: number[], yValues: number[] }`.
     - Validates that arrays are numeric and of matching lengths; throws on errors.

2. **Integration in `main()`**
   - If `--input` is provided:
     - Skip expression/range parsing and data generation.
     - Call `parseInputFile` to obtain data.
   - After `generateSVG(data)`, if `--png` is set:
     - Convert the SVG to PNG (e.g., using `sharp`).
     - Write the PNG buffer to the specified output path or stdout.
   - Ensure exit codes and error messages remain consistent on failure.

3. **Testing**
   - **Unit Tests** in `tests/unit/plot-generation.test.js`:
     1. CSV input parsing: create a temporary CSV file with header `x,y` and verify arrays.
     2. JSON input parsing: use a JSON array of objects with `x` and `y` and verify arrays.
     3. PNG export: mock an SVG string, run `main()` with `--png`, and assert the output buffer starts with PNG signature (`\x89PNG`).
     4. Error handling: unsupported file extension, malformed CSV/JSON, mismatched lengths return exit code 1 and descriptive error.

4. **Documentation**
   - Update `USAGE.md`:
     - Document `--input <file>`, `--input-format <csv|json>`, and `--png` flags.
     - Provide example commands:
       ```bash
       npx repository0-plot-code-lib --input data.csv --input-format csv --png --output plot.png
       npx repository0-plot-code-lib --input data.json --png > out.png
       ```

5. **Dependencies**
   - Add `sharp` for PNG generation.
   - Add `csv-parse` (or similar) for robust CSV parsing.
   - Update `package.json` keywords to include `csv`, `json`, `png`.

## Testable Acceptance Criteria

1. **CSV Import**:
   - Given a valid `data.csv` with header `x,y`, running `npx repository0-plot-code-lib --input data.csv --output plot.svg` creates `plot.svg` representing the data without errors.
2. **JSON Import**:
   - Given a valid `data.json` representing `[ { "x": 0, "y": 1 }, ... ]`, running `--input data.json --format json` outputs the correct JSON representation of the data.
3. **PNG Export**:
   - With any valid input (expression/range or `--input`), adding `--png --output out.png` produces a file starting with the PNG signature bytes (`\x89PNG`) and valid dimensions.
4. **Error Cases**:
   - Supplying an unsupported extension (e.g., `.txt`) returns exit code 1 and prints "Unsupported input format".
   - Malformed CSV/JSON returns exit code 1 and prints a descriptive parse error.
   - Mismatched `x`/`y` lengths returns exit code 1 and prints "Mismatched data lengths".
5. **Backward Compatibility**:
   - Existing commands without `--input` and without `--png` continue to produce identical SVG output and pass all existing tests.

comments:
Author:github-actions[bot], Created:2025-05-17T12:27:08Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/actions/runs/15085157254
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/commit/ce57452c250db639555b2291a0ae2fba07c333b6
Author:github-actions[bot], Created:2025-05-17T12:27:47Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/actions/runs/15085157254
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/commit/ce57452c250db639555b2291a0ae2fba07c333b6
Author:github-actions[bot], Created:2025-05-17T12:29:04Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/actions/runs/15085157254
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/commit/ce57452c250db639555b2291a0ae2fba07c333b6
Author:github-actions[bot], Created:2025-05-17T12:32:25Z, Comment: Add CSV/JSON input parsing and PNG export support
Author:github-actions[bot], Created:2025-05-18T04:38:23Z, Comment: Workflow name: flow-linting-to-issue
Workflow run URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/actions/runs/15092362401
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/commit/ce4b6273a6aceaba5d2c960c3fe620f43922d687
Author:github-actions[bot], Created:2025-05-18T04:39:23Z, Comment: This issue has been reviewed and marked as 'ready'. The description has been updated with testable acceptance criteria, and relevant library documents ([], 0 in total) have been added as comments.
Author:github-actions[bot], Created:2025-05-18T04:40:14Z, Comment: Workflow name: flow-linting-to-issue
Workflow run URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/actions/runs/15092362401
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/commit/175965d54e0151ddb5a5beae0330b9c43558e8ce
Author:github-actions[bot], Created:2025-05-18T04:41:19Z, Comment: Workflow name: flow-linting-to-issue
Workflow run URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/actions/runs/15092362401
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/repository0-plot-code-lib/commit/175965d54e0151ddb5a5beae0330b9c43558e8ce
ISSUE_END            

Dependencies list from command: npm list
DEPENDENCIES_LIST_START
@xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 /home/runner/work/repository0-plot-code-lib/repository0-plot-code-lib
├── @microsoft/eslint-formatter-sarif@3.1.0
├── @vitest/coverage-v8@3.1.3
├── dotenv@16.5.0
├── ejs@3.1.10
├── eslint-config-google@0.14.0
├── eslint-config-prettier@10.1.5
├── eslint-plugin-import@2.31.0
├── eslint-plugin-prettier@5.4.0
├── eslint-plugin-promise@7.2.1
├── eslint-plugin-react@7.37.5
├── eslint-plugin-security@3.0.1
├── eslint-plugin-sonarjs@3.0.2
├── eslint@9.27.0
├── express@4.21.2
├── js-yaml@4.1.0
├── markdown-it-github@0.5.0
├── markdown-it@14.1.0
├── mathjs@11.12.0
├── minimatch@10.0.1
├── npm-check-updates@17.1.18
├── openai@4.100.0
├── prettier@3.5.3
├── vitest@3.1.3
└── zod@3.24.4
DEPENDENCIES_LIST_END    

Build output from command: npm run build
BUILD_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 build
> echo 'Nothing to build'

Nothing to build
BUILD_OUTPUT_END      

Test output from command: npm test
TEST_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 test
> vitest tests/unit/*.test.js


[1m[46m RUN [49m[22m [36mv3.1.3 [39m[90m/home/runner/work/repository0-plot-code-lib/repository0-plot-code-lib[39m

 [32m✓[39m tests/unit/module-index.test.js [2m([22m[2m1 test[22m[2m)[22m[32m 3[2mms[22m[39m
[90mstdout[2m | tests/unit/main.test.js[2m > [22m[2mDefault main[2m > [22m[2mshould terminate without error
[22m[39mRun with: []

[90mstdout[2m | tests/unit/plot-generation.test.js[2m > [22m[2mDefault main[2m > [22m[2mshould terminate without error on no args
[22m[39mRun with: []

 [32m✓[39m tests/unit/main.test.js [2m([22m[2m2 tests[22m[2m)[22m[32m 5[2mms[22m[39m
 [32m✓[39m tests/unit/plot-generation.test.js [2m([22m[2m7 tests[22m[2m)[22m[32m 84[2mms[22m[39m

[2m Test Files [22m [1m[32m3 passed[39m[22m[90m (3)[39m
[2m      Tests [22m [1m[32m10 passed[39m[22m[90m (10)[39m
[2m   Start at [22m 04:42:44
[2m   Duration [22m 1.19s[2m (transform 74ms, setup 0ms, collect 1.79s, tests 92ms, environment 1ms, prepare 305ms)[22m
TEST_OUTPUT_END            

Main execution output from command: npm run start
MAIN_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 start
> node src/lib/main.js

Run with: []
MAIN_OUTPUT_END    

Please produce updated versions of the files that resolve the issue.
Note that the README.md file is provided for context only - any documentation changes should be written to the documentation files.
The source files, test files, and documentation files can be individual files or directories containing multiple files.
Never truncate the files, when returning a file, always return the entire file content.

Paths in (updatedFile01Filepath, updatedFile02Filepath, etc...) must begin with one of: SOURCES.md;library/;features/;tests/unit/plot-generation.test.js;src/lib/main.js;package.json;USAGE.md;README.md

Answer strictly with a JSON object following this schema:
{
  "message": "A short sentence explaining the change applied (or why no changes were applied) suitable for a commit message or PR text.",
  "updatedFile01Filepath": "src/lib/main.js/orderParser.js",
  "updatedFile01Contents": "The entire new content of the source file, with all necessary changes applied, if any.",
  "updatedFile02Filepath":  "tests/unit/plot-generation.test.js/orderParser.test.js",
  "updatedFile02Contents": "The entire new content of the test file, with all necessary changes applied, if any.",
  "updatedFile03Filepath": "USAGE.md/USAGE.md",
  "updatedFile03Contents": "The entire new content of the documentation file, with all necessary changes applied, if any.",
  "updatedFile04Filepath": "USAGE.md/A_FILE_WE_DONT_WANT.md",
  "updatedFile04Contents": "delete",
  "updatedFile05Filepath": "unused",
  "updatedFile05Contents": "unused",
  "updatedFile06Filepath": "unused",
  "updatedFile06Contents": "unused",
  "updatedFile07Filepath": "unused",
  "updatedFile07Contents": "unused",
  "updatedFile08Filepath": "unused",
  "updatedFile08Contents": "unused",
  "updatedFile09Filepath": "unused",
  "updatedFile09Contents": "unused",
  "updatedFile10Filepath": "unused",
  "updatedFile10Contents": "unused",
  "updatedFile11Filepath": "unused",
  "updatedFile11Contents": "unused",
  "updatedFile12Filepath": "unused",
  "updatedFile12Contents": "unused",
  "updatedFile13Filepath": "unused",
  "updatedFile13Contents": "unused",
  "updatedFile14Filepath": "unused",
  "updatedFile14Contents": "unused",
  "updatedFile15Filepath": "unused",
  "updatedFile15Contents": "unused",
  "updatedFile16Filepath": "unused",
  "updatedFile16Contents": "unused"
}

You can include up to 16 files using the updatedFileXXName and updatedFileXXContents pairs (where XX is a number from 01 to 16)
Where a file name and contents slot is not used, populate tha name with "unused" and the contents with "unused".
Where a file is to be deleted, set the name to the file path and the contents to "delete".
Never truncate the files, when returning a file, always return the entire file content.

Ensure valid JSON.
