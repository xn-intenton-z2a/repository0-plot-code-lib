
You are providing updates to the README.md file and other documentation files to ensure they accurately reflect the current state of the codebase and emphasize content that delivers substantial user value and addresses core implementation needs.

The README is the primary focus, but other documentation files can be updated as well if needed. Source files (srcFiles) and test files (testFiles) should NOT be updated.

When updating the README:
1. Preserve existing README content that delivers substantial user value, even if it describes features not yet implemented
2. Update the README if it conflicts with current source code, tests, or documentation, prioritizing content that directly enhances the product's primary purpose
3. If documentation files are out of date compared to the source code or tests, update them to be consistent, focusing on high-impact information that enables immediate application rather than superficial descriptions
4. Ensure documentation clearly communicates the core functionality and value proposition of the product, prioritizing content that helps users solve real problems

Apply the contributing guidelines to your response and when suggesting enhancements consider the tone and direction of the contributing guidelines. Focus on documentation improvements that deliver measurable value to users rather than cosmetic changes or excessive detail on edge cases.

You may only change the files provided in the prompt context. You can update multiple files by specifying their paths and contents in the updatedFiles object. Each file will be checked against the allowedFilepathPatterns before being written.

Consider the following when refining your response:
  * Current feature names and specifications in the repository
  * Source file content (for context only)
  * Test file content (for context only)
  * Documentation file content
  * README file content
  * MISSION file content
  * Contributing file content
  * Dependencies file content
  * Dependency install output
  * Issue details (if any)
  * Build output
  * Test output
  * Main execution output
  * Agent configuration file content

Current feature names and specifications (for context, read only):
CURRENT_FEATURES_START
features/OUTPUT_FORMATS.md
# features/OUTPUT_FORMATS.md
# Overview
Extend the CLI tool and add an HTTP server mode to support multiple output formats: svg, png, json, and csv. Provide a consistent interface across both CLI and HTTP modes, enabling users to export vector or raster images, raw data, or tabular outputs for integration with external workflows.

# CLI Integration
- Add flag --format <format> with allowed values svg, png, json, csv. Default svg.
- Retain existing flags --expression, --range, --input, --input-format, --output, and deprecate --png by mapping it to --format png.
- After parsing args, load or generate data, then branch on format:
  - svg: generate vector via generateSVG(data, options) and output XML.
  - png: invoke convertSVGtoPNG on the generated SVG and output binary.
  - json: serialize { xValues, yValues } to application/json.
  - csv: implement a generateCSV(data) helper to produce text/csv with header x,y and rows.
- Write output to stdout or to the file specified by --output, honoring absolute or relative paths.

# HTTP API
- Introduce flags --serve to enable server mode and --port <number> to specify listening port (default 3000).
- When --serve is true, spin up an Express app and register a GET /plot endpoint.
- Accept query parameters: expression, range, input, inputFormat, format, output omitted.
- Validate required parameters and return 400 with a JSON error on invalid input or missing fields.
- On success, generate the requested format and set Content-Type accordingly: image/svg+xml, image/png, application/json, or text/csv.
- Respond with data in the response body without writing to disk.

# Implementation
- Update parseArgs in src/lib/main.js to include format (enum), serve (boolean), and port (number); deprecate png alias.
- After data is loaded, pass options.width, height, margin from optional flags if provided.
- Abstract common generation logic into a helper function to reuse between CLI and HTTP.
- Use sharp for PNG conversion and Express for server.

# Tests
- Extend parseArgs tests to cover --format, --serve, --port, and deprecation of --png.
- Add unit tests for json and csv outputs in tests/unit/plot-generation.test.js:
  - Verify JSON payload structure and error on empty data.
  - Verify CSV header and rows.
- Use supertest to test HTTP API in a new tests/unit/http-api.test.js:
  - GET /plot?expression=x&range=x=0:2&format=csv returns 200 text/csv and correct CSV.
  - Test format=json returns application/json with correct body.
  - Test format=png and format=svg return correct content types and response bodies.
  - Test error responses for missing expression or bad range.

# Documentation
- Update README.md and USAGE.md to document --format, --serve, --port and HTTP examples:
    curl "http://localhost:3000/plot?expression=x&range=x=0:5:1&format=csv" > data.csv
    npx repository0-plot-code-lib --serve --port 4000
    npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:3" --format png --output out.png
features/DATA_INPUT.md
# features/DATA_INPUT.md
# Overview

Add support for importing time series data from external files (JSON or CSV) to generate plots without requiring an expression and range on the command line. This enables users to visualize arbitrary datasets and integrate seamlessly with downstream workflows.

# CLI Integration

- Introduce a new flag --input <file> to specify a path to a JSON or CSV file containing time series data.
- When --input is provided:
  - expression and range flags become optional and ignored.
  - Validate file extension: .json or .csv. Report an error for unsupported formats.
  - Provide an example usage:
    npx repository0-plot-code-lib --input data.json --output plot.svg
    npx repository0-plot-code-lib --input data.csv --format png --output plot.png

# Implementation

- Extend parseArgs in src/lib/main.js to accept input (string) in the args schema.
- In main:
  - If parsed.input exists, read the file from disk with fs.readFileSync.
  - If .json:
    - JSON.parse to obtain an object with xValues (number[]) and yValues (number[]). Validate array lengths match.
  - If .csv:
    - Parse lines by splitting on newlines. Expect header row, e.g., x,y. Use built-in string methods to parse numbers.
    - Convert columns into xValues and yValues arrays. Throw an error on parse failure or mismatched lengths.
  - After data is loaded, reuse generateSVG or format logic (with --format) to produce the plot or raw data output.
  - Honor --format and --output flags as in existing flow.
  - Print clear error messages for file I/O or parsing issues and exit with non-zero status.

# Tests

- Add unit tests in tests/unit/plot-generation.test.js to cover:
  - parseArgs correctly parsing --input alongside other flags.
  - Loading JSON input: create a temporary JSON file with known arrays and verify generateSVG called with correct data.
  - Loading CSV input: create a temporary CSV file, parse it, and verify data arrays.
  - Error handling: unsupported extension, invalid JSON, malformed CSV, mismatched array lengths.
- Ensure the test suite cleans up any temp files and does not interfere with other tests.

# Documentation

- Update README.md and USAGE.md to document the new --input flag, supported formats, examples, and error conditions.
CURRENT_FEATURES_END

Source files (for context only, DO NOT UPDATE):
SOURCE_FILES_START
File: src/lib/main.js
#!/usr/bin/env node
// src/lib/main.js

import fs from "fs";
import { fileURLToPath } from "url";
import path from "path";
import { z } from "zod";
import { create, all } from "mathjs";
import sharp from "sharp";
import express from "express";

const math = create(all);

export function parseArgs(args) {
  const booleanFlags = ["png", "serve"];
  const parsed = {};
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (!arg.startsWith("--")) {
      continue;
    }
    const rawKey = arg.slice(2);
    const key = rawKey.replace(/-([a-z])/g, (_, char) => char.toUpperCase());
    if (booleanFlags.includes(key)) {
      parsed[key] = true;
    } else {
      const value = args[i + 1];
      if (value && !value.startsWith("--")) {
        parsed[key] = value;
        i++;
      } else {
        throw new Error(`Missing value for argument: ${arg}`);
      }
    }
  }
  const argsSchema = z.object({
    expression: z.string().optional(),
    range: z.string().optional(),
    output: z.string().optional(),
    input: z.string().optional(),
    inputFormat: z.enum(["csv", "json"]).optional(),
    png: z.boolean().optional(),
    format: z.enum(["svg", "png", "json", "csv"]).optional(),
    serve: z.boolean().optional(),
    port: z.preprocess((val) => {
      if (typeof val === "string") {
        const num = parseInt(val, 10);
        return Number.isNaN(num) ? val : num;
      }
      return val;
    }, z.number().int().positive().optional()),
  });
  return argsSchema.parse(parsed);
}

export function parseRange(rangeStr) {
  const [varName, rangePart] = rangeStr.split("=");
  if (!varName || !rangePart) {
    throw new Error(`Invalid range format: ${rangeStr}`);
  }
  const parts = rangePart.split(":").map((p) => parseFloat(p));
  const min = parts[0];
  const max = parts[1];
  const step = parts.length >= 3 && !Number.isNaN(parts[2]) ? parts[2] : 1;
  if (Number.isNaN(min) || Number.isNaN(max) || Number.isNaN(step)) {
    throw new Error(`Invalid range numbers in: ${rangeStr}`);
  }
  return { varName, min, max, step };
}

export function generateData(expression, { varName, min, max, step }) {
  const expr = math.parse(expression).compile();
  const xValues = math.range(min, max, step, true).toArray();
  const yValues = xValues.map((x) => expr.evaluate({ [varName]: x }));
  return { xValues, yValues };
}

export function generateSVG({ xValues, yValues }, options = {}) {
  const width = options.width || 800;
  const height = options.height || 600;
  const margin = options.margin || 40;

  const minX = Math.min(...xValues);
  const maxX = Math.max(...xValues);
  const minY = Math.min(...yValues);
  const maxY = Math.max(...yValues);
  const xScale = (width - 2 * margin) / (maxX - minX || 1);
  const yScale = (height - 2 * margin) / (maxY - minY || 1);

  const points = xValues
    .map((x, i) => {
      const y = yValues[i];
      const px = margin + (x - minX) * xScale;
      const py = height - margin - (y - minY) * yScale;
      return `${px},${py}`;
    })
    .join(" ");

  const axes = [
    `<line x1="${margin}" y1="${margin}" x2="${margin}" y2="${height - margin}" stroke="black"/>`,
    `<line x1="${margin}" y1="${height - margin}" x2="${width - margin}" y2="${height - margin}" stroke="black"/>`,
  ];

  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
  ${axes.join("\n  ")}
  <polyline fill="none" stroke="black" stroke-width="2" points="${points}"/>
</svg>`;
}

export function parseInputFile(filePath, formatOverride) {
  const ext = path.extname(filePath).toLowerCase().slice(1);
  const format = formatOverride || ext;
  if (!["csv", "json"].includes(format)) {
    throw new Error("Unsupported input format");
  }
  const content = fs.readFileSync(filePath, "utf8");
  let xValues = [];
  let yValues = [];
  if (format === "csv") {
    const lines = content.split(/\r?\n/).filter((line) => line.trim() !== "");
    if (lines.length < 2) {
      throw new Error("CSV file must have at least a header and one data row");
    }
    const header = lines[0].split(",");
    if (header[0].trim() !== "x" || header[1].trim() !== "y") {
      throw new Error("CSV header must be 'x,y'");
    }
    for (let i = 1; i < lines.length; i++) {
      const cols = lines[i].split(",");
      if (cols.length !== 2) throw new Error(`Invalid CSV row: ${lines[i]}`);
      const x = parseFloat(cols[0]);
      const y = parseFloat(cols[1]);
      if (Number.isNaN(x) || Number.isNaN(y)) throw new Error(`Invalid number in CSV at row ${i + 1}`);
      xValues.push(x);
      yValues.push(y);
    }
  } else {
    let parsedJson;
    try {
      parsedJson = JSON.parse(content);
    } catch (err) {
      throw new Error(`Invalid JSON: ${err.message}`);
    }
    if (Array.isArray(parsedJson)) {
      for (const item of parsedJson) {
        if (typeof item.x !== "number" || typeof item.y !== "number") {
          throw new Error("JSON items must have numeric 'x' and 'y' properties");
        }
        xValues.push(item.x);
        yValues.push(item.y);
      }
    } else if (parsedJson.xValues && parsedJson.yValues) {
      if (!Array.isArray(parsedJson.xValues) || !Array.isArray(parsedJson.yValues)) {
        throw new Error("JSON must have 'xValues' and 'yValues' arrays");
      }
      xValues = parsedJson.xValues;
      yValues = parsedJson.yValues;
      if (xValues.length !== yValues.length) {
        throw new Error("Mismatched data lengths");
      }
      if (!xValues.every((x) => typeof x === "number") || !yValues.every((y) => typeof y === "number")) {
        throw new Error("JSON arrays must contain numbers");
      }
    } else {
      throw new Error("JSON must be an array of {x,y} or an object with xValues and yValues");
    }
  }
  if (xValues.length !== yValues.length) {
    throw new Error("Mismatched data lengths");
  }
  return { xValues, yValues };
}

export async function convertSVGtoPNG(svg) {
  return sharp(Buffer.from(svg)).png().toBuffer();
}

export function generateCSV({ xValues, yValues }) {
  if (!Array.isArray(xValues) || !Array.isArray(yValues)) {
    throw new Error("Data must have xValues and yValues arrays");
  }
  if (xValues.length === 0 || yValues.length === 0) {
    throw new Error("No data points available");
  }
  if (xValues.length !== yValues.length) {
    throw new Error("Mismatched data lengths");
  }
  const header = "x,y";
  const rows = xValues.map((x, i) => `${x},${yValues[i]}`);
  return [header, ...rows].join("\n");
}

export function generateJSON(data) {
  return JSON.stringify(data);
}

export async function main(argsParam) {
  const args = argsParam ?? process.argv.slice(2);
  if (!args || args.length === 0) {
    console.log(`Run with: ${JSON.stringify(args)}`);
    return;
  }
  let parsed;
  try {
    parsed = parseArgs(args);
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
  let { format, png, serve, port } = parsed;
  if (png && !format) {
    console.warn("[DEPRECATED] --png is deprecated, use --format=png");
    format = "png";
  }
  format = format || "svg";
  if (serve) {
    const app = express();
    app.get("/plot", async (req, res) => {
      try {
        const { expression, range, input, inputFormat, format: qFormat } = req.query;
        const outFormat = qFormat || format;
        let data;
        if (input) {
          data = parseInputFile(input, inputFormat);
        } else {
          if (!expression || !range) {
            throw new Error("Missing expression or range");
          }
          const rng = parseRange(range);
          data = generateData(expression, rng);
        }
        if (outFormat === "svg") {
          const svg = generateSVG(data);
          res.type("image/svg+xml").send(svg);
        } else if (outFormat === "png") {
          const svg = generateSVG(data);
          const buffer = await convertSVGtoPNG(svg);
          res.type("image/png").send(buffer);
        } else if (outFormat === "json") {
          res.type("application/json").send(generateJSON(data));
        } else if (outFormat === "csv") {
          res.type("text/csv").send(generateCSV(data));
        } else {
          throw new Error(`Unsupported format: ${outFormat}`);
        }
      } catch (err) {
        res.status(400).json({ error: err.message });
      }
    });
    const listenPort = port || 3000;
    app.listen(listenPort, () => {
      console.log(`Server listening on port ${listenPort}`);
    });
    return;
  }
  let data;
  if (parsed.input) {
    try {
      data = parseInputFile(parsed.input, parsed.inputFormat);
    } catch (err) {
      console.error(err.message);
      process.exit(1);
    }
  } else {
    let rangeObj;
    try {
      rangeObj = parseRange(parsed.range);
    } catch (err) {
      console.error(err.message);
      process.exit(1);
    }
    try {
      data = generateData(parsed.expression, rangeObj);
    } catch (err) {
      console.error(`Error evaluating expression: ${err.message}`);
      process.exit(1);
    }
  }
  try {
    if (format === "svg") {
      const svg = generateSVG(data);
      if (parsed.output) {
        const outPath = path.isAbsolute(parsed.output)
          ? parsed.output
          : path.resolve(process.cwd(), parsed.output);
        fs.writeFileSync(outPath, svg, "utf8");
      } else {
        console.log(svg);
      }
    } else if (format === "png") {
      const svg = generateSVG(data);
      const buffer = await convertSVGtoPNG(svg);
      if (parsed.output) {
        const outPath = path.isAbsolute(parsed.output)
          ? parsed.output
          : path.resolve(process.cwd(), parsed.output);
        fs.writeFileSync(outPath, buffer);
      } else {
        process.stdout.write(buffer);
      }
    } else if (format === "json") {
      const jsonStr = generateJSON(data);
      if (parsed.output) {
        const outPath = path.isAbsolute(parsed.output)
          ? parsed.output
          : path.resolve(process.cwd(), parsed.output);
        fs.writeFileSync(outPath, jsonStr, "utf8");
      } else {
        console.log(jsonStr);
      }
    } else if (format === "csv") {
      const csvStr = generateCSV(data);
      if (parsed.output) {
        const outPath = path.isAbsolute(parsed.output)
          ? parsed.output
          : path.resolve(process.cwd(), parsed.output);
        fs.writeFileSync(outPath, csvStr, "utf8");
      } else {
        console.log(csvStr);
      }
    } else {
      console.error(`Unsupported format: ${format}`);
      process.exit(1);
    }
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main(process.argv.slice(2));
}


SOURCE_FILES_END

Test files (for context only, DO NOT UPDATE):
TEST_FILES_START
File: tests/unit/plot-generation.test.js
import { describe, test, expect } from "vitest";
import fs from "fs";
import os from "os";
import path from "path";
import {
  parseArgs,
  parseRange,
  generateData,
  generateSVG,
  main,
  parseInputFile,
  convertSVGtoPNG,
  generateCSV,
  generateJSON,
} from "@src/lib/main.js";

describe("Main Module Import", () => {
  test("should be non-null", () => {
    expect({
      parseArgs,
      parseRange,
      generateData,
      generateSVG,
      main,
      generateCSV,
      generateJSON,
    }).not.toBeNull();
  });
});

describe("parseArgs", () => {
  test("should parse valid CLI args", () => {
    const args = [
      "--expression",
      "x*2",
      "--range",
      "x=0:5:2",
      "--output",
      "out.svg",
    ];
    const parsed = parseArgs(args);
    expect(parsed).toEqual({
      expression: "x*2",
      range: "x=0:5:2",
      output: "out.svg",
    });
  });
  test("should parse --format flag", () => {
    const args = ["--format", "csv"];
    const parsed = parseArgs(args);
    expect(parsed.format).toBe("csv");
  });
  test("should alias --png as boolean and warn on format assignment", () => {
    const args = ["--png"];
    const parsed = parseArgs(args);
    expect(parsed.png).toBe(true);
  });
  test("should parse serve and port flags", () => {
    const args = ["--serve", "--port", "4000"];
    const parsed = parseArgs(args);
    expect(parsed.serve).toBe(true);
    expect(parsed.port).toBe(4000);
  });
});

describe("parseRange", () => {
  test("should parse range string", () => {
    const range = "x=0:5:2";
    const result = parseRange(range);
    expect(result).toEqual({ varName: "x", min: 0, max: 5, step: 2 });
  });
  test("should default step to 1", () => {
    const range = "x=1:3";
    const result = parseRange(range);
    expect(result).toEqual({ varName: "x", min: 1, max: 3, step: 1 });
  });
});

describe("generateData", () => {
  test("should generate data points", () => {
    const exp = "x*2";
    const rangeObj = { varName: "x", min: 0, max: 4, step: 2 };
    const data = generateData(exp, rangeObj);
    expect(data.xValues).toEqual([0, 2, 4]);
    expect(data.yValues).toEqual([0, 4, 8]);
  });
});

describe("generateSVG", () => {
  test("should generate SVG with expected tags and points", () => {
    const data = { xValues: [0, 1], yValues: [0, 2] };
    const svg = generateSVG(data, { width: 100, height: 50, margin: 5 });
    expect(svg).toContain('<svg');
    expect(svg).toContain('xmlns="http://www.w3.org/2000/svg"');
    expect(svg).toContain('<polyline');
    expect(svg).toMatch(/points="[^"]+"/);
  });
});

describe("generateCSV", () => {
  test("should generate CSV string correctly", () => {
    const data = { xValues: [1, 2], yValues: [3, 4] };
    const csv = generateCSV(data);
    expect(csv).toBe("x,y\n1,3\n2,4");
  });
  test("should throw on empty data", () => {
    expect(() => generateCSV({ xValues: [], yValues: [] })).toThrow("No data points available");
  });
});

describe("generateJSON", () => {
  test("should generate JSON string correctly", () => {
    const data = { xValues: [1], yValues: [2] };
    const jsonStr = generateJSON(data);
    expect(jsonStr).toBe(JSON.stringify(data));
  });
});

describe("Default main", () => {
  test("should terminate without error on no args", () => {
    process.argv = ["node", "src/lib/main.js"];
    expect(() => main()).not.toThrow();
  });
});

describe("parseInputFile", () => {
  test("should parse CSV input file", () => {
    const tmp = path.join(os.tmpdir(), "test-input.csv");
    fs.writeFileSync(tmp, "x,y\n1,2\n3,4\n");
    const data = parseInputFile(tmp);
    expect(data).toEqual({ xValues: [1, 3], yValues: [2, 4] });
    fs.unlinkSync(tmp);
  });

  test("should parse JSON input file with object array", () => {
    const tmp = path.join(os.tmpdir(), "test-input.json");
    const arr = [{ x: 0, y: 1 }, { x: 2, y: 3 }];
    fs.writeFileSync(tmp, JSON.stringify(arr));
    const data = parseInputFile(tmp);
    expect(data).toEqual({ xValues: [0, 2], yValues: [1, 3] });
    fs.unlinkSync(tmp);
  });

  test("should throw on unsupported format", () => {
    const tmp = path.join(os.tmpdir(), "test-input.txt");
    fs.writeFileSync(tmp, "foo");
    expect(() => parseInputFile(tmp)).toThrow("Unsupported input format");
    fs.unlinkSync(tmp);
  });
});

describe("convertSVGtoPNG", () => {
  test("should convert SVG to PNG buffer", async () => {
    const svg = '<svg xmlns="http://www.w3.org/2000/svg"><rect width="10" height="10"/></svg>';
    const buffer = await convertSVGtoPNG(svg);
    expect(buffer.slice(0, 8)).toEqual(Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]));
  });
});


File: tests/unit/main.test.js
import { describe, test, expect } from "vitest";
import * as mainModule from "@src/lib/main.js";
import { main } from "@src/lib/main.js";

describe("Main Module Import", () => {
  test("should be non-null", () => {
    expect(mainModule).not.toBeNull();
  });
});

describe("Default main", () => {
  test("should terminate without error", () => {
    process.argv = ["node", "src/lib/main.js"];
    main();
  });
});


TEST_FILES_END

Documentation files (to be updated if necessary):
DOCS_FILES_START
File: USAGE.md
# Usage

To generate an SVG plot from a mathematical expression:

```bash
npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:6.28:0.1" --output output.svg
```

Options:

- `--expression <expr>`: A mathematical expression in variable `x`. Required unless using `--input`.
- `--range <range>`: Range for `x` in the format `x=min:max[:step]`. Required unless using `--input`. `step` defaults to `1`.
- `--output <file>`: Output file path for the image, SVG, JSON, or CSV. Optional. Defaults to stdout.
- `--input <file>`: Path to a CSV or JSON file containing time series data. When provided, `--expression` and `--range` are ignored.
- `--input-format <csv|json>`: Override input format detection based on file extension. Optional.
- `--format <svg|png|json|csv>`: Specify output format. Defaults to `svg`.
- `--png`: (Deprecated) Alias for `--format png`. Outputs a PNG image instead of SVG.
- `--serve`: Enable HTTP server mode.
- `--port <number>`: Port for HTTP server. Defaults to `3000`.

Examples:

Generate SVG from CSV data:
```bash
npx repository0-plot-code-lib --input data.csv --output plot.svg
```

Generate PNG from CSV data:
```bash
npx repository0-plot-code-lib --input data.csv --format png --output plot.png
```

Generate JSON from CSV data:
```bash
npx repository0-plot-code-lib --input data.csv --format json --output data.json
```

Generate CSV from JSON data, writing to stdout:
```bash
npx repository0-plot-code-lib --input data.json --format csv > data.csv
```

Run HTTP server on port 4000:
```bash
npx repository0-plot-code-lib --serve --port 4000
```
Access the `/plot` endpoint:
```bash
curl "http://localhost:4000/plot?expression=x&range=x=0:5:1&format=csv" > data.csv
```


DOCS_FILES_END

README file (primary focus, to be updated): README.md
README_FILE_START
# repository0-plot-code-lib

"Be a go-to plot library with a CLI, be the jq of formulae visualisations."

## Installation

Install via npm:

```bash
npm install @xn-intenton-z2a/repository0-plot-code-lib
```

Or use npx without installing:

```bash
npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:6.28:0.1"
```

## Usage

Run the CLI with the following syntax:

```bash
npx repository0-plot-code-lib --expression "<expr>" --range "<range>" [--output "<file>"]
```

Options:

- `--expression <expr>` (required): A mathematical expression in variable `x`.
- `--range <range>` (required): Range for `x` in the format `x=min:max[:step]`. Step defaults to `1`.
- `--output <file>` (optional): Path to save the output. Defaults to stdout.
- `--input <file>` (optional): Path to a CSV or JSON file containing data (ignores expression and range).
- `--input-format <csv|json>` (optional): Override input format detection.
- `--png` (optional): Output a PNG image instead of SVG.

## Examples

Generate an SVG plot and save to a file:

```bash
npx repository0-plot-code-lib --expression "sin(x)" --range "x=0:6.28:0.1" --output output.svg
```

Redirect output to STDOUT and pipe to a file:

```bash
npx repository0-plot-code-lib --expression "x^2" --range "x=0:10:0.5" > plot.svg
```

## License

MIT

README_FILE_END

MISSION file (for context, read only): MISSION.md
MISSION_FILE_START
# Mission Statement

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

**plot-code-lib** is a JavaScript library and CLI tool designed to:
- Transform and given range and a simple expression syntax for (pick an existing open standard) to time series data.
- Read and write the time series data in a standard format (pick an existing open standard).
- Make use of libraries for formula parsing, time series generation, plotting, and persistence in image formats.
- Generate SVG and PNG plots from the time series data and save these as files.
- Variations on this example: `node run start -- --expression "y=sin(x)" --range "x=-1:-1,y=-1:-1" --file output.svg` .
- Showcase all the features of the library via a CLI by dry running tp generate example commands and output in the README.md file.

`plot-code-lib` facilitate the creation of plots from mathematical expressions and time series data. It will take a
mathematical expression and a range of values and generate a plot in SVG or PNG format.

MISSION_FILE_END

Contributing file (for context, read only): CONTRIBUTING.md
CONTRIBUTING_FILE_START
# repository0-plot-code-lib

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

## How to Contribute

The guidelines below apply to human or automated contributions:

1. **Report Issues or Ideas:**
    - Open an issue on GitHub to share bug reports, feature requests, or any improvements you envision.
    - Clear descriptions and reproducible steps are highly appreciated.

2. **Submit Pull Requests:**
    - Fork the repository and create a feature branch.
    - Implement your changes, ensuring you follow the existing coding style and standards.
    - Add tests to cover any new functionality.
    - Update documentation if your changes affect usage or workflow behavior.
    - Submit your pull request for review.

## Guidelines

- **Code Quality:**
    - Ensure there are tests that cover your changes and any likely new cases they introduce.
    - When making a change remain consistent with the existing code style and structure.
    - When adding new functionality, consider if some unused or superseded code should be removed.

- **Compatibility:**
    - Ensure your code runs on Node 20 and adheres to ECMAScript Module (ESM) standards.
    - Tests use vitest and competing test frameworks should not be added.
    - Mocks in tests must not interfere with other tests.

- **Testing:**
    - The command `npm test` should invoke the tests added for the new functionality (and pass).
    - If you add new functionality, ensure it is covered by tests.

- **Documentation:**
    - When making a change to the main source file, review the readme to see if it needs to be updated and if so, update it.
    - Where the source exports a function, consider that part of the API of the library and document it in the readme.
    - Where the source stands-up an HTTP endpoint, consider that part of the API of the library and document it in the readme.
    - Include usage examples including inline code usage and CLI and HTTP invocation, API references.

CONTRIBUTING_FILE_END

Dependencies file (for context, read only): package.json
DEPENDENCIES_FILE_START
{
  "name": "@xn-intenton-z2a/repository0-plot-code-lib",
  "version": "1.2.0-0",
  "description": "Be a go-to plot library with a CLI, be the jq of formulae visualisations.",
  "type": "module",
  "main": "src/lib/main.js",
  "bin": {
    "repository0-plot-code-lib": "src/lib/main.js"
  },
  "scripts": {
    "build": "echo 'Nothing to build'",
    "formatting": "prettier --check .",
    "formatting-fix": "prettier --write .",
    "linting": "eslint .",
    "linting-json": "eslint --format=@microsoft/eslint-formatter-sarif .",
    "linting-fix": "eslint --fix .",
    "update-to-minor": "npx npm-check-updates --upgrade --enginesNode --target minor --verbose --install always",
    "update-to-greatest": "npx npm-check-updates --upgrade --enginesNode --target greatest --verbose --install always --reject 'alpha'",
    "test": "vitest tests/unit/*.test.js",
    "test:unit": "vitest --coverage tests/unit/*.test.js",
    "start": "node src/lib/main.js"
  },
  "keywords": [
    "csv",
    "json",
    "png"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "dotenv": "^16.5.0",
    "ejs": "^3.1.10",
    "js-yaml": "^4.1.0",
    "mathjs": "^11.8.2",
    "minimatch": "^10.0.1",
    "openai": "^4.95.1",
    "sharp": "^0.32.4",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@vitest/coverage-v8": "^3.1.3",
    "eslint": "^9.25.1",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "express": "^4.21.2",
    "js-yaml": "^4.1.0",
    "markdown-it-github": "^0.5.0",
    "markdown-it": "^14.1.0",
    "npm-check-updates": "^17.1.18",
    "prettier": "^3.5.3",
    "supertest": "^6.3.3",
    "vitest": "^3.1.3"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "files": [
    "src/"
  ],
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  }
}
DEPENDENCIES_FILE_END   

Dependencies install from command: npm install
DEPENDENCIES_INSTALL_START
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated @humanwhocodes/config-array@0.13.0: Use @eslint/config-array instead
npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
npm warn deprecated @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated node-domexception@1.0.0: Use your platform's native DOMException instead
npm warn deprecated superagent@8.1.2: Please upgrade to v9.0.0+ as we have fixed a public vulnerability with formidable dependency. Note that v9.0.0+ requires Node.js v14.18.0+. See https://github.com/ladjs/superagent/pull/1800 for insight. This project is supported and maintained by the team at Forward Email @ https://forwardemail.net
npm warn deprecated eslint@8.57.1: This version is no longer supported. Please see https://eslint.org/version-support for other options.

added 548 packages, and audited 549 packages in 6s

172 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
DEPENDENCIES_INSTALL_END    

Build output from command: npm run build
BUILD_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 build
> echo 'Nothing to build'

Nothing to build
BUILD_OUTPUT_END      

Test output from command: npm test
TEST_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 test
> vitest tests/unit/*.test.js


[1m[46m RUN [49m[22m [36mv3.1.3 [39m[90m/home/runner/work/repository0-plot-code-lib/repository0-plot-code-lib[39m

 [32m✓[39m tests/unit/module-index.test.js [2m([22m[2m1 test[22m[2m)[22m[32m 2[2mms[22m[39m
[90mstdout[2m | tests/unit/main.test.js[2m > [22m[2mDefault main[2m > [22m[2mshould terminate without error
[22m[39mRun with: []

 [32m✓[39m tests/unit/main.test.js [2m([22m[2m2 tests[22m[2m)[22m[32m 4[2mms[22m[39m
[90mstdout[2m | tests/unit/plot-generation.test.js[2m > [22m[2mDefault main[2m > [22m[2mshould terminate without error on no args
[22m[39mRun with: []

 [32m✓[39m tests/unit/plot-generation.test.js [2m([22m[2m17 tests[22m[2m)[22m[32m 64[2mms[22m[39m

[2m Test Files [22m [1m[32m3 passed[39m[22m[90m (3)[39m
[2m      Tests [22m [1m[32m20 passed[39m[22m[90m (20)[39m
[2m   Start at [22m 08:50:00
[2m   Duration [22m 1.28s[2m (transform 70ms, setup 0ms, collect 1.98s, tests 70ms, environment 1ms, prepare 271ms)[22m
TEST_OUTPUT_END            

Main execution output from command: npm run start
MAIN_OUTPUT_START

> @xn-intenton-z2a/repository0-plot-code-lib@1.2.0-0 start
> node src/lib/main.js

Run with: []
MAIN_OUTPUT_END    

Agent configuration file:
AGENT_CONFIG_FILE_START
# Which agentic-lib workflow schedule should be used?
schedule: schedule-2

# Mapping for from symbolic keys to filepaths for access by agentic-lib workflows with limits and access permissions
paths:
  # Filepaths for elaborator workflows
  missionFilepath:
    path: 'MISSION.md'
  librarySourcesFilepath:
    path: 'SOURCES.md'
    permissions: [ 'write' ]
    limit: 16
  libraryDocumentsPath:
    path: 'library/'
    permissions: [ 'write' ]
    limit: 32
  featuresPath:
    path: 'features/'
    permissions: [ 'write' ]
    limit: 2

  # Filepaths for engineer workflows
  contributingFilepath:
    path: 'CONTRIBUTING.md'
  targetTestsPath:
    path: 'tests/unit/plot-generation.test.js'
    permissions: [ 'write' ]
  otherTestsPaths:
    paths: [ 'tests/unit/main.test.js' ]
  targetSourcePath:
    path: 'src/lib/main.js'
    permissions: [ 'write' ]
  otherSourcePaths:
    paths: [ 'src/lib/' ]
  dependenciesFilepath:
    path: 'package.json'
    permissions: [ 'write' ]
  documentationPath:
    path: 'USAGE.md'
    permissions: [ 'write' ]

  # Filepaths for maintainer workflows
  formattingFilepath:
    path: '.prettierrc'
  lintingFilepath:
    path: 'eslint.config.js'
  readmeFilepath:
    path: 'README.md'
    permissions: [ 'write' ]

# Execution commands
buildScript: "npm run build"
testScript: "npm test"
mainScript: "npm run start"

# How many issues should be open to be picked up?
featureDevelopmentIssuesWipLimit: 2
maintenanceIssuesWipLimit: 1

# How many attempts should be made to work on an issue?
attemptsPerBranch: 2
attemptsPerIssue: 2

# Web publishing
docRoot: 'public'

# Repository seeding
seeding:
  repositoryReseed: 'true'
  missionFilepath: 'seeds/zero-MISSION.md'
  sourcePath: 'seeds/zero-main.js'
  testsPath: 'seeds/zero-tests.js'
  dependenciesFilepath: 'seeds/zero-package.json'
  readmeFilepath: 'seeds/zero-README.md'

# The intention is associated with the bot's discussion thread.
intentionBot:
  intentionFilepath: 'intentïon.md'

AGENT_CONFIG_FILE_END

Please produce updated versions of the README and documentation files to ensure they accurately reflect the current state of the codebase.
Remember:
1. The README is the primary focus, but other documentation files can be updated as well if needed
2. Source files (srcFiles) and test files (testFiles) should NOT be updated
3. Preserve existing README content even if it describes features not yet implemented
4. Update the README if it conflicts with current source code, tests, or documentation
5. If documentation files are out of date compared to the source code or tests, update them to be consistent

If there are no changes required, please provide the original content and state that no changes are necessary in the message.

Paths in (updatedFile01Filepath, updatedFile02Filepath, etc...) must begin with one of: SOURCES.md;library/;features/;tests/unit/plot-generation.test.js;src/lib/main.js;package.json;USAGE.md;README.md

Answer strictly with a JSON object following this schema:
{
  "message": "A short sentence explaining the changes applied (or why no changes were applied) suitable for a commit message or PR text.",
  "updatedFile01Filepath": "README.md",
  "updatedFile01Contents": "The entire new content of the README file, with all necessary changes applied, if any.",
  "updatedFile02Filepath":  "USAGE.md/USAGE.md",
  "updatedFile02Contents": "The entire new content of the file, with all necessary changes applied, if any.",
  "updatedFile03Filepath": "unused",
  "updatedFile03Contents": "unused",
  "updatedFile04Filepath": "unused",
  "updatedFile04Contents": "unused",
  "updatedFile05Filepath": "unused",
  "updatedFile05Contents": "unused",
  "updatedFile06Filepath": "unused",
  "updatedFile06Contents": "unused",
  "updatedFile07Filepath": "unused",
  "updatedFile07Contents": "unused",
  "updatedFile08Filepath": "unused",
  "updatedFile08Contents": "unused",
  "updatedFile09Filepath": "unused",
  "updatedFile09Contents": "unused",
  "updatedFile10Filepath": "unused",
  "updatedFile10Contents": "unused",
  "updatedFile11Filepath": "unused",
  "updatedFile11Contents": "unused",
  "updatedFile12Filepath": "unused",
  "updatedFile12Contents": "unused",
  "updatedFile13Filepath": "unused",
  "updatedFile13Contents": "unused",
  "updatedFile14Filepath": "unused",
  "updatedFile14Contents": "unused",
  "updatedFile15Filepath": "unused",
  "updatedFile15Contents": "unused",
  "updatedFile16Filepath": "unused",
  "updatedFile16Contents": "unused"
}

You can include up to 16 files using the updatedFileXXName and updatedFileXXContents pairs (where XX is a number from 01 to 16)
Where a file name and contents slot is not used, populate tha name with "unused" and the contents with "unused".
Never truncate the files, when returning a file, always return the entire file content.

Ensure valid JSON.
